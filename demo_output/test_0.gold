0	var0 :
1	var0 :
2	var0 :
3	var0 :
4	add al , var0
5	add al , 2
6	add ax , var0
7	add byte [ var0 ] , 2
8	add byte [ var ] , 30
9	add eax , 3 \n jnz var1
10	add var0 , 48
11	add var1 , var0
12	add var1 , var0
13	add var0 , 1
14	add var0 , 4
15	call var0
16	call var0
17	call decoder
18	call var0
19	call var0
20	var0 :
21	var0 :
22	var0 :
23	var0 :
24	var0 :
25	cmp al , cl \n jne short decode \n jmp shellcode
26	cmp ax , var1 \n jne var0
27	cmp var0 , var1 \n je shellcode
28	cmp var0 , var1 \n je var2 \n jmp var3
29	cmp BYTE [ var0 ] , var1 \n jle var2
30	cmp byte [ var0 ] , 0xD \n jle var1
31	cmp BYTE var2 , [ var1 ] \n jne var0
32	cmp DWORD [ var0 ] , var1 \n je while
33	cycle :
34	var0 : \n mov var1 , byte [ esi ]
35	var0 : \n not byte [ var1 ]
36	var1 : \n add byte [ esi ] , 8
37	var1 : \n sub byte [ esi ] , 7
38	var0 : \n pop var2 \n mov var1 , var2
39	var0 : \n xor byte [ var1 ] , var2
40	dec var0 \n jz var1
41	dec cl \n jns var0
42	dec dl \n jnz var0
43	dec dl \n jz var0
44	dec var0
45	dec var0
46	dec esp
47	var0 :
48	var0 :
49	decode :
50	var0 :
51	decoder :
52	decrypt :
53	div var1
54	var0 :
55	var0 : db var1
56	var0 : db var1
57	encrypt :
58	var0 :
59	execute :
60	var0 : \n call var1
61	var0 : \n cmp byte [ esi ] , var3 \n jl var1 \n sub byte [ esi ] , var3 \n jmp var6
62	var0 : \n inc var1
63	var0 : \n inc var1 \n inc var1
64	var0 : \n jmp short var1
65	var0 : \n not cl \n inc cl
66	var0 : \n not cl \n inc cl
67	var0 : \n not cl \n inc cl
68	var0 : \n pop var1
69	var0 : \n pop var1
70	var0 : \n pop var1
71	var0 : inc var1 \n jmp short var2
72	format :
73	formatting :
74	four :
75	get :
76	global var0
77	inc var0
78	inc var0
79	inc var0
80	inc var0 \n inc var0
81	inc var0 \n inc var0
82	inc var0
83	inc var0 \n inc var0
84	inc var0
85	inc var0
86	inc var0
87	inc var0 \n inc var0 \n inc var0 \n inc var0
88	inc var0
89	inc esi
90	inc esi
91	inc esi \n inc esi
92	inc esi \n jmp var0
93	inc esi \n jmp short var0
94	var0 :
95	jmp data
96	jmp short var0
97	jmp short var0
98	jmp short var0
99	jmp short var0
100	jmp short get
101	jmp short main
102	jmp short output
103	jmp short shellcode
104	jmp short three
105	jmp two
106	jnc var0
107	jz encoded
108	var0 : \n call [ esp ]
109	lea var1 , [ var0 ]
110	lea var1 , [ var0 ]
111	lea var1 , [ var0 ]
112	lea var0 , [ esi+1 ]
113	lea var0 , [ esi+1 ]
114	loop decode
115	loop decode
116	loop decode \n jmp var2
117	loop decode \n jmp var2
118	loop decode \n jmp var2
119	loop decode \n jmp short shellcode
120	loop decrypt
121	loop var2 \n jmp var3
122	var0 :
123	main :
124	mov [ var0 ] , al
125	mov [ var0 ] , al
126	mov [ var0 ] , al
127	mov [ var0 ] , al
128	mov al , byte [ var0 ]
129	mov al , byte [ var0 ]
130	mov al , byte [ var0 ]
131	mov al , cl
132	mov al , dl
133	mov al , var0
134	mov ax , [ var0 ]
135	mov ax , table [ esi * 4 ]
136	mov bh , var0
137	mov bh , var0
138	mov var1 , [ var0 ]
139	mov var1 , var0
140	mov var1 , var0
141	mov var0 , 1
142	mov var0 , 1
143	mov var1 , byte [ var0 ]
144	mov var1 , byte [ var0 ]
145	mov var1 , byte [ var0 ]
146	mov var1 , byte [ var0 ]
147	mov var1 , byte [ var0 ]
148	mov var1 , byte [ var0 ]
149	mov var1 , byte [ var0 ]
150	mov var1 , byte var0
151	mov var0 , dl
152	mov byte [ var0 ] , dl
153	mov byte [ var0 ] , dl
154	mov byte [ var1 ] , var0
155	mov byte [ var1 ] , var0
156	mov byte [ var1 ] , var0
157	mov byte [ var1 ] , var0
158	mov byte [ var0 ] , al
159	mov byte [ var0 ] , al
160	mov byte [ var0 ] , al
161	mov byte [ var1 ] , var0
162	mov byte [ var1 ] , var0
163	mov byte [ var1 ] , var0
164	mov var1 , var0
165	mov cl , 0102
166	mov cl , var0
167	mov cl , al
168	mov cl , byte [ var0 ]
169	mov cl , byte [ var0 ]
170	mov cl , var0 [ 2 ]
171	mov cl , var0
172	mov var1 , var0
173	mov var1 , var0
174	mov dl , var0
175	mov dl , var0
176	mov dl , var0
177	mov dl , var0
178	mov dl , var0
179	mov dl , byte [ var0 ]
180	mov dl , byte var0
181	mov var1 , var0
182	mov var1 , var0
183	mov var0 , esp
184	mov ebx , [ var0 ]
185	mov var1 , var0
186	mov var1 , var0
187	mov var0 , esp
188	mov var0 , esp
189	mov var1 , var0
190	mov var1 , var0
191	mov var1 , var0
192	mov var1 , var0
193	mov var0 , 78
194	mov var0 , esp
195	mov var1 , var0
196	mov word [ var1 ] , 2
197	mul var1
198	var0 :
199	nop
200	not byte [ var1 ]
201	not word ax
202	odd_number :
203	pop cx
204	pop var0
205	pop var0
206	pop var0
207	pop var0
208	pop var0
209	pop var0
210	pop esi
211	pop var0
212	pop var0
213	pop var0
214	pop var0
215	pop var0 \n mov ax , [ var0 ]
216	pop var0 \n mov var1 , [ var0 ]
217	pop var0 \n mov cx , [ var0 ]
218	popad
219	push var0
220	push var0 \n mov var1 , esp
221	retry :
222	rol byte [ var0 ] , 0x1
223	rol var0 , 0x4
224	ror byte [ var0 ] , 0x1
225	ror var0 , 1
226	shell :
227	shellcode :
228	shellcode : db `` var0.var3.var4:0:0 : vl43ck : /tmp : /var7 ''
229	shellcode : db var0
230	var0 equ $ -shellcode
231	var0 :
232	shl var0 , 1
233	shl var0 , 28
234	shl var0 , 8
235	shl var0 , 2
236	shr ax , 1
237	shr ax , cl
238	shr var0 , 4
239	shr dl , 1
240	shr dl , 4
241	shr var0 , var2 \n not byte var0
242	shr var0 , 24
243	shr var0 , 28
244	shr var0 , cl
245	stage :
246	var0 :
247	sub ax , 13
248	sub ax , 1564
249	sub var0 , al
250	sub bl , byte [ var1 ]
251	sub byte [ var0 ] , 3 \n not byte [ var0 ]
252	sub cl , 1 \n jnz decode
253	sub cl , dl
254	sub cx , cx
255	sub dl , al \n jns var0
256	sub var1 , var0
257	sub var1 , var0
258	sub esp , 4
259	sub esp , byte var0
260	test var0 , var0 \n jz socket
261	test var1 , var1 \n js short var0
262	test var0 , var0
263	xchg [ var0 ] , var1
264	xor al , var0
265	xor ax , var0
266	xor ax , var0
267	xor ax , var1 \n jz var0
268	xor var0 , var1 \n jz encoded
269	xor var0 , var1 \n jz formatting
270	xor var0 , var0
271	xor var0 , var0
272	xor byte [ var0 ] , var1
273	xor byte [ var0 ] , cl
274	xor byte [ var0 ] , var1
275	xor cl , var0
276	xor cl , var1 \n jnz var0
277	xor cl , 0XAA \n jz var0
278	xor dl , var1 \n jz var0
279	xor var0 , var0
280	xor var0 , var0 \n mov al , [ esi+1 ]
281	xor var0 , var0 \n mov al , 2
282	xor var0 , var0 \n push var0
283	xor var0 , var0 \n xor var1 , var1
284	xor var0 , var0 \n xor var1 , var1 \n xor var2 , var2
285	xor var0 , var0
286	xor var0 , var0
287	xor var0 , var0
288	xor var0 , var0 \n cmp var2 , var0 \n jne exit
289	xor var0 , var0 \n mov bl , var1
290	xor var0 , var0 \n push var0
291	xor var0 , var0 \n xor var1 , var1
292	xor var0 , bh
293	xor var0 , var0
294	xor var0 , var0 \n cmp var3 , var0 \n jne var2
295	xor var0 , var0 \n mov cl , [ esi+1 ]
296	xor var0 , var0 \n mov cl , var1
297	xor var0 , var0 \n mov cl , 2
298	xor var0 , var0 \n mov cl , 5
299	xor var1 , var1 \n mul var1
300	xor var1 , var1
301	xor var0 , ecx \n mov dl , [ esi+1 ]
302	xor var0 , var0 \n cmp var3 , var0 \n jne var2
303	xor var0 , var0 \n mov dl , 5
304	xor var0 , var0
