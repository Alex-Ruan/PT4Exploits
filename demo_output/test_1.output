0	var0 :
1	mov eax, 20
2	var0 : \n jmp short var1
3	var0 : \n jmp var1
4	var0 : \n jmp var1
5	var0 : \n jmp short var1
6	var0 : \n jmp short var1
7	var0 : \n jmp short var1
8	var0 : \n jmp short var1
9	var0 : \n jmp short var1
10	var0 : \n jmp short var1
11	var0 : \n jmp short stage
12	add al, var0
13	add al, 3
14	add byte [ var1 ], var0
15	add byte [ var1 ], var0
16	add var0, 4 \n jnz decode
17	add var1, var0
18	add var1, var0
19	add var0, 2
20	add var0, 2
21	call var0
22	call decoder
23	call var0
24	call var0
25	var0 : \n call [ esp ]
26	var0 :
27	var0 :
28	var0 : \n call var2
29	var0 : \n call var2
30	var0 : \n call decoder
31	var0 : \n call var2 \n mov var3, [ var2 ]
32	var0 :
33	int 80h
34	var0 : \n call var2
35	var0 : \n call decoder
36	var0 : \n call var2
37	var0 : \n call var2
38	var0 : \n call var2
39	var0 :
40	cmp al, cl \n jne short decode \n jmp shellcode
41	cmp var0, var1 \n je shellcode
42	cmp var1, var2 \n je var0 \n jmp var3
43	cmp byte [ var0 ], var1 \n je shellcode
44	cmp byte [ esi ], var1 \n jne var0
45	cmp dword var2, var3 \n je short var0
46	var0 : \n inc var1
47	cycle :
48	dec al \n jz shellcode
49	sub var0, 1
50	mov eax, 20
51	var0 :
52	decode :
53	decode :
54	var0 :
55	int 80h
56	decode :
57	var0 : \n cmp byte [ esi ], var2 \n jl var1 \n sub byte [ esi ], var2 \n jmp var5
58	var0 : \n pop var0
59	var0 : \n not byte [ var1 ]
60	var0 : \n sub byte [ esi ], 13
61	var0 : \n xor byte [ var1 ], var2
62	var0 : \n call [ esp ]
63	var0 :
64	var0 :
65	var0 :
66	int 80h
67	decoder :
68	decoder :
69	mov eax, 106
70	decoder :
71	var0 : \n pop var1
72	var0 : \n pop var1
73	var0 : \n mov var1, var0
74	var0 : \n call decoder
75	var0 : db var1, 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80
76	var0 : db var1
77	db var0
78	encoded : db var0
79	var0 : db tovar1
80	var0 : db var1
81	var0 : db var1, 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80
82	var0 : db var1
83	var0 : db var1
84	var0 : db var1, 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80
85	var0 :
86	var0 : \n jmp short esp
87	var0 :
88	formatting :
89	var0 :
90	global var0
91	global var0
92	inc var0
93	inc var0
94	inc var0
95	inc var0 \n inc var0
96	inc var0
97	inc var0
98	inc var0
99	inc var0
100	inc var0 \n inc var0 \n inc var0 \n inc var0
101	inc var0
102	inc esi \n inc esi
103	inc esi \n inc esi
104	inc var0
105	inc var0 \n inc var0
106	inc esi \n inc esi
107	inc esi \n jmp short decode
108	var0 :
109	jmp decode
110	jmp short var0
111	mov eax, 106
112	jmp short var0
113	jmp short cycle
114	jmp short decode
115	jmp short decode
116	jmp start
117	var0 : inc var1
118	jmp short var0
119	jmp short var0
120	jmp short main
121	mov eax, 106
122	jmp short switch
123	jz short var0
124	lea edi, [ var0 ]
125	lea var1, [ var0 ]
126	lea var1, [ var0 ]
127	lea var0, [ esi ]
128	lea var1, [ var0 ]
129	lea var1, [ var0 ]
130	lea edi, [ var0 ]
131	loop var0 \n jmp short shellcode
132	loop decode
133	loop decode \n jmp var0
134	loop decode \n jmp short var2
135	loop decode \n jmp short shellcode
136	loop var0 \n jmp shellcode
137	loop decode \n jmp short var0
138	loop decode \n jmp short shellcode
139	loop var2
140	var0 :
141	var0 :
142	mov var0, al
143	mov [ var0 ], al
144	xchg al, var0
145	mov al, byte var0
146	mov al, byte var0
147	mov al, byte var0
148	mov al, cl
149	mov al, dl
150	mov al, dl
151	mov ax, [ var0 ]
152	var0 word var1, 2
153	mov bh, var0
154	mov bh, byte [ var0 ]
155	mov var0, byte [ esi ]
156	mov var1, var0
157	mov var1, var0
158	mov var1, byte [ var0 ]
159	mov var1, byte var0
160	mov var1, byte [ var0 ]
161	mov var1, byte var0
162	mov var1, byte var0
163	mov var1, byte var0
164	mov var1, byte [ var0 ]
165	mov var1, byte [ var0 ]
166	mov var1, byte var0
167	mov byte [ var0 ], var1 \n mov byte [ var0 ], var1 \n mov byte [ var0 ], var1
168	mov var1, var0 \n sub var3, var5
169	mov var0, cl
170	mov var1, [ var0 ]
171	mov var0, dl
172	lea var1, [ var0 ]
173	mov byte [ var1 ], var0 \n not byte [ var1 ]
174	mov byte [ var1 ], var2
175	mov byte [ var1 ], var0
176	mov byte [ var0 ], dl
177	mov byte [ var1 ], var0
178	mov byte [ var0 ], dl
179	mov byte [ var2 ], var0
180	mov byte [ var0 ], cl
181	mov byte [ var0 ], bh
182	mov byte [ var1 ], var0
183	mov byte [ var1 ], var0
184	mov byte [ var1 ], var0
185	mov var1, byte [ var0 ]
186	mov byte [ counter ], 10
187	mov cl, 13
188	mov cl, al
189	mov cl, byte [ var0 ]
190	mov cl, byte [ var0 ]
191	mov cl, dl
192	mov dl, var0
193	mov dl, byte [ esi ]
194	mov dl, [ esi+1 ]
195	mov dl, var0
196	mov dl, var0
197	mov dl, byte var0
198	mov dl, byte var0
199	mov dl, var0
200	mov dl, byte var0
201	push byte var0 \n pop dl
202	mov var1, var0
203	mov var1, var0
204	mov var1, var0
205	mov var0, shellcode
206	mov var0, esp
207	mov var0, ax
208	var0 : \n not dl \n inc dl
209	var0 : inc var1 \n jmp short formatting
210	not byte [ var0 ]
211	var0 :
212	var0 :
213	var0 :
214	pop var0
215	pop var0
216	pop var0
217	pop var0
218	pop var0 \n mov cx, [ var0 ]
219	push encoded shellcode
220	push 0x68732f2f \n push 0x6e69622f \n mov var1, esp
221	var0 :
222	rol shellcode, 1
223	ror cl, var0
224	ror var0, shellcode
225	section.text
226	var0 equ $ -shellcode
227	var0 : \n call [ esp ]
228	shellcode : db var0
229	shellcode : db var0
230	pop var0
231	shellcode : db var0
232	shellcode : db var0
233	shellcode : db var0
234	shellcode : db var0
235	shellcode : db var0
236	shellcode : db var0
237	var0 :
238	shl var0,28
239	shl var0, 28
240	shr ax, 1
241	shr ax, cl \n not word ax
242	shr var0, 4
243	shr dl, 1
244	sar dl, 4
245	shr var0, 24
246	shr var0, 28
247	stage : \n call var0
248	sub ax, 13
249	sub var0, al
250	sub var0, byte [ esi ]
251	sub byte [ var0 ], 8 \n not byte [ var0 ]
252	sub cl, dl
253	sub dl, al \n jns var0
254	sub var1, var0
255	sub bl, var0
256	sub esp, var0
257	var0 :
258	cmp var1, var0 \n jeven var1
259	xchg al, next byte [ esi+1 ]
260	xor al, var0 \n jz short shellcode
261	xor ax, var0
262	xor ax, var0
263	xor ax, var0 \n jz call decoded_shellcode
264	xor bh, byte [ esi ]
265	xor var0, var1 \n jnz var2
266	xor var0, var1 \n jz encoded
267	xor var0, var1 \n jz formatting \n mov cl, byte [ esi ]
268	xor var0, byte [ esi ]
269	xor var0, dl \n jnz short shellcode
270	xor byte [ var0 ], var1
271	xor byte [ var0 ], var1
272	xor byte [ esi ], dl
273	xor byte [ var0 ], dl
274	xor byte [ var0 ], dl
275	xor [ esi+1 ], dl
276	xor var0, byte [ esi ]
277	xor cl, var0 \n jz short var1
278	xor cl, var0 \n jnz var2
279	xor cl, var0 \n jz shift decode
280	xor cl, byte [ esi ]
281	xor dl, var0 \n jz var2
282	xor var0, var0 \n mov bl, var1
283	xor var0, var0 \n mov bl, 22
284	xor ebx, ebx \n mul ebx
285	xor var0, var0 \n xor var1, var1 \n xor var2, var2
286	xor var0, var0 \n mul var0
287	xor var0, var0 \n xor var1, var1 \n xor var2, var2 \n xor var3, var3
288	xor var0, var0
289	xor var0, var0
290	xor var0, var0 \n mov bl, [ esi+1 ]
291	xor ebx, ebx \n mul ebx
292	xor var0, var0
293	xor var0, var0 \n mov al, var1
294	xor counter, counter \n mov bl, var0
295	xor var0, var0 \n mov bl, 23
296	xor var0, var0 \n mov bl, 25
297	xor loop, loop \n mov bl, var0
298	xor ebx, ebx \n mul ebx
299	xor ebx, ebx \n mul ebx
300	xor var1, var1 \n mul var1
301	xor ebx, ebx \n mul ebx
302	xor var0, var0 \n xor var1, var1 \n xor var2, var2 \n xor var3, var3
303	xor var0, var0 \n mov bl, [ esi+1 ]
304	var0 :
