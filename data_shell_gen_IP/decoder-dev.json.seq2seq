[
  {
    "intent": "define the _egg label",
    "rewritten_intent": "define the _egg label",
    "snippet": "_egg:",
    "slot_map": {
      "_egg": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _file label",
    "rewritten_intent": "define the _file label",
    "snippet": "_file:",
    "slot_map": {
      "_file": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _param label",
    "rewritten_intent": "define the _param label",
    "snippet": "_param:",
    "slot_map": {
      "_param": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "_start function",
    "rewritten_intent": "_start function",
    "snippet": "_start:",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "add 0x40 to the al register",
    "rewritten_intent": "add 0x40 to the al register",
    "snippet": "add al, 0x40",
    "slot_map": {
      "0x40": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the value 2 to the contents of the al register",
    "rewritten_intent": "add the value 2 to the contents of the al register",
    "snippet": "add al, 2",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "value",
      "2",
      "contents",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "al",
      ",",
      "2"
    ]
  },
  {
    "intent": "add the contents of bx into ax",
    "rewritten_intent": "add the contents of bx into ax",
    "snippet": "add ax, bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "add",
      "contents",
      "var0",
      "ax"
    ],
    "snippet_tokens": [
      "add",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the byte value 2 to the esi register",
    "rewritten_intent": "add the byte value 2 to the esi register",
    "snippet": "add byte [esi], 2",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "add",
      "byte",
      "value",
      "2",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "2"
    ]
  },
  {
    "intent": "add 30 to the single byte stored at memory address var",
    "rewritten_intent": "add 30 to the single byte stored at memory address var",
    "snippet": "add byte [var], 30",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "30",
      "single",
      "byte",
      "stored",
      "memory",
      "address",
      "var"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "var",
      "]",
      ",",
      "30"
    ]
  },
  {
    "intent": "add 3 to ecx and jump to L3 if the sum is not zero",
    "rewritten_intent": "add 3 to ecx and jump to L3 if the sum is not zero",
    "snippet": "add eax, 3 \\n jnz L3",
    "slot_map": {
      "L3": "var1",
      "ecx": "var0"
    },
    "intent_tokens": [
      "add",
      "3",
      "var0",
      "and",
      "jump",
      "var1",
      "if",
      "sum",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "add",
      "eax",
      ",",
      "3",
      "\\n",
      "jnz",
      "var1"
    ]
  },
  {
    "intent": "add decimal 48 to eax",
    "rewritten_intent": "add decimal 48 to eax",
    "snippet": "add eax, 48",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "decimal",
      "48",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "48"
    ]
  },
  {
    "intent": "add the contents of ebx to the contents of eax",
    "rewritten_intent": "add the contents of ebx to the contents of eax",
    "snippet": "add eax, ebx",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "contents",
      "var0",
      "contents",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x2 to the contents in ebx and save the result in ebx",
    "rewritten_intent": "add 0x2 to the contents in ebx and save the result in ebx",
    "snippet": "add ebx, 0x2",
    "slot_map": {
      "0x2": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the value 1 into the ecx register",
    "rewritten_intent": "add the value 1 into the ecx register",
    "snippet": "add ecx, 1",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "add",
      "value",
      "1",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "add 4 to the contents of the esi register",
    "rewritten_intent": "add 4 to the contents of the esi register",
    "snippet": "add esi, 4",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "add",
      "4",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "4"
    ]
  },
  {
    "intent": "call the _myfunc function",
    "rewritten_intent": "call the _myfunc function",
    "snippet": "call _myfunc",
    "slot_map": {
      "_myfunc": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the cont function",
    "rewritten_intent": "call the cont function",
    "snippet": "call cont",
    "slot_map": {
      "cont": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the function decoder",
    "rewritten_intent": "call the function decoder",
    "snippet": "call decoder",
    "slot_map": {},
    "intent_tokens": [
      "call",
      "function",
      "decoder"
    ],
    "snippet_tokens": [
      "call",
      "decoder"
    ]
  },
  {
    "intent": "call set_argv",
    "rewritten_intent": "call set_argv",
    "snippet": "call set_argv",
    "slot_map": {
      "set_argv": "var0"
    },
    "intent_tokens": [
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call writestring",
    "rewritten_intent": "call writestring",
    "snippet": "call writestring",
    "slot_map": {
      "writestring": "var0"
    },
    "intent_tokens": [
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "define call_decoder function",
    "rewritten_intent": "define call_decoder function",
    "snippet": "call_decoder:",
    "slot_map": {
      "call_decoder": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define call_shellcode label",
    "rewritten_intent": "define call_shellcode label",
    "snippet": "call_shellcode:",
    "slot_map": {
      "call_shellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define call_shellcode function",
    "rewritten_intent": "define call_shellcode function",
    "snippet": "call_shellcode:",
    "slot_map": {
      "call_shellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the call_write label",
    "rewritten_intent": "define the call_write label",
    "snippet": "call_write:",
    "slot_map": {
      "call_write": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the child function",
    "rewritten_intent": "define the child function",
    "snippet": "child:",
    "slot_map": {
      "child": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "if the contents of the al register is not equal to the contents of the cl register then jump short to the decode label else jump to the shellcode label",
    "rewritten_intent": "if the contents of the al register is not equal to the contents of the cl register then jump short to the decode label else jump to the shellcode label",
    "snippet": "cmp al, cl \\n jne short decode \\n jmp shellcode",
    "slot_map": {},
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "not",
      "equal",
      "contents",
      "cl",
      "register",
      "then",
      "jump",
      "short",
      "decode",
      "label",
      "else",
      "jump",
      "shellcode",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "cl",
      "\\n",
      "jne",
      "short",
      "decode",
      "\\n",
      "jmp",
      "shellcode"
    ]
  },
  {
    "intent": "jump to the l3 label if the contents of the ax register is not equal to the contents of the bx register",
    "rewritten_intent": "jump to the l3 label if the contents of the ax register is not equal to the contents of the bx register",
    "snippet": "cmp ax, bx \\n jne l3",
    "slot_map": {
      "l3": "var0",
      "bx": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "ax",
      "register",
      "not",
      "equal",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "ax",
      ",",
      "var1",
      "\\n",
      "jne",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the bl register is equal to the value 0xaa then jump to the shellcode label",
    "rewritten_intent": "if the contents of the bl register is equal to the value 0xaa then jump to the shellcode label",
    "snippet": "cmp bl, 0xaa \\n je shellcode",
    "slot_map": {
      "0xaa": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "value",
      "var1",
      "then",
      "jump",
      "shellcode",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "shellcode"
    ]
  },
  {
    "intent": "if the contents of the bl register is equal to the value 0xbb then jump to the xordecode label else jump to the notdecode label",
    "rewritten_intent": "if the contents of the bl register is equal to the value 0xbb then jump to the xordecode label else jump to the notdecode label",
    "snippet": "cmp bl, 0xbb \\n je xordecode \\n jmp notdecode",
    "slot_map": {
      "0xbb": "var1",
      "bl": "var0",
      "xordecode": "var2",
      "notdecode": "var3"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "value",
      "var1",
      "then",
      "jump",
      "var2",
      "label",
      "else",
      "jump",
      "var3",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "var2",
      "\\n",
      "jmp",
      "var3"
    ]
  },
  {
    "intent": "if the byte starting at the address contained in the esi register is lower than or equal to the byte value 0x7 then jump to the lowbound label",
    "rewritten_intent": "if the byte starting at the address contained in the esi register is lower than or equal to the byte value 0x7 then jump to the lowbound label",
    "snippet": "cmp BYTE [esi], 0x7 \\n jle lowbound",
    "slot_map": {
      "0x7": "var1",
      "esi": "var0",
      "lowbound": "var2"
    },
    "intent_tokens": [
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "lower",
      "or",
      "equal",
      "byte",
      "value",
      "var1",
      "then",
      "jump",
      "var2",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "[",
      "var0",
      "]",
      ",",
      "var1",
      "\\n",
      "jle",
      "var2"
    ]
  },
  {
    "intent": "if the byte starting at the address contained in the esi register is lower than or equal to the byte value 0xD then jump to the wrap_around label",
    "rewritten_intent": "if the byte starting at the address contained in the esi register is lower than or equal to the byte value 0xD then jump to the wrap_around label",
    "snippet": "cmp byte [esi], 0xD \\n jle wrap_around",
    "slot_map": {
      "wrap_around": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "lower",
      "or",
      "equal",
      "byte",
      "value",
      "0xD",
      "then",
      "jump",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "0xD",
      "\\n",
      "jle",
      "var1"
    ]
  },
  {
    "intent": "jump to the label loop_1 if the first byte of the esi register is not equal to the contents of the bl register",
    "rewritten_intent": "jump to the label loop_1 if the first byte of the esi register is not equal to the contents of the bl register",
    "snippet": "cmp BYTE bl, [esi] \\n jne loop_1",
    "slot_map": {
      "loop_1": "var0",
      "esi": "var1",
      "bl": "var2"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "first",
      "byte",
      "var1",
      "register",
      "not",
      "equal",
      "contents",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "var2",
      ",",
      "[",
      "var1",
      "]",
      "\\n",
      "jne",
      "var0"
    ]
  },
  {
    "intent": "if the doubleword starting at the address contained in the edx register is equal to the doubleword value 0x636f7270 then jump to the while label",
    "rewritten_intent": "if the doubleword starting at the address contained in the edx register is equal to the doubleword value 0x636f7270 then jump to the while label",
    "snippet": "cmp DWORD [edx], 0x636f7270 \\n je while",
    "slot_map": {
      "0x636f7270": "var1",
      "edx": "var0"
    },
    "intent_tokens": [
      "if",
      "doubleword",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "equal",
      "doubleword",
      "value",
      "var1",
      "then",
      "jump",
      "while",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "DWORD",
      "[",
      "var0",
      "]",
      ",",
      "var1",
      "\\n",
      "je",
      "while"
    ]
  },
  {
    "intent": "define cycle label",
    "rewritten_intent": "define cycle label",
    "snippet": "cycle:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "cycle",
      "label"
    ],
    "snippet_tokens": [
      "cycle",
      ":"
    ]
  },
  {
    "intent": "in D1 move the current byte of the shellcode in the bl register",
    "rewritten_intent": "in D1 move the current byte of the shellcode in the bl register",
    "snippet": "D1: \\n mov bl, byte [esi]",
    "slot_map": {
      "D1": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "in",
      "var0",
      "move",
      "current",
      "byte",
      "shellcode",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "declare the function D2 and negate the byte in esi",
    "rewritten_intent": "declare the function D2 and negate the byte in esi",
    "snippet": "D2: \\n not byte [esi]",
    "slot_map": {
      "D2": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "declare",
      "function",
      "var0",
      "and",
      "negate",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "byte",
      "[",
      "var1",
      "]"
    ]
  },
  {
    "intent": "declare the ruotine D3 and add the value 8 to the current byte of the shellcode",
    "rewritten_intent": "declare the ruotine D3 and add the value 8 to the current byte of the shellcode",
    "snippet": "D3: \\n add byte [esi], 8",
    "slot_map": {
      "D3": "var1",
      "ruotine": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "var1",
      "and",
      "add",
      "value",
      "8",
      "current",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "var1",
      ":",
      "\\n",
      "add",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "8"
    ]
  },
  {
    "intent": "define function D3 and subtract 7 from the current byte of the shellcode",
    "rewritten_intent": "define function D3 and subtract 7 from the current byte of the shellcode",
    "snippet": "D3: \\n sub byte [esi], 7",
    "slot_map": {
      "D3": "var1",
      "define": "var0"
    },
    "intent_tokens": [
      "var0",
      "function",
      "var1",
      "and",
      "subtract",
      "7",
      "current",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "var1",
      ":",
      "\\n",
      "sub",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "7"
    ]
  },
  {
    "intent": "in D4 store the shellcode in edi and move the pointer into esi",
    "rewritten_intent": "in D4 store the shellcode in edi and move the pointer into esi",
    "snippet": "D4: \\n pop esi \\n mov edi, esi",
    "slot_map": {
      "D4": "var0",
      "edi": "var1",
      "esi": "var2"
    },
    "intent_tokens": [
      "in",
      "var0",
      "store",
      "shellcode",
      "var1",
      "and",
      "move",
      "pointer",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "pop",
      "var2",
      "\\n",
      "mov",
      "var1",
      ",",
      "var2"
    ]
  },
  {
    "intent": "define the function D4 and perform the xor operation between the byte in esi and the 0x5 value",
    "rewritten_intent": "define the function D4 and perform the xor operation between the byte in esi and the 0x5 value",
    "snippet": "D4: \\n xor byte [esi], 0x5",
    "slot_map": {
      "D4": "var0",
      "0x5": "var2",
      "esi": "var1"
    },
    "intent_tokens": [
      "define",
      "function",
      "var0",
      "and",
      "perform",
      "xor",
      "operation",
      "byte",
      "var1",
      "and",
      "var2",
      "value"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "xor",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var2"
    ]
  },
  {
    "intent": "decrement the bl register and jump to L1 if the result is zero",
    "rewritten_intent": "decrement the bl register and jump to L1 if the result is zero",
    "snippet": "dec bl \\n jz L1",
    "slot_map": {
      "L1": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var1",
      "if",
      "result",
      "zero"
    ],
    "snippet_tokens": [
      "dec",
      "var0",
      "\\n",
      "jz",
      "var1"
    ]
  },
  {
    "intent": "decrement the contents of the cl register and jump to the loop_dup label if the result is not negative",
    "rewritten_intent": "decrement the contents of the cl register and jump to the loop_dup label if the result is not negative",
    "snippet": "dec cl \\n jns loop_dup",
    "slot_map": {
      "loop_dup": "var0"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "cl",
      "register",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "dec",
      "cl",
      "\\n",
      "jns",
      "var0"
    ]
  },
  {
    "intent": "decrement dl and jump to L3 if the result is not zero",
    "rewritten_intent": "decrement dl and jump to L3 if the result is not zero",
    "snippet": "dec dl \\n jnz L3",
    "slot_map": {
      "L3": "var0"
    },
    "intent_tokens": [
      "decrement",
      "dl",
      "and",
      "jump",
      "var0",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "dec",
      "dl",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "decrement dl and jump to L3 if the result is zero",
    "rewritten_intent": "decrement dl and jump to L3 if the result is zero",
    "snippet": "dec dl \\n jz L3",
    "slot_map": {
      "L3": "var0"
    },
    "intent_tokens": [
      "decrement",
      "dl",
      "and",
      "jump",
      "var0",
      "if",
      "result",
      "zero"
    ],
    "snippet_tokens": [
      "dec",
      "dl",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "decrement ebx",
    "rewritten_intent": "decrement ebx",
    "snippet": "dec ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decrease ecx by 1",
    "rewritten_intent": "decrease ecx by 1",
    "snippet": "dec ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrease",
      "var0",
      "1"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decrement esp",
    "rewritten_intent": "decrement esp",
    "snippet": "dec esp",
    "slot_map": {},
    "intent_tokens": [
      "decrement",
      "esp"
    ],
    "snippet_tokens": [
      "dec",
      "esp"
    ]
  },
  {
    "intent": "define decode_pr label",
    "rewritten_intent": "define decode_pr label",
    "snippet": "decode_pr:",
    "slot_map": {
      "decode_pr": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define decode function",
    "rewritten_intent": "define decode function",
    "snippet": "decode:",
    "slot_map": {
      "decode": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the decode label",
    "rewritten_intent": "declare the decode label",
    "snippet": "decode:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "decode",
      "label"
    ],
    "snippet_tokens": [
      "decode",
      ":"
    ]
  },
  {
    "intent": "define decoded_shellcode function",
    "rewritten_intent": "define decoded_shellcode function",
    "snippet": "decoded_shellcode:",
    "slot_map": {
      "decoded_shellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define decoder label",
    "rewritten_intent": "define decoder label",
    "snippet": "decoder:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "decoder",
      "label"
    ],
    "snippet_tokens": [
      "decoder",
      ":"
    ]
  },
  {
    "intent": "declare the decrypt label",
    "rewritten_intent": "declare the decrypt label",
    "snippet": "decrypt:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "decrypt",
      "label"
    ],
    "snippet_tokens": [
      "decrypt",
      ":"
    ]
  },
  {
    "intent": "divide eax by ecx",
    "rewritten_intent": "divide eax by ecx",
    "snippet": "div ecx",
    "slot_map": {
      "eax": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "div",
      "var1"
    ]
  },
  {
    "intent": "declare the enc label",
    "rewritten_intent": "declare the enc label",
    "snippet": "enc:",
    "slot_map": {
      "enc": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the array of bytes encodedshellcode and initialize it to 0x32,0x51,0x30,0x74,0x69,0x63,0x6f,0xe4,0x8a,0x54,0xe2,0x0c,0x81,0xc1,0x69,0x30,0x69,0x30,0x6a,0x8a,0x51,0xe3,0x8a,0xb1,0xce",
    "rewritten_intent": "define the array of bytes encodedshellcode and initialize it to 0x32,0x51,0x30,0x74,0x69,0x63,0x6f,0xe4,0x8a,0x54,0xe2,0x0c,0x81,0xc1,0x69,0x30,0x69,0x30,0x6a,0x8a,0x51,0xe3,0x8a,0xb1,0xce",
    "snippet": "encodedshellcode: db 0x32,0x51,0x30,0x74,0x69,0x63,0x6f,0xe4,0x8a,0x54,0xe2,0x0c,0x81,0xc1,0x69,0x30,0x69,0x30,0x6a,0x8a,0x51,0xe3,0x8a,0xb1,0xce",
    "slot_map": {
      "0x32,0x51,0x30,0x74,0x69,0x63,0x6f,0xe4,0x8a,0x54,0xe2,0x0c,0x81,0xc1,0x69,0x30,0x69,0x30,0x6a,0x8a,0x51,0xe3,0x8a,0xb1,0xce": "var1",
      "encodedshellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "array",
      "bytes",
      "var0",
      "and",
      "initialize",
      "it",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "define the array of bytes encodedshellcode and initialize it to 0x4e,0xc1,0x51,0x2f,0x58,0x3c,0xdb,0xac,0xef,0x82,0xef,0x1c,0x2a,0xd9,0xdb,0x90,0xdb,0x6b,0xef,0x61,0x3b,0x1c,0xcb,0x24,0xfb,0xd6,0xc5,0x50,0x23,0xfa,0x58,0x9c,0xc5,0xb1,0x33,0x97,0x28,0x31,0xc5,0xaa,0x43,0xf9,0x56,0xf4,0xad,0xc2,0x02,0x16,0x55,0xe3",
    "rewritten_intent": "define the array of bytes encodedshellcode and initialize it to 0x4e,0xc1,0x51,0x2f,0x58,0x3c,0xdb,0xac,0xef,0x82,0xef,0x1c,0x2a,0xd9,0xdb,0x90,0xdb,0x6b,0xef,0x61,0x3b,0x1c,0xcb,0x24,0xfb,0xd6,0xc5,0x50,0x23,0xfa,0x58,0x9c,0xc5,0xb1,0x33,0x97,0x28,0x31,0xc5,0xaa,0x43,0xf9,0x56,0xf4,0xad,0xc2,0x02,0x16,0x55,0xe3",
    "snippet": "encodedshellcode: db 0x4e,0xc1,0x51,0x2f,0x58,0x3c,0xdb,0xac,0xef,0x82,0xef,0x1c,0x2a,0xd9,0xdb,0x90,0xdb,0x6b,0xef,0x61,0x3b,0x1c,0xcb,0x24,0xfb,0xd6,0xc5,0x50,0x23,0xfa,0x58,0x9c,0xc5,0xb1,0x33,0x97,0x28,0x31,0xc5,0xaa,0x43,0xf9,0x56,0xf4,0xad,0xc2,0x02,0x16,0x55,0xe3",
    "slot_map": {
      "0x4e,0xc1,0x51,0x2f,0x58,0x3c,0xdb,0xac,0xef,0x82,0xef,0x1c,0x2a,0xd9,0xdb,0x90,0xdb,0x6b,0xef,0x61,0x3b,0x1c,0xcb,0x24,0xfb,0xd6,0xc5,0x50,0x23,0xfa,0x58,0x9c,0xc5,0xb1,0x33,0x97,0x28,0x31,0xc5,0xaa,0x43,0xf9,0x56,0xf4,0xad,0xc2,0x02,0x16,0x55,0xe3": "var1",
      "encodedshellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "array",
      "bytes",
      "var0",
      "and",
      "initialize",
      "it",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "declare the encrypt label",
    "rewritten_intent": "declare the encrypt label",
    "snippet": "encrypt:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "encrypt",
      "label"
    ],
    "snippet_tokens": [
      "encrypt",
      ":"
    ]
  },
  {
    "intent": "define execfile function",
    "rewritten_intent": "define execfile function",
    "snippet": "execfile:",
    "slot_map": {
      "execfile": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the execute label",
    "rewritten_intent": "declare the execute label",
    "snippet": "execute:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "execute",
      "label"
    ],
    "snippet_tokens": [
      "execute",
      ":"
    ]
  },
  {
    "intent": "define F1 and call the function function_1",
    "rewritten_intent": "define F1 and call the function function_1",
    "snippet": "F1: \\n call function_1",
    "slot_map": {
      "F1": "var0",
      "function_1": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "and",
      "call",
      "function",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "var1"
    ]
  },
  {
    "intent": "in the function F1 jump to label L1 if the current byte of the shellcode is lower than 0x1 else subtract 0x1 from the byte of the shellcode and jump to L2",
    "rewritten_intent": "in the function F1 jump to label L1 if the current byte of the shellcode is lower than 0x1 else subtract 0x1 from the byte of the shellcode and jump to L2",
    "snippet": "F1: \\n cmp byte [esi], 0x1 \\n jl L1 \\n sub byte [esi], 0x1 \\n jmp L2",
    "slot_map": {
      "F1": "var0",
      "L1": "var1",
      "L2": "var6",
      "0x1": "var3"
    },
    "intent_tokens": [
      "in",
      "function",
      "var0",
      "jump",
      "label",
      "var1",
      "if",
      "current",
      "byte",
      "shellcode",
      "lower",
      "var3",
      "else",
      "subtract",
      "var3",
      "byte",
      "shellcode",
      "and",
      "jump",
      "var6"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "cmp",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "var3",
      "\\n",
      "jl",
      "var1",
      "\\n",
      "sub",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "var3",
      "\\n",
      "jmp",
      "var6"
    ]
  },
  {
    "intent": "in the function F1 point to the next byte in esi",
    "rewritten_intent": "in the function F1 point to the next byte in esi",
    "snippet": "F1: \\n inc esi",
    "slot_map": {
      "F1": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "in",
      "function",
      "var0",
      "point",
      "next",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "in the function F1 point to the next word in esi",
    "rewritten_intent": "in the function F1 point to the next word in esi",
    "snippet": "F1: \\n inc esi \\n inc esi",
    "slot_map": {
      "F1": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "in",
      "function",
      "var0",
      "point",
      "next",
      "word",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "inc",
      "var1",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "define F1 function and jump short to L1",
    "rewritten_intent": "define F1 function and jump short to L1",
    "snippet": "F1: \\n jmp short L1",
    "slot_map": {
      "L1": "var1",
      "F1": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function",
      "and",
      "jump",
      "short",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "var1"
    ]
  },
  {
    "intent": "in the function F1 negate cl and increment cl to the next byte",
    "rewritten_intent": "in the function F1 negate cl and increment cl to the next byte",
    "snippet": "F1: \\n not cl \\n inc cl",
    "slot_map": {
      "F1": "var0"
    },
    "intent_tokens": [
      "in",
      "function",
      "var0",
      "negate",
      "cl",
      "and",
      "increment",
      "cl",
      "next",
      "byte"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "cl",
      "\\n",
      "inc",
      "cl"
    ]
  },
  {
    "intent": "define F1, negate cl and increment cl to the next byte",
    "rewritten_intent": "define F1, negate cl and increment cl to the next byte",
    "snippet": "F1: \\n not cl \\n inc cl",
    "slot_map": {
      "F1": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "negate",
      "cl",
      "and",
      "increment",
      "cl",
      "next",
      "byte"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "cl",
      "\\n",
      "inc",
      "cl"
    ]
  },
  {
    "intent": "define F1, negate cl and point to the next byte in the cl register",
    "rewritten_intent": "define F1, negate cl and point to the next byte in the cl register",
    "snippet": "F1: \\n not cl \\n inc cl",
    "slot_map": {
      "F1": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "negate",
      "cl",
      "and",
      "point",
      "next",
      "byte",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "cl",
      "\\n",
      "inc",
      "cl"
    ]
  },
  {
    "intent": "define the function F1 and store the encoded shellcode pointer in the esi register",
    "rewritten_intent": "define the function F1 and store the encoded shellcode pointer in the esi register",
    "snippet": "F1: \\n pop esi",
    "slot_map": {
      "F1": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "define",
      "function",
      "var0",
      "and",
      "store",
      "encoded",
      "shellcode",
      "pointer",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "declare the function F1 and save in esi the pointer to the shellcode",
    "rewritten_intent": "declare the function F1 and save in esi the pointer to the shellcode",
    "snippet": "F1: \\n pop esi",
    "slot_map": {
      "F1": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "declare",
      "function",
      "var0",
      "and",
      "save",
      "var1",
      "pointer",
      "shellcode"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "declare the function F1 and point the shellcode in esi",
    "rewritten_intent": "declare the function F1 and point the shellcode in esi",
    "snippet": "F1: \\n pop esi",
    "slot_map": {
      "F1": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "declare",
      "function",
      "var0",
      "and",
      "point",
      "shellcode",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "in the function F1 point to the next byte of the edi and jump short to L1",
    "rewritten_intent": "in the function F1 point to the next byte of the edi and jump short to L1",
    "snippet": "F1: inc edi \\n jmp short L1",
    "slot_map": {
      "F1": "var0",
      "L1": "var2",
      "edi": "var1"
    },
    "intent_tokens": [
      "in",
      "function",
      "var0",
      "point",
      "next",
      "byte",
      "var1",
      "and",
      "jump",
      "short",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "inc",
      "var1",
      "\\n",
      "jmp",
      "short",
      "var2"
    ]
  },
  {
    "intent": "define format label",
    "rewritten_intent": "define format label",
    "snippet": "format:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "format",
      "label"
    ],
    "snippet_tokens": [
      "format",
      ":"
    ]
  },
  {
    "intent": "define formatting label",
    "rewritten_intent": "define formatting label",
    "snippet": "formatting:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "formatting",
      "label"
    ],
    "snippet_tokens": [
      "formatting",
      ":"
    ]
  },
  {
    "intent": "declare the four label",
    "rewritten_intent": "declare the four label",
    "snippet": "four:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "four",
      "label"
    ],
    "snippet_tokens": [
      "four",
      ":"
    ]
  },
  {
    "intent": "declare the get label",
    "rewritten_intent": "declare the get label",
    "snippet": "get:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "get",
      "label"
    ],
    "snippet_tokens": [
      "get",
      ":"
    ]
  },
  {
    "intent": "declare global _start",
    "rewritten_intent": "declare global _start",
    "snippet": "global _start",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "declare",
      "global",
      "var0"
    ],
    "snippet_tokens": [
      "global",
      "var0"
    ]
  },
  {
    "intent": "increment the contents of the dx register",
    "rewritten_intent": "increment the contents of the dx register",
    "snippet": "inc dx",
    "slot_map": {
      "dx": "var0"
    },
    "intent_tokens": [
      "increment",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment the address in eax by one byte",
    "rewritten_intent": "increment the address in eax by one byte",
    "snippet": "inc eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "increment",
      "address",
      "var0",
      "one",
      "byte"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment eax",
    "rewritten_intent": "increment eax",
    "snippet": "inc eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "increment",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next word in the eax register",
    "rewritten_intent": "point to the next word in the eax register",
    "snippet": "inc eax \\n inc eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "word",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "move to the next word in eax",
    "rewritten_intent": "move to the next word in eax",
    "snippet": "inc eax \\n inc eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "next",
      "word",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "next instruction in the ecx register",
    "rewritten_intent": "next instruction in the ecx register",
    "snippet": "inc ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "next",
      "instruction",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next word in the ecx",
    "rewritten_intent": "point to the next word in the ecx",
    "snippet": "inc ecx \\n inc ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "word",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment the contents of the edi register",
    "rewritten_intent": "increment the contents of the edi register",
    "snippet": "inc edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "increment",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment edx",
    "rewritten_intent": "increment edx",
    "snippet": "inc edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "increment",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next byte in the edx register",
    "rewritten_intent": "point to the next byte in the edx register",
    "snippet": "inc edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "move to the next double word in the edx register",
    "rewritten_intent": "move to the next double word in the edx register",
    "snippet": "inc edx \\n inc edx \\n inc edx \\n inc edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "next",
      "double",
      "word",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment esi",
    "rewritten_intent": "increment esi",
    "snippet": "inc esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "increment",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next byte of the encoded shellcode",
    "rewritten_intent": "point to the next byte of the encoded shellcode",
    "snippet": "inc esi",
    "slot_map": {},
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "encoded",
      "shellcode"
    ],
    "snippet_tokens": [
      "inc",
      "esi"
    ]
  },
  {
    "intent": "increment to the next byte of the shellcode",
    "rewritten_intent": "increment to the next byte of the shellcode",
    "snippet": "inc esi",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "next",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "inc",
      "esi"
    ]
  },
  {
    "intent": "point to the next word of the shellcode",
    "rewritten_intent": "point to the next word of the shellcode",
    "snippet": "inc esi \\n inc esi",
    "slot_map": {},
    "intent_tokens": [
      "point",
      "next",
      "word",
      "shellcode"
    ],
    "snippet_tokens": [
      "inc",
      "esi",
      "\\n",
      "inc",
      "esi"
    ]
  },
  {
    "intent": "move to the next byte in the shellcode and jump to L2",
    "rewritten_intent": "move to the next byte in the shellcode and jump to L2",
    "snippet": "inc esi \\n jmp L2",
    "slot_map": {
      "L2": "var0"
    },
    "intent_tokens": [
      "move",
      "next",
      "byte",
      "shellcode",
      "and",
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "esi",
      "\\n",
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "point to the next byte of the shellcode and jump short to L1",
    "rewritten_intent": "point to the next byte of the shellcode and jump short to L1",
    "snippet": "inc esi \\n jmp short L1",
    "slot_map": {
      "L1": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "shellcode",
      "and",
      "jump",
      "short",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "esi",
      "\\n",
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "declare inc_dec function",
    "rewritten_intent": "declare inc_dec function",
    "snippet": "inc_dec:",
    "slot_map": {
      "inc_dec": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "jump to the data label",
    "rewritten_intent": "jump to the data label",
    "snippet": "jmp data",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "data",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "data"
    ]
  },
  {
    "intent": "jump short to the call_decoder label",
    "rewritten_intent": "jump short to the call_decoder label",
    "snippet": "jmp short call_decoder",
    "slot_map": {
      "call_decoder": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the function call_shellcode",
    "rewritten_intent": "jump short to the function call_shellcode",
    "snippet": "jmp short call_shellcode",
    "slot_map": {
      "call_shellcode": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "function",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the call_write label",
    "rewritten_intent": "jump short to the call_write label",
    "snippet": "jmp short call_write",
    "slot_map": {
      "call_write": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the enc label",
    "rewritten_intent": "jump short to the enc label",
    "snippet": "jmp short enc",
    "slot_map": {
      "enc": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the get label",
    "rewritten_intent": "jump short to the get label",
    "snippet": "jmp short get",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "get",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "get"
    ]
  },
  {
    "intent": "jump short to the main label",
    "rewritten_intent": "jump short to the main label",
    "snippet": "jmp short main",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "main",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "main"
    ]
  },
  {
    "intent": "jump short to the output label",
    "rewritten_intent": "jump short to the output label",
    "snippet": "jmp short output",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "output",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "output"
    ]
  },
  {
    "intent": "jump short to the shellcode label",
    "rewritten_intent": "jump short to the shellcode label",
    "snippet": "jmp short shellcode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "shellcode",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "shellcode"
    ]
  },
  {
    "intent": "jump short to the three label",
    "rewritten_intent": "jump short to the three label",
    "snippet": "jmp short three",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "three",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "three"
    ]
  },
  {
    "intent": "jump to two",
    "rewritten_intent": "jump to two",
    "snippet": "jmp two",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "two"
    ],
    "snippet_tokens": [
      "jmp",
      "two"
    ]
  },
  {
    "intent": "jump to 0x86 if the carry flag is zero",
    "rewritten_intent": "jump to 0x86 if the carry flag is zero",
    "snippet": "jnc 0x86",
    "slot_map": {
      "0x86": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "carry",
      "flag",
      "zero"
    ],
    "snippet_tokens": [
      "jnc",
      "var0"
    ]
  },
  {
    "intent": "if zero jump to the encoded label",
    "rewritten_intent": "if zero jump to the encoded label",
    "snippet": "jz encoded",
    "slot_map": {},
    "intent_tokens": [
      "if",
      "zero",
      "jump",
      "encoded",
      "label"
    ],
    "snippet_tokens": [
      "jz",
      "encoded"
    ]
  },
  {
    "intent": "declare L4 and jump to the shellcode",
    "rewritten_intent": "declare L4 and jump to the shellcode",
    "snippet": "L4: \\n call [esp]",
    "slot_map": {
      "L4": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "and",
      "jump",
      "shellcode"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "place the value ebx+4*esi in edi",
    "rewritten_intent": "place the value ebx+4*esi in edi",
    "snippet": "lea edi, [ebx+4*esi]",
    "slot_map": {
      "ebx+4*esi": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "place",
      "value",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi + 13] into the edi register",
    "rewritten_intent": "load the effective address of the result of the operation [esi + 13] into the edi register",
    "snippet": "lea edi, [esi + 13]",
    "slot_map": {
      "esi + 13": "var1",
      "[": "var0",
      "edi": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address [esi] into edi",
    "rewritten_intent": "load the effective address [esi] into edi",
    "snippet": "lea edi, [esi]",
    "slot_map": {
      "esi": "var1",
      "[": "var0",
      "]": "var2",
      "edi": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var3"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "point edi to the next byte of the shellcode",
    "rewritten_intent": "point edi to the next byte of the shellcode",
    "snippet": "lea edi, [esi+1]",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "next",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address [esi+4] into esi",
    "rewritten_intent": "load the effective address [esi+4] into esi",
    "snippet": "lea esi, [esi+4]",
    "slot_map": {
      "esi+4": "var1",
      "[": "var0",
      "]": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "esi"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "decrement ecx and jumps to the decode label unless decrementing ecx caused its value to become zero",
    "rewritten_intent": "decrement ecx and jumps to the decode label unless decrementing ecx caused its value to become zero",
    "snippet": "loop decode",
    "slot_map": {
      "ecx": "var0",
      "unless": "var2",
      "decrementing": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "and",
      "jumps",
      "decode",
      "label",
      "var2",
      "var3",
      "var0",
      "caused",
      "its",
      "value",
      "become",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "decode"
    ]
  },
  {
    "intent": "decrement the count register and jump to decode if not equal zero",
    "rewritten_intent": "decrement the count register and jump to decode if not equal zero",
    "snippet": "loop decode",
    "slot_map": {},
    "intent_tokens": [
      "decrement",
      "count",
      "register",
      "and",
      "jump",
      "decode",
      "if",
      "not",
      "equal",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "decode"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump to the edx register",
    "rewritten_intent": "decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump to the edx register",
    "snippet": "loop decode \\n jmp edx",
    "slot_map": {
      "ecx": "var0",
      "edx": "var2"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "decode",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "jump",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "decode",
      "\\n",
      "jmp",
      "var2"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump to the EncodedShellcode label",
    "rewritten_intent": "decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump to the EncodedShellcode label",
    "snippet": "loop decode \\n jmp EncodedShellcode",
    "slot_map": {
      "EncodedShellcode": "var2",
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "decode",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "jump",
      "var2",
      "label"
    ],
    "snippet_tokens": [
      "loop",
      "decode",
      "\\n",
      "jmp",
      "var2"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump to the Shellcode label",
    "rewritten_intent": "decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump to the Shellcode label",
    "snippet": "loop decode \\n jmp Shellcode",
    "slot_map": {
      "Shellcode": "var2",
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "decode",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "jump",
      "var2",
      "label"
    ],
    "snippet_tokens": [
      "loop",
      "decode",
      "\\n",
      "jmp",
      "var2"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump short to the shellcode label",
    "rewritten_intent": "decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump short to the shellcode label",
    "snippet": "loop decode \\n jmp short shellcode",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "decode",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "jump",
      "short",
      "shellcode",
      "label"
    ],
    "snippet_tokens": [
      "loop",
      "decode",
      "\\n",
      "jmp",
      "short",
      "shellcode"
    ]
  },
  {
    "intent": "decrement ecx and jumps to the decrypt label unless decrementing ecx caused its value to become zero",
    "rewritten_intent": "decrement ecx and jumps to the decrypt label unless decrementing ecx caused its value to become zero",
    "snippet": "loop decrypt",
    "slot_map": {
      "ecx": "var0",
      "unless": "var2",
      "decrementing": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "and",
      "jumps",
      "decrypt",
      "label",
      "var2",
      "var3",
      "var0",
      "caused",
      "its",
      "value",
      "become",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "decrypt"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the eggLoop label if the contents of the ecx register is not zero else jump to the edi register",
    "rewritten_intent": "decrement the ecx register and jump to the eggLoop label if the contents of the ecx register is not zero else jump to the edi register",
    "snippet": "loop eggLoop \\n jmp edi",
    "slot_map": {
      "eggLoop": "var2",
      "ecx": "var0",
      "edi": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "jump",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "jmp",
      "var3"
    ]
  },
  {
    "intent": "declare the main_inc label",
    "rewritten_intent": "declare the main_inc label",
    "snippet": "main_inc:",
    "slot_map": {
      "main_inc": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the main label",
    "rewritten_intent": "declare the main label",
    "snippet": "main:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "main",
      "label"
    ],
    "snippet_tokens": [
      "main",
      ":"
    ]
  },
  {
    "intent": "move the contents of the al register into the edi register",
    "rewritten_intent": "move the contents of the al register into the edi register",
    "snippet": "mov [edi], al",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "al",
      "register",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move the contents of the al register into the esi register",
    "rewritten_intent": "move the contents of the al register into the esi register",
    "snippet": "mov [esi], al",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "al",
      "register",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move al into the address [esi+13]",
    "rewritten_intent": "move al into the address [esi+13]",
    "snippet": "mov [esi+13], al",
    "slot_map": {
      "esi+13": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move the byte at the address [esi] into al",
    "rewritten_intent": "move the byte at the address [esi] into al",
    "snippet": "mov al, byte [esi]",
    "slot_map": {
      "esi": "var1",
      "[": "var0",
      "]": "var2"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "[",
      "var1",
      "]",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move the byte in esi into the al register",
    "rewritten_intent": "move the byte in esi into the al register",
    "snippet": "mov al, byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the memory location specified by the operation [esi+1+ebp] into al",
    "rewritten_intent": "move the byte at the memory location specified by the operation [esi+1+ebp] into al",
    "snippet": "mov al, byte [esi+1+ebp]",
    "slot_map": {
      "esi+1+ebp": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var1",
      "]",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move a byte from the address esi+ecx into al",
    "rewritten_intent": "move a byte from the address esi+ecx into al",
    "snippet": "mov al, byte [esi+ecx]",
    "slot_map": {
      "esi+ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move cl into al",
    "rewritten_intent": "move cl into al",
    "snippet": "mov al, cl",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "cl",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "cl"
    ]
  },
  {
    "intent": "move dl into al",
    "rewritten_intent": "move dl into al",
    "snippet": "mov al, dl",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "dl",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "dl"
    ]
  },
  {
    "intent": "move exit_call into al",
    "rewritten_intent": "move exit_call into al",
    "snippet": "mov al, exit_call",
    "slot_map": {
      "exit_call": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents at the address pointed by esi into the ax register",
    "rewritten_intent": "move the contents at the address pointed by esi into the ax register",
    "snippet": "mov ax, [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "address",
      "pointed",
      "var0",
      "ax",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the memory offset table+esi*4 into ax",
    "rewritten_intent": "move the memory offset table+esi*4 into ax",
    "snippet": "mov ax, table[esi*4]",
    "slot_map": {
      "table+esi*4": "var0"
    },
    "intent_tokens": [
      "move",
      "memory",
      "offset",
      "var0",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "table",
      "[",
      "esi",
      "*",
      "4",
      "]"
    ]
  },
  {
    "intent": "move 0x12 into bh",
    "rewritten_intent": "move 0x12 into bh",
    "snippet": "mov bh, 0x12",
    "slot_map": {
      "0x12": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "bh"
    ],
    "snippet_tokens": [
      "mov",
      "bh",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xe2 into bh",
    "rewritten_intent": "move 0xe2 into bh",
    "snippet": "mov bh, 0xe2",
    "slot_map": {
      "0xe2": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "bh"
    ],
    "snippet_tokens": [
      "mov",
      "bh",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of memory address esi+ecx into bl",
    "rewritten_intent": "move the contents of memory address esi+ecx into bl",
    "snippet": "mov bl, [esi+ecx]",
    "slot_map": {
      "esi+ecx": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move 0bh into bl",
    "rewritten_intent": "move 0bh into bl",
    "snippet": "mov bl, 0bh",
    "slot_map": {
      "0bh": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xff into bl",
    "rewritten_intent": "move 0xff into bl",
    "snippet": "mov bl, 0xff",
    "slot_map": {
      "0xff": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 1 into bl",
    "rewritten_intent": "move 1 into bl",
    "snippet": "mov bl, 1",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "1",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "move the byte at the address [eax] into bl",
    "rewritten_intent": "move the byte at the address [eax] into bl",
    "snippet": "mov bl, byte [eax]",
    "slot_map": {
      "eax": "var1",
      "[": "var0",
      "bl": "var2"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "move the byte in edi into bl",
    "rewritten_intent": "move the byte in edi into bl",
    "snippet": "mov bl, byte [edi]",
    "slot_map": {
      "edi": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address [edi] into bl",
    "rewritten_intent": "move the byte at the address [edi] into bl",
    "snippet": "mov bl, byte [edi]",
    "slot_map": {
      "edi": "var1",
      "[": "var0",
      "bl": "var2"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte starting at the address [esi + eax + 1] into the bl register",
    "rewritten_intent": "move the byte starting at the address [esi + eax + 1] into the bl register",
    "snippet": "mov bl, byte [esi + eax + 1]",
    "slot_map": {
      "esi + eax + 1": "var1",
      "[": "var0",
      "bl": "var2"
    },
    "intent_tokens": [
      "move",
      "byte",
      "starting",
      "address",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte in esi into bl",
    "rewritten_intent": "move the byte in esi into bl",
    "snippet": "mov bl, byte [esi]",
    "slot_map": {
      "esi": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address [esi] into bl",
    "rewritten_intent": "move the byte at the address [esi] into bl",
    "snippet": "mov bl, byte [esi]",
    "slot_map": {
      "esi": "var1",
      "[": "var0",
      "]": "var2",
      "bl": "var3"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "[",
      "var1",
      "]",
      "var3"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address [esi+ecx+1] into bl",
    "rewritten_intent": "move the byte at the address [esi+ecx+1] into bl",
    "snippet": "mov bl, byte [esi+ecx+1]",
    "slot_map": {
      "esi+ecx+1": "var1",
      "[": "var0",
      "]": "var2",
      "bl": "var3"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "[",
      "var1",
      "]",
      "var3"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte in esi+ecx+1 into bl",
    "rewritten_intent": "move the byte in esi+ecx+1 into bl",
    "snippet": "mov bl, byte [esi+ecx+1]",
    "slot_map": {
      "esi+ecx+1": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte 0eh into bl",
    "rewritten_intent": "move the byte 0eh into bl",
    "snippet": "mov bl, byte 0eh",
    "slot_map": {
      "0eh": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move dl into bl",
    "rewritten_intent": "move dl into bl",
    "snippet": "mov bl, dl",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "dl",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "dl"
    ]
  },
  {
    "intent": "move dl into the byte in eax",
    "rewritten_intent": "move dl into the byte in eax",
    "snippet": "mov byte [eax], dl",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "dl",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "dl"
    ]
  },
  {
    "intent": "move al into the byte at address [ebx + 35]",
    "rewritten_intent": "move al into the byte at address [ebx + 35]",
    "snippet": "mov byte [ebx + 35], al",
    "slot_map": {
      "ebx + 35": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "byte",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "dl"
    ]
  },
  {
    "intent": "move the the contents of the bl register into the byte starting at the address in edi",
    "rewritten_intent": "move the the contents of the bl register into the byte starting at the address in edi",
    "snippet": "mov byte [edi], bl",
    "slot_map": {
      "bl": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "the",
      "contents",
      "var0",
      "register",
      "byte",
      "starting",
      "address",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move bl into the byte at address [edx + eax]",
    "rewritten_intent": "move bl into the byte at address [edx + eax]",
    "snippet": "mov byte [edx + eax], bl",
    "slot_map": {
      "edx + eax": "var2",
      "bl": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move bl into byte edx+eax",
    "rewritten_intent": "move bl into byte edx+eax",
    "snippet": "mov byte [edx+eax], bl",
    "slot_map": {
      "edx+eax": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "edx+eax"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of dl into the byte at the memory location specified by the operation [esi+1]",
    "rewritten_intent": "move the contents of dl into the byte at the memory location specified by the operation [esi+1]",
    "snippet": "mov byte [esi + 1], dl",
    "slot_map": {
      "esi+1": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "dl",
      "byte",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move al into the byte in esi",
    "rewritten_intent": "move al into the byte in esi",
    "snippet": "mov byte [esi], al",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move al into the byte at address [esi+10]",
    "rewritten_intent": "move al into the byte at address [esi+10]",
    "snippet": "mov byte [esi+10], al",
    "slot_map": {
      "esi+10": "var1",
      "[": "var0",
      "]": "var2"
    },
    "intent_tokens": [
      "move",
      "al",
      "byte",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move bl into the byte at address [esi+ecx]",
    "rewritten_intent": "move bl into the byte at address [esi+ecx]",
    "snippet": "mov byte [esi+ecx], bl",
    "slot_map": {
      "esi+ecx": "var2",
      "bl": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move bl into the single byte at the address stored in esi+ecx",
    "rewritten_intent": "move bl into the single byte at the address stored in esi+ecx",
    "snippet": "mov byte [esi+ecx], bl",
    "slot_map": {
      "esi+ecx": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "single",
      "byte",
      "address",
      "stored",
      "esi+ecx"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x0a into the byte at address [esp]",
    "rewritten_intent": "move 0x0a into the byte at address [esp]",
    "snippet": "mov byte [esp], 0x0a",
    "slot_map": {
      "esp": "var3",
      "0x0a": "var0",
      "[": "var2",
      "]": "var4"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x2e into the byte at address [esp]",
    "rewritten_intent": "move 0x2e into the byte at address [esp]",
    "snippet": "mov byte [esp], 0x2e",
    "slot_map": {
      "esp": "var3",
      "0x2e": "var0",
      "[": "var2",
      "]": "var4"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x4 into ch",
    "rewritten_intent": "move 0x4 into ch",
    "snippet": "mov ch, 0x4",
    "slot_map": {
      "0x4": "var0",
      "ch": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0102 into cl",
    "rewritten_intent": "move 0102 into cl",
    "snippet": "mov cl, 0102",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "0102",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "0102"
    ]
  },
  {
    "intent": "move 0x3 into cl",
    "rewritten_intent": "move 0x3 into cl",
    "snippet": "mov cl, 0x3",
    "slot_map": {
      "0x3": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move al into cl",
    "rewritten_intent": "move al into cl",
    "snippet": "mov cl, al",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "al",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "al"
    ]
  },
  {
    "intent": "move the byte in eax into cl",
    "rewritten_intent": "move the byte in eax into cl",
    "snippet": "mov cl, byte [eax]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address [esi] into cl",
    "rewritten_intent": "move the byte at the address [esi] into cl",
    "snippet": "mov cl, byte [esi]",
    "slot_map": {
      "esi": "var1",
      "[": "var0",
      "]": "var2"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "[",
      "var1",
      "]",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the 3rd element of the array byte_table into cl",
    "rewritten_intent": "move the 3rd element of the array byte_table into cl",
    "snippet": "mov cl, byte_table[2]",
    "slot_map": {
      "byte_table": "var0"
    },
    "intent_tokens": [
      "move",
      "3rd",
      "element",
      "array",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0",
      "[",
      "2",
      "]"
    ]
  },
  {
    "intent": "move len into cl",
    "rewritten_intent": "move len into cl",
    "snippet": "mov cl, len",
    "slot_map": {
      "len": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x35 into dh",
    "rewritten_intent": "move 0x35 into dh",
    "snippet": "mov dh, 0x35",
    "slot_map": {
      "0x35": "var0",
      "dh": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xff into dh",
    "rewritten_intent": "move 0xff into dh",
    "snippet": "mov dh, 0xff",
    "slot_map": {
      "0xff": "var0",
      "dh": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x01 into dl",
    "rewritten_intent": "move 0x01 into dl",
    "snippet": "mov dl, 0x01",
    "slot_map": {
      "0x01": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x20 into dl",
    "rewritten_intent": "move 0x20 into dl",
    "snippet": "mov dl, 0x20",
    "slot_map": {
      "0x20": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xff into dl",
    "rewritten_intent": "move 0xff into dl",
    "snippet": "mov dl, 0xff",
    "slot_map": {
      "0xff": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the byte at the memory location specified by the operation [eax+1] into dl",
    "rewritten_intent": "move the byte at the memory location specified by the operation [eax+1] into dl",
    "snippet": "mov dl, byte [eax + 1]",
    "slot_map": {
      "eax+1": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var1",
      "]",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the singl byte at the memory location specified by the operation [esi+1] into dl",
    "rewritten_intent": "move the singl byte at the memory location specified by the operation [esi+1] into dl",
    "snippet": "mov dl, byte [esi + 1]",
    "slot_map": {
      "esi+1": "var2",
      "singl": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var2",
      "]",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the single byte in esi into dl",
    "rewritten_intent": "move the single byte in esi into dl",
    "snippet": "mov dl, byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "single",
      "byte",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte 0ffh into dl",
    "rewritten_intent": "move the byte 0ffh into dl",
    "snippet": "mov dl, byte 0ffh",
    "slot_map": {
      "0ffh": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "backup ebx into eax",
    "rewritten_intent": "backup ebx into eax",
    "snippet": "mov eax, ebx",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "backup",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move edi into eax",
    "rewritten_intent": "move edi into eax",
    "snippet": "mov eax, edi",
    "slot_map": {
      "edi": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move esp into ebp",
    "rewritten_intent": "move esp into ebp",
    "snippet": "mov ebp, esp",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "move",
      "esp",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the contents of memory address ebx+esi into ebx",
    "rewritten_intent": "move the contents of memory address ebx+esi into ebx",
    "snippet": "mov ebx, [ebx+esi]",
    "slot_map": {
      "ebx+esi": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "var0",
      "ebx"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move 0x2 into ebx",
    "rewritten_intent": "move 0x2 into ebx",
    "snippet": "mov ebx, 0x2",
    "slot_map": {
      "0x2": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move ebp into ecx",
    "rewritten_intent": "move ebp into ecx",
    "snippet": "mov ecx, ebp",
    "slot_map": {
      "ebp": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move esp into ecx",
    "rewritten_intent": "move esp into ecx",
    "snippet": "mov ecx, esp",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "esp",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the contents of the esp register into the ecx register",
    "rewritten_intent": "move the contents of the esp register into the ecx register",
    "snippet": "mov ecx, esp",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "esp",
      "register",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move 0x3734b117 into edi",
    "rewritten_intent": "move 0x3734b117 into edi",
    "snippet": "mov edi, 0x3734b117",
    "slot_map": {
      "0x3734b117": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x978cd0d0 into edi",
    "rewritten_intent": "move 0x978cd0d0 into edi",
    "snippet": "mov edi, 0x978cd0d0",
    "slot_map": {
      "0x978cd0d0": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move ecx to edi",
    "rewritten_intent": "move ecx to edi",
    "snippet": "mov edi, ecx",
    "slot_map": {
      "ecx": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move esi into edi",
    "rewritten_intent": "move esi into edi",
    "snippet": "mov edi, esi",
    "slot_map": {
      "esi": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move decimal 78 into edx",
    "rewritten_intent": "move decimal 78 into edx",
    "snippet": "mov edx, 78",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "decimal",
      "78",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "78"
    ]
  },
  {
    "intent": "move address of stack pointer into edx",
    "rewritten_intent": "move address of stack pointer into edx",
    "snippet": "mov edx, esp",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "stack",
      "pointer",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move hexlen into edx",
    "rewritten_intent": "move hexlen into edx",
    "snippet": "mov edx, hexlen",
    "slot_map": {
      "hexlen": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the 16-bit integer representation of 2 into the 2 bytes starting at address ecx",
    "rewritten_intent": "move the 16-bit integer representation of 2 into the 2 bytes starting at address ecx",
    "snippet": "mov word [ecx], 2",
    "slot_map": {
      "16-bit": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "integer",
      "representation",
      "2",
      "2",
      "bytes",
      "starting",
      "address",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "word",
      "[",
      "var1",
      "]",
      ",",
      "2"
    ]
  },
  {
    "intent": "multiply eax by ecx",
    "rewritten_intent": "multiply eax by ecx",
    "snippet": "mul ecx",
    "slot_map": {
      "eax": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mul",
      "var1"
    ]
  },
  {
    "intent": "define next_cycle label",
    "rewritten_intent": "define next_cycle label",
    "snippet": "next_cycle:",
    "slot_map": {
      "next_cycle": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "do nothing",
    "rewritten_intent": "do nothing",
    "snippet": "nop",
    "slot_map": {},
    "intent_tokens": [
      "do",
      "nothing"
    ],
    "snippet_tokens": [
      "nop"
    ]
  },
  {
    "intent": "perform a bit-wise inversion of the byte starting at the address in esi",
    "rewritten_intent": "perform a bit-wise inversion of the byte starting at the address in esi",
    "snippet": "not byte [esi]",
    "slot_map": {
      "bit-wise": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "perform",
      "var0",
      "inversion",
      "byte",
      "starting",
      "address",
      "var1"
    ],
    "snippet_tokens": [
      "not",
      "byte",
      "[",
      "var1",
      "]"
    ]
  },
  {
    "intent": "negate all the bits of the word at the address ax",
    "rewritten_intent": "negate all the bits of the word at the address ax",
    "snippet": "not word ax",
    "slot_map": {},
    "intent_tokens": [
      "negate",
      "all",
      "bits",
      "word",
      "address",
      "ax"
    ],
    "snippet_tokens": [
      "not",
      "word",
      "ax"
    ]
  },
  {
    "intent": "declare odd_numer function",
    "rewritten_intent": "declare odd_numer function",
    "snippet": "odd_number:",
    "slot_map": {
      "odd_numer": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "odd_number",
      ":"
    ]
  },
  {
    "intent": "pop the last element pushed onto the stack into cx",
    "rewritten_intent": "pop the last element pushed onto the stack into cx",
    "snippet": "pop cx",
    "slot_map": {},
    "intent_tokens": [
      "pop",
      "last",
      "element",
      "pushed",
      "stack",
      "cx"
    ],
    "snippet_tokens": [
      "pop",
      "cx"
    ]
  },
  {
    "intent": "pop the value on the stack back into edx",
    "rewritten_intent": "pop the value on the stack back into edx",
    "snippet": "pop edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "pop",
      "value",
      "stack",
      "back",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore esi from the stack",
    "rewritten_intent": "restore esi from the stack",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "restore",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into esi register",
    "rewritten_intent": "restore the top of the stack into esi register",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into the esi register",
    "rewritten_intent": "restore the top of the stack into the esi register",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "pop the top of the stack into the esi register",
    "rewritten_intent": "pop the top of the stack into the esi register",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "pop",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "pop the value on the stack back into esi",
    "rewritten_intent": "pop the value on the stack back into esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "pop",
      "value",
      "stack",
      "back",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "get the address of shellcode",
    "rewritten_intent": "get the address of shellcode",
    "snippet": "pop esi",
    "slot_map": {},
    "intent_tokens": [
      "get",
      "address",
      "shellcode"
    ],
    "snippet_tokens": [
      "pop",
      "esi"
    ]
  },
  {
    "intent": "load address of the encoded shellcode into esi",
    "rewritten_intent": "load address of the encoded shellcode into esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "load",
      "address",
      "encoded",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "pop the shellcode into esi",
    "rewritten_intent": "pop the shellcode into esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "pop",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "shellcode address in esi",
    "rewritten_intent": "shellcode address in esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "shellcode",
      "address",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "shellcode on esi",
    "rewritten_intent": "shellcode on esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "store the shellcode in the esi register and copy it into ax",
    "rewritten_intent": "store the shellcode in the esi register and copy it into ax",
    "snippet": "pop esi \\n mov ax, [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "store",
      "shellcode",
      "var0",
      "register",
      "and",
      "copy",
      "it",
      "ax"
    ],
    "snippet_tokens": [
      "pop",
      "var0",
      "\\n",
      "mov",
      "ax",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "save the encoded shellcode in esi and move it into bx",
    "rewritten_intent": "save the encoded shellcode in esi and move it into bx",
    "snippet": "pop esi \\n mov bx, [esi]",
    "slot_map": {
      "esi": "var0",
      "bx": "var1"
    },
    "intent_tokens": [
      "save",
      "encoded",
      "shellcode",
      "var0",
      "and",
      "move",
      "it",
      "var1"
    ],
    "snippet_tokens": [
      "pop",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "point esi to the shellcode and save it into cx",
    "rewritten_intent": "point esi to the shellcode and save it into cx",
    "snippet": "pop esi \\n mov cx, [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "shellcode",
      "and",
      "save",
      "it",
      "cx"
    ],
    "snippet_tokens": [
      "pop",
      "var0",
      "\\n",
      "mov",
      "cx",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "pop doublewords from the stack into the 32 bit registers",
    "rewritten_intent": "pop doublewords from the stack into the 32 bit registers",
    "snippet": "popad",
    "slot_map": {
      "doublewords": "var0"
    },
    "intent_tokens": [
      "pop",
      "var0",
      "stack",
      "32",
      "bit",
      "registers"
    ],
    "snippet_tokens": [
      "popad"
    ]
  },
  {
    "intent": "push esi to the stack",
    "rewritten_intent": "push esi to the stack",
    "snippet": "push esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the esi register onto the stack and point ecx to the stack register",
    "rewritten_intent": "push the contents of the esi register onto the stack and point ecx to the stack register",
    "snippet": "push esi \\n mov ecx, esp",
    "slot_map": {
      "esi": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "declare retry label",
    "rewritten_intent": "declare retry label",
    "snippet": "retry:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "retry",
      "label"
    ],
    "snippet_tokens": [
      "retry",
      ":"
    ]
  },
  {
    "intent": "left rotate the byte in esi 1 time",
    "rewritten_intent": "left rotate the byte in esi 1 time",
    "snippet": "rol byte [esi], 0x1",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "left",
      "rotate",
      "byte",
      "var0",
      "1",
      "time"
    ],
    "snippet_tokens": [
      "rol",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "0x1"
    ]
  },
  {
    "intent": "left rotate the edx register 4 times",
    "rewritten_intent": "left rotate the edx register 4 times",
    "snippet": "rol edx, 0x4",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "left",
      "rotate",
      "var0",
      "register",
      "4",
      "times"
    ],
    "snippet_tokens": [
      "rol",
      "var0",
      ",",
      "0x4"
    ]
  },
  {
    "intent": "right rotate the byte in esi 1 time",
    "rewritten_intent": "right rotate the byte in esi 1 time",
    "snippet": "ror byte [esi], 0x1",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "right",
      "rotate",
      "byte",
      "var0",
      "1",
      "time"
    ],
    "snippet_tokens": [
      "ror",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "0x1"
    ]
  },
  {
    "intent": "right rotate esi 1 time",
    "rewritten_intent": "right rotate esi 1 time",
    "snippet": "ror esi, 1",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "right",
      "rotate",
      "var0",
      "1",
      "time"
    ],
    "snippet_tokens": [
      "ror",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "declare the shell label",
    "rewritten_intent": "declare the shell label",
    "snippet": "shell:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "shell",
      "label"
    ],
    "snippet_tokens": [
      "shell",
      ":"
    ]
  },
  {
    "intent": "define shellcode label",
    "rewritten_intent": "define shellcode label",
    "snippet": "shellcode:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "shellcode",
      "label"
    ],
    "snippet_tokens": [
      "shellcode",
      ":"
    ]
  },
  {
    "intent": "define the array of bytes shellcode and initialize it to vl43ck:$6$bxwJfzor$MUhUWO0MUgdkWfPPEydqgZpm.YtPMI/gaM4lVqhP21LFNWmSJ821kvJnIyoODYtBh.SF9aR7ciQBRCcw5bgjX0:0:0:vl43ck:/tmp:/bin/bash",
    "rewritten_intent": "define the array of bytes shellcode and initialize it to vl43ck:$6$bxwJfzor$MUhUWO0MUgdkWfPPEydqgZpm.YtPMI/gaM4lVqhP21LFNWmSJ821kvJnIyoODYtBh.SF9aR7ciQBRCcw5bgjX0:0:0:vl43ck:/tmp:/bin/bash",
    "snippet": "shellcode: db 'vl43ck:$6$bxwJfzor$MUhUWO0MUgdkWfPPEydqgZpm.YtPMI/gaM4lVqhP21LFNWmSJ821kvJnIyoODYtBh.SF9aR7ciQBRCcw5bgjX0:0:0:vl43ck:/tmp:/bin/bash'",
    "slot_map": {
      "bxwJfzor": "var1",
      "MUhUWO0MUgdkWfPPEydqgZpm": "var2",
      "SF9aR7ciQBRCcw5bgjX0": "var4",
      "YtPMI/gaM4lVqhP21LFNWmSJ821kvJnIyoODYtBh": "var3",
      "bin/bash": "var7",
      "vl43ck:$6$bxwJfzor$MUhUWO0MUgdkWfPPEydqgZpm": "var0",
      "SF9aR7ciQBRCcw5bgjX0:0:0": "var5",
      "vl43ck:/tmp:/bin": "var6"
    },
    "intent_tokens": [
      "define",
      "array",
      "bytes",
      "shellcode",
      "and",
      "initialize",
      "it",
      "var0",
      "var3",
      "SF9aR7ciQBRCcw5bgjX0:0:0",
      ":",
      "vl43ck",
      ":",
      "/tmp",
      ":",
      "/var7"
    ],
    "snippet_tokens": [
      "shellcode",
      ":",
      "db",
      "``",
      "var0.var3.var4:0:0",
      ":",
      "vl43ck",
      ":",
      "/tmp",
      ":",
      "/var7",
      "''"
    ]
  },
  {
    "intent": "define shellcode as an array of bytes and initialize it to 0x4b,0xf7,0x13,0x59,0xcc,0x8c,0x63,0x5e,0x9f,0x8d,0x99,0x9f,0x1f,0xa4,0x3b,0x6e,0xc6,0x36,0x23",
    "rewritten_intent": "define shellcode as an array of bytes and initialize it to 0x4b,0xf7,0x13,0x59,0xcc,0x8c,0x63,0x5e,0x9f,0x8d,0x99,0x9f,0x1f,0xa4,0x3b,0x6e,0xc6,0x36,0x23",
    "snippet": "shellcode: db 0x4b,0xf7,0x13,0x59,0xcc,0x8c,0x63,0x5e,0x9f,0x8d,0x99,0x9f,0x1f,0xa4,0x3b,0x6e,0xc6,0x36,0x23",
    "slot_map": {
      "0x4b,0xf7,0x13,0x59,0xcc,0x8c,0x63,0x5e,0x9f,0x8d,0x99,0x9f,0x1f,0xa4,0x3b,0x6e,0xc6,0x36,0x23": "var0"
    },
    "intent_tokens": [
      "define",
      "shellcode",
      "array",
      "bytes",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "shellcode",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define shellcodelen equal to the length of shellcode",
    "rewritten_intent": "define shellcodelen equal to the length of shellcode",
    "snippet": "shellcodelen equ $-shellcode",
    "slot_map": {
      "shellcodelen": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "length",
      "shellcode"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "$",
      "-shellcode"
    ]
  },
  {
    "intent": "define shift_decode label",
    "rewritten_intent": "define shift_decode label",
    "snippet": "shift_decode:",
    "slot_map": {
      "shift_decode": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "multiply the value of eax by 2",
    "rewritten_intent": "multiply the value of eax by 2",
    "snippet": "shl eax, 1",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "multiply",
      "value",
      "var0",
      "2"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "left shift the contents of eax register by 28 bit positions",
    "rewritten_intent": "left shift the contents of eax register by 28 bit positions",
    "snippet": "shl eax, 28",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "left",
      "shift",
      "contents",
      "var0",
      "register",
      "28",
      "bit",
      "positions"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "28"
    ]
  },
  {
    "intent": "left shift the contents of ebx by 8 bits",
    "rewritten_intent": "left shift the contents of ebx by 8 bits",
    "snippet": "shl ebx, 8",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "left",
      "shift",
      "contents",
      "var0",
      "8",
      "bits"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "8"
    ]
  },
  {
    "intent": "multiply edx by 4 using left shift",
    "rewritten_intent": "multiply edx by 4 using left shift",
    "snippet": "shl edx, 2",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "4",
      "using",
      "left",
      "shift"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "right shift ax by 1 bit",
    "rewritten_intent": "right shift ax by 1 bit",
    "snippet": "shr ax, 1",
    "slot_map": {},
    "intent_tokens": [
      "right",
      "shift",
      "ax",
      "1",
      "bit"
    ],
    "snippet_tokens": [
      "shr",
      "ax",
      ",",
      "1"
    ]
  },
  {
    "intent": "right shift the contents of the edi register by the contents of the cl register",
    "rewritten_intent": "right shift the contents of the edi register by the contents of the cl register",
    "snippet": "shr ax, cl",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "register",
      "contents",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "shr",
      "ax",
      ",",
      "cl"
    ]
  },
  {
    "intent": "right shift the contents of bl register by 4 bit positions",
    "rewritten_intent": "right shift the contents of bl register by 4 bit positions",
    "snippet": "shr bl, 4",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "register",
      "4",
      "bit",
      "positions"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "4"
    ]
  },
  {
    "intent": "right shift the contents of dl register by 1 bit positions",
    "rewritten_intent": "right shift the contents of dl register by 1 bit positions",
    "snippet": "shr dl, 1",
    "slot_map": {},
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "dl",
      "register",
      "1",
      "bit",
      "positions"
    ],
    "snippet_tokens": [
      "shr",
      "dl",
      ",",
      "1"
    ]
  },
  {
    "intent": "right shift the contents of dl register by 4 bit positions",
    "rewritten_intent": "right shift the contents of dl register by 4 bit positions",
    "snippet": "shr dl, 4",
    "slot_map": {},
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "dl",
      "register",
      "4",
      "bit",
      "positions"
    ],
    "snippet_tokens": [
      "shr",
      "dl",
      ",",
      "4"
    ]
  },
  {
    "intent": "shift right dx by the contents of bl and negate the byte in dx",
    "rewritten_intent": "shift right dx by the contents of bl and negate the byte in dx",
    "snippet": "shr dx, bl \\n not byte dx",
    "slot_map": {
      "dx": "var0",
      "bl": "var2"
    },
    "intent_tokens": [
      "shift",
      "right",
      "var0",
      "contents",
      "var2",
      "and",
      "negate",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "var2",
      "\\n",
      "not",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "right shift the contents of the eax register by 24 bit positions",
    "rewritten_intent": "right shift the contents of the eax register by 24 bit positions",
    "snippet": "shr eax, 24",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "register",
      "24",
      "bit",
      "positions"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "24"
    ]
  },
  {
    "intent": "right shift the contents of eax register by 28 bit positions",
    "rewritten_intent": "right shift the contents of eax register by 28 bit positions",
    "snippet": "shr eax, 28",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "register",
      "28",
      "bit",
      "positions"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "28"
    ]
  },
  {
    "intent": "right shift the contents of the ebx register by the contents of the cl register",
    "rewritten_intent": "right shift the contents of the ebx register by the contents of the cl register",
    "snippet": "shr ebx, cl",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "register",
      "contents",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "cl"
    ]
  },
  {
    "intent": "define stage label",
    "rewritten_intent": "define stage label",
    "snippet": "stage:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "stage",
      "label"
    ],
    "snippet_tokens": [
      "stage",
      ":"
    ]
  },
  {
    "intent": "declare the stageaddress label",
    "rewritten_intent": "declare the stageaddress label",
    "snippet": "stageaddress:",
    "slot_map": {
      "stageaddress": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "subtract 13 from ax and save the result into ax",
    "rewritten_intent": "subtract 13 from ax and save the result into ax",
    "snippet": "sub ax, 13",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "13",
      "ax",
      "and",
      "save",
      "result",
      "ax"
    ],
    "snippet_tokens": [
      "sub",
      "ax",
      ",",
      "13"
    ]
  },
  {
    "intent": "subtract 1564 from the contents of the ax register",
    "rewritten_intent": "subtract 1564 from the contents of the ax register",
    "snippet": "sub ax, 1564",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "1564",
      "contents",
      "ax",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "ax",
      ",",
      "1564"
    ]
  },
  {
    "intent": "subtract the contents of al register from the contents of bl register and save the result in bl",
    "rewritten_intent": "subtract the contents of al register from the contents of bl register and save the result in bl",
    "snippet": "sub bl, al",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "al",
      "register",
      "contents",
      "var0",
      "register",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "al"
    ]
  },
  {
    "intent": "subtract 0x7 from the byte in esi register",
    "rewritten_intent": "subtract 0x7 from the byte in esi register",
    "snippet": "sub bl, byte [esi]",
    "slot_map": {
      "0x7": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "byte",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "bl",
      ",",
      "byte",
      "[",
      "var1",
      "]"
    ]
  },
  {
    "intent": "subtract the value 3 from the byte in esi and negate it",
    "rewritten_intent": "subtract the value 3 from the byte in esi and negate it",
    "snippet": "sub byte [esi], 3 \\n not byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "subtract",
      "value",
      "3",
      "byte",
      "var0",
      "and",
      "negate",
      "it"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "3",
      "\\n",
      "not",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "subtract the value 1 from the contents of the cl register and jump to the decode label if the result is not zero",
    "rewritten_intent": "subtract the value 1 from the contents of the cl register and jump to the decode label if the result is not zero",
    "snippet": "sub cl, 1 \\n jnz decode",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "value",
      "1",
      "contents",
      "cl",
      "register",
      "and",
      "jump",
      "decode",
      "label",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "sub",
      "cl",
      ",",
      "1",
      "\\n",
      "jnz",
      "decode"
    ]
  },
  {
    "intent": "subtract the contents of dl register from the contents of cl register and save the result in cl",
    "rewritten_intent": "subtract the contents of dl register from the contents of cl register and save the result in cl",
    "snippet": "sub cl, dl",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "contents",
      "dl",
      "register",
      "contents",
      "cl",
      "register",
      "and",
      "save",
      "result",
      "cl"
    ],
    "snippet_tokens": [
      "sub",
      "cl",
      ",",
      "dl"
    ]
  },
  {
    "intent": "subtract the contents of cx from the contents of cx",
    "rewritten_intent": "subtract the contents of cx from the contents of cx",
    "snippet": "sub cx, cx",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "contents",
      "cx",
      "contents",
      "cx"
    ],
    "snippet_tokens": [
      "sub",
      "cx",
      ",",
      "cx"
    ]
  },
  {
    "intent": "subtract the contents of the al register from the contents of the dl register and jump to the decode_pr label if the result is not negative",
    "rewritten_intent": "subtract the contents of the al register from the contents of the dl register and jump to the decode_pr label if the result is not negative",
    "snippet": "sub dl, al \\n jns decode_pr",
    "slot_map": {
      "decode_pr": "var0"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "al",
      "register",
      "contents",
      "dl",
      "register",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "sub",
      "dl",
      ",",
      "al",
      "\\n",
      "jns",
      "var0"
    ]
  },
  {
    "intent": "subtract the contents of bx from the contents of dx",
    "rewritten_intent": "subtract the contents of bx from the contents of dx",
    "snippet": "sub dx, bx",
    "slot_map": {
      "bx": "var0",
      "dx": "var1"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "var0",
      "contents",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x10 from eax",
    "rewritten_intent": "subtract 0x10 from eax",
    "snippet": "sub eax, 0x10",
    "slot_map": {
      "0x10": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "allocate memory for variable",
    "rewritten_intent": "allocate memory for variable",
    "snippet": "sub esp, 4",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "allocate",
      "memory",
      "var0",
      "variable"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "4"
    ]
  },
  {
    "intent": "subtract the byte value 0x1 from esp register and save the result in esp",
    "rewritten_intent": "subtract the byte value 0x1 from esp register and save the result in esp",
    "snippet": "sub esp, byte 0x1",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "subtract",
      "byte",
      "value",
      "var0",
      "esp",
      "register",
      "and",
      "save",
      "result",
      "esp"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is zero then jump to the label socket",
    "rewritten_intent": "if the contents of the eax register is zero then jump to the label socket",
    "snippet": "test eax, eax \\n jz socket",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "then",
      "jump",
      "label",
      "socket"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "socket"
    ]
  },
  {
    "intent": "jump short to the label l1 if the contents of the ebx register is negative",
    "rewritten_intent": "jump short to the label l1 if the contents of the ebx register is negative",
    "snippet": "test ebx, ebx \\n js short l1",
    "slot_map": {
      "l1": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "jump",
      "short",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "negative"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "js",
      "short",
      "var0"
    ]
  },
  {
    "intent": "test the contents of the edx register",
    "rewritten_intent": "test the contents of the edx register",
    "snippet": "test edx, edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "test",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "swap the contents in ebp+16 and ecx",
    "rewritten_intent": "swap the contents in ebp+16 and ecx",
    "snippet": "xchg [ebp+16], ecx",
    "slot_map": {
      "ebp+16": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xchg",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "perform the xor operation between the al register and the value 0x4a",
    "rewritten_intent": "perform the xor operation between the al register and the value 0x4a",
    "snippet": "xor al, 0x4a",
    "slot_map": {
      "0x4a": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "al",
      "register",
      "and",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform a xor operation between ax and 0x539 and save the result in ax",
    "rewritten_intent": "perform a xor operation between ax and 0x539 and save the result in ax",
    "snippet": "xor ax, 0x539",
    "slot_map": {
      "0x539": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "ax",
      "and",
      "var0",
      "and",
      "save",
      "result",
      "ax"
    ],
    "snippet_tokens": [
      "xor",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform a logical xor between the bx register and the ax register and save the result in ax",
    "rewritten_intent": "perform a logical xor between the bx register and the ax register and save the result in ax",
    "snippet": "xor ax, bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "ax",
      "register",
      "and",
      "save",
      "result",
      "ax"
    ],
    "snippet_tokens": [
      "xor",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "jump to the call_decoded label if the result of the logical xor between the ax register and the bx register is zero",
    "rewritten_intent": "jump to the call_decoded label if the result of the logical xor between the ax register and the bx register is zero",
    "snippet": "xor ax, bx \\n jz call_decoded",
    "slot_map": {
      "call_decoded": "var0",
      "bx": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "logical",
      "xor",
      "ax",
      "register",
      "and",
      "var1",
      "register",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "ax",
      ",",
      "var1",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "jump to the encoded label if the result of the logical xor between the bl register and the value 0xBB is zero",
    "rewritten_intent": "jump to the encoded label if the result of the logical xor between the bl register and the value 0xBB is zero",
    "snippet": "xor bl, 0xBB \\n jz encoded",
    "slot_map": {
      "bl": "var0",
      "0xBB": "var1"
    },
    "intent_tokens": [
      "jump",
      "encoded",
      "label",
      "if",
      "result",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "value",
      "var1",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var1",
      "\\n",
      "jz",
      "encoded"
    ]
  },
  {
    "intent": "jump to the formatting label if the result of the logical xor between the bl register and the value 0xBB is zero",
    "rewritten_intent": "jump to the formatting label if the result of the logical xor between the bl register and the value 0xBB is zero",
    "snippet": "xor bl, 0xBB \\n jz formatting",
    "slot_map": {
      "bl": "var0",
      "0xBB": "var1"
    },
    "intent_tokens": [
      "jump",
      "formatting",
      "label",
      "if",
      "result",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "value",
      "var1",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var1",
      "\\n",
      "jz",
      "formatting"
    ]
  },
  {
    "intent": "initialize bx to 0",
    "rewritten_intent": "initialize bx to 0",
    "snippet": "xor bx, bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "initialize",
      "var0",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear the bx register",
    "rewritten_intent": "clear the bx register",
    "snippet": "xor bx, bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform the xor operation between the byte starting at the addess in esi and the value 0x2c",
    "rewritten_intent": "perform the xor operation between the byte starting at the addess in esi and the value 0x2c",
    "snippet": "xor byte [esi], 0x2c",
    "slot_map": {
      "0x2c": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "byte",
      "starting",
      "addess",
      "var0",
      "and",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "perform a xor operation between a byte in esi and cl",
    "rewritten_intent": "perform a xor operation between a byte in esi and cl",
    "snippet": "xor byte [esi], cl",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "byte",
      "var0",
      "and",
      "cl"
    ],
    "snippet_tokens": [
      "xor",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "cl"
    ]
  },
  {
    "intent": "perform the xor operation between the byte at memory location esi+ecx and 0x0f",
    "rewritten_intent": "perform the xor operation between the byte at memory location esi+ecx and 0x0f",
    "snippet": "xor byte [esi+ecx],0x0f",
    "slot_map": {
      "esi+ecx": "var0",
      "0x0f": "var1"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "byte",
      "memory",
      "location",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "perform the xor operation between cl and 0x32 and store the resut in cl",
    "rewritten_intent": "perform the xor operation between cl and 0x32 and store the resut in cl",
    "snippet": "xor cl, 0x32",
    "slot_map": {
      "0x32": "var0",
      "resut": "var1"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "cl",
      "and",
      "var0",
      "and",
      "store",
      "var1",
      "cl"
    ],
    "snippet_tokens": [
      "xor",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "jump to the Next_Cycle label if the result of the logical xor between the cl register and the value 0xAA is not zero",
    "rewritten_intent": "jump to the Next_Cycle label if the result of the logical xor between the cl register and the value 0xAA is not zero",
    "snippet": "xor cl, 0xAA \\n jnz Next_Cycle",
    "slot_map": {
      "Next_Cycle": "var0",
      "0xAA": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "logical",
      "xor",
      "cl",
      "register",
      "and",
      "value",
      "var1",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "cl",
      ",",
      "var1",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "jump to the shift_decode label if the result of the logical xor between the cl register and the value 0xAA is zero",
    "rewritten_intent": "jump to the shift_decode label if the result of the logical xor between the cl register and the value 0xAA is zero",
    "snippet": "xor cl, 0XAA \\n jz shift_decode",
    "slot_map": {
      "shift_decode": "var0",
      "0xAA": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "logical",
      "xor",
      "cl",
      "register",
      "and",
      "value",
      "var1",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "cl",
      ",",
      "0XAA",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "jump to the Next_Cycle label if the result of the logical xor between the dl register and the value 0xBB is zero",
    "rewritten_intent": "jump to the Next_Cycle label if the result of the logical xor between the dl register and the value 0xBB is zero",
    "snippet": "xor dl, 0xBB \\n jz Next_Cycle",
    "slot_map": {
      "Next_Cycle": "var0",
      "0xBB": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "logical",
      "xor",
      "dl",
      "register",
      "and",
      "value",
      "var1",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "dl",
      ",",
      "var1",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "clear the eax register",
    "rewritten_intent": "clear the eax register",
    "snippet": "xor eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear the eax register and move the next byte of the shellcode into the lower byte of the register",
    "rewritten_intent": "clear the eax register and move the next byte of the shellcode into the lower byte of the register",
    "snippet": "xor eax, eax \\n mov al, [esi+1]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "move",
      "next",
      "byte",
      "shellcode",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "clear the eax register and move 2 in the lowest byte of the register",
    "rewritten_intent": "clear the eax register and move 2 in the lowest byte of the register",
    "snippet": "xor eax, eax \\n mov al, 2",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "move",
      "2",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "2"
    ]
  },
  {
    "intent": "clear the eax register and push its contents onto the stack",
    "rewritten_intent": "clear the eax register and push its contents onto the stack",
    "snippet": "xor eax, eax \\n push eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "push",
      "its",
      "contents",
      "stack"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "push",
      "var0"
    ]
  },
  {
    "intent": "clear eax and ebx",
    "rewritten_intent": "clear eax and ebx",
    "snippet": "xor eax, eax \\n xor ebx, ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "zero out eax, ebx and ecx",
    "rewritten_intent": "zero out eax, ebx and ecx",
    "snippet": "xor eax, eax \\n xor ebx, ebx \\n xor ecx, ecx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1",
      "ecx": "var2"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "var1",
      "and",
      "var2"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "xor",
      "var2",
      ",",
      "var2"
    ]
  },
  {
    "intent": "clear ebp register",
    "rewritten_intent": "clear ebp register",
    "snippet": "xor ebp, ebp",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear ebx",
    "rewritten_intent": "clear ebx",
    "snippet": "xor ebx, ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear ebx register",
    "rewritten_intent": "clear ebx register",
    "snippet": "xor ebx, ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the ebx register and jump to the exit label if the contents of the eax register is not equal to the contents of the ebx register",
    "rewritten_intent": "zero out the ebx register and jump to the exit label if the contents of the eax register is not equal to the contents of the ebx register",
    "snippet": "xor ebx, ebx \\n cmp eax, ebx \\n jne exit",
    "slot_map": {
      "ebx": "var0",
      "eax": "var2"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "jump",
      "exit",
      "label",
      "if",
      "contents",
      "var2",
      "register",
      "not",
      "equal",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "cmp",
      "var2",
      ",",
      "var0",
      "\\n",
      "jne",
      "exit"
    ]
  },
  {
    "intent": "clear ebx and move 0x4 in the lowest byte of the register",
    "rewritten_intent": "clear ebx and move 0x4 in the lowest byte of the register",
    "snippet": "xor ebx, ebx \\n mov bl, 0x4",
    "slot_map": {
      "0x4": "var1",
      "ebx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "and",
      "move",
      "var1",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "bl",
      ",",
      "var1"
    ]
  },
  {
    "intent": "zero out the ebx register and push zero onto the stack",
    "rewritten_intent": "zero out the ebx register and push zero onto the stack",
    "snippet": "xor ebx, ebx \\n push ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "push",
      "zero",
      "stack"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "push",
      "var0"
    ]
  },
  {
    "intent": "clean ebx and ecx",
    "rewritten_intent": "clean ebx and ecx",
    "snippet": "xor ebx, ebx \\n xor ecx, ecx",
    "slot_map": {
      "ebx": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "clean",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "perform a logical xor between the ecx register and the bh register and save the result in ecx",
    "rewritten_intent": "perform a logical xor between the ecx register and the bh register and save the result in ecx",
    "snippet": "xor ecx, bh",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "bh",
      "register",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "bh"
    ]
  },
  {
    "intent": "clear ecx",
    "rewritten_intent": "clear ecx",
    "snippet": "xor ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the ecx register and jump to the l1 label if the contents of the ebx register is not equal to the contents of the ecx register",
    "rewritten_intent": "zero out the ecx register and jump to the l1 label if the contents of the ebx register is not equal to the contents of the ecx register",
    "snippet": "xor ecx, ecx \\n cmp ebx, ecx \\n jne l1",
    "slot_map": {
      "ecx": "var0",
      "l1": "var2",
      "ebx": "var3"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var3",
      "register",
      "not",
      "equal",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "cmp",
      "var3",
      ",",
      "var0",
      "\\n",
      "jne",
      "var2"
    ]
  },
  {
    "intent": "zero out the ecx register and move the next byte of the shellcode into the lower byte of the register",
    "rewritten_intent": "zero out the ecx register and move the next byte of the shellcode into the lower byte of the register",
    "snippet": "xor ecx, ecx \\n mov cl, [esi+1]",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "move",
      "next",
      "byte",
      "shellcode",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "cl",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "zero out ecx and move 0x3 in the lowest byte of the register",
    "rewritten_intent": "zero out ecx and move 0x3 in the lowest byte of the register",
    "snippet": "xor ecx, ecx \\n mov cl, 0x3",
    "slot_map": {
      "0x3": "var1",
      "ecx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "and",
      "move",
      "var1",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "cl",
      ",",
      "var1"
    ]
  },
  {
    "intent": "clear the ecx register and move 2 in the lowest byte of the register",
    "rewritten_intent": "clear the ecx register and move 2 in the lowest byte of the register",
    "snippet": "xor ecx, ecx \\n mov cl, 2",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "move",
      "2",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "cl",
      ",",
      "2"
    ]
  },
  {
    "intent": "clean the ecx register and move 5 in the lowest byte of the register",
    "rewritten_intent": "clean the ecx register and move 5 in the lowest byte of the register",
    "snippet": "xor ecx, ecx \\n mov cl, 5",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "clean",
      "var0",
      "register",
      "and",
      "move",
      "5",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "cl",
      ",",
      "5"
    ]
  },
  {
    "intent": "zero out the eax register and the ecx register",
    "rewritten_intent": "zero out the eax register and the ecx register",
    "snippet": "xor ecx, ecx \\n mul ecx",
    "slot_map": {
      "eax": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "mul",
      "var1"
    ]
  },
  {
    "intent": "init edi 0",
    "rewritten_intent": "init edi 0",
    "snippet": "xor edi, edi",
    "slot_map": {
      "init": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "zero out the edx register and move the next byte of the shellcode into the lower byte of the register",
    "rewritten_intent": "zero out the edx register and move the next byte of the shellcode into the lower byte of the register",
    "snippet": "xor edx, ecx \\n mov dl, [esi+1]",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "move",
      "next",
      "byte",
      "shellcode",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "ecx",
      "\\n",
      "mov",
      "dl",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "zero out the edx register and jump to the l2 label if the contents of the ecx register is not equal to the contents of the edx register",
    "rewritten_intent": "zero out the edx register and jump to the l2 label if the contents of the ecx register is not equal to the contents of the edx register",
    "snippet": "xor edx, edx \\n cmp ecx, edx \\n jne l2",
    "slot_map": {
      "edx": "var0",
      "l2": "var2",
      "ecx": "var3"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var3",
      "register",
      "not",
      "equal",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "cmp",
      "var3",
      ",",
      "var0",
      "\\n",
      "jne",
      "var2"
    ]
  },
  {
    "intent": "clean the edx register and move 5 in the lowest byte of the register",
    "rewritten_intent": "clean the edx register and move 5 in the lowest byte of the register",
    "snippet": "xor edx, edx \\n mov dl, 5",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "clean",
      "var0",
      "register",
      "and",
      "move",
      "5",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "dl",
      ",",
      "5"
    ]
  },
  {
    "intent": "zero out zero_reg",
    "rewritten_intent": "zero out zero_reg",
    "snippet": "xor zero_reg, zero_reg",
    "slot_map": {
      "zero_reg": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  }
]