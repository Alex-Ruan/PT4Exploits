[{"intent": "convert to hexadecimal a random integer between 1 and 100 and append it to the string a", "rewritten_intent": "convert to hexadecimal a random integer between 1 and 100 and append it to the string a", "snippet": "a += '\\\\x%02x' % random.randint(1,100)"},{"intent": "append string '0x' to a", "rewritten_intent": "append string '0x' to a", "snippet": "a += '0x'"},{"intent": "increment a by 1", "rewritten_intent": "increment a by 1", "snippet": "a += 1"},{"intent": "cast a to int16", "rewritten_intent": "cast a to int16", "snippet": "a = int(hopcode, 16)"},{"intent": "ba1 is a bytearrary of ba1", "rewritten_intent": "ba1 is a bytearrary of ba1", "snippet": "ba1 = bytearray(ba1)"},{"intent": "call the import_string with argument backend, substitute it for backend_cls.", "rewritten_intent": "call the import_string with argument backend, substitute it for backend_cls.", "snippet": "backend_cls = import_string ( backend )"},{"intent": "bad_app_labels is an empty set.", "rewritten_intent": "bad_app_labels is an empty set.", "snippet": "bad_app_labels = set ( )"},{"intent": "break loop execution.", "rewritten_intent": "break loop execution.", "snippet": "break"},{"intent": "break from the loop execution.", "rewritten_intent": "break from the loop execution.", "snippet": "break"},{"intent": "breaks from the smallest enclosing loop.", "rewritten_intent": "breaks from the smallest enclosing loop.", "snippet": "break"},{"intent": "skip this loop iteration.", "rewritten_intent": "skip this loop iteration.", "snippet": "break"},{"intent": "break from the loop execution", "rewritten_intent": "break from the loop execution", "snippet": "break"},{"intent": "read one line from self file stream, substitute the result for buf.", "rewritten_intent": "read one line from self file stream, substitute the result for buf.", "snippet": "buf = self . readline ( )"},{"intent": "buf is an instance of StreamingBuffer class.", "rewritten_intent": "buf is an instance of StreamingBuffer class.", "snippet": "buf = StreamingBuffer ( )"},{"intent": "substitute line for buffer_.", "rewritten_intent": "substitute line for buffer_.", "snippet": "buffer_ = line"},{"intent": "builtins is an dictionary with 3 initial entries: boolean True for 'True', boolean False for 'False' and None for 'None'.", "rewritten_intent": "builtins is an dictionary with 3 initial entries: boolean True for 'True', boolean False for 'False' and None for 'None'.", "snippet": "builtins = { 'True' : True , 'False' : False , 'None' : None }"},{"intent": "call te method operator.itemgetter with an argument integer 0, substitute the result for byte2int.", "rewritten_intent": "call te method operator.itemgetter with an argument integer 0, substitute the result for byte2int.", "snippet": "byte2int = operator . itemgetter ( 0 )"},{"intent": "convert bytes to floating point number, substitute it for bytes.", "rewritten_intent": "convert bytes to floating point number, substitute it for bytes.", "snippet": "bytes = float ( bytes )"},{"intent": "c is the sum of a and b modulo 100", "rewritten_intent": "c is the sum of a and b modulo 100", "snippet": "c = (a + b)%100"},{"intent": "call the self._read_limiter with length of self.buffer subtracted from size as argument, store the result into chunk.", "rewritten_intent": "call the self._read_limiter with length of self.buffer subtracted from size as argument, store the result into chunk.", "snippet": "chunk = self . _read_limited ( size - len ( self . buffer ) )"},{"intent": "call the method stream.read with an argument max_header_size, substitute the result for chunk.", "rewritten_intent": "call the method stream.read with an argument max_header_size, substitute the result for chunk.", "snippet": "chunk = stream . read ( max_header_size )"},{"intent": "substitute length of chunk for chunk_length.", "rewritten_intent": "substitute length of chunk for chunk_length.", "snippet": "chunk_length = len ( chunk )"},{"intent": "double the chunk size.", "rewritten_intent": "double the chunk size.", "snippet": "chunk_size *= 2"},{"intent": "call the function get_quantifier with 2 arguments: ch and pattern_iter, substitute the result for count and ch, respectively.", "rewritten_intent": "call the function get_quantifier with 2 arguments: ch and pattern_iter, substitute the result for count and ch, respectively.", "snippet": "count , ch = get_quantifier ( ch , pattern_iter )"},{"intent": "call the itertools.count function with argument integer 1, substitute the result for count.", "rewritten_intent": "call the itertools.count function with argument integer 1, substitute the result for count.", "snippet": "count = itertools . count ( 1 )"},{"intent": "multiply seconds by count, subtract it from since, divide the result by seconds2, store the floored result in count2.", "rewritten_intent": "multiply seconds by count, subtract it from since, divide the result by seconds2, store the floored result in count2.", "snippet": "count2 = ( since - ( seconds * count ) ) // seconds2"},{"intent": "define a variable named counter and assign 0 to it", "rewritten_intent": "define a variable named counter and assign 0 to it", "snippet": "counter = 0"},{"intent": "add the string value '0x' to the variable d", "rewritten_intent": "add the string value '0x' to the variable d", "snippet": "d += '0x'"},{"intent": "append e to debugs list for every e in all_issues, if e.level is lesser than checks.INFO and result of the method e.is_silenced in false.", "rewritten_intent": "append e to debugs list for every e in all_issues, if e.level is lesser than checks.INFO and result of the method e.is_silenced in false.", "snippet": "debugs = [ e for e in all_issues if e . level < checks . INFO and not e . is_silenced ( ) ]"},{"intent": "substitute first decimal_pos elements of dec_part for dec_part.", "rewritten_intent": "substitute first decimal_pos elements of dec_part for dec_part.", "snippet": "dec_part = dec_part [ : decimal_pos ]"},{"intent": "update declared_fields dictionary with entry base.declared_fields.", "rewritten_intent": "update declared_fields dictionary with entry base.declared_fields.", "snippet": "declared_fields . update ( base . declared_fields )"},{"intent": "declared_fields is an instance of OrderedDict class.", "rewritten_intent": "declared_fields is an instance of OrderedDict class.", "snippet": "declared_fields = OrderedDict ( )"},{"intent": "call the function curry with 2 arguments: _proxy_method and method set to bytes.decode, substitute the result for decode.", "rewritten_intent": "call the function curry with 2 arguments: _proxy_method and method set to bytes.decode, substitute the result for decode.", "snippet": "decode = curry ( _proxy_method , method = bytes . decode )"},{"intent": "s and max_age set to max_age, use it as an argument for the force_bytes function, substitute the result for base64d.   decompress is boolean False.", "rewritten_intent": "s and max_age set to max_age, use it as an argument for the force_bytes function, substitute the result for base64d.   decompress is boolean False.", "snippet": "decompress = False"},{"intent": "called with with an argument lambda function which returns result of the force_text function called with an argument text.   define the method add_truncation_text with 3 arguments: self, text and truncate set to None.", "rewritten_intent": "called with with an argument lambda function which returns result of the force_text function called with an argument text.   define the method add_truncation_text with 3 arguments: self, text and truncate set to None.", "snippet": "def add_truncation_text ( self , text , truncate = None ) :"},{"intent": "define a method named add with the parameters a, b and c. C has a default value of 3", "rewritten_intent": "define a method named add with the parameters a, b and c. C has a default value of 3", "snippet": "def add(a, b, c=3):"},{"intent": "define the function find_template_loader with an argument loader.", "rewritten_intent": "define the function find_template_loader with an argument loader.", "snippet": "def find_template_loader ( loader ) :"},{"intent": "define the function first with an argument value.", "rewritten_intent": "define the function first with an argument value.", "snippet": "def first ( value ) :"},{"intent": "define a method named func with the parameters n,x, and y. Y has a default value of 1", "rewritten_intent": "define a method named func with the parameters n,x, and y. Y has a default value of 1", "snippet": "def func(n, x, y=1):"},{"intent": "define the function mark_safe with an argument s.", "rewritten_intent": "define the function mark_safe with an argument s.", "snippet": "def mark_safe ( s ) :"},{"intent": "define the function media with an argument request.", "rewritten_intent": "define the function media with an argument request.", "snippet": "def media ( request ) :"},{"intent": "define the function rmtree_errorhandler with 3 arguments func, path and exc_info.", "rewritten_intent": "define the function rmtree_errorhandler with 3 arguments func, path and exc_info.", "snippet": "def rmtree_errorhandler ( func , path , exc_info ) :"},{"intent": "define the method root_attributes with an argument self.", "rewritten_intent": "define the method root_attributes with an argument self.", "snippet": "def root_attributes ( self ) :"},{"intent": "define a method named routine that takes in n as a parameter", "rewritten_intent": "define a method named routine that takes in n as a parameter", "snippet": "def routine(n):"},{"intent": "define the method rss_attributes with an argument self.", "rewritten_intent": "define the method rss_attributes with an argument self.", "snippet": "def rss_attributes ( self ) :"},{"intent": "else if name is equal to the string 'abcd'", "rewritten_intent": "else if name is equal to the string 'abcd'", "snippet": "elif name == 'abcd':"},{"intent": "otherwise if fourth element of version does not equals to 'final',", "rewritten_intent": "otherwise if fourth element of version does not equals to 'final',", "snippet": "elif version [ 3 ] != 'final' :"},{"intent": "if not,", "rewritten_intent": "if not,", "snippet": "else :"},{"intent": "to the function timedelta called with an argument seconds as negative time.altzone, return the result.   if not,", "rewritten_intent": "to the function timedelta called with an argument seconds as negative time.altzone, return the result.   if not,", "snippet": "else :"},{"intent": "elt is an list with an element elt.", "rewritten_intent": "elt is an list with an element elt.", "snippet": "elt = [ elt ]"},{"intent": "EMPTY_VALUES is a tuple containing 5 initial elements: None, empty string, empty list, empty tuple and an empty dictionary.", "rewritten_intent": "EMPTY_VALUES is a tuple containing 5 initial elements: None, empty string, empty list, empty tuple and an empty dictionary.", "snippet": "EMPTY_VALUES = ( None , '' , [ ] , ( ) , { } )"},{"intent": "put elements of validators.EMPTY_VALUES to a list, substitute the result for empty_values.", "rewritten_intent": "put elements of validators.EMPTY_VALUES to a list, substitute the result for empty_values.", "snippet": "empty_values = list ( validators . EMPTY_VALUES )"},{"intent": "call the function curry with 2 arguments: _proxy_method and method set to six.text_type.encode, substitute the result for encode.", "rewritten_intent": "call the function curry with 2 arguments: _proxy_method and method set to six.text_type.encode, substitute the result for encode.", "snippet": "encode = curry ( _proxy_method , method = six . text_type . encode )"},{"intent": "encode is an lambda function with arguments k and v, return value is string '%s=%s', where '%s' is replaced with:", "rewritten_intent": "encode is an lambda function with arguments k and v, return value is string '%s=%s', where '%s' is replaced with:", "snippet": "encode = lambda k , v : '%s=%s' % ( ( quote ( k , safe ) , quote ( v , safe ) ) )"},{"intent": "add the string value ',' to the variable encoded", "rewritten_intent": "add the string value ',' to the variable encoded", "snippet": "encoded += ','"},{"intent": "add the string value '\\\\y' to the variable encoded", "rewritten_intent": "add the string value '\\\\y' to the variable encoded", "snippet": "encoded += '\\\\y'"},{"intent": "Convert the value of j to a hexadecimal then add it to the variable encoded followed by the string ', '", "rewritten_intent": "Convert the value of j to a hexadecimal then add it to the variable encoded followed by the string ', '", "snippet": "encoded += '%02x, ' %j"},{"intent": "Convert the value of y bitwise and 0xff to a hexadecimal then add it to the variable encoded followed by the string ','", "rewritten_intent": "Convert the value of y bitwise and 0xff to a hexadecimal then add it to the variable encoded followed by the string ','", "snippet": "encoded += '%02x,' % (y & 0xff)"},{"intent": "Convert the value of x to a hexadecimal then add it to the variable encoded followed by the string ', '", "rewritten_intent": "Convert the value of x to a hexadecimal then add it to the variable encoded followed by the string ', '", "snippet": "encoded += '%02x,' % x"},{"intent": "Convert the variable x to a hexadecimal. Concatenate the result with the string ',' add the result to the variable encoded", "rewritten_intent": "Convert the variable x to a hexadecimal. Concatenate the result with the string ',' add the result to the variable encoded", "snippet": "encoded += '%02x,' % x"},{"intent": "convert the value x to hex, concatenate the result with ',' and append it to the string encoded", "rewritten_intent": "convert the value x to hex, concatenate the result with ',' and append it to the string encoded", "snippet": "encoded += '%02x,' % x"},{"intent": "convert (7 -(256 - x)) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded", "rewritten_intent": "convert (7 -(256 - x)) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded", "snippet": "encoded += '%02x,' %(7 -(256 - x))"},{"intent": "Convert the value of h bitwise and 0xff to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded", "rewritten_intent": "Convert the value of h bitwise and 0xff to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded", "snippet": "encoded += '%02x,' %(h & 0xff)"},{"intent": "convert (x+7) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded", "rewritten_intent": "convert (x+7) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded", "snippet": "encoded += '%02x,' %(x+7)"},{"intent": "Convert the value of y to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded", "rewritten_intent": "Convert the value of y to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded", "snippet": "encoded += '%02x,' %y"},{"intent": "convert the value x to hex and append it to the string encoded", "rewritten_intent": "convert the value x to hex and append it to the string encoded", "snippet": "encoded += '%02x' % x"},{"intent": "concatenate the string '0x' with the hexadecimal conversion of 0xAA and append the result to the string encoded", "rewritten_intent": "concatenate the string '0x' with the hexadecimal conversion of 0xAA and append the result to the string encoded", "snippet": "encoded += '0x%02x,' % 0xAA"},{"intent": "concatenate the string '0x' with the hexadecimal conversion of rand and append the result to the string encoded", "rewritten_intent": "concatenate the string '0x' with the hexadecimal conversion of rand and append the result to the string encoded", "snippet": "encoded += '0x%02x,' % rand"},{"intent": "set encoded to the string '0x'", "rewritten_intent": "set encoded to the string '0x'", "snippet": "encoded = '0x'"},{"intent": "encoded is the concatenation of the string \"0x\" with the hexadecimal conversion of the lenght of the array of bytes of shellcode", "rewritten_intent": "encoded is the concatenation of the string \"0x\" with the hexadecimal conversion of the lenght of the array of bytes of shellcode", "snippet": "encoded = \"0x%02x,\" % len(bytearray(shellcode))"},{"intent": "convert the value z to hex and append it to the string encoded1", "rewritten_intent": "convert the value z to hex and append it to the string encoded1", "snippet": "encoded1 += '%02x' % z"},{"intent": "Convert the value of leader to hexadecimal, then slice it at the index of 2 and add its value to the variable encoded3", "rewritten_intent": "Convert the value of leader to hexadecimal, then slice it at the index of 2 and add its value to the variable encoded3", "snippet": "encoded3 += hex(leader)[2:]"},{"intent": "call the method Encoders.encode_base64 with an argument attachment.", "rewritten_intent": "call the method Encoders.encode_base64 with an argument attachment.", "snippet": "Encoders . encode_base64 ( attachment )"},{"intent": "substitute string 'ascii' for encoding.", "rewritten_intent": "substitute string 'ascii' for encoding.", "snippet": "encoding = 'ascii'"},{"intent": "if encoding does not exists substitute it for settings.DEFAULT_CHARSET.", "rewritten_intent": "if encoding does not exists substitute it for settings.DEFAULT_CHARSET.", "snippet": "encoding = encoding or settings . DEFAULT_CHARSET"},{"intent": "substitute elements of tuple boundary to end and next, respectively.", "rewritten_intent": "substitute elements of tuple boundary to end and next, respectively.", "snippet": "end , next = boundary"},{"intent": "es is a bytearrary of the byte string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xe3\\xb0\\x0b\\xcd\\x80\"", "rewritten_intent": "es is a bytearrary of the byte string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xe3\\xb0\\x0b\\xcd\\x80\"", "snippet": "es = bytearray(b\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xe3\\xb0\\x0b\\xcd\\x80\")"},{"intent": "if ZeroDivisionError exception is caught,", "rewritten_intent": "if ZeroDivisionError exception is caught,", "snippet": "except ZeroDivisionError :"},{"intent": "if zlib.error as e exception is raised,", "rewritten_intent": "if zlib.error as e exception is raised,", "snippet": "except zlib . error as e :"},{"intent": "except", "rewritten_intent": "except", "snippet": "except:"},{"intent": "executor is an instance of the class MigrationExecutor created with an argument: value under the DEFAULT_DB_ALIAS key of the connections dictionary.", "rewritten_intent": "executor is an instance of the class MigrationExecutor created with an argument: value under the DEFAULT_DB_ALIAS key of the connections dictionary.", "snippet": "executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )"},{"intent": "substitute them for app_label and migration_name, respectively.   executor is an instance of MigrationExecutor, created with value under the DEFAULT_DB_ALIAS key of the connections dictionary.", "rewritten_intent": "substitute them for app_label and migration_name, respectively.   executor is an instance of MigrationExecutor, created with value under the DEFAULT_DB_ALIAS key of the connections dictionary.", "snippet": "executor = MigrationExecutor ( connections [ DEFAULT_DB_ALIAS ] )"},{"intent": "call the function exhaust with an argument field_stream.", "rewritten_intent": "call the function exhaust with an argument field_stream.", "snippet": "exhaust ( field_stream )"},{"intent": "call the function exhaust with an argument self._input_data.", "rewritten_intent": "call the function exhaust with an argument self._input_data.", "snippet": "exhaust ( self . _input_data )"},{"intent": "call the function os.spawnve with os.P_WAIT, sys.executable, args and new_environ as arguments, substitute the result for exit_code.", "rewritten_intent": "call the function os.spawnve with os.P_WAIT, sys.executable, args and new_environ as arguments, substitute the result for exit_code.", "snippet": "exit_code = os . spawnve ( os . P_WAIT , sys . executable , args , new_environ )"},{"intent": "call the function restart_with_reloader, substitute the return value for exit_code.", "rewritten_intent": "call the function restart_with_reloader, substitute the return value for exit_code.", "snippet": "exit_code = restart_with_reloader ( )"},{"intent": "terminate the program with exit code 4", "rewritten_intent": "terminate the program with exit code 4", "snippet": "exit(4)"},{"intent": "terminate the program with exit code 5", "rewritten_intent": "terminate the program with exit code 5", "snippet": "exit(5)"},{"intent": "on the object under the db key of connections dictionary call the method ops.value_to_db_datetime with argument exp, substitute the result for the exp.", "rewritten_intent": "on the object under the db key of connections dictionary call the method ops.value_to_db_datetime with argument exp, substitute the result for the exp.", "snippet": "exp = connections [ db ] . ops . value_to_db_datetime ( exp )"},{"intent": "call the function datetime.fromtimestamp with argument timeout, substitute it for exp.", "rewritten_intent": "call the function datetime.fromtimestamp with argument timeout, substitute it for exp.", "snippet": "exp = datetime . fromtimestamp ( timeout )"},{"intent": "call the method test_runner.run_tests with an argument test_labels, substitute it for failures.", "rewritten_intent": "call the method test_runner.run_tests with an argument test_labels, substitute it for failures.", "snippet": "failures = test_runner . run_tests ( test_labels )"},{"intent": "FASTCGI_OPTIONS is a dictionary containing 16 initial entries: 'fcgi' for 'protocol', None for 'host', None for 'port',", "rewritten_intent": "FASTCGI_OPTIONS is a dictionary containing 16 initial entries: 'fcgi' for 'protocol', None for 'host', None for 'port',", "snippet": "FASTCGI_OPTIONS = {  'protocol' : 'fcgi' ,  'host' : None ,  'port' : None ,  'socket' : None ,  'method' : 'fork' ,  'daemonize' : None ,  'workdir' : '/' ,  'pidfile' : None ,  'maxspare' : 5 ,  'minspare' : 2 ,  'maxchildren' : 50 ,  'maxrequests' : 0 ,  'debug' : None ,  'outlog' : None ,  'errlog' : None ,  'umask' : None ,  }"},{"intent": "dir set to None as the arguments.   call the method tmpfile.mkstemp with suffix set to suffix, prefix set to prefix and dir set to dir, store the result in the fd and name, respective.", "rewritten_intent": "dir set to None as the arguments.   call the method tmpfile.mkstemp with suffix set to suffix, prefix set to prefix and dir set to dir, store the result in the fd and name, respective.", "snippet": "fd , name = tempfile . mkstemp ( suffix = suffix , prefix = prefix , dir = dir )"},{"intent": "join base an unpacked list paths into a string, get the absolute path in unicode representation of the result, substitute the result for final_path.", "rewritten_intent": "join base an unpacked list paths into a string, get the absolute path in unicode representation of the result, substitute the result for final_path.", "snippet": "final_path = abspathu ( join ( base , * paths ) )"},{"intent": "finally perform,", "rewritten_intent": "finally perform,", "snippet": "finally :"},{"intent": "call the method smart_split_re.finditer with an argument text, for every bit in result,", "rewritten_intent": "call the method smart_split_re.finditer with an argument text, for every bit in result,", "snippet": "for bit in smart_split_re . finditer ( text ) :"},{"intent": "split tag_re by self.template_string separator, for every bit in result,", "rewritten_intent": "split tag_re by self.template_string separator, for every bit in result,", "snippet": "for bit in tag_re . split ( self . template_string ) :"},{"intent": "iterate over bytes in array", "rewritten_intent": "iterate over bytes in array", "snippet": "for byte in array:"},{"intent": "iterate bytes in list lst", "rewritten_intent": "iterate bytes in list lst", "snippet": "for byte in lst:"},{"intent": "iterate byte in the list lst1", "rewritten_intent": "iterate byte in the list lst1", "snippet": "for byte in lst1:"},{"intent": "iterate byte in lst2", "rewritten_intent": "iterate byte in lst2", "snippet": "for byte in lst2:"},{"intent": "iterate over bytes in lst3", "rewritten_intent": "iterate over bytes in lst3", "snippet": "for byte in lst3_"},{"intent": "for every bytes in stream,", "rewritten_intent": "for every bytes in stream,", "snippet": "for bytes in stream :"},{"intent": "for every c in lineno_comment_map dictionary value under the comment_lineno_cache key,", "rewritten_intent": "for every c in lineno_comment_map dictionary value under the comment_lineno_cache key,", "snippet": "for c in lineno_comment_map [ comment_lineno_cache ] :"},{"intent": "for every ch and escaped in input_iter,", "rewritten_intent": "for every ch and escaped in input_iter,", "snippet": "for ch , escaped in input_iter :"},{"intent": "for every ch in input_iter,", "rewritten_intent": "for every ch in input_iter,", "snippet": "for ch in input_iter :"},{"intent": "for every char in fmt,", "rewritten_intent": "for every char in fmt,", "snippet": "for char in fmt :"},{"intent": "iterate char over str", "rewritten_intent": "iterate char over str", "snippet": "for char in str:"},{"intent": "for every i and widget in enumerated iterable self.widgets,", "rewritten_intent": "for every i and widget in enumerated iterable self.widgets,", "snippet": "for i , widget in enumerate ( self . widgets ) :"},{"intent": "for every i and word in enumerated iterable words,", "rewritten_intent": "for every i and word in enumerated iterable words,", "snippet": "for i , word in enumerate ( words ) :"},{"intent": "loop through sc3 converted into a bytearray", "rewritten_intent": "loop through sc3 converted into a bytearray", "snippet": "for i in bytearray(sc3):"},{"intent": "Make a for loop for each i in the bytearray of sc4", "rewritten_intent": "Make a for loop for each i in the bytearray of sc4", "snippet": "for i in bytearray(sc4):"},{"intent": "declare a for loop with an iterator i for each element in sh starting from index 4 converted into a bytearray", "rewritten_intent": "declare a for loop with an iterator i for each element in sh starting from index 4 converted into a bytearray", "snippet": "for i in bytearray(sh)[4:]:"},{"intent": "iterate i in lst", "rewritten_intent": "iterate i in lst", "snippet": "for i in lst:"},{"intent": "iterate i over 200 random numbers between 1 and 256", "rewritten_intent": "iterate i over 200 random numbers between 1 and 256", "snippet": "for i in random.sample(range(1, 256), 200):"},{"intent": "for every i in range of integers from integer 0 to the length of pieces decremented by one, with step of integer 3,", "rewritten_intent": "for every i in range of integers from integer 0 to the length of pieces decremented by one, with step of integer 3,", "snippet": "for i in range ( 0 , len ( pieces ) - 1 , 3 ) :"},{"intent": "call the method self.total_form_count, for every i in sequence of integers, from 0 to the previous result,", "rewritten_intent": "call the method self.total_form_count, for every i in sequence of integers, from 0 to the previous result,", "snippet": "for i in range ( 0 , self . total_form_count ( ) ) :"},{"intent": "for every i in range of integers from 0 to length of result, not included,", "rewritten_intent": "for every i in range of integers from 0 to length of result, not included,", "snippet": "for i in range ( len ( result ) ) :"},{"intent": "iterate i over a sequence of number from 0 to 5", "rewritten_intent": "iterate i over a sequence of number from 0 to 5", "snippet": "for i in range(0, 5):"},{"intent": "initialize a for loop with an iterator i with a range starting from 0 until the length of shellcode_original with a step of 8", "rewritten_intent": "initialize a for loop with an iterator i with a range starting from 0 until the length of shellcode_original with a step of 8", "snippet": "for i in range(0, len(shellcode_original), 8):"},{"intent": "initialize a for loop with an iterator i with a range starting from 0 until the value of stop", "rewritten_intent": "initialize a for loop with an iterator i with a range starting from 0 until the value of stop", "snippet": "for i in range(0, stop):"},{"intent": "loop over shellcode", "rewritten_intent": "loop over shellcode", "snippet": "for i in shellcode:"},{"intent": "zip elements of inner_result and inner_args into a list of tuples, for every i_item and i_args in the result,", "rewritten_intent": "zip elements of inner_result and inner_args into a list of tuples, for every i_item and i_args in the result,", "snippet": "for i_item , i_args in zip ( inner_result , inner_args ) :"},{"intent": "for every index in range of integers from 0 to length of hextets, not included,", "rewritten_intent": "for every index in range of integers from 0 to length of hextets, not included,", "snippet": "for index in range ( len ( hextets ) ) :"},{"intent": "for every j in range of integers from 0 to iterations converted to an integer,", "rewritten_intent": "for every j in range of integers from 0 to iterations converted to an integer,", "snippet": "for j in xrange ( int ( iterations ) ) :"},{"intent": "for every x in argset,", "rewritten_intent": "for every x in argset,", "snippet": "for x in argset :"},{"intent": "Make a for loop for each x in the bytearray of sh1", "rewritten_intent": "Make a for loop for each x in the bytearray of sh1", "snippet": "for x in bytearray(sh1) :"},{"intent": "loop through sh2 converted into a bytearray", "rewritten_intent": "loop through sh2 converted into a bytearray", "snippet": "for x in bytearray(sh2) :"},{"intent": "loop x over the bytearray of the string sh3", "rewritten_intent": "loop x over the bytearray of the string sh3", "snippet": "for x in bytearray(sh3) :"},{"intent": "for every x is the range of integers from level to the integer 2, in the reversed order,", "rewritten_intent": "for every x is the range of integers from level to the integer 2, in the reversed order,", "snippet": "for x in range ( level , 1 , - 1 ) :"},{"intent": "substitute force_bytes for force_str.", "rewritten_intent": "substitute force_bytes for force_str.", "snippet": "force_str = force_bytes"},{"intent": "get the value under the 'format' key of the options dictionary, substitute the result for format.", "rewritten_intent": "get the value under the 'format' key of the options dictionary, substitute the result for format.", "snippet": "format = options . get ( 'format' )"},{"intent": "append encoded_instruction_in_hex and string \",\" to the variable format_0x", "rewritten_intent": "append encoded_instruction_in_hex and string \",\" to the variable format_0x", "snippet": "format_0x += encoded_instruction_in_hex+\",\""},{"intent": "initialize format_0x to an empty string", "rewritten_intent": "initialize format_0x to an empty string", "snippet": "format_0x = \"\""},{"intent": "format key is an empty string.", "rewritten_intent": "format key is an empty string.", "snippet": "format_key = ''"},{"intent": "format_slash_x is an empty string \"\"", "rewritten_intent": "format_slash_x is an empty string \"\"", "snippet": "format_slash_x = \"\""},{"intent": "substitute second element of bits without the first and last element for format_string.", "rewritten_intent": "substitute second element of bits without the first and last element for format_string.", "snippet": "format_string = bits [ 1 ] [ 1 : - 1 ]"},{"intent": "call the function re.sub with 3 arguments: raw string \"\\\\.|.\", escape_quotes and tok without the first and last element,", "rewritten_intent": "call the function re.sub with 3 arguments: raw string \"\\\\.|.\", escape_quotes and tok without the first and last element,", "snippet": "guts = re . sub ( r\"\\\\.|.\" , escape_quotes , tok [ 1 : - 1 ] )"},{"intent": "h is the sum of y and x modulo 256", "rewritten_intent": "h is the sum of y and x modulo 256", "snippet": "h = (y + x)%256"},{"intent": "substitute self.handle_app for handle_app.", "rewritten_intent": "substitute self.handle_app for handle_app.", "snippet": "handle_app = self . handle_app"},{"intent": "call the function digest, substitute the filed digest_size of the result for hlen.", "rewritten_intent": "call the function digest, substitute the filed digest_size of the result for hlen.", "snippet": "hlen = digest ( ) . digest_size"},{"intent": "if return value of the self.is_secure is false and server port is not equal to string '80',   join host and server_port into a string, separated with ':', substitute the result for host.", "rewritten_intent": "if return value of the self.is_secure is false and server port is not equal to string '80',   join host and server_port into a string, separated with ':', substitute the result for host.", "snippet": "host = '%s:%s' % ( host , server_port )"},{"intent": "result of the function force_text called with an argument title, and with sublist, append the string to output.   increment i by 1.", "rewritten_intent": "result of the function force_text called with an argument title, and with sublist, append the string to output.   increment i by 1.", "snippet": "i += 1"},{"intent": "increment i by 1", "rewritten_intent": "increment i by 1", "snippet": "i += 1"},{"intent": "add 1 to the variable i", "rewritten_intent": "add 1 to the variable i", "snippet": "i +=1"},{"intent": "i is integer 0.", "rewritten_intent": "i is integer 0.", "snippet": "i = 0"},{"intent": "substitute self.pointer for i.", "rewritten_intent": "substitute self.pointer for i.", "snippet": "i = self . pointer"},{"intent": "initialize i as an integer", "rewritten_intent": "initialize i as an integer", "snippet": "i=0"},{"intent": "I18N_MODIFIED is integer 2", "rewritten_intent": "I18N_MODIFIED is integer 2", "snippet": "I18N_MODIFIED = 2"},{"intent": "if character '=' is contained in x,", "rewritten_intent": "if character '=' is contained in x,", "snippet": "if \"=\" in x :"},{"intent": "if string \"0x1,\" is in format_0x", "rewritten_intent": "if string \"0x1,\" is in format_0x", "snippet": "if \"0x1,\" in format_0x:"},{"intent": "if string 'help' is contained in options,", "rewritten_intent": "if string 'help' is contained in options,", "snippet": "if \"help\" in options :"},{"intent": "strings \"Please submit %d or fewer forms.\", \"Please submit %d or fewer forms.\" and self.max_num,   where '%d' is replaced with self.max_num, and code as a string 'too_many_forms'.   if self.validate_min is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,", "rewritten_intent": "strings \"Please submit %d or fewer forms.\", \"Please submit %d or fewer forms.\" and self.max_num,   where '%d' is replaced with self.max_num, and code as a string 'too_many_forms'.   if self.validate_min is true, and length of self.deleted_forms subtracted from the return value of the method self.total_form_count,", "snippet": "if ( self . validate_min and  self . total_form_count ( ) - len ( self . deleted_forms ) < self . min_num ) :"},{"intent": "check if the length of the variable a is not even", "rewritten_intent": "check if the length of the variable a is not even", "snippet": "if (len(a)%2)!=0:"},{"intent": "check if the variable r xor shellcode_original at index i is not equal to 0 and r bitwise xor shellcode_original at index i+1 does not equal 0 and r bitwise xor shellcode_original at index i+2 does not equal 0 and r bitwise xor shellcode_original at index i+3 does not equal 0", "rewritten_intent": "check if the variable r xor shellcode_original at index i is not equal to 0 and r bitwise xor shellcode_original at index i+1 does not equal 0 and r bitwise xor shellcode_original at index i+2 does not equal 0 and r bitwise xor shellcode_original at index i+3 does not equal 0", "snippet": "if (r ^ shellcode_original[i] != 0) and (r ^ shellcode_original[i+1] != 0) and (r ^ shellcode_original[i+2] != 0) and (r ^ shellcode_original[i+3] != 0):"},{"intent": "if response.status_code is lesser than integer 200 and grater or equal than 100, or response.status_code equals to integer 204 or 304,", "rewritten_intent": "if response.status_code is lesser than integer 200 and grater or equal than 100, or response.status_code equals to integer 204 or 304,", "snippet": "if 100 <= response . status_code < 200 or response . status_code in ( 204 , 304 ) :"},{"intent": "check if variable a is less than the value of 1", "rewritten_intent": "check if variable a is less than the value of 1", "snippet": "if a < 1:"},{"intent": "if accept_lang equals '*',", "rewritten_intent": "if accept_lang equals '*',", "snippet": "if accept_lang == '*' :"},{"intent": "if changes is true,", "rewritten_intent": "if changes is true,", "snippet": "if changes :"},{"intent": "if cookie is an empty string,", "rewritten_intent": "if cookie is an empty string,", "snippet": "if cookie == '' :"},{"intent": "if count does not equals to integer 0,", "rewritten_intent": "if count does not equals to integer 0,", "snippet": "if count != 0 :"},{"intent": "if count modulo 2 is not equal to zero", "rewritten_intent": "if count modulo 2 is not equal to zero", "snippet": "if count % 2 != 0:"},{"intent": "if count2 does not equals to integer 0,", "rewritten_intent": "if count2 does not equals to integer 0,", "snippet": "if count2 != 0 :"},{"intent": "if counter modulo 3 is equal to 0", "rewritten_intent": "if counter modulo 3 is equal to 0", "snippet": "if counter % 3 == 0 :"},{"intent": "if not csrf_token is None.   if csrf_token is true,", "rewritten_intent": "if not csrf_token is None.   if csrf_token is true,", "snippet": "if csrf_token :"},{"intent": "bring integer 36 to the power of factor, if i is smaller than the result,", "rewritten_intent": "bring integer 36 to the power of factor, if i is smaller than the result,", "snippet": "if i < 36 ** factor :"},{"intent": "if variable i is lower than the length of chunk", "rewritten_intent": "if variable i is lower than the length of chunk", "snippet": "if i < len(chunk):"},{"intent": "if i equals to integer 0 and", "rewritten_intent": "if i equals to integer 0 and", "snippet": "if i == 0 and not is_writable ( npath ( base_path + '.mo' ) ) :"},{"intent": "convert to integer base 16 the string shellcode encoded to hex and check if it is equal to i", "rewritten_intent": "convert to integer base 16 the string shellcode encoded to hex and check if it is equal to i", "snippet": "if i == int(shellcode.encode('hex'), 16):"},{"intent": "if length of x is equal to integer 0,", "rewritten_intent": "if length of x is equal to integer 0,", "snippet": "if len ( x ) == 0 :"},{"intent": "if len_values is smaller than integer 1,", "rewritten_intent": "if len_values is smaller than integer 1,", "snippet": "if len_values < 1 :"},{"intent": "if the length of sys.argv is not equal to 3", "rewritten_intent": "if the length of sys.argv is not equal to 3", "snippet": "if len(sys.argv) != 3:"},{"intent": "if the number of  command-line arguments is lower than 10", "rewritten_intent": "if the number of  command-line arguments is lower than 10", "snippet": "if len(sys.argv) < 10:"},{"intent": "Check if the length of x is greater than 4", "rewritten_intent": "Check if the length of x is greater than 4", "snippet": "if len(x) > 4:"},{"intent": "if the length of z is not divisable by 4", "rewritten_intent": "if the length of z is not divisable by 4", "snippet": "if len(z) % 4 != 0:"},{"intent": "if level is true,", "rewritten_intent": "if level is true,", "snippet": "if level :"},{"intent": "check if matched_a_byte is True", "rewritten_intent": "check if matched_a_byte is True", "snippet": "if matched_a_byte:"},{"intent": "if mtime is different than the value of dictionary _mtimes under the key filename,", "rewritten_intent": "if mtime is different than the value of dictionary _mtimes under the key filename,", "snippet": "if mtime != _mtimes [ filename ] :"},{"intent": "if match is false or call to the method match.group with an argument integer 1 evaluates to boolean false,", "rewritten_intent": "if match is false or call to the method match.group with an argument integer 1 evaluates to boolean false,", "snippet": "if not match or not match . group ( 1 ) :"},{"intent": "check if matched_a_byte is not True", "rewritten_intent": "check if matched_a_byte is not True", "snippet": "if not matched_a_byte:"},{"intent": "if p_pattern starts with a string '^',", "rewritten_intent": "if p_pattern starts with a string '^',", "snippet": "if p_pattern . startswith ( '^' ) :"},{"intent": "check if the variable padding does not equal 0", "rewritten_intent": "check if the variable padding does not equal 0", "snippet": "if padding:"},{"intent": "if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true,", "rewritten_intent": "if role is contained in value under the NOCOLOR_PALETTE key of the PALETTES dictionary and definition is true,", "snippet": "if role in PALETTES [ NOCOLOR_PALETTE ] and definition :"},{"intent": "if root is true,", "rewritten_intent": "if root is true,", "snippet": "if root :"},{"intent": "call the method router.allow_migrate with 2 arguments: self.using and obj.object.__class__, if it evaluates to true,", "rewritten_intent": "call the method router.allow_migrate with 2 arguments: self.using and obj.object.__class__, if it evaluates to true,", "snippet": "if router . allow_migrate ( self . using , obj . object . __class__ ) :"},{"intent": "if fifth and sixth elements of row are None,", "rewritten_intent": "if fifth and sixth elements of row are None,", "snippet": "if row [ 4 ] is None or row [ 5 ] is None :"},{"intent": "on the result call the method encode with the arguments encoding and errors, return the result.   if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True,", "rewritten_intent": "on the result call the method encode with the arguments encoding and errors, return the result.   if strings_only and boolean return value of the call to the function is_protected_type for argument s are boolean True,", "snippet": "if strings_only and is_protected_type ( s ) :"},{"intent": "check if the bytes object containing my_value packed according to the format string unsigned char is equal to the variable z", "rewritten_intent": "check if the bytes object containing my_value packed according to the format string unsigned char is equal to the variable z", "snippet": "if struct.pack('B', my_value ^ i) == z:"},{"intent": "if sub_match is true,", "rewritten_intent": "if sub_match is true,", "snippet": "if sub_match :"},{"intent": "if total is not equivalent to 2", "rewritten_intent": "if total is not equivalent to 2", "snippet": "if total != 2:"},{"intent": "if with_base_fields is true,", "rewritten_intent": "if with_base_fields is true,", "snippet": "if with_base_fields :"},{"intent": "if words is not empty and length is smaller than or equal to integer 0,", "rewritten_intent": "if words is not empty and length is smaller than or equal to integer 0,", "snippet": "if words and length <= 0 :"},{"intent": "if x equals to integer 0,", "rewritten_intent": "if x equals to integer 0,", "snippet": "if x == 0 :"},{"intent": "check if x is equal to the element n in shellcode converted into a bytearray", "rewritten_intent": "check if x is equal to the element n in shellcode converted into a bytearray", "snippet": "if x == bytearray(shellcode)[n]:"},{"intent": "check if xxx is greater or equals to 0", "rewritten_intent": "check if xxx is greater or equals to 0", "snippet": "if xxx >= 0:"},{"intent": "if y, m and d are all equal to string '0',", "rewritten_intent": "if y, m and d are all equal to string '0',", "snippet": "if y == m == d == \"0\" :"},{"intent": "if z is equal to byte", "rewritten_intent": "if z is equal to byte", "snippet": "if z == byte:"},{"intent": "convert the string byte to hex, then cast the result to int16 and then check if it is equal to variable z", "rewritten_intent": "convert the string byte to hex, then cast the result to int16 and then check if it is equal to variable z", "snippet": "if z == int(byte.encode('hex'), 16):"},{"intent": "import module struc.", "rewritten_intent": "import module struc.", "snippet": "import struct"},{"intent": "import module subprocess.", "rewritten_intent": "import module subprocess.", "snippet": "import subprocess"},{"intent": "import module sys.", "rewritten_intent": "import module sys.", "snippet": "import sys"},{"intent": "import module tarfile.", "rewritten_intent": "import module tarfile.", "snippet": "import tarfile"},{"intent": "import module tempfile.", "rewritten_intent": "import module tempfile.", "snippet": "import tempfile"},{"intent": "inputs is an empty list.", "rewritten_intent": "inputs is an empty list.", "snippet": "inputs = [ ]"},{"intent": "substitute complain for insert.", "rewritten_intent": "substitute complain for insert.", "snippet": "insert = complain"},{"intent": "generate a random integer between 1 and 2 then convert the random number into a hexadecimal and store the value in insertByte", "rewritten_intent": "generate a random integer between 1 and 2 then convert the random number into a hexadecimal and store the value in insertByte", "snippet": "insertByte = hex(random.randint(1,2))"},{"intent": "and unpacked dictionary kwargs.   instance.keyOrder is an empty list.", "rewritten_intent": "and unpacked dictionary kwargs.   instance.keyOrder is an empty list.", "snippet": "instance . keyOrder = [ ]"},{"intent": "substitute _itervalues for itervalues.", "rewritten_intent": "substitute _itervalues for itervalues.", "snippet": "itervalues = _itervalues"},{"intent": "compute the sum of i and magic modulus 256 and store in the variable j", "rewritten_intent": "compute the sum of i and magic modulus 256 and store in the variable j", "snippet": "j = (i + magic)%256"},{"intent": "bring integer 36 to the power of factor, substitute the result for j.", "rewritten_intent": "bring integer 36 to the power of factor, substitute the result for j.", "snippet": "j = 36 ** factor"},{"intent": "call the function escape with an argument lead, substitute the result for lead, call the function escape with an argument trail,", "rewritten_intent": "call the function escape with an argument lead, substitute the result for lead, call the function escape with an argument trail,", "snippet": "lead , trail = escape ( lead ) , escape ( trail )"},{"intent": "sum lead and opening, substitute the result for lead.", "rewritten_intent": "sum lead and opening, substitute the result for lead.", "snippet": "lead = lead + opening"},{"intent": "set leader to the second command-line argument after casting it to an int", "rewritten_intent": "set leader to the second command-line argument after casting it to an int", "snippet": "leader = int(sys.argv[2])"},{"intent": "substitute length of values for len_values.", "rewritten_intent": "substitute length of values for len_values.", "snippet": "len_values = len ( values )"},{"intent": "print the length of array of bytes of the string var", "rewritten_intent": "print the length of array of bytes of the string var", "snippet": "len(bytearray(var)))"},{"intent": "substitute arg converted into a integer for length.", "rewritten_intent": "substitute arg converted into a integer for length.", "snippet": "length = int ( arg )"},{"intent": "store in the variable length_format_0x the number of \",\" occurences in format_0x", "rewritten_intent": "store in the variable length_format_0x the number of \",\" occurences in format_0x", "snippet": "length_format_0x = format_0x.count(',')"},{"intent": "increment level by one.", "rewritten_intent": "increment level by one.", "snippet": "level += 1"},{"intent": "Declare an empty bytes literal and store it in the variable lit", "rewritten_intent": "Declare an empty bytes literal and store it in the variable lit", "snippet": "lit = b\"\""},{"intent": "m2m_value is an lambda function with value as an argument, return value is the result of the method value.natural_key.", "rewritten_intent": "m2m_value is an lambda function with value as an argument, return value is the result of the method value.natural_key.", "snippet": "m2m_value = lambda value : value . natural_key ( )"},{"intent": "match is boolean True.", "rewritten_intent": "match is boolean True.", "snippet": "match = True"},{"intent": "matches is boolean False.", "rewritten_intent": "matches is boolean False.", "snippet": "matches = False"},{"intent": "multiply delta.days with an integer 86400 add to the result delta.seconds, if the result is greater than integer 0,", "rewritten_intent": "multiply delta.days with an integer 86400 add to the result delta.seconds, if the result is greater than integer 0,", "snippet": "max_age = max ( 0 , delta . days * 86400 + delta . seconds )"},{"intent": "intialize the variable max_bits to an integer with the value of 8", "rewritten_intent": "intialize the variable max_bits to an integer with the value of 8", "snippet": "max_bits = 8"},{"intent": "call the mw_class function, store the result in the mw_instance.", "rewritten_intent": "call the mw_class function, store the result in the mw_instance.", "snippet": "mw_instance = mw_class ( )"},{"intent": "n is equal to n bitwise and masked width", "rewritten_intent": "n is equal to n bitwise and masked width", "snippet": "n &= mask(width)"},{"intent": "Convert the value of y to a hexadecimal then add it to the variable n", "rewritten_intent": "Convert the value of y to a hexadecimal then add it to the variable n", "snippet": "n += '%02x' % y"},{"intent": "increase n by 1", "rewritten_intent": "increase n by 1", "snippet": "n += 1"},{"intent": "get the attribute '__name__' from the getattr, if it exists substitute it for m, if not, m is None.", "rewritten_intent": "get the attribute '__name__' from the getattr, if it exists substitute it for m, if not, m is None.", "snippet": "n = getattr ( lookup_view , '__name__' , None )"},{"intent": "convert idx to an integer, substitute it or n.", "rewritten_intent": "convert idx to an integer, substitute it or n.", "snippet": "n = int ( idx )"},{"intent": "initialize an empty string variable called name", "rewritten_intent": "initialize an empty string variable called name", "snippet": "name = \"\""},{"intent": "in the variable encoded replace all occurrences of \"\\\\x\" with \",0x\"", "rewritten_intent": "in the variable encoded replace all occurrences of \"\\\\x\" with \",0x\"", "snippet": "nasm = encoded.replace(\"\\\\x\", \",0x\")"},{"intent": "set the variable nasm to all the elements in the variable nasm starting from index 1 until the end", "rewritten_intent": "set the variable nasm to all the elements in the variable nasm starting from index 1 until the end", "snippet": "nasm = nasm[1:]"},{"intent": "call the value.natural_key method, substitute the result for natural.", "rewritten_intent": "call the value.natural_key method, substitute the result for natural.", "snippet": "natural = value . natural_key ( )"},{"intent": "call the method obj.natural_key, substitute the result for natural_key.", "rewritten_intent": "call the method obj.natural_key, substitute the result for natural_key.", "snippet": "natural_key = obj . natural_key ( )"},{"intent": "set the variable nbits to the second command-line argument converted to integer", "rewritten_intent": "set the variable nbits to the second command-line argument converted to integer", "snippet": "nbits = int(sys.argv[2])"},{"intent": "append orig_file to string '#: ', substitute it for new.", "rewritten_intent": "append orig_file to string '#: ', substitute it for new.", "snippet": "new = '#: ' + orig_file"},{"intent": "set the variable new to not i bitwise and 0xff", "rewritten_intent": "set the variable new to not i bitwise and 0xff", "snippet": "new = ~i & 0xff"},{"intent": "set new to new xor the variable xor", "rewritten_intent": "set new to new xor the variable xor", "snippet": "new = new ^ xor"},{"intent": "set new to new shifted left by shift", "rewritten_intent": "set new to new shifted left by shift", "snippet": "new = new << shift"},{"intent": "ORDERING_FIELD_NAME is a string 'ORDER'.", "rewritten_intent": "ORDERING_FIELD_NAME is a string 'ORDER'.", "snippet": "ORDERING_FIELD_NAME = 'ORDER'"},{"intent": "set orig to an empty list", "rewritten_intent": "set orig to an empty list", "snippet": "orig = []"},{"intent": "call the method cls.__dict__.copy substitute the result for orig_vars.", "rewritten_intent": "call the method cls.__dict__.copy substitute the result for orig_vars.", "snippet": "orig_vars = cls . __dict__ . copy ( )"},{"intent": "append i to the variable orig", "rewritten_intent": "append i to the variable orig", "snippet": "orig.append(i)"},{"intent": "join tmpdir and sting 'original' into a file path name, substitute it for original_path.", "rewritten_intent": "join tmpdir and sting 'original' into a file path name, substitute it for original_path.", "snippet": "original_path = os . path . join ( tmpdir , 'original' )"},{"intent": "convert the value x to a hexadecimal and append it to the string original_shellcode followed by the string ','", "rewritten_intent": "convert the value x to a hexadecimal and append it to the string original_shellcode followed by the string ','", "snippet": "original_shellcode += '%02x, ' %x"},{"intent": "close the process with an argument 0.", "rewritten_intent": "close the process with an argument 0.", "snippet": "os . _exit ( 0 )"},{"intent": "exit the program with the code integer 1.", "rewritten_intent": "exit the program with the code integer 1.", "snippet": "os . _exit ( 1 )"},{"intent": "feed data to the parser p.", "rewritten_intent": "feed data to the parser p.", "snippet": "p . feed ( data )"},{"intent": "P is a string '\\03335m'", "rewritten_intent": "P is a string '\\03335m'", "snippet": "P = '\\03335m'"},{"intent": "calculate negative length of s, by modulus integer 4, use the result as the number of '=' characters to be stored in pad.", "rewritten_intent": "calculate negative length of s, by modulus integer 4, use the result as the number of '=' characters to be stored in pad.", "snippet": "pad = b'=' * ( - len ( s ) % 4 )"},{"intent": "assign the variable padding 4 minus the length of shellcode_original modulus 4", "rewritten_intent": "assign the variable padding 4 minus the length of shellcode_original modulus 4", "snippet": "padding = 4 - (len(shellcode_original) % 4)"},{"intent": "remove 3 elements from r starting at the index 23.", "rewritten_intent": "remove 3 elements from r starting at the index 23.", "snippet": "r = r [ : 23 ] + r [ 26 : ]"},{"intent": "set the variable r to a random integer between 10 and 255", "rewritten_intent": "set the variable r to a random integer between 10 and 255", "snippet": "r = random.randint(10,255)"},{"intent": "raise an exception.", "rewritten_intent": "raise an exception.", "snippet": "raise"},{"intent": "RAISE_ERROR is an instance of object class.", "rewritten_intent": "RAISE_ERROR is an instance of object class.", "snippet": "RAISE_ERROR = object ( )"},{"intent": "random is an instance of random.SystemRandom class.", "rewritten_intent": "random is an instance of random.SystemRandom class.", "snippet": "random = random . SystemRandom ( )"},{"intent": "assign the first two elements of op to res", "rewritten_intent": "assign the first two elements of op to res", "snippet": "res = op[0:2]"},{"intent": "increment res by element of to_digit at the digit index.", "rewritten_intent": "increment res by element of to_digit at the digit index.", "snippet": "res = to_digits [ digit ] + res"},{"intent": "res is x xor y", "rewritten_intent": "res is x xor y", "snippet": "res = x ^ y"},{"intent": "right shift by val2 the and operation between z and val1 and assign it to res1", "rewritten_intent": "right shift by val2 the and operation between z and val1 and assign it to res1", "snippet": "res1 = ((z & val1) >> val2)"},{"intent": "perform the and operation between x shifted right by val2 and val1 and assign the result to res1", "rewritten_intent": "perform the and operation between x shifted right by val2 and val1 and assign the result to res1", "snippet": "res1 = (x >> val2) & (val1)"},{"intent": "assign the variable res2 variable x bitwise and val1", "rewritten_intent": "assign the variable res2 variable x bitwise and val1", "snippet": "res2 = (x & val1)"},{"intent": "assign res2 the value of res2 left shift by max_bits minus val2", "rewritten_intent": "assign res2 the value of res2 left shift by max_bits minus val2", "snippet": "res2 = res2 >> (max_bits-val2)"},{"intent": "left shift x by max_bits plus val2 and assign the result to res2", "rewritten_intent": "left shift x by max_bits plus val2 and assign the result to res2", "snippet": "res2 = x << (max_bits + val2)"},{"intent": "result is the concatenation of the string \"\\\\x\", the hexadecimal value of the length of array of bytes of the variable sc and the string ','", "rewritten_intent": "result is the concatenation of the string \"\\\\x\", the hexadecimal value of the length of array of bytes of the variable sc and the string ','", "snippet": "result = \"\\\\x%02x,\" % len(bytearray(sc))"},{"intent": "return a tuple with 3 elements: TYPE, outdict and stream.", "rewritten_intent": "return a tuple with 3 elements: TYPE, outdict and stream.", "snippet": "return ( TYPE , outdict , stream )"},{"intent": "return the result of bitwise left shift of n and temp bitwise and mask_value bitwise or with the bitwise right shift of n by the subtraction of temp from width", "rewritten_intent": "return the result of bitwise left shift of n and temp bitwise and mask_value bitwise or with the bitwise right shift of n by the subtraction of temp from width", "snippet": "return ((n << temp) & mask_value) | (n >> (width - temp))"},{"intent": "return the result of bitwise right shift of n and rotations xor the bitwise left shift of n and subtract rotations from width bitwise and mask_value", "rewritten_intent": "return the result of bitwise right shift of n and rotations xor the bitwise left shift of n and subtract rotations from width bitwise and mask_value", "snippet": "return (n >> rotations) ^ ((n << (width - rotations)) & mask_value)"},{"intent": "return n right shift by rotations bitwise or with the result of n left shift by width bitwise and mask_value", "rewritten_intent": "return n right shift by rotations bitwise or with the result of n left shift by width bitwise and mask_value", "snippet": "return [  Warning (  \"BooleanField does not have a default value.\" ,  hint = ( \"Django 1.6 changed the default value of BooleanField from False to None. \"  \"See https://docs.djangoproject.com/en/1.6/ref/models/fields/#booleanfield \"  \"for more information.\" ) ,  obj = field ,  id = '1_6.W002' ,  )  for field in problem_fields  ]"},{"intent": "return 2 to the power of n minus 1", "rewritten_intent": "return 2 to the power of n minus 1", "snippet": "return 2**n - 1"},{"intent": "return i.", "rewritten_intent": "return i.", "snippet": "return i"},{"intent": "if filename ends with string '.mo' return I18N_MODIFIED, otherwise return FILE_MODIFIED.", "rewritten_intent": "if filename ends with string '.mo' return I18N_MODIFIED, otherwise return FILE_MODIFIED.", "snippet": "return I18N_MODIFIED if filename . endswith ( '.mo' ) else FILE_MODIFIED"},{"intent": "return msgs.", "rewritten_intent": "return msgs.", "snippet": "return msgs"},{"intent": "return name.", "rewritten_intent": "return name.", "snippet": "return name"},{"intent": "call the method self.expression, substitute the result for retval.", "rewritten_intent": "call the method self.expression, substitute the result for retval.", "snippet": "retval = self . expression ( )"},{"intent": "substitute element at self.pos index of self.tokens for retval.", "rewritten_intent": "substitute element at self.pos index of self.tokens for retval.", "snippet": "retval = self . tokens [ self . pos ]"},{"intent": "store in rev_suplx the reverse of the array suplX", "rewritten_intent": "store in rev_suplx the reverse of the array suplX", "snippet": "rev_suplx = suplX[::-1]"},{"intent": "substitute complain for reverse.", "rewritten_intent": "substitute complain for reverse.", "snippet": "reverse = complain"},{"intent": "and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other, for '__lt__',   list with 3 tuples: tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other,   or self is equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than or equal to other,   or self is not equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other, for '__le__',   list with 3 tuples: tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other, for '__gt__',   and list with 3 tuples: tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is not greater than or is not equal to other,   or self is equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than or not equal to other,   or self is not equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than or equal to other, for '__ge__',   convert cls to a dictionary, convert the result into a set and convert convert into a set, roots is a set of differences of the two previous sets.", "rewritten_intent": "and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than other, for '__lt__',   list with 3 tuples: tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other,   or self is equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is lesser than or equal to other,   or self is not equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is lesser than or equal to other, for '__le__',   list with 3 tuples: tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other or self is equal to other,   tuple with 2 elements: string '__ge__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than other or self is equal to other,   tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than other, for '__gt__',   and list with 3 tuples: tuple with 2 elements: string '__le__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is not greater than or is not equal to other,   or self is equal to other, tuple with 2 elements: string '__gt__',   and lambda function with 2 arguments: self and other, resulting boolean True if self is greater than or not equal to other,   or self is not equal to other, tuple with 2 elements: string '__lt__',   and lambda function with 2 arguments: self and other, resulting boolean False if self is greater than or equal to other, for '__ge__',   convert cls to a dictionary, convert the result into a set and convert convert into a set, roots is a set of differences of the two previous sets.", "snippet": "roots = set ( dir ( cls ) ) & set ( convert )"},{"intent": "ROT is the first command-line argument converted to integer", "rewritten_intent": "ROT is the first command-line argument converted to integer", "snippet": "ROT = int(sys.argv[1])"},{"intent": "assign rox_encoded_instruction res1 bitwise or res2", "rewritten_intent": "assign rox_encoded_instruction res1 bitwise or res2", "snippet": "rox_encoded_instruction = res1 | res2"},{"intent": "append string '\\\\x' followed by the conversion in hex of 0xFF to the string s", "rewritten_intent": "append string '\\\\x' followed by the conversion in hex of 0xFF to the string s", "snippet": "s += '\\\\x%02x' % 0xAA"},{"intent": "set s to the string 'hello'", "rewritten_intent": "set s to the string 'hello'", "snippet": "s = 'hello'"},{"intent": "assign sb the hexadecimal value of leader casted into an int16", "rewritten_intent": "assign sb the hexadecimal value of leader casted into an int16", "snippet": "sb = int(hex(leader),16)"},{"intent": "append to sc a bytes object containing the value val2 packed according to the format string unsigned char", "rewritten_intent": "append to sc a bytes object containing the value val2 packed according to the format string unsigned char", "snippet": "sc.append(struct.pack('B', val2))"},{"intent": "call the function urlsplit with an argument url, assign the result to scheme, netloc, path, query and fragment, respectively.", "rewritten_intent": "call the function urlsplit with an argument url, assign the result to scheme, netloc, path, query and fragment, respectively.", "snippet": "scheme , netloc , path , query , fragment = urlsplit ( url )"},{"intent": "call the method shell.mainloop.", "rewritten_intent": "call the method shell.mainloop.", "snippet": "shell . mainloop ( )"},{"intent": "convert shellcode to a bytearray and store its length in the variable shell_n", "rewritten_intent": "convert shellcode to a bytearray and store its length in the variable shell_n", "snippet": "shell_len = len(bytearray(shellcode))"},{"intent": "concatenate in the string shellcode the concatenation of '\\\\x' and the string byte encoded in hexadecimal", "rewritten_intent": "concatenate in the string shellcode the concatenation of '\\\\x' and the string byte encoded in hexadecimal", "snippet": "shellcode += '\\\\x' + byte.encode('hex')"},{"intent": "Convert the value of x bitwise and 0xff to a hexadecimal then add it to the variable shellcode", "rewritten_intent": "Convert the value of x bitwise and 0xff to a hexadecimal then add it to the variable shellcode", "snippet": "shellcode += \"%02x\" %(x & 0xff)"},{"intent": "remove the first 3 items from shellcode", "rewritten_intent": "remove the first 3 items from shellcode", "snippet": "shellcode = shellcode[3::]"},{"intent": "Declare a string shellcode and add the string '\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80' into it", "rewritten_intent": "Declare a string shellcode and add the string '\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80' into it", "snippet": "shellcode ='\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80'"},{"intent": "assign the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '\\\\x'", "rewritten_intent": "assign the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '\\\\x'", "snippet": "shellcode_encoded_hex = ''.join('\\\\x{:02x}'.format(x) for x in shellcode_encoded)"},{"intent": "store in the variable shellcode_encoded_nasm the hexadecimal values of shellcode_encoded separated by the string '0x' and remove any trailing ','", "rewritten_intent": "store in the variable shellcode_encoded_nasm the hexadecimal values of shellcode_encoded separated by the string '0x' and remove any trailing ','", "snippet": "shellcode_encoded_nasm = ''.join('0x{:02x},'.format(i) for i in shellcode_encoded).rstrip(',')"},{"intent": "append to the variable shellcode_encoded the value of shellcode_original at index i xor the variable r", "rewritten_intent": "append to the variable shellcode_encoded the value of shellcode_original at index i xor the variable r", "snippet": "shellcode_encoded.append(shellcode_original[i] ^ r)"},{"intent": "append to the variable shellcode_encoded the value of shellcode_original at index i+1 xor the variable r", "rewritten_intent": "append to the variable shellcode_encoded the value of shellcode_original at index i+1 xor the variable r", "snippet": "shellcode_encoded.append(shellcode_original[i+1] ^ r)"},{"intent": "read the file f as a bytearray from hexadecimal values remove whitespaces and replace all occurences of the string '\\\\t' with ''\" and store the result in shellcode_original", "rewritten_intent": "read the file f as a bytearray from hexadecimal values remove whitespaces and replace all occurences of the string '\\\\t' with ''\" and store the result in shellcode_original", "snippet": "shellcode_original = bytearray.fromhex(f.read().strip().replace('\\\\t',''))"},{"intent": "assign the variable shellcode_original_hex the hexadecimal values of shellcode_original separated by the string '\\\\x'", "rewritten_intent": "assign the variable shellcode_original_hex the hexadecimal values of shellcode_original separated by the string '\\\\x'", "snippet": "shellcode_original_hex = ''.join('\\\\x{:02x}'.format(x) for x in shellcode_original)"},{"intent": "append 0x70 to shellcode", "rewritten_intent": "append 0x70 to shellcode", "snippet": "shellcode.append(0x70)"},{"intent": "shells is a list containing 2 elements: string 'ipython' and string 'bpython'.", "rewritten_intent": "shells is a list containing 2 elements: string 'ipython' and string 'bpython'.", "snippet": "shells = [ 'ipython' , 'bpython' ]"},{"intent": "if value is an instance of datetime and settings.USE_TZ if use_tz is None else use_tz and call to the function is_naive,", "rewritten_intent": "if value is an instance of datetime and settings.USE_TZ if use_tz is None else use_tz and call to the function is_naive,", "snippet": "should_convert = ( isinstance ( value , datetime )  and ( settings . USE_TZ if use_tz is None else use_tz )  and not is_naive ( value )  and getattr ( value , 'convert_to_local_time' , True ) )"},{"intent": "append string '0x' to str", "rewritten_intent": "append string '0x' to str", "snippet": "str += '0x'"},{"intent": "Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable str followed by ','", "rewritten_intent": "Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable str followed by ','", "snippet": "str += \"%02x,\" %(z & 0xff)"},{"intent": "add the string value '0x' to the variable str", "rewritten_intent": "add the string value '0x' to the variable str", "snippet": "str += \"0x\""},{"intent": "str is an empty string", "rewritten_intent": "str is an empty string", "snippet": "str = \"\""},{"intent": "initialize the variable str to an empty string", "rewritten_intent": "initialize the variable str to an empty string", "snippet": "str = \"\""},{"intent": "append str1 to str", "rewritten_intent": "append str1 to str", "snippet": "str = str + str1"},{"intent": "add to str a bytes object containing the value xor_byte packed according to the format string unsigned char", "rewritten_intent": "add to str a bytes object containing the value xor_byte packed according to the format string unsigned char", "snippet": "str.append(struct.pack('B', xor_byte))"},{"intent": "append string '0x' to str1", "rewritten_intent": "append string '0x' to str1", "snippet": "str1 += '0x'"},{"intent": "add the string value '\\\\x' to the variable str1", "rewritten_intent": "add the string value '\\\\x' to the variable str1", "snippet": "str1 += \"\\\\x\""},{"intent": "str1 is a string containing the hexadecimal conversion of str", "rewritten_intent": "str1 is a string containing the hexadecimal conversion of str", "snippet": "str1 = '%02x' % str"},{"intent": "str1 is a string \"\"", "rewritten_intent": "str1 is a string \"\"", "snippet": "str1 = \"\""},{"intent": "add to str1 a bytes object containing the value val4 packed according to the format string unsigned char", "rewritten_intent": "add to str1 a bytes object containing the value val4 packed according to the format string unsigned char", "snippet": "str1.append(struct.pack('B', val4))"},{"intent": "convert shift to hexadecimal and append it followed by ', ' to the string str4", "rewritten_intent": "convert shift to hexadecimal and append it followed by ', ' to the string str4", "snippet": "str4 += '%02x, ' %shift"},{"intent": "convert val2 in hexadecimal and append it followed by ', ' to the string str5", "rewritten_intent": "convert val2 in hexadecimal and append it followed by ', ' to the string str5", "snippet": "str5 += '%02x, ' %val2"},{"intent": "substitute str for string_types.", "rewritten_intent": "substitute str for string_types.", "snippet": "string_types = str ,"},{"intent": "call the function allow_lazy with an argument strip_tags, substitute the result for strip_tags.", "rewritten_intent": "call the function allow_lazy with an argument strip_tags, substitute the result for strip_tags.", "snippet": "strip_tags = allow_lazy ( strip_tags )"},{"intent": "substitute style.ERROR for style.ERROR_OUTPUT.", "rewritten_intent": "substitute style.ERROR for style.ERROR_OUTPUT.", "snippet": "style . ERROR_OUTPUT = style . ERROR"},{"intent": "call the function get_commands, convert the result to a list, append string 'help' to it, substitute it for subcommands.", "rewritten_intent": "call the function get_commands, convert the result to a list, append string 'help' to it, substitute it for subcommands.", "snippet": "subcommands = list ( get_commands ( ) ) + [ 'help' ]"},{"intent": "substitute __setitem__ filed of the base class of the class SortedDict for super_set.", "rewritten_intent": "substitute __setitem__ filed of the base class of the class SortedDict for super_set.", "snippet": "super_set = super ( SortedDict , self ) . __setitem__"},{"intent": "supports_microseconds is boolean False.", "rewritten_intent": "supports_microseconds is boolean False.", "snippet": "supports_microseconds = False"},{"intent": "separate every 2 characters of the string swapped with the separator \", \"", "rewritten_intent": "separate every 2 characters of the string swapped with the separator \", \"", "snippet": "swapped=\", \".join(swapped[i:i+2] for i in range(0, len(swapped), 2))"},{"intent": "add \"0x\" to every 2 characters of the string swapped", "rewritten_intent": "add \"0x\" to every 2 characters of the string swapped", "snippet": "swapped=\"0x\".join(swapped[i:i+2] for i in range(0, len(swapped), 2))"},{"intent": "convert the values of swapped to hexadecimals", "rewritten_intent": "convert the values of swapped to hexadecimals", "snippet": "swapped=binascii.hexlify(bytearray(swapped))"},{"intent": "open out_log file in append mode with buffering size of the input buffer, substitute the result for sys.stdout.", "rewritten_intent": "open out_log file in append mode with buffering size of the input buffer, substitute the result for sys.stdout.", "snippet": "sys . stdout = open ( out_log , 'a' , buffering )"},{"intent": "exit the program with code 0", "rewritten_intent": "exit the program with code 0", "snippet": "sys.exit(0)"},{"intent": "decrement t by integer 1,", "rewritten_intent": "decrement t by integer 1,", "snippet": "t -= 1"},{"intent": "call the method self.non_field_errors, substitute the result for top_errors.", "rewritten_intent": "call the method self.non_field_errors, substitute the result for top_errors.", "snippet": "top_errors = self . non_field_errors ( )"},{"intent": "integer 0 and integer 0.   try,", "rewritten_intent": "integer 0 and integer 0.   try,", "snippet": "try :"},{"intent": "append to the string val the value (7 - (256 -x)) converted to hexadecimal", "rewritten_intent": "append to the string val the value (7 - (256 -x)) converted to hexadecimal", "snippet": "val += '%02x' %(7 -(256 - x))"},{"intent": "convert (x+7) to hexadecimal and append it to the string val", "rewritten_intent": "convert (x+7) to hexadecimal and append it to the string val", "snippet": "val += '%02x'%(x+7)"},{"intent": "for each element in var convert the element to an integer representing the unicode then convert it to a hexadecimal ignore slice at index 2 until the end and join separating each element by the string '\\\\x'", "rewritten_intent": "for each element in var convert the element to an integer representing the unicode then convert it to a hexadecimal ignore slice at index 2 until the end and join separating each element by the string '\\\\x'", "snippet": "val = ''.join('\\\\x{}'.format(hex(ord(x))[2:]) for x in var)"},{"intent": "subtract 1 from 2 to the power of max_bits and assign the result to val1", "rewritten_intent": "subtract 1 from 2 to the power of max_bits and assign the result to val1", "snippet": "val1 = 2**max_bits-1"},{"intent": "call the function func with the argument tmp and save the return value in val1", "rewritten_intent": "call the function func with the argument tmp and save the return value in val1", "snippet": "val1 = func(tmp)"},{"intent": "assign val1 the hexadecimal value of the variable byte converted to int16  xor with the variable i", "rewritten_intent": "assign val1 the hexadecimal value of the variable byte converted to int16  xor with the variable i", "snippet": "val1 = int(byte.encode('hex'), 16) ^ i"},{"intent": "call the method self.var1.resolve with 2 arguments: context and boolean True, substitute the result for val2.", "rewritten_intent": "call the method self.var1.resolve with 2 arguments: context and boolean True, substitute the result for val2.", "snippet": "val1 = self . var1 . resolve ( context , True )"},{"intent": "val2 is the result of the bitwise xor between the integer base 32 of the element i of chunk encoded to hex and xor_byte", "rewritten_intent": "val2 is the result of the bitwise xor between the integer base 32 of the element i of chunk encoded to hex and xor_byte", "snippet": "val2 = int(chunk[i].encode('hex'), 32) ^ xor_byte"},{"intent": "call the method parser.compile_filter with an argument, third element of bits, substitute the result for val2.", "rewritten_intent": "call the method parser.compile_filter with an argument, third element of bits, substitute the result for val2.", "snippet": "val2 = parser . compile_filter ( bits [ 2 ] )"},{"intent": "add the string value '\\\\x' to the variable var", "rewritten_intent": "add the string value '\\\\x' to the variable var", "snippet": "var += '\\\\x'"},{"intent": "Convert the variable rand to a hexadecimal and add it to the variable var", "rewritten_intent": "Convert the variable rand to a hexadecimal and add it to the variable var", "snippet": "var += '\\\\x%02x' % rand"},{"intent": "append '0x' to var", "rewritten_intent": "append '0x' to var", "snippet": "var += '0x'"},{"intent": "add the bytes literal \"\\x0a\\x1b\\x2c\\x3d\\x4e\\x5f\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\" to the variable var", "rewritten_intent": "add the bytes literal \"\\x0a\\x1b\\x2c\\x3d\\x4e\\x5f\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\" to the variable var", "snippet": "var += b\"\\x0a\\x1b\\x2c\\x3d\\x4e\\x5f\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\""},{"intent": "add the bytes literal \"\\x5b\\x37\\x42\\x01\\xbd\\x3c\\x72\\x7c\\x02\\x3d\\x5f\\xc1\\xcf\" to the variable var", "rewritten_intent": "add the bytes literal \"\\x5b\\x37\\x42\\x01\\xbd\\x3c\\x72\\x7c\\x02\\x3d\\x5f\\xc1\\xcf\" to the variable var", "snippet": "var += b\"\\x5b\\x37\\x42\\x01\\xbd\\x3c\\x72\\x7c\\x02\\x3d\\x5f\\xc1\\xcf\""},{"intent": "add the bytes literal \"\\x90\\x4a\\x5c\\xf3\\x1e\\x81\\x69\\x14\\x75\\x72\\xde\\xac\\x77\" to the variable var", "rewritten_intent": "add the bytes literal \"\\x90\\x4a\\x5c\\xf3\\x1e\\x81\\x69\\x14\\x75\\x72\\xde\\xac\\x77\" to the variable var", "snippet": "var += b\"\\x90\\x4a\\x5c\\xf3\\x1e\\x81\\x69\\x14\\x75\\x72\\xde\\xac\\x77\""},{"intent": "add the bytes literal \"\\x99\\xaf\\xbb\\xed\\xbe\\x46\\x56\\x4e\\x88\\x72\\x53\\x44\\x68\" to the variable var", "rewritten_intent": "add the bytes literal \"\\x99\\xaf\\xbb\\xed\\xbe\\x46\\x56\\x4e\\x88\\x72\\x53\\x44\\x68\" to the variable var", "snippet": "var += b\"\\x99\\xaf\\xbb\\xed\\xbe\\x46\\x56\\x4e\\x88\\x72\\x53\\x44\\x68\""},{"intent": "add the bytes literal \"\\x0d\\x01\\xc7\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\" to the variable var", "rewritten_intent": "add the bytes literal \"\\x0d\\x01\\xc7\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\" to the variable var", "snippet": "var += b\"\\xae\\xf2\\xc4\\xbb\\x03\\x41\\xcd\\x8b\\x52\\x10\\x8b\\x4a\\x3c\""},{"intent": "Convert the value of val1 to hexadecimal, then slice it between the indicies 2 and 3, convert it to an int16 and add its value to var1", "rewritten_intent": "Convert the value of val1 to hexadecimal, then slice it between the indicies 2 and 3, convert it to an int16 and add its value to var1", "snippet": "var1 = int(hex(val1)[2:3],16)"},{"intent": "visible_issue_count is an integer 0.", "rewritten_intent": "visible_issue_count is an integer 0.", "snippet": "visible_issue_count = 0"},{"intent": "endless loop,", "rewritten_intent": "endless loop,", "snippet": "while True :"},{"intent": "while x is greater than zero,", "rewritten_intent": "while x is greater than zero,", "snippet": "while x > 0 :"},{"intent": "subtract decimals from digits, substitute the result for whole_digits.", "rewritten_intent": "subtract decimals from digits, substitute the result for whole_digits.", "snippet": "whole_digits = digits - decimals"},{"intent": "open writer.path file in write mode, with file descriptor as fh, perform the following,", "rewritten_intent": "open writer.path file in write mode, with file descriptor as fh, perform the following,", "snippet": "with open ( writer . path , \"wb\" ) as fh :"},{"intent": "append to the string x the hexadecimal conversion of the and operation between a and 0xff", "rewritten_intent": "append to the string x the hexadecimal conversion of the and operation between a and 0xff", "snippet": "x += '%02x' % (a & 0xff)"},{"intent": "append to the string encoded the hexadecimal conversion of the and operation between y and 0xff", "rewritten_intent": "append to the string encoded the hexadecimal conversion of the and operation between y and 0xff", "snippet": "x += '%02x' % (a & 0xff)"},{"intent": "perform the and operation between y and 0xff, then convert the result in hexadecimal and append it to the string x", "rewritten_intent": "perform the and operation between y and 0xff, then convert the result in hexadecimal and append it to the string x", "snippet": "x += '%02x' % (y & 0xff)"},{"intent": "add 1 to x", "rewritten_intent": "add 1 to x", "snippet": "x += 1"},{"intent": "Convert the value of y to hexadecimal, then slice it at index 3 and add its value to x", "rewritten_intent": "Convert the value of y to hexadecimal, then slice it at index 3 and add its value to x", "snippet": "x += hex(y)[3:]"},{"intent": "Slice y at index 3 and add its value to x", "rewritten_intent": "Slice y at index 3 and add its value to x", "snippet": "x += y[3:]"},{"intent": "Convert the value of y to hexadecimal, then slice it at index 3 and add the value to x", "rewritten_intent": "Convert the value of y to hexadecimal, then slice it at index 3 and add the value to x", "snippet": "x += y[3:]"},{"intent": "Convert the variable x to a hexadecimal and store it in the variable x", "rewritten_intent": "Convert the variable x to a hexadecimal and store it in the variable x", "snippet": "x = '%02x' %x"},{"intent": "initialize an empty string variable called x", "rewritten_intent": "initialize an empty string variable called x", "snippet": "x = \"\""},{"intent": "store the variable x the value of the function rol with x and rand as parameters", "rewritten_intent": "store the variable x the value of the function rol with x and rand as parameters", "snippet": "x = rol(x,rand)"},{"intent": "perform a left shift on x by n, then store the result in x", "rewritten_intent": "perform a left shift on x by n, then store the result in x", "snippet": "x = x << nbits"},{"intent": "in x replace '\\x45' with bytes object containing the value y packed according to the format string unsigned char", "rewritten_intent": "in x replace '\\x45' with bytes object containing the value y packed according to the format string unsigned char", "snippet": "x = x.replace('\\x45', struct.pack('B', y))"},{"intent": "assign the variable x the value of x xor 0xDD", "rewritten_intent": "assign the variable x the value of x xor 0xDD", "snippet": "x = x^0xDD"},{"intent": "assign xor_byte the value of the function find_valid_xor_byte with chunk and bad_chars as parameters", "rewritten_intent": "assign xor_byte the value of the function find_valid_xor_byte with chunk and bad_chars as parameters", "snippet": "xor_byte = find_valid_xor_byte(chunk, bad_chars)"},{"intent": "Take the absolute value of subfs then convert subfs to an integer, then cast to a hexadecimal, slice the variable rev_suplx between the indicies 0 and 2 then cast rev_suplx to the type int32, store the value of the summation in the variable xxx", "rewritten_intent": "Take the absolute value of subfs then convert subfs to an integer, then cast to a hexadecimal, slice the variable rev_suplx between the indicies 0 and 2 then cast rev_suplx to the type int32, store the value of the summation in the variable xxx", "snippet": "xxx = hex(int(abs(subfs)) + int(rev_suplx[0:2],32))"},{"intent": "Convert the variable x to a hexadecimal and store it in the variable y", "rewritten_intent": "Convert the variable x to a hexadecimal and store it in the variable y", "snippet": "y += '%02x' % x"},{"intent": "append the value x converted in hex to the string y", "rewritten_intent": "append the value x converted in hex to the string y", "snippet": "y += '%02x' % x"},{"intent": "assign the variable y the bytearray of the variable shellcode at index 0 bitwise xor bytearray of shellcode at index 1", "rewritten_intent": "assign the variable y the bytearray of the variable shellcode at index 0 bitwise xor bytearray of shellcode at index 1", "snippet": "y = bytearray(shellcode)[0]^bytearray(shellcode)[1]"},{"intent": "assign the variable y to x bitwise xor the bytearray of shellcode at index n", "rewritten_intent": "assign the variable y to x bitwise xor the bytearray of shellcode at index n", "snippet": "y = x^bytearray(shellcode)[n]"},{"intent": "Convert the variable x to a hexadecimal and add it to the variable z followed by ','", "rewritten_intent": "Convert the variable x to a hexadecimal and add it to the variable z followed by ','", "snippet": "z += '%02x,' % x"},{"intent": "append the value y converted to hex to the string z", "rewritten_intent": "append the value y converted to hex to the string z", "snippet": "z += '%02x' % y"},{"intent": "zbuf is an instance of BytesIO class.", "rewritten_intent": "zbuf is an instance of BytesIO class.", "snippet": "zbuf = BytesIO ( )"}]