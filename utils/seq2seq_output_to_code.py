# coding=utf-8

from __future__ import print_function
import json, sys
from util import encoded_code_tokens_to_code
from OurCanonical import Canonical
import os
#四个input参数
# $SRC_DIR/model/finetuned_model/$dataset_str/test_1.hyp
# $SRC_DIR/processed_dataset/$dataset_str-test.json.seq2seq
# $SRC_DIR/model/eval/${dataset_str}_test_output.json
# $dataset_str

# eval_dir='gen_model_pt_IP_blank'
# data_dir='data_shell_gen_IP'
# output_dir=os.path.join('eval', eval_dir)
if __name__ == '__main__':
    # seq2seq_output = sys.argv[1]
    # dataset_path = sys.argv[2]
    # code_output = sys.argv[3]
    # dataset = sys.argv[4]
    seq2seq_output = os.path.join(sys.argv[1], 'test_1.hyp')
    dataset_path = sys.argv[2]
    code_output = os.path.join(sys.argv[3])
    dataset = sys.argv[4]
    code_list = []
    if dataset == 'encoder':
        res_words = 'python'
    elif dataset =='decoder':
        res_words = 'assembly'
    dataset = json.load(open(dataset_path))
    res_words=''
    cannon = Canonical(reserved_words = res_words)

    for line, example in zip(open(seq2seq_output), dataset):
        encoded_tokens = line.strip().split(' ')
        code = encoded_code_tokens_to_code(encoded_tokens)
        if 'slot_map' in example:#当no-IP时，是None
            code = cannon.decanonicalize_code(code, example['slot_map'])#把token按空格分好的code-》又还原成没分好的raw
        code_list.append(code)
    if not os.path.exists(os.path.dirname(code_output)):
        os.mkdir(os.path.dirname(code_output))
    json.dump(code_list, open(code_output, 'w'), indent=2)
